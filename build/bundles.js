/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var arr = [];

var document = window.document;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "2.2.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isPlainObject: function( obj ) {
		var key;

		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Not own constructor property must be Object
		if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {

			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf( "use strict" ) === 1 ) {
				script = document.createElement( "script" );
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {

				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval

				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {

						// Inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE9-10 only
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	register: function( owner, initial ) {
		var value = initial || {};

		// If it is a node unlikely to be stringify-ed or looped over
		// use plain assignment
		if ( owner.nodeType ) {
			owner[ this.expando ] = value;

		// Otherwise secure it in a non-enumerable, non-writable property
		// configurability must be true to allow the property to be
		// deleted with the delete operator
		} else {
			Object.defineProperty( owner, this.expando, {
				value: value,
				writable: true,
				configurable: true
			} );
		}
		return owner[ this.expando ];
	},
	cache: function( owner ) {

		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return an empty object.
		if ( !acceptData( owner ) ) {
			return {};
		}

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ prop ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :
			owner[ this.expando ] && owner[ this.expando ][ key ];
	},
	access: function( owner, key, value ) {
		var stored;

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase( key ) );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key === undefined ) {
			this.register( owner );

		} else {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );

				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;

			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <= 35-45+
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://code.google.com/p/chromium/issues/detail?id=378607
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data, camelKey;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// with the key as-is
				data = dataUser.get( elem, key ) ||

					// Try to find dashed key if it exists (gh-2779)
					// This is for 2.2.x only
					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

				if ( data !== undefined ) {
					return data;
				}

				camelKey = jQuery.camelCase( key );

				// Attempt to get data from the cache
				// with the key camelized
				data = dataUser.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			camelKey = jQuery.camelCase( key );
			this.each( function() {

				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = dataUser.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				dataUser.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
					dataUser.set( this, key, value );
				}
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE9
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE9-11+
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0-4.3, Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
			"screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {
	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {
		div.style.cssText =

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );
	}

	jQuery.extend( support, {
		pixelPosition: function() {

			// This test is executed only once but we still do memoizing
			// since we can use the boxSizingReliable pre-computing.
			// No need to check if the test was already performed, though.
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
			// since that compresses better and they're computed together anyway.
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		},
		reliableMarginRight: function() {

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// This support function is only executed once so no memoizing is needed.
			var ret,
				marginDiv = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			marginDiv.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;box-sizing:content-box;" +
				"display:block;margin:0;border:0;padding:0";
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			documentElement.appendChild( container );

			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

			documentElement.removeChild( container );
			div.removeChild( marginDiv );

			return ret;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );
	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

	// Support: Opera 12.1x only
	// Fall back to style even without computed
	// computed is undefined for elems on document fragments
	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
		ret = jQuery.style( elem, name );
	}

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE9-11+
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = dataPriv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = dataPriv.access(
					elem,
					"olddisplay",
					defaultDisplay( elem.nodeName )
				);
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				dataPriv.set(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = dataPriv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;

			dataPriv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
		opt.duration : opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE8-11+
			// IE throws exception if url is malformed, e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE8-11+
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


jQuery.expr.filters.hidden = function( elem ) {
	return !jQuery.expr.filters.visible( elem );
};
jQuery.expr.filters.visible = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	// Use OR instead of AND as the element is not visible if either is true
	// See tickets #10406 and #13132
	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE9
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE9
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		box = elem.getBoundingClientRect();
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},
	size: function() {
		return this.length;
	}
} );

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));

//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

//     Backbone.js 1.2.3

//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(factory) {

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self == self && self) ||
            (typeof global == 'object' && global.global == global && global);

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore'), $;
    try { $ = require('jquery'); } catch(e) {}
    factory(root, exports, _, $);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to a common array method we'll want to use later.
  var slice = Array.prototype.slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.2.3';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... this will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Proxy Backbone class methods to Underscore functions, wrapping the model's
  // `attributes` object or collection's `models` array behind the scenes.
  //
  // collection.filter(function(model) { return model.get('age') > 10 });
  // collection.each(this.addView);
  //
  // `Function#apply` can be slow so we use the method's arg count, if we know it.
  var addMethod = function(length, method, attribute) {
    switch (length) {
      case 1: return function() {
        return _[method](this[attribute]);
      };
      case 2: return function(value) {
        return _[method](this[attribute], value);
      };
      case 3: return function(iteratee, context) {
        return _[method](this[attribute], cb(iteratee, this), context);
      };
      case 4: return function(iteratee, defaultVal, context) {
        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);
      };
      default: return function() {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
    }
  };
  var addUnderscoreMethods = function(Class, methods, attribute) {
    _.each(methods, function(length, method) {
      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
    });
  };

  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.
  var cb = function(iteratee, instance) {
    if (_.isFunction(iteratee)) return iteratee;
    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };
    return iteratee;
  };
  var modelMatcher = function(attrs) {
    var matcher = _.matches(attrs);
    return function(model) {
      return matcher(model.attributes);
    };
  };

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // a custom event channel. You may bind a callback to an event with `on` or
  // remove with `off`; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {};

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Iterates over the standard `event, callback` (as well as the fancy multiple
  // space-separated events `"change blur", callback` and jQuery-style event
  // maps `{event: callback}`).
  var eventsApi = function(iteratee, events, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
      // Handle event maps.
      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
      for (names = _.keys(name); i < names.length ; i++) {
        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
      }
    } else if (name && eventSplitter.test(name)) {
      // Handle space separated event names by delegating them individually.
      for (names = name.split(eventSplitter); i < names.length; i++) {
        events = iteratee(events, names[i], callback, opts);
      }
    } else {
      // Finally, standard events.
      events = iteratee(events, name, callback, opts);
    }
    return events;
  };

  // Bind an event to a `callback` function. Passing `"all"` will bind
  // the callback to all events fired.
  Events.on = function(name, callback, context) {
    return internalOn(this, name, callback, context);
  };

  // Guard the `listening` argument from the public API.
  var internalOn = function(obj, name, callback, context, listening) {
    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
        context: context,
        ctx: obj,
        listening: listening
    });

    if (listening) {
      var listeners = obj._listeners || (obj._listeners = {});
      listeners[listening.id] = listening;
    }

    return obj;
  };

  // Inversion-of-control versions of `on`. Tell *this* object to listen to
  // an event in another object... keeping track of what it's listening to
  // for easier unbinding later.
  Events.listenTo =  function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = listeningTo[id];

    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
    }

    // Bind callbacks on obj, and keep track of them on listening.
    internalOn(obj, name, callback, this, listening);
    return this;
  };

  // The reducing API that adds a callback to the `events` object.
  var onApi = function(events, name, callback, options) {
    if (callback) {
      var handlers = events[name] || (events[name] = []);
      var context = options.context, ctx = options.ctx, listening = options.listening;
      if (listening) listening.count++;

      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
    }
    return events;
  };

  // Remove one or many callbacks. If `context` is null, removes all
  // callbacks with that function. If `callback` is null, removes all
  // callbacks for the event. If `name` is null, removes all bound
  // callbacks for all events.
  Events.off =  function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
    });
    return this;
  };

  // Tell this object to stop listening to either specific events ... or
  // to every object it's currently listening to.
  Events.stopListening =  function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;

    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

    for (var i = 0; i < ids.length; i++) {
      var listening = listeningTo[ids[i]];

      // If listening doesn't exist, this object is not currently
      // listening to obj. Break out early.
      if (!listening) break;

      listening.obj.off(name, callback, this);
    }
    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;

    return this;
  };

  // The reducing API that removes a callback from the `events` object.
  var offApi = function(events, name, callback, options) {
    if (!events) return;

    var i = 0, listening;
    var context = options.context, listeners = options.listeners;

    // Delete all events listeners and "drop" events.
    if (!name && !callback && !context) {
      var ids = _.keys(listeners);
      for (; i < ids.length; i++) {
        listening = listeners[ids[i]];
        delete listeners[listening.id];
        delete listening.listeningTo[listening.objId];
      }
      return;
    }

    var names = name ? [name] : _.keys(events);
    for (; i < names.length; i++) {
      name = names[i];
      var handlers = events[name];

      // Bail out if there are no events stored.
      if (!handlers) break;

      // Replace events if there are any remaining.  Otherwise, clean up.
      var remaining = [];
      for (var j = 0; j < handlers.length; j++) {
        var handler = handlers[j];
        if (
          callback && callback !== handler.callback &&
            callback !== handler.callback._callback ||
              context && context !== handler.context
        ) {
          remaining.push(handler);
        } else {
          listening = handler.listening;
          if (listening && --listening.count === 0) {
            delete listeners[listening.id];
            delete listening.listeningTo[listening.objId];
          }
        }
      }

      // Update tail event if the list has any events.  Otherwise, clean up.
      if (remaining.length) {
        events[name] = remaining;
      } else {
        delete events[name];
      }
    }
    if (_.size(events)) return events;
  };

  // Bind an event to only be triggered a single time. After the first time
  // the callback is invoked, its listener will be removed. If multiple events
  // are passed in using the space-separated syntax, the handler will fire
  // once for each event, not once for a combination of all events.
  Events.once =  function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
    return this.on(events, void 0, context);
  };

  // Inversion-of-control versions of `once`.
  Events.listenToOnce =  function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
    return this.listenTo(obj, events);
  };

  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
  // `offer` unbinds the `onceWrapper` after it has been called.
  var onceMap = function(map, name, callback, offer) {
    if (callback) {
      var once = map[name] = _.once(function() {
        offer(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
    }
    return map;
  };

  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.trigger =  function(name) {
    if (!this._events) return this;

    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
  };

  // Handles triggering the appropriate event callbacks.
  var triggerApi = function(objEvents, name, cb, args) {
    if (objEvents) {
      var events = objEvents[name];
      var allEvents = objEvents.all;
      if (events && allEvents) allEvents = allEvents.slice();
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, [name].concat(args));
    }
    return objEvents;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Special-cased proxy to underscore's `_.matches` method.
    matches: function(attrs) {
      return !!_.iteratee(attrs, this)(this.attributes);
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      var unset      = options.unset;
      var silent     = options.silent;
      var changes    = [];
      var changing   = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }

      var current = this.attributes;
      var changed = this.changed;
      var prev    = this._previousAttributes;

      // For each `set` attribute, update or delete the current value.
      for (var attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          changed[attr] = val;
        } else {
          delete changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Update the `id`.
      this.id = this.get(this.idAttribute);

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0; i < changes.length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var changed = {};
      for (var attr in diff) {
        var val = diff[attr];
        if (_.isEqual(old[attr], val)) continue;
        changed[attr] = val;
      }
      return _.size(changed) ? changed : false;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server, merging the response with the model's
    // local attributes. Any changed attributes will trigger a "change" event.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (!model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true, parse: true}, options);
      var wait = options.wait;

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      var attributes = this.attributes;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
        if (serverAttrs && !model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      // Set temporary attributes if `{wait: true}` to properly find new ids.
      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch' && !options.attrs) options.attrs = attrs;
      var xhr = this.sync(method, this, options);

      // Restore attributes.
      this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var wait = options.wait;

      var destroy = function() {
        model.stopListening();
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (wait) destroy();
        if (success) success.call(options.context, model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      var xhr = false;
      if (this.isNew()) {
        _.defer(options.success);
      } else {
        wrapError(this, options);
        xhr = this.sync('delete', this, options);
      }
      if (!wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      var id = this.get(this.idAttribute);
      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.defaults({validate: true}, options));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model, mapped to the
  // number of arguments they take.
  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
      omit: 0, chain: 1, isEmpty: 1 };

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, 'attributes');

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Splices `insert` into `array` at index `at`.
  var splice = function(array, insert, at) {
    at = Math.min(Math.max(at, 0), array.length);
    var tail = Array(array.length - at);
    var length = insert.length;
    for (var i = 0; i < tail.length; i++) tail[i] = array[i + at];
    for (i = 0; i < length; i++) array[i + at] = insert[i];
    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
  };

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) { return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set. `models` may be Backbone
    // Models or raw JavaScript objects to be converted to Models, or any
    // combination of the two.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      options = _.extend({}, options);
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      var removed = this._removeModels(models, options);
      if (!options.silent && removed) this.trigger('update', this, options);
      return singular ? removed[0] : removed;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      if (models == null) return;

      options = _.defaults({}, options, setOptions);
      if (options.parse && !this._isModel(models)) models = this.parse(models, options);

      var singular = !_.isArray(models);
      models = singular ? [models] : models.slice();

      var at = options.at;
      if (at != null) at = +at;
      if (at < 0) at += this.length + 1;

      var set = [];
      var toAdd = [];
      var toRemove = [];
      var modelMap = {};

      var add = options.add;
      var merge = options.merge;
      var remove = options.remove;

      var sort = false;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      var model;
      for (var i = 0; i < models.length; i++) {
        model = models[i];

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        var existing = this.get(model);
        if (existing) {
          if (merge && model !== existing) {
            var attrs = this._isModel(model) ? model.attributes : model;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort) sort = existing.hasChanged(sortAttr);
          }
          if (!modelMap[existing.cid]) {
            modelMap[existing.cid] = true;
            set.push(existing);
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(model, options);
          if (model) {
            toAdd.push(model);
            this._addReference(model, options);
            modelMap[model.cid] = true;
            set.push(model);
          }
        }
      }

      // Remove stale models.
      if (remove) {
        for (i = 0; i < this.length; i++) {
          model = this.models[i];
          if (!modelMap[model.cid]) toRemove.push(model);
        }
        if (toRemove.length) this._removeModels(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      var orderChanged = false;
      var replace = !sortable && add && remove;
      if (set.length && replace) {
        orderChanged = this.length != set.length || _.some(this.models, function(model, index) {
          return model !== set[index];
        });
        this.models.length = 0;
        splice(this.models, set, 0);
        this.length = this.models.length;
      } else if (toAdd.length) {
        if (sortable) sort = true;
        splice(this.models, toAdd, at == null ? this.length : at);
        this.length = this.models.length;
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0; i < toAdd.length; i++) {
          if (at != null) options.index = at + i;
          model = toAdd[i];
          model.trigger('add', model, this, options);
        }
        if (sort || orderChanged) this.trigger('sort', this, options);
        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options = options ? _.clone(options) : {};
      for (var i = 0; i < this.models.length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      return this.remove(model, options);
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      return this.remove(model, options);
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      if (index < 0) index += this.length;
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      return this[first ? 'find' : 'filter'](attrs);
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      var comparator = this.comparator;
      if (!comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      var length = comparator.length;
      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);

      // Run sort based on type of `comparator`.
      if (length === 1 || _.isString(comparator)) {
        this.models = this.sortBy(comparator);
      } else {
        this.models.sort(comparator);
      }
      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success.call(options.context, collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      var wait = options.wait;
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp, callbackOpts) {
        if (wait) collection.add(model, callbackOpts);
        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Define how to uniquely identify models in the collection.
    modelId: function (attrs) {
      return attrs[this.model.prototype.idAttribute || 'id'];
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method called by both remove and set.
    _removeModels: function(models, options) {
      var removed = [];
      for (var i = 0; i < models.length; i++) {
        var model = this.get(models[i]);
        if (!model) continue;

        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;

        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }

        removed.push(model);
        this._removeReference(model, options);
      }
      return removed.length ? removed : false;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function (model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      var id = this.modelId(model.attributes);
      if (id != null) this._byId[id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      delete this._byId[model.cid];
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (event === 'change') {
        var prevId = this.modelId(model.previousAttributes());
        var id = this.modelId(model.attributes);
        if (prevId !== id) {
          if (prevId != null) delete this._byId[prevId];
          if (id != null) this._byId[id] = model;
        }
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,
      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,
      sortBy: 3, indexBy: 3};

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, 'models');

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be set as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      events || (events = _.result(this, 'events'));
      if (!events) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[method];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.call(options.context, xhr, textStatus, errorThrown);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    this.checkUrl = _.bind(this.checkUrl, this);

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.getSearch();
    },

    // Does the pathname match the root?
    matchRoot: function() {
      var path = this.decodeFragment(this.location.pathname);
      var root = path.slice(0, this.root.length - 1) + '/';
      return root === this.root;
    },

    // Unicode characters in `location.pathname` are percent encoded so they're
    // decoded for comparison. `%25` should not be decoded since it may be part
    // of an encoded parameter.
    decodeFragment: function(fragment) {
      return decodeURI(fragment.replace(/%25/g, '%2525'));
    },

    // In IE6, the hash fragment and search params are incorrect if the
    // fragment contains `?`.
    getSearch: function() {
      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
      return match ? match[0] : '';
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = this.decodeFragment(
        this.location.pathname + this.getSearch()
      ).slice(this.root.length - 1);
      return path.charAt(0) === '/' ? path.slice(1) : path;
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._usePushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error('Backbone.history has already been started');
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);
      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.history && this.history.pushState);
      this._usePushState    = this._wantsPushState && this._hasPushState;
      this.fragment         = this.getFragment();

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          var root = this.root.slice(0, -1) || '/';
          this.location.replace(root + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
        this.iframe = document.createElement('iframe');
        this.iframe.src = 'javascript:0';
        this.iframe.style.display = 'none';
        this.iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
        iWindow.document.open();
        iWindow.document.close();
        iWindow.location.hash = '#' + this.fragment;
      }

      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function (eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._usePushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function (eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._usePushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();

      // If the user pressed the back button, the iframe's hash will have
      // changed and we should use that for comparison.
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe.contentWindow);
      }

      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      // If the root doesn't match, no routes can match either.
      if (!this.matchRoot()) return false;
      fragment = this.fragment = this.getFragment(fragment);
      return _.some(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      // Normalize the fragment.
      fragment = this.getFragment(fragment || '');

      // Don't include a trailing slash on the root.
      var root = this.root;
      if (fragment === '' || fragment.charAt(0) === '?') {
        root = root.slice(0, -1) || '/';
      }
      var url = root + fragment;

      // Strip the hash and decode for matching.
      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._usePushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
          var iWindow = this.iframe.contentWindow;

          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) {
            iWindow.document.open();
            iWindow.document.close();
          }

          this._updateHash(iWindow.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent` constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error.call(options.context, model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

// Backbone.BabySitter
// -------------------
// v0.1.10
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.babysitter

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  'use strict';

  var previousChildViewContainer = Backbone.ChildViewContainer;

  // BabySitter.ChildViewContainer
  // -----------------------------
  //
  // Provide a container to store, retrieve and
  // shut down child views.
  
  Backbone.ChildViewContainer = (function (Backbone, _) {
  
    // Container Constructor
    // ---------------------
  
    var Container = function(views){
      this._views = {};
      this._indexByModel = {};
      this._indexByCustom = {};
      this._updateLength();
  
      _.each(views, this.add, this);
    };
  
    // Container Methods
    // -----------------
  
    _.extend(Container.prototype, {
  
      // Add a view to this container. Stores the view
      // by `cid` and makes it searchable by the model
      // cid (and model itself). Optionally specify
      // a custom key to store an retrieve the view.
      add: function(view, customIndex){
        var viewCid = view.cid;
  
        // store the view
        this._views[viewCid] = view;
  
        // index it by model
        if (view.model){
          this._indexByModel[view.model.cid] = viewCid;
        }
  
        // index by custom
        if (customIndex){
          this._indexByCustom[customIndex] = viewCid;
        }
  
        this._updateLength();
        return this;
      },
  
      // Find a view by the model that was attached to
      // it. Uses the model's `cid` to find it.
      findByModel: function(model){
        return this.findByModelCid(model.cid);
      },
  
      // Find a view by the `cid` of the model that was attached to
      // it. Uses the model's `cid` to find the view `cid` and
      // retrieve the view using it.
      findByModelCid: function(modelCid){
        var viewCid = this._indexByModel[modelCid];
        return this.findByCid(viewCid);
      },
  
      // Find a view by a custom indexer.
      findByCustom: function(index){
        var viewCid = this._indexByCustom[index];
        return this.findByCid(viewCid);
      },
  
      // Find by index. This is not guaranteed to be a
      // stable index.
      findByIndex: function(index){
        return _.values(this._views)[index];
      },
  
      // retrieve a view by its `cid` directly
      findByCid: function(cid){
        return this._views[cid];
      },
  
      // Remove a view
      remove: function(view){
        var viewCid = view.cid;
  
        // delete model index
        if (view.model){
          delete this._indexByModel[view.model.cid];
        }
  
        // delete custom index
        _.any(this._indexByCustom, function(cid, key) {
          if (cid === viewCid) {
            delete this._indexByCustom[key];
            return true;
          }
        }, this);
  
        // remove the view from the container
        delete this._views[viewCid];
  
        // update the length
        this._updateLength();
        return this;
      },
  
      // Call a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.call`.
      call: function(method){
        this.apply(method, _.tail(arguments));
      },
  
      // Apply a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.apply`.
      apply: function(method, args){
        _.each(this._views, function(view){
          if (_.isFunction(view[method])){
            view[method].apply(view, args || []);
          }
        });
      },
  
      // Update the `.length` attribute on this container
      _updateLength: function(){
        this.length = _.size(this._views);
      }
    });
  
    // Borrowing this code from Backbone.Collection:
    // http://backbonejs.org/docs/backbone.html#section-106
    //
    // Mix in methods from Underscore, for iteration, and other
    // collection related features.
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck', 'reduce'];
  
    _.each(methods, function(method) {
      Container.prototype[method] = function() {
        var views = _.values(this._views);
        var args = [views].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  
    // return the public API
    return Container;
  })(Backbone, _);
  

  Backbone.ChildViewContainer.VERSION = '0.1.10';

  Backbone.ChildViewContainer.noConflict = function () {
    Backbone.ChildViewContainer = previousChildViewContainer;
    return this;
  };

  return Backbone.ChildViewContainer;

}));

// Backbone.Wreqr (Backbone.Marionette)
// ----------------------------------
// v1.3.5
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.wreqr


(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  "use strict";

  var previousWreqr = Backbone.Wreqr;

  var Wreqr = Backbone.Wreqr = {};

  Backbone.Wreqr.VERSION = '1.3.5';

  Backbone.Wreqr.noConflict = function () {
    Backbone.Wreqr = previousWreqr;
    return this;
  };

  // Handlers
  // --------
  // A registry of functions to call, given a name
  
  Wreqr.Handlers = (function(Backbone, _){
    "use strict";
    
    // Constructor
    // -----------
  
    var Handlers = function(options){
      this.options = options;
      this._wreqrHandlers = {};
      
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    Handlers.extend = Backbone.Model.extend;
  
    // Instance Members
    // ----------------
  
    _.extend(Handlers.prototype, Backbone.Events, {
  
      // Add multiple handlers using an object literal configuration
      setHandlers: function(handlers){
        _.each(handlers, function(handler, name){
          var context = null;
  
          if (_.isObject(handler) && !_.isFunction(handler)){
            context = handler.context;
            handler = handler.callback;
          }
  
          this.setHandler(name, handler, context);
        }, this);
      },
  
      // Add a handler for the given name, with an
      // optional context to run the handler within
      setHandler: function(name, handler, context){
        var config = {
          callback: handler,
          context: context
        };
  
        this._wreqrHandlers[name] = config;
  
        this.trigger("handler:add", name, handler, context);
      },
  
      // Determine whether or not a handler is registered
      hasHandler: function(name){
        return !! this._wreqrHandlers[name];
      },
  
      // Get the currently registered handler for
      // the specified name. Throws an exception if
      // no handler is found.
      getHandler: function(name){
        var config = this._wreqrHandlers[name];
  
        if (!config){
          return;
        }
  
        return function(){
          return config.callback.apply(config.context, arguments);
        };
      },
  
      // Remove a handler for the specified name
      removeHandler: function(name){
        delete this._wreqrHandlers[name];
      },
  
      // Remove all handlers from this registry
      removeAllHandlers: function(){
        this._wreqrHandlers = {};
      }
    });
  
    return Handlers;
  })(Backbone, _);
  
  // Wreqr.CommandStorage
  // --------------------
  //
  // Store and retrieve commands for execution.
  Wreqr.CommandStorage = (function(){
    "use strict";
  
    // Constructor function
    var CommandStorage = function(options){
      this.options = options;
      this._commands = {};
  
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    // Instance methods
    _.extend(CommandStorage.prototype, Backbone.Events, {
  
      // Get an object literal by command name, that contains
      // the `commandName` and the `instances` of all commands
      // represented as an array of arguments to process
      getCommands: function(commandName){
        var commands = this._commands[commandName];
  
        // we don't have it, so add it
        if (!commands){
  
          // build the configuration
          commands = {
            command: commandName, 
            instances: []
          };
  
          // store it
          this._commands[commandName] = commands;
        }
  
        return commands;
      },
  
      // Add a command by name, to the storage and store the
      // args for the command
      addCommand: function(commandName, args){
        var command = this.getCommands(commandName);
        command.instances.push(args);
      },
  
      // Clear all commands for the given `commandName`
      clearCommands: function(commandName){
        var command = this.getCommands(commandName);
        command.instances = [];
      }
    });
  
    return CommandStorage;
  })();
  
  // Wreqr.Commands
  // --------------
  //
  // A simple command pattern implementation. Register a command
  // handler and execute it.
  Wreqr.Commands = (function(Wreqr, _){
    "use strict";
  
    return Wreqr.Handlers.extend({
      // default storage type
      storageType: Wreqr.CommandStorage,
  
      constructor: function(options){
        this.options = options || {};
  
        this._initializeStorage(this.options);
        this.on("handler:add", this._executeCommands, this);
  
        Wreqr.Handlers.prototype.constructor.apply(this, arguments);
      },
  
      // Execute a named command with the supplied args
      execute: function(name){
        name = arguments[0];
        var args = _.rest(arguments);
  
        if (this.hasHandler(name)){
          this.getHandler(name).apply(this, args);
        } else {
          this.storage.addCommand(name, args);
        }
  
      },
  
      // Internal method to handle bulk execution of stored commands
      _executeCommands: function(name, handler, context){
        var command = this.storage.getCommands(name);
  
        // loop through and execute all the stored command instances
        _.each(command.instances, function(args){
          handler.apply(context, args);
        });
  
        this.storage.clearCommands(name);
      },
  
      // Internal method to initialize storage either from the type's
      // `storageType` or the instance `options.storageType`.
      _initializeStorage: function(options){
        var storage;
  
        var StorageType = options.storageType || this.storageType;
        if (_.isFunction(StorageType)){
          storage = new StorageType();
        } else {
          storage = StorageType;
        }
  
        this.storage = storage;
      }
    });
  
  })(Wreqr, _);
  
  // Wreqr.RequestResponse
  // ---------------------
  //
  // A simple request/response implementation. Register a
  // request handler, and return a response from it
  Wreqr.RequestResponse = (function(Wreqr, _){
    "use strict";
  
    return Wreqr.Handlers.extend({
      request: function(name){
        if (this.hasHandler(name)) {
          return this.getHandler(name).apply(this, _.rest(arguments));
        }
      }
    });
  
  })(Wreqr, _);
  
  // Event Aggregator
  // ----------------
  // A pub-sub object that can be used to decouple various parts
  // of an application through event-driven architecture.
  
  Wreqr.EventAggregator = (function(Backbone, _){
    "use strict";
    var EA = function(){};
  
    // Copy the `extend` function used by Backbone's classes
    EA.extend = Backbone.Model.extend;
  
    // Copy the basic Backbone.Events on to the event aggregator
    _.extend(EA.prototype, Backbone.Events);
  
    return EA;
  })(Backbone, _);
  
  // Wreqr.Channel
  // --------------
  //
  // An object that wraps the three messaging systems:
  // EventAggregator, RequestResponse, Commands
  Wreqr.Channel = (function(Wreqr){
    "use strict";
  
    var Channel = function(channelName) {
      this.vent        = new Backbone.Wreqr.EventAggregator();
      this.reqres      = new Backbone.Wreqr.RequestResponse();
      this.commands    = new Backbone.Wreqr.Commands();
      this.channelName = channelName;
    };
  
    _.extend(Channel.prototype, {
  
      // Remove all handlers from the messaging systems of this channel
      reset: function() {
        this.vent.off();
        this.vent.stopListening();
        this.reqres.removeAllHandlers();
        this.commands.removeAllHandlers();
        return this;
      },
  
      // Connect a hash of events; one for each messaging system
      connectEvents: function(hash, context) {
        this._connect('vent', hash, context);
        return this;
      },
  
      connectCommands: function(hash, context) {
        this._connect('commands', hash, context);
        return this;
      },
  
      connectRequests: function(hash, context) {
        this._connect('reqres', hash, context);
        return this;
      },
  
      // Attach the handlers to a given message system `type`
      _connect: function(type, hash, context) {
        if (!hash) {
          return;
        }
  
        context = context || this;
        var method = (type === 'vent') ? 'on' : 'setHandler';
  
        _.each(hash, function(fn, eventName) {
          this[type][method](eventName, _.bind(fn, context));
        }, this);
      }
    });
  
  
    return Channel;
  })(Wreqr);
  
  // Wreqr.Radio
  // --------------
  //
  // An object that lets you communicate with many channels.
  Wreqr.radio = (function(Wreqr, _){
    "use strict";
  
    var Radio = function() {
      this._channels = {};
      this.vent = {};
      this.commands = {};
      this.reqres = {};
      this._proxyMethods();
    };
  
    _.extend(Radio.prototype, {
  
      channel: function(channelName) {
        if (!channelName) {
          throw new Error('Channel must receive a name');
        }
  
        return this._getChannel( channelName );
      },
  
      _getChannel: function(channelName) {
        var channel = this._channels[channelName];
  
        if(!channel) {
          channel = new Wreqr.Channel(channelName);
          this._channels[channelName] = channel;
        }
  
        return channel;
      },
  
      _proxyMethods: function() {
        _.each(['vent', 'commands', 'reqres'], function(system) {
          _.each( messageSystems[system], function(method) {
            this[system][method] = proxyMethod(this, system, method);
          }, this);
        }, this);
      }
    });
  
  
    var messageSystems = {
      vent: [
        'on',
        'off',
        'trigger',
        'once',
        'stopListening',
        'listenTo',
        'listenToOnce'
      ],
  
      commands: [
        'execute',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ],
  
      reqres: [
        'request',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ]
    };
  
    var proxyMethod = function(radio, system, method) {
      return function(channelName) {
        var messageSystem = radio._getChannel(channelName)[system];
  
        return messageSystem[method].apply(messageSystem, _.rest(arguments));
      };
    };
  
    return new Radio();
  
  })(Wreqr, _);
  

  return Backbone.Wreqr;

}));

// MarionetteJS (Backbone.Marionette)
// ----------------------------------
// v2.4.4
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://marionettejs.com

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore', 'backbone.wreqr', 'backbone.babysitter'], function(Backbone, _) {
      return (root.Marionette = root.Mn = factory(root, Backbone, _));
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    var Wreqr = require('backbone.wreqr');
    var BabySitter = require('backbone.babysitter');
    module.exports = factory(root, Backbone, _);
  } else {
    root.Marionette = root.Mn = factory(root, root.Backbone, root._);
  }

}(this, function(root, Backbone, _) {
  'use strict';

  var previousMarionette = root.Marionette;
  var previousMn = root.Mn;

  var Marionette = Backbone.Marionette = {};

  Marionette.VERSION = '2.4.4';

  Marionette.noConflict = function() {
    root.Marionette = previousMarionette;
    root.Mn = previousMn;
    return this;
  };

  // Get the Deferred creator for later use
  Marionette.Deferred = Backbone.$.Deferred;

  Marionette.FEATURES = {
  };
  
  Marionette.isEnabled = function(name) {
    return !!Marionette.FEATURES[name];
  };
  
  /* jshint unused: false *//* global console */
  
  // Helpers
  // -------
  
  // Marionette.extend
  // -----------------
  
  // Borrow the Backbone `extend` method so we can use it as needed
  Marionette.extend = Backbone.Model.extend;
  
  // Marionette.isNodeAttached
  // -------------------------
  
  // Determine if `el` is a child of the document
  Marionette.isNodeAttached = function(el) {
    return Backbone.$.contains(document.documentElement, el);
  };
  
  // Merge `keys` from `options` onto `this`
  Marionette.mergeOptions = function(options, keys) {
    if (!options) { return; }
    _.extend(this, _.pick(options, keys));
  };
  
  // Marionette.getOption
  // --------------------
  
  // Retrieve an object, function or other value from a target
  // object or its `options`, with `options` taking precedence.
  Marionette.getOption = function(target, optionName) {
    if (!target || !optionName) { return; }
    if (target.options && (target.options[optionName] !== undefined)) {
      return target.options[optionName];
    } else {
      return target[optionName];
    }
  };
  
  // Proxy `Marionette.getOption`
  Marionette.proxyGetOption = function(optionName) {
    return Marionette.getOption(this, optionName);
  };
  
  // Similar to `_.result`, this is a simple helper
  // If a function is provided we call it with context
  // otherwise just return the value. If the value is
  // undefined return a default value
  Marionette._getValue = function(value, context, params) {
    if (_.isFunction(value)) {
      value = params ? value.apply(context, params) : value.call(context);
    }
    return value;
  };
  
  // Marionette.normalizeMethods
  // ----------------------
  
  // Pass in a mapping of events => functions or function names
  // and return a mapping of events => functions
  Marionette.normalizeMethods = function(hash) {
    return _.reduce(hash, function(normalizedHash, method, name) {
      if (!_.isFunction(method)) {
        method = this[method];
      }
      if (method) {
        normalizedHash[name] = method;
      }
      return normalizedHash;
    }, {}, this);
  };
  
  // utility method for parsing @ui. syntax strings
  // into associated selector
  Marionette.normalizeUIString = function(uiString, ui) {
    return uiString.replace(/@ui\.[a-zA-Z_$0-9]*/g, function(r) {
      return ui[r.slice(4)];
    });
  };
  
  // allows for the use of the @ui. syntax within
  // a given key for triggers and events
  // swaps the @ui with the associated selector.
  // Returns a new, non-mutated, parsed events hash.
  Marionette.normalizeUIKeys = function(hash, ui) {
    return _.reduce(hash, function(memo, val, key) {
      var normalizedKey = Marionette.normalizeUIString(key, ui);
      memo[normalizedKey] = val;
      return memo;
    }, {});
  };
  
  // allows for the use of the @ui. syntax within
  // a given value for regions
  // swaps the @ui with the associated selector
  Marionette.normalizeUIValues = function(hash, ui, properties) {
    _.each(hash, function(val, key) {
      if (_.isString(val)) {
        hash[key] = Marionette.normalizeUIString(val, ui);
      } else if (_.isObject(val) && _.isArray(properties)) {
        _.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui));
        /* Value is an object, and we got an array of embedded property names to normalize. */
        _.each(properties, function(property) {
          var propertyVal = val[property];
          if (_.isString(propertyVal)) {
            val[property] = Marionette.normalizeUIString(propertyVal, ui);
          }
        });
      }
    });
    return hash;
  };
  
  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-121
  Marionette.actAsCollection = function(object, listProperty) {
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck'];
  
    _.each(methods, function(method) {
      object[method] = function() {
        var list = _.values(_.result(this, listProperty));
        var args = [list].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  };
  
  var deprecate = Marionette.deprecate = function(message, test) {
    if (_.isObject(message)) {
      message = (
        message.prev + ' is going to be removed in the future. ' +
        'Please use ' + message.next + ' instead.' +
        (message.url ? ' See: ' + message.url : '')
      );
    }
  
    if ((test === undefined || !test) && !deprecate._cache[message]) {
      deprecate._warn('Deprecation warning: ' + message);
      deprecate._cache[message] = true;
    }
  };
  
  deprecate._warn = typeof console !== 'undefined' && (console.warn || console.log) || function() {};
  deprecate._cache = {};
  
  /* jshint maxstatements: 14, maxcomplexity: 7 */
  
  // Trigger Method
  // --------------
  
  Marionette._triggerMethod = (function() {
    // split the event name on the ":"
    var splitter = /(^|:)(\w)/gi;
  
    // take the event section ("section1:section2:section3")
    // and turn it in to uppercase name
    function getEventName(match, prefix, eventName) {
      return eventName.toUpperCase();
    }
  
    return function(context, event, args) {
      var noEventArg = arguments.length < 3;
      if (noEventArg) {
        args = event;
        event = args[0];
      }
  
      // get the method name from the event name
      var methodName = 'on' + event.replace(splitter, getEventName);
      var method = context[methodName];
      var result;
  
      // call the onMethodName if it exists
      if (_.isFunction(method)) {
        // pass all args, except the event name
        result = method.apply(context, noEventArg ? _.rest(args) : args);
      }
  
      // trigger the event, if a trigger method exists
      if (_.isFunction(context.trigger)) {
        if (noEventArg + args.length > 1) {
          context.trigger.apply(context, noEventArg ? args : [event].concat(_.drop(args, 0)));
        } else {
          context.trigger(event);
        }
      }
  
      return result;
    };
  })();
  
  // Trigger an event and/or a corresponding method name. Examples:
  //
  // `this.triggerMethod("foo")` will trigger the "foo" event and
  // call the "onFoo" method.
  //
  // `this.triggerMethod("foo:bar")` will trigger the "foo:bar" event and
  // call the "onFooBar" method.
  Marionette.triggerMethod = function(event) {
    return Marionette._triggerMethod(this, arguments);
  };
  
  // triggerMethodOn invokes triggerMethod on a specific context
  //
  // e.g. `Marionette.triggerMethodOn(view, 'show')`
  // will trigger a "show" event or invoke onShow the view.
  Marionette.triggerMethodOn = function(context) {
    var fnc = _.isFunction(context.triggerMethod) ?
                  context.triggerMethod :
                  Marionette.triggerMethod;
  
    return fnc.apply(context, _.rest(arguments));
  };
  
  // DOM Refresh
  // -----------
  
  // Monitor a view's state, and after it has been rendered and shown
  // in the DOM, trigger a "dom:refresh" event every time it is
  // re-rendered.
  
  Marionette.MonitorDOMRefresh = function(view) {
    if (view._isDomRefreshMonitored) { return; }
    view._isDomRefreshMonitored = true;
  
    // track when the view has been shown in the DOM,
    // using a Marionette.Region (or by other means of triggering "show")
    function handleShow() {
      view._isShown = true;
      triggerDOMRefresh();
    }
  
    // track when the view has been rendered
    function handleRender() {
      view._isRendered = true;
      triggerDOMRefresh();
    }
  
    // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
    function triggerDOMRefresh() {
      if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
        Marionette.triggerMethodOn(view, 'dom:refresh', view);
      }
    }
  
    view.on({
      show: handleShow,
      render: handleRender
    });
  };
  
  /* jshint maxparams: 5 */
  
  // Bind Entity Events & Unbind Entity Events
  // -----------------------------------------
  //
  // These methods are used to bind/unbind a backbone "entity" (e.g. collection/model)
  // to methods on a target object.
  //
  // The first parameter, `target`, must have the Backbone.Events module mixed in.
  //
  // The second parameter is the `entity` (Backbone.Model, Backbone.Collection or
  // any object that has Backbone.Events mixed in) to bind the events from.
  //
  // The third parameter is a hash of { "event:name": "eventHandler" }
  // configuration. Multiple handlers can be separated by a space. A
  // function can be supplied instead of a string handler name.
  
  (function(Marionette) {
    'use strict';
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function bindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
  
        var method = target[methodName];
        if (!method) {
          throw new Marionette.Error('Method "' + methodName +
            '" was configured as an event handler, but does not exist.');
        }
  
        target.listenTo(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function bindToFunction(target, entity, evt, method) {
      target.listenTo(entity, evt, method);
    }
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function unbindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
        var method = target[methodName];
        target.stopListening(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function unbindToFunction(target, entity, evt, method) {
      target.stopListening(entity, evt, method);
    }
  
    // generic looping function
    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
      if (!entity || !bindings) { return; }
  
      // type-check bindings
      if (!_.isObject(bindings)) {
        throw new Marionette.Error({
          message: 'Bindings must be an object or function.',
          url: 'marionette.functions.html#marionettebindentityevents'
        });
      }
  
      // allow the bindings to be a function
      bindings = Marionette._getValue(bindings, target);
  
      // iterate the bindings and bind them
      _.each(bindings, function(methods, evt) {
  
        // allow for a function as the handler,
        // or a list of event names as a string
        if (_.isFunction(methods)) {
          functionCallback(target, entity, evt, methods);
        } else {
          stringCallback(target, entity, evt, methods);
        }
  
      });
    }
  
    // Export Public API
    Marionette.bindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
    };
  
    Marionette.unbindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
    };
  
    // Proxy `bindEntityEvents`
    Marionette.proxyBindEntityEvents = function(entity, bindings) {
      return Marionette.bindEntityEvents(this, entity, bindings);
    };
  
    // Proxy `unbindEntityEvents`
    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
      return Marionette.unbindEntityEvents(this, entity, bindings);
    };
  })(Marionette);
  

  // Error
  // -----
  
  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];
  
  Marionette.Error = Marionette.extend.call(Error, {
    urlRoot: 'http://marionettejs.com/docs/v' + Marionette.VERSION + '/',
  
    constructor: function(message, options) {
      if (_.isObject(message)) {
        options = message;
        message = options.message;
      } else if (!options) {
        options = {};
      }
  
      var error = Error.call(this, message);
      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));
  
      this.captureStackTrace();
  
      if (options.url) {
        this.url = this.urlRoot + options.url;
      }
    },
  
    captureStackTrace: function() {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, Marionette.Error);
      }
    },
  
    toString: function() {
      return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');
    }
  });
  
  Marionette.Error.extend = Marionette.extend;
  
  // Callbacks
  // ---------
  
  // A simple way of managing a collection of callbacks
  // and executing them at a later point in time, using jQuery's
  // `Deferred` object.
  Marionette.Callbacks = function() {
    this._deferred = Marionette.Deferred();
    this._callbacks = [];
  };
  
  _.extend(Marionette.Callbacks.prototype, {
  
    // Add a callback to be executed. Callbacks added here are
    // guaranteed to execute, even if they are added after the
    // `run` method is called.
    add: function(callback, contextOverride) {
      var promise = _.result(this._deferred, 'promise');
  
      this._callbacks.push({cb: callback, ctx: contextOverride});
  
      promise.then(function(args) {
        if (contextOverride) { args.context = contextOverride; }
        callback.call(args.context, args.options);
      });
    },
  
    // Run all registered callbacks with the context specified.
    // Additional callbacks can be added after this has been run
    // and they will still be executed.
    run: function(options, context) {
      this._deferred.resolve({
        options: options,
        context: context
      });
    },
  
    // Resets the list of callbacks to be run, allowing the same list
    // to be run multiple times - whenever the `run` method is called.
    reset: function() {
      var callbacks = this._callbacks;
      this._deferred = Marionette.Deferred();
      this._callbacks = [];
  
      _.each(callbacks, function(cb) {
        this.add(cb.cb, cb.ctx);
      }, this);
    }
  });
  
  // Controller
  // ----------
  
  // A multi-purpose object to use as a controller for
  // modules and routers, and as a mediator for workflow
  // and coordination of other objects, views, and more.
  Marionette.Controller = function(options) {
    this.options = options || {};
  
    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
  };
  
  Marionette.Controller.extend = Marionette.extend;
  
  // Controller Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Controller.prototype, Backbone.Events, {
    destroy: function() {
      Marionette._triggerMethod(this, 'before:destroy', arguments);
      Marionette._triggerMethod(this, 'destroy', arguments);
  
      this.stopListening();
      this.off();
      return this;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption
  
  });
  
  // Object
  // ------
  
  // A Base Class that other Classes should descend from.
  // Object borrows many conventions and utilities from Backbone.
  Marionette.Object = function(options) {
    this.options = _.extend({}, _.result(this, 'options'), options);
  
    this.initialize.apply(this, arguments);
  };
  
  Marionette.Object.extend = Marionette.extend;
  
  // Object Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Object.prototype, Backbone.Events, {
  
    //this is a noop method intended to be overridden by classes that extend from this base
    initialize: function() {},
  
    destroy: function(options) {
      options = options || {};
  
      this.triggerMethod('before:destroy', options);
      this.triggerMethod('destroy', options);
      this.stopListening();
  
      return this;
    },
  
    // Import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  /* jshint maxcomplexity: 16, maxstatements: 45, maxlen: 120 */
  
  // Region
  // ------
  
  // Manage the visual regions of your composite application. See
  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/
  
  Marionette.Region = Marionette.Object.extend({
    constructor: function(options) {
  
      // set options temporarily so that we can get `el`.
      // options will be overriden by Object.constructor
      this.options = options || {};
      this.el = this.getOption('el');
  
      // Handle when this.el is passed in as a $ wrapped element.
      this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
  
      if (!this.el) {
        throw new Marionette.Error({
          name: 'NoElError',
          message: 'An "el" must be specified for a region.'
        });
      }
  
      this.$el = this.getEl(this.el);
      Marionette.Object.call(this, options);
    },
  
    // Displays a backbone view instance inside of the region.
    // Handles calling the `render` method for you. Reads content
    // directly from the `el` attribute. Also calls an optional
    // `onShow` and `onDestroy` method on your view, just after showing
    // or just before destroying the view, respectively.
    // The `preventDestroy` option can be used to prevent a view from
    // the old view being destroyed on show.
    // The `forceShow` option can be used to force a view to be
    // re-rendered if it's already shown in the region.
    show: function(view, options) {
      if (!this._ensureElement()) {
        return;
      }
  
      this._ensureViewIsIntact(view);
      Marionette.MonitorDOMRefresh(view);
  
      var showOptions     = options || {};
      var isDifferentView = view !== this.currentView;
      var preventDestroy  = !!showOptions.preventDestroy;
      var forceShow       = !!showOptions.forceShow;
  
      // We are only changing the view if there is a current view to change to begin with
      var isChangingView = !!this.currentView;
  
      // Only destroy the current view if we don't want to `preventDestroy` and if
      // the view given in the first argument is different than `currentView`
      var _shouldDestroyView = isDifferentView && !preventDestroy;
  
      // Only show the view given in the first argument if it is different than
      // the current view or if we want to re-show the view. Note that if
      // `_shouldDestroyView` is true, then `_shouldShowView` is also necessarily true.
      var _shouldShowView = isDifferentView || forceShow;
  
      if (isChangingView) {
        this.triggerMethod('before:swapOut', this.currentView, this, options);
      }
  
      if (this.currentView) {
        delete this.currentView._parent;
      }
  
      if (_shouldDestroyView) {
        this.empty();
  
      // A `destroy` event is attached to the clean up manually removed views.
      // We need to detach this event when a new view is going to be shown as it
      // is no longer relevant.
      } else if (isChangingView && _shouldShowView) {
        this.currentView.off('destroy', this.empty, this);
      }
  
      if (_shouldShowView) {
  
        // We need to listen for if a view is destroyed
        // in a way other than through the region.
        // If this happens we need to remove the reference
        // to the currentView since once a view has been destroyed
        // we can not reuse it.
        view.once('destroy', this.empty, this);
  
        // make this region the view's parent,
        // It's important that this parent binding happens before rendering
        // so that any events the child may trigger during render can also be
        // triggered on the child's ancestor views
        view._parent = this;
        this._renderView(view);
  
        if (isChangingView) {
          this.triggerMethod('before:swap', view, this, options);
        }
  
        this.triggerMethod('before:show', view, this, options);
        Marionette.triggerMethodOn(view, 'before:show', view, this, options);
  
        if (isChangingView) {
          this.triggerMethod('swapOut', this.currentView, this, options);
        }
  
        // An array of views that we're about to display
        var attachedRegion = Marionette.isNodeAttached(this.el);
  
        // The views that we're about to attach to the document
        // It's important that we prevent _getNestedViews from being executed unnecessarily
        // as it's a potentially-slow method
        var displayedViews = [];
  
        var attachOptions = _.extend({
          triggerBeforeAttach: this.triggerBeforeAttach,
          triggerAttach: this.triggerAttach
        }, showOptions);
  
        if (attachedRegion && attachOptions.triggerBeforeAttach) {
          displayedViews = this._displayedViews(view);
          this._triggerAttach(displayedViews, 'before:');
        }
  
        this.attachHtml(view);
        this.currentView = view;
  
        if (attachedRegion && attachOptions.triggerAttach) {
          displayedViews = this._displayedViews(view);
          this._triggerAttach(displayedViews);
        }
  
        if (isChangingView) {
          this.triggerMethod('swap', view, this, options);
        }
  
        this.triggerMethod('show', view, this, options);
        Marionette.triggerMethodOn(view, 'show', view, this, options);
  
        return this;
      }
  
      return this;
    },
  
    triggerBeforeAttach: true,
    triggerAttach: true,
  
    _triggerAttach: function(views, prefix) {
      var eventName = (prefix || '') + 'attach';
      _.each(views, function(view) {
        Marionette.triggerMethodOn(view, eventName, view, this);
      }, this);
    },
  
    _displayedViews: function(view) {
      return _.union([view], _.result(view, '_getNestedViews') || []);
    },
  
    _renderView: function(view) {
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'before:render', view);
      }
      view.render();
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'render', view);
      }
    },
  
    _ensureElement: function() {
      if (!_.isObject(this.el)) {
        this.$el = this.getEl(this.el);
        this.el = this.$el[0];
      }
  
      if (!this.$el || this.$el.length === 0) {
        if (this.getOption('allowMissingEl')) {
          return false;
        } else {
          throw new Marionette.Error('An "el" ' + this.$el.selector + ' must exist in DOM');
        }
      }
      return true;
    },
  
    _ensureViewIsIntact: function(view) {
      if (!view) {
        throw new Marionette.Error({
          name: 'ViewNotValid',
          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'
        });
      }
  
      if (view.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },
  
    // Override this method to change how the region finds the DOM
    // element that it manages. Return a jQuery selector object scoped
    // to a provided parent el or the document if none exists.
    getEl: function(el) {
      return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
    },
  
    // Override this method to change how the new view is
    // appended to the `$el` that the region is managing
    attachHtml: function(view) {
      this.$el.contents().detach();
  
      this.el.appendChild(view.el);
    },
  
    // Destroy the current view, if there is one. If there is no
    // current view, it does nothing and returns immediately.
    empty: function(options) {
      var view = this.currentView;
  
      var emptyOptions = options || {};
      var preventDestroy  = !!emptyOptions.preventDestroy;
      // If there is no view in the region
      // we should not remove anything
      if (!view) { return this; }
  
      view.off('destroy', this.empty, this);
      this.triggerMethod('before:empty', view);
      if (!preventDestroy) {
        this._destroyView();
      }
      this.triggerMethod('empty', view);
  
      // Remove region pointer to the currentView
      delete this.currentView;
  
      if (preventDestroy) {
        this.$el.contents().detach();
      }
  
      return this;
    },
  
    // call 'destroy' or 'remove', depending on which is found
    // on the view (if showing a raw Backbone view or a Marionette View)
    _destroyView: function() {
      var view = this.currentView;
      if (view.isDestroyed) { return; }
  
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'before:destroy', view);
      }
      if (view.destroy) {
        view.destroy();
      } else {
        view.remove();
  
        // appending isDestroyed to raw Backbone View allows regions
        // to throw a ViewDestroyedError for this view
        view.isDestroyed = true;
      }
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'destroy', view);
      }
    },
  
    // Attach an existing view to the region. This
    // will not call `render` or `onShow` for the new view,
    // and will not replace the current HTML for the `el`
    // of the region.
    attachView: function(view) {
      if (this.currentView) {
        delete this.currentView._parent;
      }
      view._parent = this;
      this.currentView = view;
      return this;
    },
  
    // Checks whether a view is currently present within
    // the region. Returns `true` if there is and `false` if
    // no view is present.
    hasView: function() {
      return !!this.currentView;
    },
  
    // Reset the region by destroying any existing view and
    // clearing out the cached `$el`. The next time a view
    // is shown via this region, the region will re-query the
    // DOM for the region's `el`.
    reset: function() {
      this.empty();
  
      if (this.$el) {
        this.el = this.$el.selector;
      }
  
      delete this.$el;
      return this;
    }
  
  },
  
  // Static Methods
  {
  
    // Build an instance of a region by passing in a configuration object
    // and a default region class to use if none is specified in the config.
    //
    // The config object should either be a string as a jQuery DOM selector,
    // a Region class directly, or an object literal that specifies a selector,
    // a custom regionClass, and any options to be supplied to the region:
    //
    // ```js
    // {
    //   selector: "#foo",
    //   regionClass: MyCustomRegion,
    //   allowMissingEl: false
    // }
    // ```
    //
    buildRegion: function(regionConfig, DefaultRegionClass) {
      if (_.isString(regionConfig)) {
        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
      }
  
      if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
        return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
      }
  
      if (_.isFunction(regionConfig)) {
        return this._buildRegionFromRegionClass(regionConfig);
      }
  
      throw new Marionette.Error({
        message: 'Improper region configuration type.',
        url: 'marionette.region.html#region-configuration-types'
      });
    },
  
    // Build the region from a string selector like '#foo-region'
    _buildRegionFromSelector: function(selector, DefaultRegionClass) {
      return new DefaultRegionClass({el: selector});
    },
  
    // Build the region from a configuration object
    // ```js
    // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }
    // ```
    _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
      var RegionClass = regionConfig.regionClass || DefaultRegionClass;
      var options = _.omit(regionConfig, 'selector', 'regionClass');
  
      if (regionConfig.selector && !options.el) {
        options.el = regionConfig.selector;
      }
  
      return new RegionClass(options);
    },
  
    // Build the region directly from a given `RegionClass`
    _buildRegionFromRegionClass: function(RegionClass) {
      return new RegionClass();
    }
  });
  
  // Region Manager
  // --------------
  
  // Manage one or more related `Marionette.Region` objects.
  Marionette.RegionManager = Marionette.Controller.extend({
    constructor: function(options) {
      this._regions = {};
      this.length = 0;
  
      Marionette.Controller.call(this, options);
  
      this.addRegions(this.getOption('regions'));
    },
  
    // Add multiple regions using an object literal or a
    // function that returns an object literal, where
    // each key becomes the region name, and each value is
    // the region definition.
    addRegions: function(regionDefinitions, defaults) {
      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);
  
      return _.reduce(regionDefinitions, function(regions, definition, name) {
        if (_.isString(definition)) {
          definition = {selector: definition};
        }
        if (definition.selector) {
          definition = _.defaults({}, definition, defaults);
        }
  
        regions[name] = this.addRegion(name, definition);
        return regions;
      }, {}, this);
    },
  
    // Add an individual region to the region manager,
    // and return the region instance
    addRegion: function(name, definition) {
      var region;
  
      if (definition instanceof Marionette.Region) {
        region = definition;
      } else {
        region = Marionette.Region.buildRegion(definition, Marionette.Region);
      }
  
      this.triggerMethod('before:add:region', name, region);
  
      region._parent = this;
      this._store(name, region);
  
      this.triggerMethod('add:region', name, region);
      return region;
    },
  
    // Get a region by name
    get: function(name) {
      return this._regions[name];
    },
  
    // Gets all the regions contained within
    // the `regionManager` instance.
    getRegions: function() {
      return _.clone(this._regions);
    },
  
    // Remove a region by name
    removeRegion: function(name) {
      var region = this._regions[name];
      this._remove(name, region);
  
      return region;
    },
  
    // Empty all regions in the region manager, and
    // remove them
    removeRegions: function() {
      var regions = this.getRegions();
      _.each(this._regions, function(region, name) {
        this._remove(name, region);
      }, this);
  
      return regions;
    },
  
    // Empty all regions in the region manager, but
    // leave them attached
    emptyRegions: function() {
      var regions = this.getRegions();
      _.invoke(regions, 'empty');
      return regions;
    },
  
    // Destroy all regions and shut down the region
    // manager entirely
    destroy: function() {
      this.removeRegions();
      return Marionette.Controller.prototype.destroy.apply(this, arguments);
    },
  
    // internal method to store regions
    _store: function(name, region) {
      if (!this._regions[name]) {
        this.length++;
      }
  
      this._regions[name] = region;
    },
  
    // internal method to remove a region
    _remove: function(name, region) {
      this.triggerMethod('before:remove:region', name, region);
      region.empty();
      region.stopListening();
  
      delete region._parent;
      delete this._regions[name];
      this.length--;
      this.triggerMethod('remove:region', name, region);
    }
  });
  
  Marionette.actAsCollection(Marionette.RegionManager.prototype, '_regions');
  

  // Template Cache
  // --------------
  
  // Manage templates stored in `<script>` blocks,
  // caching them for faster access.
  Marionette.TemplateCache = function(templateId) {
    this.templateId = templateId;
  };
  
  // TemplateCache object-level methods. Manage the template
  // caches from these method calls instead of creating
  // your own TemplateCache instances
  _.extend(Marionette.TemplateCache, {
    templateCaches: {},
  
    // Get the specified template by id. Either
    // retrieves the cached version, or loads it
    // from the DOM.
    get: function(templateId, options) {
      var cachedTemplate = this.templateCaches[templateId];
  
      if (!cachedTemplate) {
        cachedTemplate = new Marionette.TemplateCache(templateId);
        this.templateCaches[templateId] = cachedTemplate;
      }
  
      return cachedTemplate.load(options);
    },
  
    // Clear templates from the cache. If no arguments
    // are specified, clears all templates:
    // `clear()`
    //
    // If arguments are specified, clears each of the
    // specified templates from the cache:
    // `clear("#t1", "#t2", "...")`
    clear: function() {
      var i;
      var args = _.toArray(arguments);
      var length = args.length;
  
      if (length > 0) {
        for (i = 0; i < length; i++) {
          delete this.templateCaches[args[i]];
        }
      } else {
        this.templateCaches = {};
      }
    }
  });
  
  // TemplateCache instance methods, allowing each
  // template cache object to manage its own state
  // and know whether or not it has been loaded
  _.extend(Marionette.TemplateCache.prototype, {
  
    // Internal method to load the template
    load: function(options) {
      // Guard clause to prevent loading this template more than once
      if (this.compiledTemplate) {
        return this.compiledTemplate;
      }
  
      // Load the template and compile it
      var template = this.loadTemplate(this.templateId, options);
      this.compiledTemplate = this.compileTemplate(template, options);
  
      return this.compiledTemplate;
    },
  
    // Load a template from the DOM, by default. Override
    // this method to provide your own template retrieval
    // For asynchronous loading with AMD/RequireJS, consider
    // using a template-loader plugin as described here:
    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
    loadTemplate: function(templateId, options) {
      var $template = Backbone.$(templateId);
  
      if (!$template.length) {
        throw new Marionette.Error({
          name: 'NoTemplateError',
          message: 'Could not find template: "' + templateId + '"'
        });
      }
      return $template.html();
    },
  
    // Pre-compile the template before caching it. Override
    // this method if you do not need to pre-compile a template
    // (JST / RequireJS for example) or if you want to change
    // the template engine used (Handebars, etc).
    compileTemplate: function(rawTemplate, options) {
      return _.template(rawTemplate, options);
    }
  });
  
  // Renderer
  // --------
  
  // Render a template with data by passing in the template
  // selector and the data to render.
  Marionette.Renderer = {
  
    // Render a template with data. The `template` parameter is
    // passed to the `TemplateCache` object to retrieve the
    // template function. Override this method to provide your own
    // custom rendering and template handling for all of Marionette.
    render: function(template, data) {
      if (!template) {
        throw new Marionette.Error({
          name: 'TemplateNotFoundError',
          message: 'Cannot render the template since its false, null or undefined.'
        });
      }
  
      var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
  
      return templateFunc(data);
    }
  };
  

  /* jshint maxlen: 114, nonew: false */
  // View
  // ----
  
  // The core view class that other Marionette views extend from.
  Marionette.View = Backbone.View.extend({
    isDestroyed: false,
    supportsRenderLifecycle: true,
    supportsDestroyLifecycle: true,
  
    constructor: function(options) {
      this.render = _.bind(this.render, this);
  
      options = Marionette._getValue(options, this);
  
      // this exposes view options to the view initializer
      // this is a backfill since backbone removed the assignment
      // of this.options
      // at some point however this may be removed
      this.options = _.extend({}, _.result(this, 'options'), options);
  
      this._behaviors = Marionette.Behaviors(this);
  
      Backbone.View.call(this, this.options);
  
      Marionette.MonitorDOMRefresh(this);
    },
  
    // Get the template for this view
    // instance. You can set a `template` attribute in the view
    // definition or pass a `template: "whatever"` parameter in
    // to the constructor options.
    getTemplate: function() {
      return this.getOption('template');
    },
  
    // Serialize a model by returning its attributes. Clones
    // the attributes to allow modification.
    serializeModel: function(model) {
      return model.toJSON.apply(model, _.rest(arguments));
    },
  
    // Mix in template helper methods. Looks for a
    // `templateHelpers` attribute, which can either be an
    // object literal, or a function that returns an object
    // literal. All methods and attributes from this object
    // are copies to the object passed in.
    mixinTemplateHelpers: function(target) {
      target = target || {};
      var templateHelpers = this.getOption('templateHelpers');
      templateHelpers = Marionette._getValue(templateHelpers, this);
      return _.extend(target, templateHelpers);
    },
  
    // normalize the keys of passed hash with the views `ui` selectors.
    // `{"@ui.foo": "bar"}`
    normalizeUIKeys: function(hash) {
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, 'ui'));
    },
  
    // normalize the values of passed hash with the views `ui` selectors.
    // `{foo: "@ui.bar"}`
    normalizeUIValues: function(hash, properties) {
      var ui = _.result(this, 'ui');
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIValues(hash, uiBindings || ui, properties);
    },
  
    // Configure `triggers` to forward DOM events to view
    // events. `triggers: {"click .foo": "do:foo"}`
    configureTriggers: function() {
      if (!this.triggers) { return; }
  
      // Allow `triggers` to be configured as a function
      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));
  
      // Configure the triggers, prevent default
      // action and stop propagation of DOM events
      return _.reduce(triggers, function(events, value, key) {
        events[key] = this._buildViewTrigger(value);
        return events;
      }, {}, this);
    },
  
    // Overriding Backbone.View's delegateEvents to handle
    // the `triggers`, `modelEvents`, and `collectionEvents` configuration
    delegateEvents: function(events) {
      this._delegateDOMEvents(events);
      this.bindEntityEvents(this.model, this.getOption('modelEvents'));
      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));
  
      _.each(this._behaviors, function(behavior) {
        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);
  
      return this;
    },
  
    // internal method to delegate DOM events and triggers
    _delegateDOMEvents: function(eventsArg) {
      var events = Marionette._getValue(eventsArg || this.events, this);
  
      // normalize ui keys
      events = this.normalizeUIKeys(events);
      if (_.isUndefined(eventsArg)) {this.events = events;}
  
      var combinedEvents = {};
  
      // look up if this view has behavior events
      var behaviorEvents = _.result(this, 'behaviorEvents') || {};
      var triggers = this.configureTriggers();
      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};
  
      // behavior events will be overriden by view events and or triggers
      _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);
  
      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
    },
  
    // Overriding Backbone.View's undelegateEvents to handle unbinding
    // the `triggers`, `modelEvents`, and `collectionEvents` config
    undelegateEvents: function() {
      Backbone.View.prototype.undelegateEvents.apply(this, arguments);
  
      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));
      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));
  
      _.each(this._behaviors, function(behavior) {
        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);
  
      return this;
    },
  
    // Internal helper method to verify whether the view hasn't been destroyed
    _ensureViewIsIntact: function() {
      if (this.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },
  
    // Default `destroy` implementation, for removing a view from the
    // DOM and unbinding it. Regions will call this method
    // for you. You can specify an `onDestroy` method in your view to
    // add custom code that is called after the view is destroyed.
    destroy: function() {
      if (this.isDestroyed) { return this; }
  
      var args = _.toArray(arguments);
  
      this.triggerMethod.apply(this, ['before:destroy'].concat(args));
  
      // mark as destroyed before doing the actual destroy, to
      // prevent infinite loops within "destroy" event handlers
      // that are trying to destroy other views
      this.isDestroyed = true;
      this.triggerMethod.apply(this, ['destroy'].concat(args));
  
      // unbind UI elements
      this.unbindUIElements();
  
      this.isRendered = false;
  
      // remove the view from the DOM
      this.remove();
  
      // Call destroy on each behavior after
      // destroying the view.
      // This unbinds event listeners
      // that behaviors have registered for.
      _.invoke(this._behaviors, 'destroy', args);
  
      return this;
    },
  
    bindUIElements: function() {
      this._bindUIElements();
      _.invoke(this._behaviors, this._bindUIElements);
    },
  
    // This method binds the elements specified in the "ui" hash inside the view's code with
    // the associated jQuery selectors.
    _bindUIElements: function() {
      if (!this.ui) { return; }
  
      // store the ui hash in _uiBindings so they can be reset later
      // and so re-rendering the view will be able to find the bindings
      if (!this._uiBindings) {
        this._uiBindings = this.ui;
      }
  
      // get the bindings result, as a function or otherwise
      var bindings = _.result(this, '_uiBindings');
  
      // empty the ui so we don't have anything to start with
      this.ui = {};
  
      // bind each of the selectors
      _.each(bindings, function(selector, key) {
        this.ui[key] = this.$(selector);
      }, this);
    },
  
    // This method unbinds the elements specified in the "ui" hash
    unbindUIElements: function() {
      this._unbindUIElements();
      _.invoke(this._behaviors, this._unbindUIElements);
    },
  
    _unbindUIElements: function() {
      if (!this.ui || !this._uiBindings) { return; }
  
      // delete all of the existing ui bindings
      _.each(this.ui, function($el, name) {
        delete this.ui[name];
      }, this);
  
      // reset the ui element to the original bindings configuration
      this.ui = this._uiBindings;
      delete this._uiBindings;
    },
  
    // Internal method to create an event handler for a given `triggerDef` like
    // 'click:foo'
    _buildViewTrigger: function(triggerDef) {
  
      var options = _.defaults({}, triggerDef, {
        preventDefault: true,
        stopPropagation: true
      });
  
      var eventName = _.isObject(triggerDef) ? options.event : triggerDef;
  
      return function(e) {
        if (e) {
          if (e.preventDefault && options.preventDefault) {
            e.preventDefault();
          }
  
          if (e.stopPropagation && options.stopPropagation) {
            e.stopPropagation();
          }
        }
  
        var args = {
          view: this,
          model: this.model,
          collection: this.collection
        };
  
        this.triggerMethod(eventName, args);
      };
    },
  
    setElement: function() {
      var ret = Backbone.View.prototype.setElement.apply(this, arguments);
  
      // proxy behavior $el to the view's $el.
      // This is needed because a view's $el proxy
      // is not set until after setElement is called.
      _.invoke(this._behaviors, 'proxyViewProperties', this);
  
      return ret;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: function() {
      var ret = Marionette._triggerMethod(this, arguments);
  
      this._triggerEventOnBehaviors(arguments);
      this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));
  
      return ret;
    },
  
    _triggerEventOnBehaviors: function(args) {
      var triggerMethod = Marionette._triggerMethod;
      var behaviors = this._behaviors;
      // Use good ol' for as this is a very hot function
      for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
        triggerMethod(behaviors[i], args);
      }
    },
  
    _triggerEventOnParentLayout: function(eventName, args) {
      var layoutView = this._parentLayoutView();
      if (!layoutView) {
        return;
      }
  
      // invoke triggerMethod on parent view
      var eventPrefix = Marionette.getOption(layoutView, 'childViewEventPrefix');
      var prefixedEventName = eventPrefix + ':' + eventName;
      var callArgs = [this].concat(args);
  
      Marionette._triggerMethod(layoutView, prefixedEventName, callArgs);
  
      // call the parent view's childEvents handler
      var childEvents = Marionette.getOption(layoutView, 'childEvents');
  
      // since childEvents can be an object or a function use Marionette._getValue
      // to handle the abstaction for us.
      childEvents = Marionette._getValue(childEvents, layoutView);
      var normalizedChildEvents = layoutView.normalizeMethods(childEvents);
  
      if (normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName])) {
        normalizedChildEvents[eventName].apply(layoutView, callArgs);
      }
    },
  
    // This method returns any views that are immediate
    // children of this view
    _getImmediateChildren: function() {
      return [];
    },
  
    // Returns an array of every nested view within this view
    _getNestedViews: function() {
      var children = this._getImmediateChildren();
  
      if (!children.length) { return children; }
  
      return _.reduce(children, function(memo, view) {
        if (!view._getNestedViews) { return memo; }
        return memo.concat(view._getNestedViews());
      }, children);
    },
  
    // Walk the _parent tree until we find a layout view (if one exists).
    // Returns the parent layout view hierarchically closest to this view.
    _parentLayoutView: function() {
      var parent  = this._parent;
  
      while (parent) {
        if (parent instanceof Marionette.LayoutView) {
          return parent;
        }
        parent = parent._parent;
      }
    },
  
    // Imports the "normalizeMethods" to transform hashes of
    // events=>function references/names to a hash of events=>function references
    normalizeMethods: Marionette.normalizeMethods,
  
    // A handy way to merge passed-in options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Item View
  // ---------
  
  // A single item view implementation that contains code for rendering
  // with underscore.js templates, serializing the view's model or collection,
  // and calling several methods on extended views, such as `onRender`.
  Marionette.ItemView = Marionette.View.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.View.prototype.constructor which allows overriding
    constructor: function() {
      Marionette.View.apply(this, arguments);
    },
  
    // Serialize the model or collection for the view. If a model is
    // found, the view's `serializeModel` is called. If a collection is found,
    // each model in the collection is serialized by calling
    // the view's `serializeCollection` and put into an `items` array in
    // the resulting data. If both are found, defaults to the model.
    // You can override the `serializeData` method in your own view definition,
    // to provide custom serialization for your view's data.
    serializeData: function() {
      if (!this.model && !this.collection) {
        return {};
      }
  
      var args = [this.model || this.collection];
      if (arguments.length) {
        args.push.apply(args, arguments);
      }
  
      if (this.model) {
        return this.serializeModel.apply(this, args);
      } else {
        return {
          items: this.serializeCollection.apply(this, args)
        };
      }
    },
  
    // Serialize a collection by serializing each of its models.
    serializeCollection: function(collection) {
      return collection.toJSON.apply(collection, _.rest(arguments));
    },
  
    // Render the view, defaulting to underscore.js templates.
    // You can override this in your view definition to provide
    // a very specific rendering for your view. In general, though,
    // you should override the `Marionette.Renderer` object to
    // change how Marionette renders views.
    render: function() {
      this._ensureViewIsIntact();
  
      this.triggerMethod('before:render', this);
  
      this._renderTemplate();
      this.isRendered = true;
      this.bindUIElements();
  
      this.triggerMethod('render', this);
  
      return this;
    },
  
    // Internal method to render the template with the serialized data
    // and template helpers via the `Marionette.Renderer` object.
    // Throws an `UndefinedTemplateError` error if the template is
    // any falsely value but literal `false`.
    _renderTemplate: function() {
      var template = this.getTemplate();
  
      // Allow template-less item views
      if (template === false) {
        return;
      }
  
      if (!template) {
        throw new Marionette.Error({
          name: 'UndefinedTemplateError',
          message: 'Cannot render the template since it is null or undefined.'
        });
      }
  
      // Add in entity data and template helpers
      var data = this.mixinTemplateHelpers(this.serializeData());
  
      // Render and add to el
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);
  
      return this;
    },
  
    // Attaches the content of a given view.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    }
  });
  
  /* jshint maxstatements: 20, maxcomplexity: 7 */
  
  // Collection View
  // ---------------
  
  // A view that iterates over a Backbone.Collection
  // and renders an individual child view for each model.
  Marionette.CollectionView = Marionette.View.extend({
  
    // used as the prefix for child view events
    // that are forwarded through the collectionview
    childViewEventPrefix: 'childview',
  
    // flag for maintaining the sorted order of the collection
    sort: true,
  
    // constructor
    // option to pass `{sort: false}` to prevent the `CollectionView` from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    //
    // option to pass `{comparator: compFunction()}` to allow the `CollectionView`
    // to use a custom sort order for the collection.
    constructor: function(options) {
      this.once('render', this._initialEvents);
      this._initChildViewStorage();
  
      Marionette.View.apply(this, arguments);
  
      this.on({
        'before:show':   this._onBeforeShowCalled,
        'show':          this._onShowCalled,
        'before:attach': this._onBeforeAttachCalled,
        'attach':        this._onAttachCalled
      });
      this.initRenderBuffer();
    },
  
    // Instead of inserting elements one by one into the page,
    // it's much more performant to insert elements into a document
    // fragment and then insert that document fragment into the page
    initRenderBuffer: function() {
      this._bufferedChildren = [];
    },
  
    startBuffering: function() {
      this.initRenderBuffer();
      this.isBuffering = true;
    },
  
    endBuffering: function() {
      // Only trigger attach if already shown and attached, otherwise Region#show() handles this.
      var canTriggerAttach = this._isShown && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      this.isBuffering = false;
  
      if (this._isShown) {
        this._triggerMethodMany(this._bufferedChildren, this, 'before:show');
      }
      if (canTriggerAttach && this._triggerBeforeAttach) {
        nestedViews = this._getNestedViews();
        this._triggerMethodMany(nestedViews, this, 'before:attach');
      }
  
      this.attachBuffer(this, this._createBuffer());
  
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getNestedViews();
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      if (this._isShown) {
        this._triggerMethodMany(this._bufferedChildren, this, 'show');
      }
      this.initRenderBuffer();
    },
  
    _triggerMethodMany: function(targets, source, eventName) {
      var args = _.drop(arguments, 3);
  
      _.each(targets, function(target) {
        Marionette.triggerMethodOn.apply(target, [target, eventName, target, source].concat(args));
      });
    },
  
    // Configured the initial events that the collection view
    // binds to.
    _initialEvents: function() {
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this.render);
  
        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Handle a child added to the collection
    _onCollectionAdd: function(child, collection, opts) {
      // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2
      var index = opts.at !== undefined && (opts.index || collection.indexOf(child));
  
      // When filtered or when there is no initial index, calculate index.
      if (this.getOption('filter') || index === false) {
        index = _.indexOf(this._filteredSortedModels(index), child);
      }
  
      if (this._shouldAddChild(child, index)) {
        this.destroyEmptyView();
        var ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }
    },
  
    // get the child view by model it holds, and remove it
    _onCollectionRemove: function(model) {
      var view = this.children.findByModel(model);
      this.removeChildView(view);
      this.checkEmpty();
    },
  
    _onBeforeShowCalled: function() {
      // Reset attach event flags at the top of the Region#show() event lifecycle; if the Region's
      // show() options permit onBeforeAttach/onAttach events, these flags will be set true again.
      this._triggerBeforeAttach = this._triggerAttach = false;
      this.children.each(function(childView) {
        Marionette.triggerMethodOn(childView, 'before:show', childView);
      });
    },
  
    _onShowCalled: function() {
      this.children.each(function(childView) {
        Marionette.triggerMethodOn(childView, 'show', childView);
      });
    },
  
    // If during Region#show() onBeforeAttach was fired, continue firing it for child views
    _onBeforeAttachCalled: function() {
      this._triggerBeforeAttach = true;
    },
  
    // If during Region#show() onAttach was fired, continue firing it for child views
    _onAttachCalled: function() {
      this._triggerAttach = true;
    },
  
    // Render children views. Override this method to
    // provide your own implementation of a render function for
    // the collection view.
    render: function() {
      this._ensureViewIsIntact();
      this.triggerMethod('before:render', this);
      this._renderChildren();
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },
  
    // Reorder DOM after sorting. When your element's rendering
    // do not use their index, you can pass reorderOnSort: true
    // to only reorder the DOM after a sort instead of rendering
    // all the collectionView
    reorder: function() {
      var children = this.children;
      var models = this._filteredSortedModels();
      var anyModelsAdded = _.some(models, function(model) {
        return !children.findByModel(model);
      });
  
      // If there are any new models added due to filtering
      // We need to add child views
      // So render as normal
      if (anyModelsAdded) {
        this.render();
      } else {
        // get the DOM nodes in the same order as the models
        var elsToReorder = _.map(models, function(model, index) {
          var view = children.findByModel(model);
          view._index = index;
          return view.el;
        });
  
        // find the views that were children before but arent in this new ordering
        var filteredOutViews = children.filter(function(view) {
          return !_.contains(elsToReorder, view.el);
        });
  
        this.triggerMethod('before:reorder');
  
        // since append moves elements that are already in the DOM,
        // appending the elements will effectively reorder them
        this._appendReorderedChildren(elsToReorder);
  
        // remove any views that have been filtered out
        _.each(filteredOutViews, this.removeChildView, this);
        this.checkEmpty();
  
        this.triggerMethod('reorder');
      }
    },
  
    // Render view after sorting. Override this method to
    // change how the view renders after a `sort` on the collection.
    // An example of this would be to only `renderChildren` in a `CompositeView`
    // rather than the full view.
    resortView: function() {
      if (Marionette.getOption(this, 'reorderOnSort')) {
        this.reorder();
      } else {
        this.render();
      }
    },
  
    // Internal method. This checks for any changes in the order of the collection.
    // If the index of any view doesn't match, it will render.
    _sortViews: function() {
      var models = this._filteredSortedModels();
  
      // check for any changes in sort order of views
      var orderChanged = _.find(models, function(item, index) {
        var view = this.children.findByModel(item);
        return !view || view._index !== index;
      }, this);
  
      if (orderChanged) {
        this.resortView();
      }
    },
  
    // Internal reference to what index a `emptyView` is.
    _emptyViewIndex: -1,
  
    // Internal method. Separated so that CompositeView can append to the childViewContainer
    // if necessary
    _appendReorderedChildren: function(children) {
      this.$el.append(children);
    },
  
    // Internal method. Separated so that CompositeView can have
    // more control over events being triggered, around the rendering
    // process
    _renderChildren: function() {
      this.destroyEmptyView();
      this.destroyChildren({checkEmpty: false});
  
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      } else {
        this.triggerMethod('before:render:collection', this);
        this.startBuffering();
        this.showCollection();
        this.endBuffering();
        this.triggerMethod('render:collection', this);
  
        // If we have shown children and none have passed the filter, show the empty view
        if (this.children.isEmpty() && this.getOption('filter')) {
          this.showEmptyView();
        }
      }
    },
  
    // Internal method to loop through collection and show each child view.
    showCollection: function() {
      var ChildView;
  
      var models = this._filteredSortedModels();
  
      _.each(models, function(child, index) {
        ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }, this);
    },
  
    // Allow the collection to be sorted by a custom view comparator
    _filteredSortedModels: function(addedAt) {
      var viewComparator = this.getViewComparator();
      var models = this.collection.models;
      addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);
  
      if (viewComparator) {
        var addedModel;
        // Preserve `at` location, even for a sorted view
        if (addedAt) {
          addedModel = models[addedAt];
          models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));
        }
        models = this._sortModelsBy(models, viewComparator);
        if (addedModel) {
          models.splice(addedAt, 0, addedModel);
        }
      }
  
      // Filter after sorting in case the filter uses the index
      if (this.getOption('filter')) {
        models = _.filter(models, function(model, index) {
          return this._shouldAddChild(model, index);
        }, this);
      }
  
      return models;
    },
  
    _sortModelsBy: function(models, comparator) {
      if (typeof comparator === 'string') {
        return _.sortBy(models, function(model) {
          return model.get(comparator);
        }, this);
      } else if (comparator.length === 1) {
        return _.sortBy(models, comparator, this);
      } else {
        return models.sort(_.bind(comparator, this));
      }
    },
  
    // Internal method to show an empty view in place of
    // a collection of child views, when the collection is empty
    showEmptyView: function() {
      var EmptyView = this.getEmptyView();
  
      if (EmptyView && !this._showingEmptyView) {
        this.triggerMethod('before:render:empty');
  
        this._showingEmptyView = true;
        var model = new Backbone.Model();
        this.addEmptyView(model, EmptyView);
  
        this.triggerMethod('render:empty');
      }
    },
  
    // Internal method to destroy an existing emptyView instance
    // if one exists. Called when a collection view has been
    // rendered empty, and then a child is added to the collection.
    destroyEmptyView: function() {
      if (this._showingEmptyView) {
        this.triggerMethod('before:remove:empty');
  
        this.destroyChildren();
        delete this._showingEmptyView;
  
        this.triggerMethod('remove:empty');
      }
    },
  
    // Retrieve the empty view class
    getEmptyView: function() {
      return this.getOption('emptyView');
    },
  
    // Render and show the emptyView. Similar to addChild method
    // but "add:child" events are not fired, and the event from
    // emptyView are not forwarded
    addEmptyView: function(child, EmptyView) {
      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
      // Region#show() handles this.
      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      // get the emptyViewOptions, falling back to childViewOptions
      var emptyViewOptions = this.getOption('emptyViewOptions') ||
                            this.getOption('childViewOptions');
  
      if (_.isFunction(emptyViewOptions)) {
        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);
      }
  
      // build the empty view
      var view = this.buildChildView(child, EmptyView, emptyViewOptions);
  
      view._parent = this;
  
      // Proxy emptyView events
      this.proxyChildEvents(view);
  
      view.once('render', function() {
        // trigger the 'before:show' event on `view` if the collection view has already been shown
        if (this._isShown) {
          Marionette.triggerMethodOn(view, 'before:show', view);
        }
  
        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
        // to public method `renderChildView()`.
        if (canTriggerAttach && this._triggerBeforeAttach) {
          nestedViews = this._getViewAndNested(view);
          this._triggerMethodMany(nestedViews, this, 'before:attach');
        }
      }, this);
  
      // Store the `emptyView` like a `childView` so we can properly remove and/or close it later
      this.children.add(view);
      this.renderChildView(view, this._emptyViewIndex);
  
      // Trigger `attach`
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getViewAndNested(view);
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      // call the 'show' method if the collection view has already been shown
      if (this._isShown) {
        Marionette.triggerMethodOn(view, 'show', view);
      }
    },
  
    // Retrieve the `childView` class, either from `this.options.childView`
    // or from the `childView` in the object definition. The "options"
    // takes precedence.
    // This method receives the model that will be passed to the instance
    // created from this `childView`. Overriding methods may use the child
    // to determine what `childView` class to return.
    getChildView: function(child) {
      var childView = this.getOption('childView');
  
      if (!childView) {
        throw new Marionette.Error({
          name: 'NoChildViewError',
          message: 'A "childView" must be specified'
        });
      }
  
      return childView;
    },
  
    // Render the child's view and add it to the
    // HTML for the collection view at a given index.
    // This will also update the indices of later views in the collection
    // in order to keep the children in sync with the collection.
    addChild: function(child, ChildView, index) {
      var childViewOptions = this.getOption('childViewOptions');
      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);
  
      var view = this.buildChildView(child, ChildView, childViewOptions);
  
      // increment indices of views after this one
      this._updateIndices(view, true, index);
  
      this.triggerMethod('before:add:child', view);
      this._addChildView(view, index);
      this.triggerMethod('add:child', view);
  
      view._parent = this;
  
      return view;
    },
  
    // Internal method. This decrements or increments the indices of views after the
    // added/removed view to keep in sync with the collection.
    _updateIndices: function(view, increment, index) {
      if (!this.getOption('sort')) {
        return;
      }
  
      if (increment) {
        // assign the index to the view
        view._index = index;
      }
  
      // update the indexes of views after this one
      this.children.each(function(laterView) {
        if (laterView._index >= view._index) {
          laterView._index += increment ? 1 : -1;
        }
      });
    },
  
    // Internal Method. Add the view to children and render it at
    // the given index.
    _addChildView: function(view, index) {
      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
      // Region#show() handles this.
      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      // set up the child view event forwarding
      this.proxyChildEvents(view);
  
      view.once('render', function() {
        // trigger the 'before:show' event on `view` if the collection view has already been shown
        if (this._isShown && !this.isBuffering) {
          Marionette.triggerMethodOn(view, 'before:show', view);
        }
  
        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
        // to public method `renderChildView()`.
        if (canTriggerAttach && this._triggerBeforeAttach) {
          nestedViews = this._getViewAndNested(view);
          this._triggerMethodMany(nestedViews, this, 'before:attach');
        }
      }, this);
  
      // Store the child view itself so we can properly remove and/or destroy it later
      this.children.add(view);
      this.renderChildView(view, index);
  
      // Trigger `attach`
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getViewAndNested(view);
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      // Trigger `show`
      if (this._isShown && !this.isBuffering) {
        Marionette.triggerMethodOn(view, 'show', view);
      }
    },
  
    // render the child view
    renderChildView: function(view, index) {
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'before:render', view);
      }
      view.render();
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'render', view);
      }
      this.attachHtml(this, view, index);
      return view;
    },
  
    // Build a `childView` for a model in the collection.
    buildChildView: function(child, ChildViewClass, childViewOptions) {
      var options = _.extend({model: child}, childViewOptions);
      var childView = new ChildViewClass(options);
      Marionette.MonitorDOMRefresh(childView);
      return childView;
    },
  
    // Remove the child view and destroy it.
    // This function also updates the indices of
    // later views in the collection in order to keep
    // the children in sync with the collection.
    removeChildView: function(view) {
      if (!view) { return view; }
  
      this.triggerMethod('before:remove:child', view);
  
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'before:destroy', view);
      }
      // call 'destroy' or 'remove', depending on which is found
      if (view.destroy) {
        view.destroy();
      } else {
        view.remove();
      }
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'destroy', view);
      }
  
      delete view._parent;
      this.stopListening(view);
      this.children.remove(view);
      this.triggerMethod('remove:child', view);
  
      // decrement the index of views after this one
      this._updateIndices(view, false);
  
      return view;
    },
  
    // check if the collection is empty
    isEmpty: function() {
      return !this.collection || this.collection.length === 0;
    },
  
    // If empty, show the empty view
    checkEmpty: function() {
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      }
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(collectionView, buffer) {
      collectionView.$el.append(buffer);
    },
  
    // Create a fragment buffer from the currently buffered children
    _createBuffer: function() {
      var elBuffer = document.createDocumentFragment();
      _.each(this._bufferedChildren, function(b) {
        elBuffer.appendChild(b.el);
      });
      return elBuffer;
    },
  
    // Append the HTML to the collection's `el`.
    // Override this method to do something other
    // than `.append`.
    attachHtml: function(collectionView, childView, index) {
      if (collectionView.isBuffering) {
        // buffering happens on reset events and initial renders
        // in order to reduce the number of inserts into the
        // document, which are expensive.
        collectionView._bufferedChildren.splice(index, 0, childView);
      } else {
        // If we've already rendered the main collection, append
        // the new child into the correct order if we need to. Otherwise
        // append to the end.
        if (!collectionView._insertBefore(childView, index)) {
          collectionView._insertAfter(childView);
        }
      }
    },
  
    // Internal method. Check whether we need to insert the view into
    // the correct position.
    _insertBefore: function(childView, index) {
      var currentView;
      var findPosition = this.getOption('sort') && (index < this.children.length - 1);
      if (findPosition) {
        // Find the view after this one
        currentView = this.children.find(function(view) {
          return view._index === index + 1;
        });
      }
  
      if (currentView) {
        currentView.$el.before(childView.el);
        return true;
      }
  
      return false;
    },
  
    // Internal method. Append a view to the end of the $el
    _insertAfter: function(childView) {
      this.$el.append(childView.el);
    },
  
    // Internal method to set up the `children` object for
    // storing all of the child views
    _initChildViewStorage: function() {
      this.children = new Backbone.ChildViewContainer();
    },
  
    // Handle cleanup and other destroying needs for the collection of views
    destroy: function() {
      if (this.isDestroyed) { return this; }
  
      this.triggerMethod('before:destroy:collection');
      this.destroyChildren({checkEmpty: false});
      this.triggerMethod('destroy:collection');
  
      return Marionette.View.prototype.destroy.apply(this, arguments);
    },
  
    // Destroy the child views that this collection view
    // is holding on to, if any
    destroyChildren: function(options) {
      var destroyOptions = options || {};
      var shouldCheckEmpty = true;
      var childViews = this.children.map(_.identity);
  
      if (!_.isUndefined(destroyOptions.checkEmpty)) {
        shouldCheckEmpty = destroyOptions.checkEmpty;
      }
  
      this.children.each(this.removeChildView, this);
  
      if (shouldCheckEmpty) {
        this.checkEmpty();
      }
      return childViews;
    },
  
    // Return true if the given child should be shown
    // Return false otherwise
    // The filter will be passed (child, index, collection)
    // Where
    //  'child' is the given model
    //  'index' is the index of that model in the collection
    //  'collection' is the collection referenced by this CollectionView
    _shouldAddChild: function(child, index) {
      var filter = this.getOption('filter');
      return !_.isFunction(filter) || filter.call(this, child, index, this.collection);
    },
  
    // Set up the child view event forwarding. Uses a "childview:"
    // prefix in front of all forwarded events.
    proxyChildEvents: function(view) {
      var prefix = this.getOption('childViewEventPrefix');
  
      // Forward all child view events through the parent,
      // prepending "childview:" to the event name
      this.listenTo(view, 'all', function() {
        var args = _.toArray(arguments);
        var rootEvent = args[0];
        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));
  
        args[0] = prefix + ':' + rootEvent;
        args.splice(1, 0, view);
  
        // call collectionView childEvent if defined
        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {
          childEvents[rootEvent].apply(this, args.slice(1));
        }
  
        this.triggerMethod.apply(this, args);
      });
    },
  
    _getImmediateChildren: function() {
      return _.values(this.children._views);
    },
  
    _getViewAndNested: function(view) {
      // This will not fail on Backbone.View which does not have #_getNestedViews.
      return [view].concat(_.result(view, '_getNestedViews') || []);
    },
  
    getViewComparator: function() {
      return this.getOption('viewComparator');
    }
  });
  
  /* jshint maxstatements: 17, maxlen: 117 */
  
  // Composite View
  // --------------
  
  // Used for rendering a branch-leaf, hierarchical structure.
  // Extends directly from CollectionView and also renders an
  // a child view as `modelView`, for the top leaf
  Marionette.CompositeView = Marionette.CollectionView.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.CollectionView.prototype.constructor which allows overriding
    // option to pass '{sort: false}' to prevent the CompositeView from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    constructor: function() {
      Marionette.CollectionView.apply(this, arguments);
    },
  
    // Configured the initial events that the composite view
    // binds to. Override this method to prevent the initial
    // events, or to add your own initial events.
    _initialEvents: function() {
  
      // Bind only after composite view is rendered to avoid adding child views
      // to nonexistent childViewContainer
  
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this._renderChildren);
  
        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Retrieve the `childView` to be used when rendering each of
    // the items in the collection. The default is to return
    // `this.childView` or Marionette.CompositeView if no `childView`
    // has been defined
    getChildView: function(child) {
      var childView = this.getOption('childView') || this.constructor;
  
      return childView;
    },
  
    // Serialize the model for the view.
    // You can override the `serializeData` method in your own view
    // definition, to provide custom serialization for your view's data.
    serializeData: function() {
      var data = {};
  
      if (this.model) {
        data = _.partial(this.serializeModel, this.model).apply(this, arguments);
      }
  
      return data;
    },
  
    // Renders the model and the collection.
    render: function() {
      this._ensureViewIsIntact();
      this._isRendering = true;
      this.resetChildViewContainer();
  
      this.triggerMethod('before:render', this);
  
      this._renderTemplate();
      this._renderChildren();
  
      this._isRendering = false;
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },
  
    _renderChildren: function() {
      if (this.isRendered || this._isRendering) {
        Marionette.CollectionView.prototype._renderChildren.call(this);
      }
    },
  
    // Render the root template that the children
    // views are appended to
    _renderTemplate: function() {
      var data = {};
      data = this.serializeData();
      data = this.mixinTemplateHelpers(data);
  
      this.triggerMethod('before:render:template');
  
      var template = this.getTemplate();
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);
  
      // the ui bindings is done here and not at the end of render since they
      // will not be available until after the model is rendered, but should be
      // available before the collection is rendered.
      this.bindUIElements();
      this.triggerMethod('render:template');
    },
  
    // Attaches the content of the root.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(compositeView, buffer) {
      var $container = this.getChildViewContainer(compositeView);
      $container.append(buffer);
    },
  
    // Internal method. Append a view to the end of the $el.
    // Overidden from CollectionView to ensure view is appended to
    // childViewContainer
    _insertAfter: function(childView) {
      var $container = this.getChildViewContainer(this, childView);
      $container.append(childView.el);
    },
  
    // Internal method. Append reordered childView'.
    // Overidden from CollectionView to ensure reordered views
    // are appended to childViewContainer
    _appendReorderedChildren: function(children) {
      var $container = this.getChildViewContainer(this);
      $container.append(children);
    },
  
    // Internal method to ensure an `$childViewContainer` exists, for the
    // `attachHtml` method to use.
    getChildViewContainer: function(containerView, childView) {
      if (!!containerView.$childViewContainer) {
        return containerView.$childViewContainer;
      }
  
      var container;
      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');
      if (childViewContainer) {
  
        var selector = Marionette._getValue(childViewContainer, containerView);
  
        if (selector.charAt(0) === '@' && containerView.ui) {
          container = containerView.ui[selector.substr(4)];
        } else {
          container = containerView.$(selector);
        }
  
        if (container.length <= 0) {
          throw new Marionette.Error({
            name: 'ChildViewContainerMissingError',
            message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
          });
        }
  
      } else {
        container = containerView.$el;
      }
  
      containerView.$childViewContainer = container;
      return container;
    },
  
    // Internal method to reset the `$childViewContainer` on render
    resetChildViewContainer: function() {
      if (this.$childViewContainer) {
        this.$childViewContainer = undefined;
      }
    }
  });
  
  // Layout View
  // -----------
  
  // Used for managing application layoutViews, nested layoutViews and
  // multiple regions within an application or sub-application.
  //
  // A specialized view class that renders an area of HTML and then
  // attaches `Region` instances to the specified `regions`.
  // Used for composite view management and sub-application areas.
  Marionette.LayoutView = Marionette.ItemView.extend({
    regionClass: Marionette.Region,
  
    options: {
      destroyImmediate: false
    },
  
    // used as the prefix for child view events
    // that are forwarded through the layoutview
    childViewEventPrefix: 'childview',
  
    // Ensure the regions are available when the `initialize` method
    // is called.
    constructor: function(options) {
      options = options || {};
  
      this._firstRender = true;
      this._initializeRegions(options);
  
      Marionette.ItemView.call(this, options);
    },
  
    // LayoutView's render will use the existing region objects the
    // first time it is called. Subsequent calls will destroy the
    // views that the regions are showing and then reset the `el`
    // for the regions to the newly rendered DOM elements.
    render: function() {
      this._ensureViewIsIntact();
  
      if (this._firstRender) {
        // if this is the first render, don't do anything to
        // reset the regions
        this._firstRender = false;
      } else {
        // If this is not the first render call, then we need to
        // re-initialize the `el` for each region
        this._reInitializeRegions();
      }
  
      return Marionette.ItemView.prototype.render.apply(this, arguments);
    },
  
    // Handle destroying regions, and then destroy the view itself.
    destroy: function() {
      if (this.isDestroyed) { return this; }
      // #2134: remove parent element before destroying the child views, so
      // removing the child views doesn't retrigger repaints
      if (this.getOption('destroyImmediate') === true) {
        this.$el.remove();
      }
      this.regionManager.destroy();
      return Marionette.ItemView.prototype.destroy.apply(this, arguments);
    },
  
    showChildView: function(regionName, view, options) {
      var region = this.getRegion(regionName);
      return region.show.apply(region, _.rest(arguments));
    },
  
    getChildView: function(regionName) {
      return this.getRegion(regionName).currentView;
    },
  
    // Add a single region, by name, to the layoutView
    addRegion: function(name, definition) {
      var regions = {};
      regions[name] = definition;
      return this._buildRegions(regions)[name];
    },
  
    // Add multiple regions as a {name: definition, name2: def2} object literal
    addRegions: function(regions) {
      this.regions = _.extend({}, this.regions, regions);
      return this._buildRegions(regions);
    },
  
    // Remove a single region from the LayoutView, by name
    removeRegion: function(name) {
      delete this.regions[name];
      return this.regionManager.removeRegion(name);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this.regionManager.get(region);
    },
  
    // Get all regions
    getRegions: function() {
      return this.regionManager.getRegions();
    },
  
    // internal method to build regions
    _buildRegions: function(regions) {
      var defaults = {
        regionClass: this.getOption('regionClass'),
        parentEl: _.partial(_.result, this, 'el')
      };
  
      return this.regionManager.addRegions(regions, defaults);
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on this layoutView.
    _initializeRegions: function(options) {
      var regions;
      this._initRegionManager();
  
      regions = Marionette._getValue(this.regions, this, [options]) || {};
  
      // Enable users to define `regions` as instance options.
      var regionOptions = this.getOption.call(options, 'regions');
  
      // enable region options to be a function
      regionOptions = Marionette._getValue(regionOptions, this, [options]);
  
      _.extend(regions, regionOptions);
  
      // Normalize region selectors hash to allow
      // a user to use the @ui. syntax.
      regions = this.normalizeUIValues(regions, ['selector', 'el']);
  
      this.addRegions(regions);
    },
  
    // Internal method to re-initialize all of the regions by updating the `el` that
    // they point to
    _reInitializeRegions: function() {
      this.regionManager.invoke('reset');
    },
  
    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the region manager
    // and all regions in it
    _initRegionManager: function() {
      this.regionManager = this.getRegionManager();
      this.regionManager._parent = this;
  
      this.listenTo(this.regionManager, 'before:add:region', function(name) {
        this.triggerMethod('before:add:region', name);
      });
  
      this.listenTo(this.regionManager, 'add:region', function(name, region) {
        this[name] = region;
        this.triggerMethod('add:region', name, region);
      });
  
      this.listenTo(this.regionManager, 'before:remove:region', function(name) {
        this.triggerMethod('before:remove:region', name);
      });
  
      this.listenTo(this.regionManager, 'remove:region', function(name, region) {
        delete this[name];
        this.triggerMethod('remove:region', name, region);
      });
    },
  
    _getImmediateChildren: function() {
      return _.chain(this.regionManager.getRegions())
        .pluck('currentView')
        .compact()
        .value();
    }
  });
  

  // Behavior
  // --------
  
  // A Behavior is an isolated set of DOM /
  // user interactions that can be mixed into any View.
  // Behaviors allow you to blackbox View specific interactions
  // into portable logical chunks, keeping your views simple and your code DRY.
  
  Marionette.Behavior = Marionette.Object.extend({
    constructor: function(options, view) {
      // Setup reference to the view.
      // this comes in handle when a behavior
      // wants to directly talk up the chain
      // to the view.
      this.view = view;
      this.defaults = _.result(this, 'defaults') || {};
      this.options  = _.extend({}, this.defaults, options);
      // Construct an internal UI hash using
      // the views UI hash and then the behaviors UI hash.
      // This allows the user to use UI hash elements
      // defined in the parent view as well as those
      // defined in the given behavior.
      this.ui = _.extend({}, _.result(view, 'ui'), _.result(this, 'ui'));
  
      Marionette.Object.apply(this, arguments);
    },
  
    // proxy behavior $ method to the view
    // this is useful for doing jquery DOM lookups
    // scoped to behaviors view.
    $: function() {
      return this.view.$.apply(this.view, arguments);
    },
  
    // Stops the behavior from listening to events.
    // Overrides Object#destroy to prevent additional events from being triggered.
    destroy: function() {
      this.stopListening();
  
      return this;
    },
  
    proxyViewProperties: function(view) {
      this.$el = view.$el;
      this.el = view.el;
    }
  });
  
  /* jshint maxlen: 143 */
  // Behaviors
  // ---------
  
  // Behaviors is a utility class that takes care of
  // gluing your behavior instances to their given View.
  // The most important part of this class is that you
  // **MUST** override the class level behaviorsLookup
  // method for things to work properly.
  
  Marionette.Behaviors = (function(Marionette, _) {
    // Borrow event splitter from Backbone
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
  
    function Behaviors(view, behaviors) {
  
      if (!_.isObject(view.behaviors)) {
        return {};
      }
  
      // Behaviors defined on a view can be a flat object literal
      // or it can be a function that returns an object.
      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));
  
      // Wraps several of the view's methods
      // calling the methods first on each behavior
      // and then eventually calling the method on the view.
      Behaviors.wrap(view, behaviors, _.keys(methods));
      return behaviors;
    }
  
    var methods = {
      behaviorTriggers: function(behaviorTriggers, behaviors) {
        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
        return triggerBuilder.buildBehaviorTriggers();
      },
  
      behaviorEvents: function(behaviorEvents, behaviors) {
        var _behaviorsEvents = {};
  
        _.each(behaviors, function(b, i) {
          var _events = {};
          var behaviorEvents = _.clone(_.result(b, 'events')) || {};
  
          // Normalize behavior events hash to allow
          // a user to use the @ui. syntax.
          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));
  
          var j = 0;
          _.each(behaviorEvents, function(behaviour, key) {
            var match     = key.match(delegateEventSplitter);
  
            // Set event name to be namespaced using the view cid,
            // the behavior index, and the behavior event index
            // to generate a non colliding event namespace
            // http://api.jquery.com/event.namespace/
            var eventName = match[1] + '.' + [this.cid, i, j++, ' '].join('');
            var selector  = match[2];
  
            var eventKey  = eventName + selector;
            var handler   = _.isFunction(behaviour) ? behaviour : b[behaviour];
  
            _events[eventKey] = _.bind(handler, b);
          }, this);
  
          _behaviorsEvents = _.extend(_behaviorsEvents, _events);
        }, this);
  
        return _behaviorsEvents;
      }
    };
  
    _.extend(Behaviors, {
  
      // Placeholder method to be extended by the user.
      // The method should define the object that stores the behaviors.
      // i.e.
      //
      // ```js
      // Marionette.Behaviors.behaviorsLookup: function() {
      //   return App.Behaviors
      // }
      // ```
      behaviorsLookup: function() {
        throw new Marionette.Error({
          message: 'You must define where your behaviors are stored.',
          url: 'marionette.behaviors.html#behaviorslookup'
        });
      },
  
      // Takes care of getting the behavior class
      // given options and a key.
      // If a user passes in options.behaviorClass
      // default to using that. Otherwise delegate
      // the lookup to the users `behaviorsLookup` implementation.
      getBehaviorClass: function(options, key) {
        if (options.behaviorClass) {
          return options.behaviorClass;
        }
  
        // Get behavior class can be either a flat object or a method
        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];
      },
  
      // Iterate over the behaviors object, for each behavior
      // instantiate it and get its grouped behaviors.
      parseBehaviors: function(view, behaviors) {
        return _.chain(behaviors).map(function(options, key) {
          var BehaviorClass = Behaviors.getBehaviorClass(options, key);
  
          var behavior = new BehaviorClass(options, view);
          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));
  
          return [behavior].concat(nestedBehaviors);
        }).flatten().value();
      },
  
      // Wrap view internal methods so that they delegate to behaviors. For example,
      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.
      // i.e.
      //
      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`
      wrap: function(view, behaviors, methodNames) {
        _.each(methodNames, function(methodName) {
          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
        });
      }
    });
  
    // Class to build handlers for `triggers` on behaviors
    // for views
    function BehaviorTriggersBuilder(view, behaviors) {
      this._view      = view;
      this._behaviors = behaviors;
      this._triggers  = {};
    }
  
    _.extend(BehaviorTriggersBuilder.prototype, {
      // Main method to build the triggers hash with event keys and handlers
      buildBehaviorTriggers: function() {
        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
        return this._triggers;
      },
  
      // Internal method to build all trigger handlers for a given behavior
      _buildTriggerHandlersForBehavior: function(behavior, i) {
        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};
  
        triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));
  
        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
      },
  
      // Internal method to create and assign the trigger handler for a given
      // behavior
      _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
        // Unique identifier for the `this._triggers` hash
        var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
          return triggerName + '.' + 'behaviortriggers' + i;
        });
  
        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
      }
    });
  
    function getBehaviorsUI(behavior) {
      return behavior._uiBindings || behavior.ui;
    }
  
    return Behaviors;
  
  })(Marionette, _);
  

  // App Router
  // ----------
  
  // Reduce the boilerplate code of handling route events
  // and then calling a single method on another object.
  // Have your routers configured to call the method on
  // your object, directly.
  //
  // Configure an AppRouter with `appRoutes`.
  //
  // App routers can only take one `controller` object.
  // It is recommended that you divide your controller
  // objects in to smaller pieces of related functionality
  // and have multiple routers / controllers, instead of
  // just one giant router and controller.
  //
  // You can also add standard routes to an AppRouter.
  
  Marionette.AppRouter = Backbone.Router.extend({
  
    constructor: function(options) {
      this.options = options || {};
  
      Backbone.Router.apply(this, arguments);
  
      var appRoutes = this.getOption('appRoutes');
      var controller = this._getController();
      this.processAppRoutes(controller, appRoutes);
      this.on('route', this._processOnRoute, this);
    },
  
    // Similar to route method on a Backbone Router but
    // method is called on the controller
    appRoute: function(route, methodName) {
      var controller = this._getController();
      this._addAppRoute(controller, route, methodName);
    },
  
    // process the route event and trigger the onRoute
    // method call, if it exists
    _processOnRoute: function(routeName, routeArgs) {
      // make sure an onRoute before trying to call it
      if (_.isFunction(this.onRoute)) {
        // find the path that matches the current route
        var routePath = _.invert(this.getOption('appRoutes'))[routeName];
        this.onRoute(routeName, routePath, routeArgs);
      }
    },
  
    // Internal method to process the `appRoutes` for the
    // router, and turn them in to routes that trigger the
    // specified method on the specified `controller`.
    processAppRoutes: function(controller, appRoutes) {
      if (!appRoutes) { return; }
  
      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes
  
      _.each(routeNames, function(route) {
        this._addAppRoute(controller, route, appRoutes[route]);
      }, this);
    },
  
    _getController: function() {
      return this.getOption('controller');
    },
  
    _addAppRoute: function(controller, route, methodName) {
      var method = controller[methodName];
  
      if (!method) {
        throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
      }
  
      this.route(route, methodName, _.bind(method, controller));
    },
  
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    triggerMethod: Marionette.triggerMethod,
  
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Application
  // -----------
  
  // Contain and manage the composite application as a whole.
  // Stores and starts up `Region` objects, includes an
  // event aggregator as `app.vent`
  Marionette.Application = Marionette.Object.extend({
    constructor: function(options) {
      this._initializeRegions(options);
      this._initCallbacks = new Marionette.Callbacks();
      this.submodules = {};
      _.extend(this, options);
      this._initChannel();
      Marionette.Object.apply(this, arguments);
    },
  
    // Command execution, facilitated by Backbone.Wreqr.Commands
    execute: function() {
      this.commands.execute.apply(this.commands, arguments);
    },
  
    // Request/response, facilitated by Backbone.Wreqr.RequestResponse
    request: function() {
      return this.reqres.request.apply(this.reqres, arguments);
    },
  
    // Add an initializer that is either run at when the `start`
    // method is called, or run immediately if added after `start`
    // has already been called.
    addInitializer: function(initializer) {
      this._initCallbacks.add(initializer);
    },
  
    // kick off all of the application's processes.
    // initializes all of the regions that have been added
    // to the app, and runs all of the initializer functions
    start: function(options) {
      this.triggerMethod('before:start', options);
      this._initCallbacks.run(options, this);
      this.triggerMethod('start', options);
    },
  
    // Add regions to your app.
    // Accepts a hash of named strings or Region objects
    // addRegions({something: "#someRegion"})
    // addRegions({something: Region.extend({el: "#someRegion"}) });
    addRegions: function(regions) {
      return this._regionManager.addRegions(regions);
    },
  
    // Empty all regions in the app, without removing them
    emptyRegions: function() {
      return this._regionManager.emptyRegions();
    },
  
    // Removes a region from your app, by name
    // Accepts the regions name
    // removeRegion('myRegion')
    removeRegion: function(region) {
      return this._regionManager.removeRegion(region);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this._regionManager.get(region);
    },
  
    // Get all the regions from the region manager
    getRegions: function() {
      return this._regionManager.getRegions();
    },
  
    // Create a module, attached to the application
    module: function(moduleNames, moduleDefinition) {
  
      // Overwrite the module class if the user specifies one
      var ModuleClass = Marionette.Module.getClass(moduleDefinition);
  
      var args = _.toArray(arguments);
      args.unshift(this);
  
      // see the Marionette.Module object for more information
      return ModuleClass.create.apply(ModuleClass, args);
    },
  
    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business-specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on the application instance
    _initializeRegions: function(options) {
      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
  
      this._initRegionManager();
  
      // Enable users to define `regions` in instance options.
      var optionRegions = Marionette.getOption(options, 'regions');
  
      // Enable region options to be a function
      if (_.isFunction(optionRegions)) {
        optionRegions = optionRegions.call(this, options);
      }
  
      // Overwrite current regions with those passed in options
      _.extend(regions, optionRegions);
  
      this.addRegions(regions);
  
      return this;
    },
  
    // Internal method to set up the region manager
    _initRegionManager: function() {
      this._regionManager = this.getRegionManager();
      this._regionManager._parent = this;
  
      this.listenTo(this._regionManager, 'before:add:region', function() {
        Marionette._triggerMethod(this, 'before:add:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'add:region', function(name, region) {
        this[name] = region;
        Marionette._triggerMethod(this, 'add:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'before:remove:region', function() {
        Marionette._triggerMethod(this, 'before:remove:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'remove:region', function(name) {
        delete this[name];
        Marionette._triggerMethod(this, 'remove:region', arguments);
      });
    },
  
    // Internal method to setup the Wreqr.radio channel
    _initChannel: function() {
      this.channelName = _.result(this, 'channelName') || 'global';
      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);
      this.vent = _.result(this, 'vent') || this.channel.vent;
      this.commands = _.result(this, 'commands') || this.channel.commands;
      this.reqres = _.result(this, 'reqres') || this.channel.reqres;
    }
  });
  
  /* jshint maxparams: 9 */
  
  // Module
  // ------
  
  // A simple module system, used to create privacy and encapsulation in
  // Marionette applications
  Marionette.Module = function(moduleName, app, options) {
    this.moduleName = moduleName;
    this.options = _.extend({}, this.options, options);
    // Allow for a user to overide the initialize
    // for a given module instance.
    this.initialize = options.initialize || this.initialize;
  
    // Set up an internal store for sub-modules.
    this.submodules = {};
  
    this._setupInitializersAndFinalizers();
  
    // Set an internal reference to the app
    // within a module.
    this.app = app;
  
    if (_.isFunction(this.initialize)) {
      this.initialize(moduleName, app, this.options);
    }
  };
  
  Marionette.Module.extend = Marionette.extend;
  
  // Extend the Module prototype with events / listenTo, so that the module
  // can be used as an event aggregator or pub/sub.
  _.extend(Marionette.Module.prototype, Backbone.Events, {
  
    // By default modules start with their parents.
    startWithParent: true,
  
    // Initialize is an empty function by default. Override it with your own
    // initialization logic when extending Marionette.Module.
    initialize: function() {},
  
    // Initializer for a specific module. Initializers are run when the
    // module's `start` method is called.
    addInitializer: function(callback) {
      this._initializerCallbacks.add(callback);
    },
  
    // Finalizers are run when a module is stopped. They are used to teardown
    // and finalize any variables, references, events and other code that the
    // module had set up.
    addFinalizer: function(callback) {
      this._finalizerCallbacks.add(callback);
    },
  
    // Start the module, and run all of its initializers
    start: function(options) {
      // Prevent re-starting a module that is already started
      if (this._isInitialized) { return; }
  
      // start the sub-modules (depth-first hierarchy)
      _.each(this.submodules, function(mod) {
        // check to see if we should start the sub-module with this parent
        if (mod.startWithParent) {
          mod.start(options);
        }
      });
  
      // run the callbacks to "start" the current module
      this.triggerMethod('before:start', options);
  
      this._initializerCallbacks.run(options, this);
      this._isInitialized = true;
  
      this.triggerMethod('start', options);
    },
  
    // Stop this module by running its finalizers and then stop all of
    // the sub-modules for this module
    stop: function() {
      // if we are not initialized, don't bother finalizing
      if (!this._isInitialized) { return; }
      this._isInitialized = false;
  
      this.triggerMethod('before:stop');
  
      // stop the sub-modules; depth-first, to make sure the
      // sub-modules are stopped / finalized before parents
      _.invoke(this.submodules, 'stop');
  
      // run the finalizers
      this._finalizerCallbacks.run(undefined, this);
  
      // reset the initializers and finalizers
      this._initializerCallbacks.reset();
      this._finalizerCallbacks.reset();
  
      this.triggerMethod('stop');
    },
  
    // Configure the module with a definition function and any custom args
    // that are to be passed in to the definition function
    addDefinition: function(moduleDefinition, customArgs) {
      this._runModuleDefinition(moduleDefinition, customArgs);
    },
  
    // Internal method: run the module definition function with the correct
    // arguments
    _runModuleDefinition: function(definition, customArgs) {
      // If there is no definition short circut the method.
      if (!definition) { return; }
  
      // build the correct list of arguments for the module definition
      var args = _.flatten([
        this,
        this.app,
        Backbone,
        Marionette,
        Backbone.$, _,
        customArgs
      ]);
  
      definition.apply(this, args);
    },
  
    // Internal method: set up new copies of initializers and finalizers.
    // Calling this method will wipe out all existing initializers and
    // finalizers.
    _setupInitializersAndFinalizers: function() {
      this._initializerCallbacks = new Marionette.Callbacks();
      this._finalizerCallbacks = new Marionette.Callbacks();
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });
  
  // Class methods to create modules
  _.extend(Marionette.Module, {
  
    // Create a module, hanging off the app parameter as the parent object.
    create: function(app, moduleNames, moduleDefinition) {
      var module = app;
  
      // get the custom args passed in after the module definition and
      // get rid of the module name and definition function
      var customArgs = _.drop(arguments, 3);
  
      // Split the module names and get the number of submodules.
      // i.e. an example module name of `Doge.Wow.Amaze` would
      // then have the potential for 3 module definitions.
      moduleNames = moduleNames.split('.');
      var length = moduleNames.length;
  
      // store the module definition for the last module in the chain
      var moduleDefinitions = [];
      moduleDefinitions[length - 1] = moduleDefinition;
  
      // Loop through all the parts of the module definition
      _.each(moduleNames, function(moduleName, i) {
        var parentModule = module;
        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
      }, this);
  
      // Return the last module in the definition chain
      return module;
    },
  
    _getModule: function(parentModule, moduleName, app, def, args) {
      var options = _.extend({}, def);
      var ModuleClass = this.getClass(def);
  
      // Get an existing module of this name if we have one
      var module = parentModule[moduleName];
  
      if (!module) {
        // Create a new module if we don't have one
        module = new ModuleClass(moduleName, app, options);
        parentModule[moduleName] = module;
        // store the module on the parent
        parentModule.submodules[moduleName] = module;
      }
  
      return module;
    },
  
    // ## Module Classes
    //
    // Module classes can be used as an alternative to the define pattern.
    // The extend function of a Module is identical to the extend functions
    // on other Backbone and Marionette classes.
    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.
    getClass: function(moduleDefinition) {
      var ModuleClass = Marionette.Module;
  
      if (!moduleDefinition) {
        return ModuleClass;
      }
  
      // If all of the module's functionality is defined inside its class,
      // then the class can be passed in directly. `MyApp.module("Foo", FooModule)`.
      if (moduleDefinition.prototype instanceof ModuleClass) {
        return moduleDefinition;
      }
  
      return moduleDefinition.moduleClass || ModuleClass;
    },
  
    // Add the module definition and add a startWithParent initializer function.
    // This is complicated because module definitions are heavily overloaded
    // and support an anonymous function, module class, or options object
    _addModuleDefinition: function(parentModule, module, def, args) {
      var fn = this._getDefine(def);
      var startWithParent = this._getStartWithParent(def, module);
  
      if (fn) {
        module.addDefinition(fn, args);
      }
  
      this._addStartWithParent(parentModule, module, startWithParent);
    },
  
    _getStartWithParent: function(def, module) {
      var swp;
  
      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {
        swp = module.constructor.prototype.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      if (_.isObject(def)) {
        swp = def.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      return true;
    },
  
    _getDefine: function(def) {
      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
        return def;
      }
  
      if (_.isObject(def)) {
        return def.define;
      }
  
      return null;
    },
  
    _addStartWithParent: function(parentModule, module, startWithParent) {
      module.startWithParent = module.startWithParent && startWithParent;
  
      if (!module.startWithParent || !!module.startWithParentIsConfigured) {
        return;
      }
  
      module.startWithParentIsConfigured = true;
  
      parentModule.addInitializer(function(options) {
        if (module.startWithParent) {
          module.start(options);
        }
      });
    }
  });
  

  return Marionette;
}));

/*!
 * ZeroClipboard
 * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.
 * Copyright (c) 2009-2014 Jon Rohan, James M. Greene
 * Licensed MIT
 * http://zeroclipboard.org/
 * v2.2.0
 */
(function(window, undefined) {
  "use strict";
  /**
 * Store references to critically important global functions that may be
 * overridden on certain web pages.
 */
  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _defineProperty = _window.Object.defineProperty, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {
    var unwrapper = function(el) {
      return el;
    };
    if (typeof _window.wrap === "function" && typeof _window.unwrap === "function") {
      try {
        var div = _document.createElement("div");
        var unwrappedDiv = _window.unwrap(div);
        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {
          unwrapper = _window.unwrap;
        }
      } catch (e) {}
    }
    return unwrapper;
  }();
  /**
 * Convert an `arguments` object into an Array.
 *
 * @returns The arguments as an Array
 * @private
 */
  var _args = function(argumentsObj) {
    return _slice.call(argumentsObj, 0);
  };
  /**
 * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery's `$.extend`.
 *
 * @returns The target object, augmented
 * @private
 */
  var _extend = function() {
    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};
    for (i = 1, len = args.length; i < len; i++) {
      if ((arg = args[i]) != null) {
        for (prop in arg) {
          if (_hasOwn.call(arg, prop)) {
            src = target[prop];
            copy = arg[prop];
            if (target !== copy && copy !== undefined) {
              target[prop] = copy;
            }
          }
        }
      }
    }
    return target;
  };
  /**
 * Return a deep copy of the source object or array.
 *
 * @returns Object or Array
 * @private
 */
  var _deepCopy = function(source) {
    var copy, i, len, prop;
    if (typeof source !== "object" || source == null || typeof source.nodeType === "number") {
      copy = source;
    } else if (typeof source.length === "number") {
      copy = [];
      for (i = 0, len = source.length; i < len; i++) {
        if (_hasOwn.call(source, i)) {
          copy[i] = _deepCopy(source[i]);
        }
      }
    } else {
      copy = {};
      for (prop in source) {
        if (_hasOwn.call(source, prop)) {
          copy[prop] = _deepCopy(source[prop]);
        }
      }
    }
    return copy;
  };
  /**
 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.
 * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to
 * be kept.
 *
 * @returns A new filtered object.
 * @private
 */
  var _pick = function(obj, keys) {
    var newObj = {};
    for (var i = 0, len = keys.length; i < len; i++) {
      if (keys[i] in obj) {
        newObj[keys[i]] = obj[keys[i]];
      }
    }
    return newObj;
  };
  /**
 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.
 * The inverse of `_pick`.
 *
 * @returns A new filtered object.
 * @private
 */
  var _omit = function(obj, keys) {
    var newObj = {};
    for (var prop in obj) {
      if (keys.indexOf(prop) === -1) {
        newObj[prop] = obj[prop];
      }
    }
    return newObj;
  };
  /**
 * Remove all owned, enumerable properties from an object.
 *
 * @returns The original object without its owned, enumerable properties.
 * @private
 */
  var _deleteOwnProperties = function(obj) {
    if (obj) {
      for (var prop in obj) {
        if (_hasOwn.call(obj, prop)) {
          delete obj[prop];
        }
      }
    }
    return obj;
  };
  /**
 * Determine if an element is contained within another element.
 *
 * @returns Boolean
 * @private
 */
  var _containedBy = function(el, ancestorEl) {
    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {
      do {
        if (el === ancestorEl) {
          return true;
        }
        el = el.parentNode;
      } while (el);
    }
    return false;
  };
  /**
 * Get the URL path's parent directory.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getDirPathOfUrl = function(url) {
    var dir;
    if (typeof url === "string" && url) {
      dir = url.split("#")[0].split("?")[0];
      dir = url.slice(0, url.lastIndexOf("/") + 1);
    }
    return dir;
  };
  /**
 * Get the current script's URL by throwing an `Error` and analyzing it.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getCurrentScriptUrlFromErrorStack = function(stack) {
    var url, matches;
    if (typeof stack === "string" && stack) {
      matches = stack.match(/^(?:|[^:@]*@|.+\)@(?=http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
      if (matches && matches[1]) {
        url = matches[1];
      } else {
        matches = stack.match(/\)@((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
        if (matches && matches[1]) {
          url = matches[1];
        }
      }
    }
    return url;
  };
  /**
 * Get the current script's URL by throwing an `Error` and analyzing it.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getCurrentScriptUrlFromError = function() {
    var url, err;
    try {
      throw new _Error();
    } catch (e) {
      err = e;
    }
    if (err) {
      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);
    }
    return url;
  };
  /**
 * Get the current script's URL.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getCurrentScriptUrl = function() {
    var jsPath, scripts, i;
    if (_document.currentScript && (jsPath = _document.currentScript.src)) {
      return jsPath;
    }
    scripts = _document.getElementsByTagName("script");
    if (scripts.length === 1) {
      return scripts[0].src || undefined;
    }
    if ("readyState" in scripts[0]) {
      for (i = scripts.length; i--; ) {
        if (scripts[i].readyState === "interactive" && (jsPath = scripts[i].src)) {
          return jsPath;
        }
      }
    }
    if (_document.readyState === "loading" && (jsPath = scripts[scripts.length - 1].src)) {
      return jsPath;
    }
    if (jsPath = _getCurrentScriptUrlFromError()) {
      return jsPath;
    }
    return undefined;
  };
  /**
 * Get the unanimous parent directory of ALL script tags.
 * If any script tags are either (a) inline or (b) from differing parent
 * directories, this method must return `undefined`.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getUnanimousScriptParentDir = function() {
    var i, jsDir, jsPath, scripts = _document.getElementsByTagName("script");
    for (i = scripts.length; i--; ) {
      if (!(jsPath = scripts[i].src)) {
        jsDir = null;
        break;
      }
      jsPath = _getDirPathOfUrl(jsPath);
      if (jsDir == null) {
        jsDir = jsPath;
      } else if (jsDir !== jsPath) {
        jsDir = null;
        break;
      }
    }
    return jsDir || undefined;
  };
  /**
 * Get the presumed location of the "ZeroClipboard.swf" file, based on the location
 * of the executing JavaScript file (e.g. "ZeroClipboard.js", etc.).
 *
 * @returns String
 * @private
 */
  var _getDefaultSwfPath = function() {
    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || "";
    return jsDir + "ZeroClipboard.swf";
  };
  /**
 * Keep track of if the page is framed (in an `iframe`). This can never change.
 * @private
 */
  var _pageIsFramed = function() {
    return window.opener == null && (!!window.top && window != window.top || !!window.parent && window != window.parent);
  }();
  /**
 * Keep track of the state of the Flash object.
 * @private
 */
  var _flashState = {
    bridge: null,
    version: "0.0.0",
    pluginType: "unknown",
    disabled: null,
    outdated: null,
    sandboxed: null,
    unavailable: null,
    degraded: null,
    deactivated: null,
    overdue: null,
    ready: null
  };
  /**
 * The minimum Flash Player version required to use ZeroClipboard completely.
 * @readonly
 * @private
 */
  var _minimumFlashVersion = "11.0.0";
  /**
 * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.
 */
  var _zcSwfVersion;
  /**
 * Keep track of all event listener registrations.
 * @private
 */
  var _handlers = {};
  /**
 * Keep track of the currently activated element.
 * @private
 */
  var _currentElement;
  /**
 * Keep track of the element that was activated when a `copy` process started.
 * @private
 */
  var _copyTarget;
  /**
 * Keep track of data for the pending clipboard transaction.
 * @private
 */
  var _clipData = {};
  /**
 * Keep track of data formats for the pending clipboard transaction.
 * @private
 */
  var _clipDataFormatMap = null;
  /**
 * Keep track of the Flash availability check timeout.
 * @private
 */
  var _flashCheckTimeout = 0;
  /**
 * Keep track of SWF network errors interval polling.
 * @private
 */
  var _swfFallbackCheckInterval = 0;
  /**
 * The `message` store for events
 * @private
 */
  var _eventMessages = {
    ready: "Flash communication is established",
    error: {
      "flash-disabled": "Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.",
      "flash-outdated": "Flash is too outdated to support ZeroClipboard",
      "flash-sandboxed": "Attempting to run Flash in a sandboxed iframe, which is impossible",
      "flash-unavailable": "Flash is unable to communicate bidirectionally with JavaScript",
      "flash-degraded": "Flash is unable to preserve data fidelity when communicating with JavaScript",
      "flash-deactivated": "Flash is too outdated for your browser and/or is configured as click-to-activate.\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.",
      "flash-overdue": "Flash communication was established but NOT within the acceptable time limit",
      "version-mismatch": "ZeroClipboard JS version number does not match ZeroClipboard SWF version number",
      "clipboard-error": "At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard",
      "config-mismatch": "ZeroClipboard configuration does not match Flash's reality",
      "swf-not-found": "The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity"
    }
  };
  /**
 * The `name`s of `error` events that can only occur is Flash has at least
 * been able to load the SWF successfully.
 * @private
 */
  var _errorsThatOnlyOccurAfterFlashLoads = [ "flash-unavailable", "flash-degraded", "flash-overdue", "version-mismatch", "config-mismatch", "clipboard-error" ];
  /**
 * The `name`s of `error` events that should likely result in the `_flashState`
 * variable's property values being updated.
 * @private
 */
  var _flashStateErrorNames = [ "flash-disabled", "flash-outdated", "flash-sandboxed", "flash-unavailable", "flash-degraded", "flash-deactivated", "flash-overdue" ];
  /**
 * A RegExp to match the `name` property of `error` events related to Flash.
 * @private
 */
  var _flashStateErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.map(function(errorName) {
    return errorName.replace(/^flash-/, "");
  }).join("|") + ")$");
  /**
 * A RegExp to match the `name` property of `error` events related to Flash,
 * which is enabled.
 * @private
 */
  var _flashStateEnabledErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.slice(1).map(function(errorName) {
    return errorName.replace(/^flash-/, "");
  }).join("|") + ")$");
  /**
 * ZeroClipboard configuration defaults for the Core module.
 * @private
 */
  var _globalConfig = {
    swfPath: _getDefaultSwfPath(),
    trustedDomains: window.location.host ? [ window.location.host ] : [],
    cacheBust: true,
    forceEnhancedClipboard: false,
    flashLoadTimeout: 3e4,
    autoActivate: true,
    bubbleEvents: true,
    containerId: "global-zeroclipboard-html-bridge",
    containerClass: "global-zeroclipboard-container",
    swfObjectId: "global-zeroclipboard-flash-bridge",
    hoverClass: "zeroclipboard-is-hover",
    activeClass: "zeroclipboard-is-active",
    forceHandCursor: false,
    title: null,
    zIndex: 999999999
  };
  /**
 * The underlying implementation of `ZeroClipboard.config`.
 * @private
 */
  var _config = function(options) {
    if (typeof options === "object" && options !== null) {
      for (var prop in options) {
        if (_hasOwn.call(options, prop)) {
          if (/^(?:forceHandCursor|title|zIndex|bubbleEvents)$/.test(prop)) {
            _globalConfig[prop] = options[prop];
          } else if (_flashState.bridge == null) {
            if (prop === "containerId" || prop === "swfObjectId") {
              if (_isValidHtml4Id(options[prop])) {
                _globalConfig[prop] = options[prop];
              } else {
                throw new Error("The specified `" + prop + "` value is not valid as an HTML4 Element ID");
              }
            } else {
              _globalConfig[prop] = options[prop];
            }
          }
        }
      }
    }
    if (typeof options === "string" && options) {
      if (_hasOwn.call(_globalConfig, options)) {
        return _globalConfig[options];
      }
      return;
    }
    return _deepCopy(_globalConfig);
  };
  /**
 * The underlying implementation of `ZeroClipboard.state`.
 * @private
 */
  var _state = function() {
    _detectSandbox();
    return {
      browser: _pick(_navigator, [ "userAgent", "platform", "appName" ]),
      flash: _omit(_flashState, [ "bridge" ]),
      zeroclipboard: {
        version: ZeroClipboard.version,
        config: ZeroClipboard.config()
      }
    };
  };
  /**
 * The underlying implementation of `ZeroClipboard.isFlashUnusable`.
 * @private
 */
  var _isFlashUnusable = function() {
    return !!(_flashState.disabled || _flashState.outdated || _flashState.sandboxed || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);
  };
  /**
 * The underlying implementation of `ZeroClipboard.on`.
 * @private
 */
  var _on = function(eventType, listener) {
    var i, len, events, added = {};
    if (typeof eventType === "string" && eventType) {
      events = eventType.toLowerCase().split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          ZeroClipboard.on(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].replace(/^on/, "");
        added[eventType] = true;
        if (!_handlers[eventType]) {
          _handlers[eventType] = [];
        }
        _handlers[eventType].push(listener);
      }
      if (added.ready && _flashState.ready) {
        ZeroClipboard.emit({
          type: "ready"
        });
      }
      if (added.error) {
        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")] === true) {
            ZeroClipboard.emit({
              type: "error",
              name: _flashStateErrorNames[i]
            });
            break;
          }
        }
        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
          ZeroClipboard.emit({
            type: "error",
            name: "version-mismatch",
            jsVersion: ZeroClipboard.version,
            swfVersion: _zcSwfVersion
          });
        }
      }
    }
    return ZeroClipboard;
  };
  /**
 * The underlying implementation of `ZeroClipboard.off`.
 * @private
 */
  var _off = function(eventType, listener) {
    var i, len, foundIndex, events, perEventHandlers;
    if (arguments.length === 0) {
      events = _keys(_handlers);
    } else if (typeof eventType === "string" && eventType) {
      events = eventType.split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          ZeroClipboard.off(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].toLowerCase().replace(/^on/, "");
        perEventHandlers = _handlers[eventType];
        if (perEventHandlers && perEventHandlers.length) {
          if (listener) {
            foundIndex = perEventHandlers.indexOf(listener);
            while (foundIndex !== -1) {
              perEventHandlers.splice(foundIndex, 1);
              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
            }
          } else {
            perEventHandlers.length = 0;
          }
        }
      }
    }
    return ZeroClipboard;
  };
  /**
 * The underlying implementation of `ZeroClipboard.handlers`.
 * @private
 */
  var _listeners = function(eventType) {
    var copy;
    if (typeof eventType === "string" && eventType) {
      copy = _deepCopy(_handlers[eventType]) || null;
    } else {
      copy = _deepCopy(_handlers);
    }
    return copy;
  };
  /**
 * The underlying implementation of `ZeroClipboard.emit`.
 * @private
 */
  var _emit = function(event) {
    var eventCopy, returnVal, tmp;
    event = _createEvent(event);
    if (!event) {
      return;
    }
    if (_preprocessEvent(event)) {
      return;
    }
    if (event.type === "ready" && _flashState.overdue === true) {
      return ZeroClipboard.emit({
        type: "error",
        name: "flash-overdue"
      });
    }
    eventCopy = _extend({}, event);
    _dispatchCallbacks.call(this, eventCopy);
    if (event.type === "copy") {
      tmp = _mapClipDataToFlash(_clipData);
      returnVal = tmp.data;
      _clipDataFormatMap = tmp.formatMap;
    }
    return returnVal;
  };
  /**
 * The underlying implementation of `ZeroClipboard.create`.
 * @private
 */
  var _create = function() {
    var previousState = _flashState.sandboxed;
    _detectSandbox();
    if (typeof _flashState.ready !== "boolean") {
      _flashState.ready = false;
    }
    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {
      _flashState.ready = false;
      ZeroClipboard.emit({
        type: "error",
        name: "flash-sandboxed"
      });
    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {
      var maxWait = _globalConfig.flashLoadTimeout;
      if (typeof maxWait === "number" && maxWait >= 0) {
        _flashCheckTimeout = _setTimeout(function() {
          if (typeof _flashState.deactivated !== "boolean") {
            _flashState.deactivated = true;
          }
          if (_flashState.deactivated === true) {
            ZeroClipboard.emit({
              type: "error",
              name: "flash-deactivated"
            });
          }
        }, maxWait);
      }
      _flashState.overdue = false;
      _embedSwf();
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.destroy`.
 * @private
 */
  var _destroy = function() {
    ZeroClipboard.clearData();
    ZeroClipboard.blur();
    ZeroClipboard.emit("destroy");
    _unembedSwf();
    ZeroClipboard.off();
  };
  /**
 * The underlying implementation of `ZeroClipboard.setData`.
 * @private
 */
  var _setData = function(format, data) {
    var dataObj;
    if (typeof format === "object" && format && typeof data === "undefined") {
      dataObj = format;
      ZeroClipboard.clearData();
    } else if (typeof format === "string" && format) {
      dataObj = {};
      dataObj[format] = data;
    } else {
      return;
    }
    for (var dataFormat in dataObj) {
      if (typeof dataFormat === "string" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === "string" && dataObj[dataFormat]) {
        _clipData[dataFormat] = dataObj[dataFormat];
      }
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.clearData`.
 * @private
 */
  var _clearData = function(format) {
    if (typeof format === "undefined") {
      _deleteOwnProperties(_clipData);
      _clipDataFormatMap = null;
    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
      delete _clipData[format];
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.getData`.
 * @private
 */
  var _getData = function(format) {
    if (typeof format === "undefined") {
      return _deepCopy(_clipData);
    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
      return _clipData[format];
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.
 * @private
 */
  var _focus = function(element) {
    if (!(element && element.nodeType === 1)) {
      return;
    }
    if (_currentElement) {
      _removeClass(_currentElement, _globalConfig.activeClass);
      if (_currentElement !== element) {
        _removeClass(_currentElement, _globalConfig.hoverClass);
      }
    }
    _currentElement = element;
    _addClass(element, _globalConfig.hoverClass);
    var newTitle = element.getAttribute("title") || _globalConfig.title;
    if (typeof newTitle === "string" && newTitle) {
      var htmlBridge = _getHtmlBridge(_flashState.bridge);
      if (htmlBridge) {
        htmlBridge.setAttribute("title", newTitle);
      }
    }
    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, "cursor") === "pointer";
    _setHandCursor(useHandCursor);
    _reposition();
  };
  /**
 * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.
 * @private
 */
  var _blur = function() {
    var htmlBridge = _getHtmlBridge(_flashState.bridge);
    if (htmlBridge) {
      htmlBridge.removeAttribute("title");
      htmlBridge.style.left = "0px";
      htmlBridge.style.top = "-9999px";
      htmlBridge.style.width = "1px";
      htmlBridge.style.height = "1px";
    }
    if (_currentElement) {
      _removeClass(_currentElement, _globalConfig.hoverClass);
      _removeClass(_currentElement, _globalConfig.activeClass);
      _currentElement = null;
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.activeElement`.
 * @private
 */
  var _activeElement = function() {
    return _currentElement || null;
  };
  /**
 * Check if a value is a valid HTML4 `ID` or `Name` token.
 * @private
 */
  var _isValidHtml4Id = function(id) {
    return typeof id === "string" && id && /^[A-Za-z][A-Za-z0-9_:\-\.]*$/.test(id);
  };
  /**
 * Create or update an `event` object, based on the `eventType`.
 * @private
 */
  var _createEvent = function(event) {
    var eventType;
    if (typeof event === "string" && event) {
      eventType = event;
      event = {};
    } else if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
      eventType = event.type;
    }
    if (!eventType) {
      return;
    }
    eventType = eventType.toLowerCase();
    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === "error" && event.name === "clipboard-error")) {
      event.target = _copyTarget;
    }
    _extend(event, {
      type: eventType,
      target: event.target || _currentElement || null,
      relatedTarget: event.relatedTarget || null,
      currentTarget: _flashState && _flashState.bridge || null,
      timeStamp: event.timeStamp || _now() || null
    });
    var msg = _eventMessages[event.type];
    if (event.type === "error" && event.name && msg) {
      msg = msg[event.name];
    }
    if (msg) {
      event.message = msg;
    }
    if (event.type === "ready") {
      _extend(event, {
        target: null,
        version: _flashState.version
      });
    }
    if (event.type === "error") {
      if (_flashStateErrorNameMatchingRegex.test(event.name)) {
        _extend(event, {
          target: null,
          minimumVersion: _minimumFlashVersion
        });
      }
      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {
        _extend(event, {
          version: _flashState.version
        });
      }
    }
    if (event.type === "copy") {
      event.clipboardData = {
        setData: ZeroClipboard.setData,
        clearData: ZeroClipboard.clearData
      };
    }
    if (event.type === "aftercopy") {
      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);
    }
    if (event.target && !event.relatedTarget) {
      event.relatedTarget = _getRelatedTarget(event.target);
    }
    return _addMouseData(event);
  };
  /**
 * Get a relatedTarget from the target's `data-clipboard-target` attribute
 * @private
 */
  var _getRelatedTarget = function(targetEl) {
    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute("data-clipboard-target");
    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;
  };
  /**
 * Add element and position data to `MouseEvent` instances
 * @private
 */
  var _addMouseData = function(event) {
    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
      var srcElement = event.target;
      var fromElement = event.type === "_mouseover" && event.relatedTarget ? event.relatedTarget : undefined;
      var toElement = event.type === "_mouseout" && event.relatedTarget ? event.relatedTarget : undefined;
      var pos = _getElementPosition(srcElement);
      var screenLeft = _window.screenLeft || _window.screenX || 0;
      var screenTop = _window.screenTop || _window.screenY || 0;
      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;
      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;
      var pageX = pos.left + (typeof event._stageX === "number" ? event._stageX : 0);
      var pageY = pos.top + (typeof event._stageY === "number" ? event._stageY : 0);
      var clientX = pageX - scrollLeft;
      var clientY = pageY - scrollTop;
      var screenX = screenLeft + clientX;
      var screenY = screenTop + clientY;
      var moveX = typeof event.movementX === "number" ? event.movementX : 0;
      var moveY = typeof event.movementY === "number" ? event.movementY : 0;
      delete event._stageX;
      delete event._stageY;
      _extend(event, {
        srcElement: srcElement,
        fromElement: fromElement,
        toElement: toElement,
        screenX: screenX,
        screenY: screenY,
        pageX: pageX,
        pageY: pageY,
        clientX: clientX,
        clientY: clientY,
        x: clientX,
        y: clientY,
        movementX: moveX,
        movementY: moveY,
        offsetX: 0,
        offsetY: 0,
        layerX: 0,
        layerY: 0
      });
    }
    return event;
  };
  /**
 * Determine if an event's registered handlers should be execute synchronously or asynchronously.
 *
 * @returns {boolean}
 * @private
 */
  var _shouldPerformAsync = function(event) {
    var eventType = event && typeof event.type === "string" && event.type || "";
    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);
  };
  /**
 * Control if a callback should be executed asynchronously or not.
 *
 * @returns `undefined`
 * @private
 */
  var _dispatchCallback = function(func, context, args, async) {
    if (async) {
      _setTimeout(function() {
        func.apply(context, args);
      }, 0);
    } else {
      func.apply(context, args);
    }
  };
  /**
 * Handle the actual dispatching of events to client instances.
 *
 * @returns `undefined`
 * @private
 */
  var _dispatchCallbacks = function(event) {
    if (!(typeof event === "object" && event && event.type)) {
      return;
    }
    var async = _shouldPerformAsync(event);
    var wildcardTypeHandlers = _handlers["*"] || [];
    var specificTypeHandlers = _handlers[event.type] || [];
    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
    if (handlers && handlers.length) {
      var i, len, func, context, eventCopy, originalContext = this;
      for (i = 0, len = handlers.length; i < len; i++) {
        func = handlers[i];
        context = originalContext;
        if (typeof func === "string" && typeof _window[func] === "function") {
          func = _window[func];
        }
        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
          context = func;
          func = func.handleEvent;
        }
        if (typeof func === "function") {
          eventCopy = _extend({}, event);
          _dispatchCallback(func, context, [ eventCopy ], async);
        }
      }
    }
    return this;
  };
  /**
 * Check an `error` event's `name` property to see if Flash has
 * already loaded, which rules out possible `iframe` sandboxing.
 * @private
 */
  var _getSandboxStatusFromErrorEvent = function(event) {
    var isSandboxed = null;
    if (_pageIsFramed === false || event && event.type === "error" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {
      isSandboxed = false;
    }
    return isSandboxed;
  };
  /**
 * Preprocess any special behaviors, reactions, or state changes after receiving this event.
 * Executes only once per event emitted, NOT once per client.
 * @private
 */
  var _preprocessEvent = function(event) {
    var element = event.target || _currentElement || null;
    var sourceIsSwf = event._source === "swf";
    delete event._source;
    switch (event.type) {
     case "error":
      var isSandboxed = event.name === "flash-sandboxed" || _getSandboxStatusFromErrorEvent(event);
      if (typeof isSandboxed === "boolean") {
        _flashState.sandboxed = isSandboxed;
      }
      if (_flashStateErrorNames.indexOf(event.name) !== -1) {
        _extend(_flashState, {
          disabled: event.name === "flash-disabled",
          outdated: event.name === "flash-outdated",
          unavailable: event.name === "flash-unavailable",
          degraded: event.name === "flash-degraded",
          deactivated: event.name === "flash-deactivated",
          overdue: event.name === "flash-overdue",
          ready: false
        });
      } else if (event.name === "version-mismatch") {
        _zcSwfVersion = event.swfVersion;
        _extend(_flashState, {
          disabled: false,
          outdated: false,
          unavailable: false,
          degraded: false,
          deactivated: false,
          overdue: false,
          ready: false
        });
      }
      _clearTimeoutsAndPolling();
      break;

     case "ready":
      _zcSwfVersion = event.swfVersion;
      var wasDeactivated = _flashState.deactivated === true;
      _extend(_flashState, {
        disabled: false,
        outdated: false,
        sandboxed: false,
        unavailable: false,
        degraded: false,
        deactivated: false,
        overdue: wasDeactivated,
        ready: !wasDeactivated
      });
      _clearTimeoutsAndPolling();
      break;

     case "beforecopy":
      _copyTarget = element;
      break;

     case "copy":
      var textContent, htmlContent, targetEl = event.relatedTarget;
      if (!(_clipData["text/html"] || _clipData["text/plain"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {
        event.clipboardData.clearData();
        event.clipboardData.setData("text/plain", textContent);
        if (htmlContent !== textContent) {
          event.clipboardData.setData("text/html", htmlContent);
        }
      } else if (!_clipData["text/plain"] && event.target && (textContent = event.target.getAttribute("data-clipboard-text"))) {
        event.clipboardData.clearData();
        event.clipboardData.setData("text/plain", textContent);
      }
      break;

     case "aftercopy":
      _queueEmitClipboardErrors(event);
      ZeroClipboard.clearData();
      if (element && element !== _safeActiveElement() && element.focus) {
        element.focus();
      }
      break;

     case "_mouseover":
      ZeroClipboard.focus(element);
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
          _fireMouseEvent(_extend({}, event, {
            type: "mouseenter",
            bubbles: false,
            cancelable: false
          }));
        }
        _fireMouseEvent(_extend({}, event, {
          type: "mouseover"
        }));
      }
      break;

     case "_mouseout":
      ZeroClipboard.blur();
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
          _fireMouseEvent(_extend({}, event, {
            type: "mouseleave",
            bubbles: false,
            cancelable: false
          }));
        }
        _fireMouseEvent(_extend({}, event, {
          type: "mouseout"
        }));
      }
      break;

     case "_mousedown":
      _addClass(element, _globalConfig.activeClass);
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;

     case "_mouseup":
      _removeClass(element, _globalConfig.activeClass);
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;

     case "_click":
      _copyTarget = null;
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;

     case "_mousemove":
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;
    }
    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
      return true;
    }
  };
  /**
 * Check an "aftercopy" event for clipboard errors and emit a corresponding "error" event.
 * @private
 */
  var _queueEmitClipboardErrors = function(aftercopyEvent) {
    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {
      var errorEvent = _deepCopy(aftercopyEvent);
      _extend(errorEvent, {
        type: "error",
        name: "clipboard-error"
      });
      delete errorEvent.success;
      _setTimeout(function() {
        ZeroClipboard.emit(errorEvent);
      }, 0);
    }
  };
  /**
 * Dispatch a synthetic MouseEvent.
 *
 * @returns `undefined`
 * @private
 */
  var _fireMouseEvent = function(event) {
    if (!(event && typeof event.type === "string" && event)) {
      return;
    }
    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {
      view: doc.defaultView || _window,
      canBubble: true,
      cancelable: true,
      detail: event.type === "click" ? 1 : 0,
      button: typeof event.which === "number" ? event.which - 1 : typeof event.button === "number" ? event.button : doc.createEvent ? 0 : 1
    }, args = _extend(defaults, event);
    if (!target) {
      return;
    }
    if (doc.createEvent && target.dispatchEvent) {
      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];
      e = doc.createEvent("MouseEvents");
      if (e.initMouseEvent) {
        e.initMouseEvent.apply(e, args);
        e._source = "js";
        target.dispatchEvent(e);
      }
    }
  };
  /**
 * Continuously poll the DOM until either:
 *  (a) the fallback content becomes visible, or
 *  (b) we receive an event from SWF (handled elsewhere)
 *
 * IMPORTANT:
 * This is NOT a necessary check but it can result in significantly faster
 * detection of bad `swfPath` configuration and/or network/server issues [in
 * supported browsers] than waiting for the entire `flashLoadTimeout` duration
 * to elapse before detecting that the SWF cannot be loaded. The detection
 * duration can be anywhere from 10-30 times faster [in supported browsers] by
 * using this approach.
 *
 * @returns `undefined`
 * @private
 */
  var _watchForSwfFallbackContent = function() {
    var maxWait = _globalConfig.flashLoadTimeout;
    if (typeof maxWait === "number" && maxWait >= 0) {
      var pollWait = Math.min(1e3, maxWait / 10);
      var fallbackContentId = _globalConfig.swfObjectId + "_fallbackContent";
      _swfFallbackCheckInterval = _setInterval(function() {
        var el = _document.getElementById(fallbackContentId);
        if (_isElementVisible(el)) {
          _clearTimeoutsAndPolling();
          _flashState.deactivated = null;
          ZeroClipboard.emit({
            type: "error",
            name: "swf-not-found"
          });
        }
      }, pollWait);
    }
  };
  /**
 * Create the HTML bridge element to embed the Flash object into.
 * @private
 */
  var _createHtmlBridge = function() {
    var container = _document.createElement("div");
    container.id = _globalConfig.containerId;
    container.className = _globalConfig.containerClass;
    container.style.position = "absolute";
    container.style.left = "0px";
    container.style.top = "-9999px";
    container.style.width = "1px";
    container.style.height = "1px";
    container.style.zIndex = "" + _getSafeZIndex(_globalConfig.zIndex);
    return container;
  };
  /**
 * Get the HTML element container that wraps the Flash bridge object/element.
 * @private
 */
  var _getHtmlBridge = function(flashBridge) {
    var htmlBridge = flashBridge && flashBridge.parentNode;
    while (htmlBridge && htmlBridge.nodeName === "OBJECT" && htmlBridge.parentNode) {
      htmlBridge = htmlBridge.parentNode;
    }
    return htmlBridge || null;
  };
  /**
 * Create the SWF object.
 *
 * @returns The SWF object reference.
 * @private
 */
  var _embedSwf = function() {
    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);
    if (!flashBridge) {
      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);
      var allowNetworking = allowScriptAccess === "never" ? "none" : "all";
      var flashvars = _vars(_extend({
        jsVersion: ZeroClipboard.version
      }, _globalConfig));
      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);
      container = _createHtmlBridge();
      var divToBeReplaced = _document.createElement("div");
      container.appendChild(divToBeReplaced);
      _document.body.appendChild(container);
      var tmpDiv = _document.createElement("div");
      var usingActiveX = _flashState.pluginType === "activex";
      tmpDiv.innerHTML = '<object id="' + _globalConfig.swfObjectId + '" name="' + _globalConfig.swfObjectId + '" ' + 'width="100%" height="100%" ' + (usingActiveX ? 'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"' : 'type="application/x-shockwave-flash" data="' + swfUrl + '"') + ">" + (usingActiveX ? '<param name="movie" value="' + swfUrl + '"/>' : "") + '<param name="allowScriptAccess" value="' + allowScriptAccess + '"/>' + '<param name="allowNetworking" value="' + allowNetworking + '"/>' + '<param name="menu" value="false"/>' + '<param name="wmode" value="transparent"/>' + '<param name="flashvars" value="' + flashvars + '"/>' + '<div id="' + _globalConfig.swfObjectId + '_fallbackContent">&nbsp;</div>' + "</object>";
      flashBridge = tmpDiv.firstChild;
      tmpDiv = null;
      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;
      container.replaceChild(flashBridge, divToBeReplaced);
      _watchForSwfFallbackContent();
    }
    if (!flashBridge) {
      flashBridge = _document[_globalConfig.swfObjectId];
      if (flashBridge && (len = flashBridge.length)) {
        flashBridge = flashBridge[len - 1];
      }
      if (!flashBridge && container) {
        flashBridge = container.firstChild;
      }
    }
    _flashState.bridge = flashBridge || null;
    return flashBridge;
  };
  /**
 * Destroy the SWF object.
 * @private
 */
  var _unembedSwf = function() {
    var flashBridge = _flashState.bridge;
    if (flashBridge) {
      var htmlBridge = _getHtmlBridge(flashBridge);
      if (htmlBridge) {
        if (_flashState.pluginType === "activex" && "readyState" in flashBridge) {
          flashBridge.style.display = "none";
          (function removeSwfFromIE() {
            if (flashBridge.readyState === 4) {
              for (var prop in flashBridge) {
                if (typeof flashBridge[prop] === "function") {
                  flashBridge[prop] = null;
                }
              }
              if (flashBridge.parentNode) {
                flashBridge.parentNode.removeChild(flashBridge);
              }
              if (htmlBridge.parentNode) {
                htmlBridge.parentNode.removeChild(htmlBridge);
              }
            } else {
              _setTimeout(removeSwfFromIE, 10);
            }
          })();
        } else {
          if (flashBridge.parentNode) {
            flashBridge.parentNode.removeChild(flashBridge);
          }
          if (htmlBridge.parentNode) {
            htmlBridge.parentNode.removeChild(htmlBridge);
          }
        }
      }
      _clearTimeoutsAndPolling();
      _flashState.ready = null;
      _flashState.bridge = null;
      _flashState.deactivated = null;
      _zcSwfVersion = undefined;
    }
  };
  /**
 * Map the data format names of the "clipData" to Flash-friendly names.
 *
 * @returns A new transformed object.
 * @private
 */
  var _mapClipDataToFlash = function(clipData) {
    var newClipData = {}, formatMap = {};
    if (!(typeof clipData === "object" && clipData)) {
      return;
    }
    for (var dataFormat in clipData) {
      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === "string" && clipData[dataFormat]) {
        switch (dataFormat.toLowerCase()) {
         case "text/plain":
         case "text":
         case "air:text":
         case "flash:text":
          newClipData.text = clipData[dataFormat];
          formatMap.text = dataFormat;
          break;

         case "text/html":
         case "html":
         case "air:html":
         case "flash:html":
          newClipData.html = clipData[dataFormat];
          formatMap.html = dataFormat;
          break;

         case "application/rtf":
         case "text/rtf":
         case "rtf":
         case "richtext":
         case "air:rtf":
         case "flash:rtf":
          newClipData.rtf = clipData[dataFormat];
          formatMap.rtf = dataFormat;
          break;

         default:
          break;
        }
      }
    }
    return {
      data: newClipData,
      formatMap: formatMap
    };
  };
  /**
 * Map the data format names from Flash-friendly names back to their original "clipData" names (via a format mapping).
 *
 * @returns A new transformed object.
 * @private
 */
  var _mapClipResultsFromFlash = function(clipResults, formatMap) {
    if (!(typeof clipResults === "object" && clipResults && typeof formatMap === "object" && formatMap)) {
      return clipResults;
    }
    var newResults = {};
    for (var prop in clipResults) {
      if (_hasOwn.call(clipResults, prop)) {
        if (prop === "errors") {
          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];
          for (var i = 0, len = newResults[prop].length; i < len; i++) {
            newResults[prop][i].format = formatMap[newResults[prop][i].format];
          }
        } else if (prop !== "success" && prop !== "data") {
          newResults[prop] = clipResults[prop];
        } else {
          newResults[prop] = {};
          var tmpHash = clipResults[prop];
          for (var dataFormat in tmpHash) {
            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {
              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];
            }
          }
        }
      }
    }
    return newResults;
  };
  /**
 * Will look at a path, and will create a "?noCache={time}" or "&noCache={time}"
 * query param string to return. Does NOT append that string to the original path.
 * This is useful because ExternalInterface often breaks when a Flash SWF is cached.
 *
 * @returns The `noCache` query param with necessary "?"/"&" prefix.
 * @private
 */
  var _cacheBust = function(path, options) {
    var cacheBust = options == null || options && options.cacheBust === true;
    if (cacheBust) {
      return (path.indexOf("?") === -1 ? "?" : "&") + "noCache=" + _now();
    } else {
      return "";
    }
  };
  /**
 * Creates a query string for the FlashVars param.
 * Does NOT include the cache-busting query param.
 *
 * @returns FlashVars query string
 * @private
 */
  var _vars = function(options) {
    var i, len, domain, domains, str = "", trustedOriginsExpanded = [];
    if (options.trustedDomains) {
      if (typeof options.trustedDomains === "string") {
        domains = [ options.trustedDomains ];
      } else if (typeof options.trustedDomains === "object" && "length" in options.trustedDomains) {
        domains = options.trustedDomains;
      }
    }
    if (domains && domains.length) {
      for (i = 0, len = domains.length; i < len; i++) {
        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === "string") {
          domain = _extractDomain(domains[i]);
          if (!domain) {
            continue;
          }
          if (domain === "*") {
            trustedOriginsExpanded.length = 0;
            trustedOriginsExpanded.push(domain);
            break;
          }
          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, "//" + domain, _window.location.protocol + "//" + domain ]);
        }
      }
    }
    if (trustedOriginsExpanded.length) {
      str += "trustedOrigins=" + _encodeURIComponent(trustedOriginsExpanded.join(","));
    }
    if (options.forceEnhancedClipboard === true) {
      str += (str ? "&" : "") + "forceEnhancedClipboard=true";
    }
    if (typeof options.swfObjectId === "string" && options.swfObjectId) {
      str += (str ? "&" : "") + "swfObjectId=" + _encodeURIComponent(options.swfObjectId);
    }
    if (typeof options.jsVersion === "string" && options.jsVersion) {
      str += (str ? "&" : "") + "jsVersion=" + _encodeURIComponent(options.jsVersion);
    }
    return str;
  };
  /**
 * Extract the domain (e.g. "github.com") from an origin (e.g. "https://github.com") or
 * URL (e.g. "https://github.com/zeroclipboard/zeroclipboard/").
 *
 * @returns the domain
 * @private
 */
  var _extractDomain = function(originOrUrl) {
    if (originOrUrl == null || originOrUrl === "") {
      return null;
    }
    originOrUrl = originOrUrl.replace(/^\s+|\s+$/g, "");
    if (originOrUrl === "") {
      return null;
    }
    var protocolIndex = originOrUrl.indexOf("//");
    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);
    var pathIndex = originOrUrl.indexOf("/");
    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);
    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === ".swf") {
      return null;
    }
    return originOrUrl || null;
  };
  /**
 * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.
 *
 * @returns The appropriate script access level.
 * @private
 */
  var _determineScriptAccess = function() {
    var _extractAllDomains = function(origins) {
      var i, len, tmp, resultsArray = [];
      if (typeof origins === "string") {
        origins = [ origins ];
      }
      if (!(typeof origins === "object" && origins && typeof origins.length === "number")) {
        return resultsArray;
      }
      for (i = 0, len = origins.length; i < len; i++) {
        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {
          if (tmp === "*") {
            resultsArray.length = 0;
            resultsArray.push("*");
            break;
          }
          if (resultsArray.indexOf(tmp) === -1) {
            resultsArray.push(tmp);
          }
        }
      }
      return resultsArray;
    };
    return function(currentDomain, configOptions) {
      var swfDomain = _extractDomain(configOptions.swfPath);
      if (swfDomain === null) {
        swfDomain = currentDomain;
      }
      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);
      var len = trustedDomains.length;
      if (len > 0) {
        if (len === 1 && trustedDomains[0] === "*") {
          return "always";
        }
        if (trustedDomains.indexOf(currentDomain) !== -1) {
          if (len === 1 && currentDomain === swfDomain) {
            return "sameDomain";
          }
          return "always";
        }
      }
      return "never";
    };
  }();
  /**
 * Get the currently active/focused DOM element.
 *
 * @returns the currently active/focused element, or `null`
 * @private
 */
  var _safeActiveElement = function() {
    try {
      return _document.activeElement;
    } catch (err) {
      return null;
    }
  };
  /**
 * Add a class to an element, if it doesn't already have it.
 *
 * @returns The element, with its new class added.
 * @private
 */
  var _addClass = function(element, value) {
    var c, cl, className, classNames = [];
    if (typeof value === "string" && value) {
      classNames = value.split(/\s+/);
    }
    if (element && element.nodeType === 1 && classNames.length > 0) {
      if (element.classList) {
        for (c = 0, cl = classNames.length; c < cl; c++) {
          element.classList.add(classNames[c]);
        }
      } else if (element.hasOwnProperty("className")) {
        className = " " + element.className + " ";
        for (c = 0, cl = classNames.length; c < cl; c++) {
          if (className.indexOf(" " + classNames[c] + " ") === -1) {
            className += classNames[c] + " ";
          }
        }
        element.className = className.replace(/^\s+|\s+$/g, "");
      }
    }
    return element;
  };
  /**
 * Remove a class from an element, if it has it.
 *
 * @returns The element, with its class removed.
 * @private
 */
  var _removeClass = function(element, value) {
    var c, cl, className, classNames = [];
    if (typeof value === "string" && value) {
      classNames = value.split(/\s+/);
    }
    if (element && element.nodeType === 1 && classNames.length > 0) {
      if (element.classList && element.classList.length > 0) {
        for (c = 0, cl = classNames.length; c < cl; c++) {
          element.classList.remove(classNames[c]);
        }
      } else if (element.className) {
        className = (" " + element.className + " ").replace(/[\r\n\t]/g, " ");
        for (c = 0, cl = classNames.length; c < cl; c++) {
          className = className.replace(" " + classNames[c] + " ", " ");
        }
        element.className = className.replace(/^\s+|\s+$/g, "");
      }
    }
    return element;
  };
  /**
 * Attempt to interpret the element's CSS styling. If `prop` is `"cursor"`,
 * then we assume that it should be a hand ("pointer") cursor if the element
 * is an anchor element ("a" tag).
 *
 * @returns The computed style property.
 * @private
 */
  var _getStyle = function(el, prop) {
    var value = _getComputedStyle(el, null).getPropertyValue(prop);
    if (prop === "cursor") {
      if (!value || value === "auto") {
        if (el.nodeName === "A") {
          return "pointer";
        }
      }
    }
    return value;
  };
  /**
 * Get the absolutely positioned coordinates of a DOM element.
 *
 * @returns Object containing the element's position, width, and height.
 * @private
 */
  var _getElementPosition = function(el) {
    var pos = {
      left: 0,
      top: 0,
      width: 0,
      height: 0
    };
    if (el.getBoundingClientRect) {
      var elRect = el.getBoundingClientRect();
      var pageXOffset = _window.pageXOffset;
      var pageYOffset = _window.pageYOffset;
      var leftBorderWidth = _document.documentElement.clientLeft || 0;
      var topBorderWidth = _document.documentElement.clientTop || 0;
      var leftBodyOffset = 0;
      var topBodyOffset = 0;
      if (_getStyle(_document.body, "position") === "relative") {
        var bodyRect = _document.body.getBoundingClientRect();
        var htmlRect = _document.documentElement.getBoundingClientRect();
        leftBodyOffset = bodyRect.left - htmlRect.left || 0;
        topBodyOffset = bodyRect.top - htmlRect.top || 0;
      }
      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;
      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;
      pos.width = "width" in elRect ? elRect.width : elRect.right - elRect.left;
      pos.height = "height" in elRect ? elRect.height : elRect.bottom - elRect.top;
    }
    return pos;
  };
  /**
 * Determine is an element is visible somewhere within the document (page).
 *
 * @returns Boolean
 * @private
 */
  var _isElementVisible = function(el) {
    if (!el) {
      return false;
    }
    var styles = _getComputedStyle(el, null);
    var hasCssHeight = _parseFloat(styles.height) > 0;
    var hasCssWidth = _parseFloat(styles.width) > 0;
    var hasCssTop = _parseFloat(styles.top) >= 0;
    var hasCssLeft = _parseFloat(styles.left) >= 0;
    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;
    var rect = cssKnows ? null : _getElementPosition(el);
    var isVisible = styles.display !== "none" && styles.visibility !== "collapse" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));
    return isVisible;
  };
  /**
 * Clear all existing timeouts and interval polling delegates.
 *
 * @returns `undefined`
 * @private
 */
  var _clearTimeoutsAndPolling = function() {
    _clearTimeout(_flashCheckTimeout);
    _flashCheckTimeout = 0;
    _clearInterval(_swfFallbackCheckInterval);
    _swfFallbackCheckInterval = 0;
  };
  /**
 * Reposition the Flash object to cover the currently activated element.
 *
 * @returns `undefined`
 * @private
 */
  var _reposition = function() {
    var htmlBridge;
    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {
      var pos = _getElementPosition(_currentElement);
      _extend(htmlBridge.style, {
        width: pos.width + "px",
        height: pos.height + "px",
        top: pos.top + "px",
        left: pos.left + "px",
        zIndex: "" + _getSafeZIndex(_globalConfig.zIndex)
      });
    }
  };
  /**
 * Sends a signal to the Flash object to display the hand cursor if `true`.
 *
 * @returns `undefined`
 * @private
 */
  var _setHandCursor = function(enabled) {
    if (_flashState.ready === true) {
      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === "function") {
        _flashState.bridge.setHandCursor(enabled);
      } else {
        _flashState.ready = false;
      }
    }
  };
  /**
 * Get a safe value for `zIndex`
 *
 * @returns an integer, or "auto"
 * @private
 */
  var _getSafeZIndex = function(val) {
    if (/^(?:auto|inherit)$/.test(val)) {
      return val;
    }
    var zIndex;
    if (typeof val === "number" && !_isNaN(val)) {
      zIndex = val;
    } else if (typeof val === "string") {
      zIndex = _getSafeZIndex(_parseInt(val, 10));
    }
    return typeof zIndex === "number" ? zIndex : "auto";
  };
  /**
 * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.
 * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.
 *
 * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}
 * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}
 * @see {@link http://zeroclipboard.org/test-iframes.html}
 *
 * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain) 
 * @private
 */
  var _detectSandbox = function(doNotReassessFlashSupport) {
    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;
    doNotReassessFlashSupport = doNotReassessFlashSupport === true;
    if (_pageIsFramed === false) {
      isSandboxed = false;
    } else {
      try {
        frame = window.frameElement || null;
      } catch (e) {
        frameError = {
          name: e.name,
          message: e.message
        };
      }
      if (frame && frame.nodeType === 1 && frame.nodeName === "IFRAME") {
        try {
          isSandboxed = frame.hasAttribute("sandbox");
        } catch (e) {
          isSandboxed = null;
        }
      } else {
        try {
          effectiveScriptOrigin = document.domain || null;
        } catch (e) {
          effectiveScriptOrigin = null;
        }
        if (effectiveScriptOrigin === null || frameError && frameError.name === "SecurityError" && /(^|[\s\(\[@])sandbox(es|ed|ing|[\s\.,!\)\]@]|$)/.test(frameError.message.toLowerCase())) {
          isSandboxed = true;
        }
      }
    }
    _flashState.sandboxed = isSandboxed;
    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {
      _detectFlashSupport(_ActiveXObject);
    }
    return isSandboxed;
  };
  /**
 * Detect the Flash Player status, version, and plugin type.
 *
 * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}
 * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}
 *
 * @returns `undefined`
 * @private
 */
  var _detectFlashSupport = function(ActiveXObject) {
    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = "";
    /**
   * Derived from Apple's suggested sniffer.
   * @param {String} desc e.g. "Shockwave Flash 7.0 r61"
   * @returns {String} "7.0.61"
   * @private
   */
    function parseFlashVersion(desc) {
      var matches = desc.match(/[\d]+/g);
      matches.length = 3;
      return matches.join(".");
    }
    function isPepperFlash(flashPlayerFileName) {
      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\.dll|libpepflashplayer\.so|pepperflashplayer\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === "chrome.plugin");
    }
    function inspectPlugin(plugin) {
      if (plugin) {
        hasFlash = true;
        if (plugin.version) {
          flashVersion = parseFlashVersion(plugin.version);
        }
        if (!flashVersion && plugin.description) {
          flashVersion = parseFlashVersion(plugin.description);
        }
        if (plugin.filename) {
          isPPAPI = isPepperFlash(plugin.filename);
        }
      }
    }
    if (_navigator.plugins && _navigator.plugins.length) {
      plugin = _navigator.plugins["Shockwave Flash"];
      inspectPlugin(plugin);
      if (_navigator.plugins["Shockwave Flash 2.0"]) {
        hasFlash = true;
        flashVersion = "2.0.0.11";
      }
    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {
      mimeType = _navigator.mimeTypes["application/x-shockwave-flash"];
      plugin = mimeType && mimeType.enabledPlugin;
      inspectPlugin(plugin);
    } else if (typeof ActiveXObject !== "undefined") {
      isActiveX = true;
      try {
        ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
        hasFlash = true;
        flashVersion = parseFlashVersion(ax.GetVariable("$version"));
      } catch (e1) {
        try {
          ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
          hasFlash = true;
          flashVersion = "6.0.21";
        } catch (e2) {
          try {
            ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
            hasFlash = true;
            flashVersion = parseFlashVersion(ax.GetVariable("$version"));
          } catch (e3) {
            isActiveX = false;
          }
        }
      }
    }
    _flashState.disabled = hasFlash !== true;
    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);
    _flashState.version = flashVersion || "0.0.0";
    _flashState.pluginType = isPPAPI ? "pepper" : isActiveX ? "activex" : hasFlash ? "netscape" : "unknown";
  };
  /**
 * Invoke the Flash detection algorithms immediately upon inclusion so we're not waiting later.
 */
  _detectFlashSupport(_ActiveXObject);
  /**
 * Always assess the `sandboxed` state of the page at important Flash-related moments.
 */
  _detectSandbox(true);
  /**
 * A shell constructor for `ZeroClipboard` client instances.
 *
 * @constructor
 */
  var ZeroClipboard = function() {
    if (!(this instanceof ZeroClipboard)) {
      return new ZeroClipboard();
    }
    if (typeof ZeroClipboard._createClient === "function") {
      ZeroClipboard._createClient.apply(this, _args(arguments));
    }
  };
  /**
 * The ZeroClipboard library's version number.
 *
 * @static
 * @readonly
 * @property {string}
 */
  _defineProperty(ZeroClipboard, "version", {
    value: "2.2.0",
    writable: false,
    configurable: true,
    enumerable: true
  });
  /**
 * Update or get a copy of the ZeroClipboard global configuration.
 * Returns a copy of the current/updated configuration.
 *
 * @returns Object
 * @static
 */
  ZeroClipboard.config = function() {
    return _config.apply(this, _args(arguments));
  };
  /**
 * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.
 *
 * @returns Object
 * @static
 */
  ZeroClipboard.state = function() {
    return _state.apply(this, _args(arguments));
  };
  /**
 * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.
 *
 * @returns Boolean
 * @static
 */
  ZeroClipboard.isFlashUnusable = function() {
    return _isFlashUnusable.apply(this, _args(arguments));
  };
  /**
 * Register an event listener.
 *
 * @returns `ZeroClipboard`
 * @static
 */
  ZeroClipboard.on = function() {
    return _on.apply(this, _args(arguments));
  };
  /**
 * Unregister an event listener.
 * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.
 * If no `eventType` is provided, it will unregister all listeners for every event type.
 *
 * @returns `ZeroClipboard`
 * @static
 */
  ZeroClipboard.off = function() {
    return _off.apply(this, _args(arguments));
  };
  /**
 * Retrieve event listeners for an `eventType`.
 * If no `eventType` is provided, it will retrieve all listeners for every event type.
 *
 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
 */
  ZeroClipboard.handlers = function() {
    return _listeners.apply(this, _args(arguments));
  };
  /**
 * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.
 *
 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
 * @static
 */
  ZeroClipboard.emit = function() {
    return _emit.apply(this, _args(arguments));
  };
  /**
 * Create and embed the Flash object.
 *
 * @returns The Flash object
 * @static
 */
  ZeroClipboard.create = function() {
    return _create.apply(this, _args(arguments));
  };
  /**
 * Self-destruct and clean up everything, including the embedded Flash object.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.destroy = function() {
    return _destroy.apply(this, _args(arguments));
  };
  /**
 * Set the pending data for clipboard injection.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.setData = function() {
    return _setData.apply(this, _args(arguments));
  };
  /**
 * Clear the pending data for clipboard injection.
 * If no `format` is provided, all pending data formats will be cleared.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.clearData = function() {
    return _clearData.apply(this, _args(arguments));
  };
  /**
 * Get a copy of the pending data for clipboard injection.
 * If no `format` is provided, a copy of ALL pending data formats will be returned.
 *
 * @returns `String` or `Object`
 * @static
 */
  ZeroClipboard.getData = function() {
    return _getData.apply(this, _args(arguments));
  };
  /**
 * Sets the current HTML object that the Flash object should overlay. This will put the global
 * Flash object on top of the current element; depending on the setup, this may also set the
 * pending clipboard text data as well as the Flash object's wrapping element's title attribute
 * based on the underlying HTML element and ZeroClipboard configuration.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.focus = ZeroClipboard.activate = function() {
    return _focus.apply(this, _args(arguments));
  };
  /**
 * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on
 * the setup, this may also unset the Flash object's wrapping element's title attribute based on
 * the underlying HTML element and ZeroClipboard configuration.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {
    return _blur.apply(this, _args(arguments));
  };
  /**
 * Returns the currently focused/"activated" HTML element that the Flash object is wrapping.
 *
 * @returns `HTMLElement` or `null`
 * @static
 */
  ZeroClipboard.activeElement = function() {
    return _activeElement.apply(this, _args(arguments));
  };
  /**
 * Keep track of the ZeroClipboard client instance counter.
 */
  var _clientIdCounter = 0;
  /**
 * Keep track of the state of the client instances.
 *
 * Entry structure:
 *   _clientMeta[client.id] = {
 *     instance: client,
 *     elements: [],
 *     handlers: {}
 *   };
 */
  var _clientMeta = {};
  /**
 * Keep track of the ZeroClipboard clipped elements counter.
 */
  var _elementIdCounter = 0;
  /**
 * Keep track of the state of the clipped element relationships to clients.
 *
 * Entry structure:
 *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];
 */
  var _elementMeta = {};
  /**
 * Keep track of the state of the mouse event handlers for clipped elements.
 *
 * Entry structure:
 *   _mouseHandlers[element.zcClippingId] = {
 *     mouseover:  function(event) {},
 *     mouseout:   function(event) {},
 *     mouseenter: function(event) {},
 *     mouseleave: function(event) {},
 *     mousemove:  function(event) {}
 *   };
 */
  var _mouseHandlers = {};
  /**
 * Extending the ZeroClipboard configuration defaults for the Client module.
 */
  _extend(_globalConfig, {
    autoActivate: true
  });
  /**
 * The real constructor for `ZeroClipboard` client instances.
 * @private
 */
  var _clientConstructor = function(elements) {
    var client = this;
    client.id = "" + _clientIdCounter++;
    _clientMeta[client.id] = {
      instance: client,
      elements: [],
      handlers: {}
    };
    if (elements) {
      client.clip(elements);
    }
    ZeroClipboard.on("*", function(event) {
      return client.emit(event);
    });
    ZeroClipboard.on("destroy", function() {
      client.destroy();
    });
    ZeroClipboard.create();
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.on`.
 * @private
 */
  var _clientOn = function(eventType, listener) {
    var i, len, events, added = {}, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
    if (!meta) {
      throw new Error("Attempted to add new listener(s) to a destroyed ZeroClipboard client instance");
    }
    if (typeof eventType === "string" && eventType) {
      events = eventType.toLowerCase().split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          this.on(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].replace(/^on/, "");
        added[eventType] = true;
        if (!handlers[eventType]) {
          handlers[eventType] = [];
        }
        handlers[eventType].push(listener);
      }
      if (added.ready && _flashState.ready) {
        this.emit({
          type: "ready",
          client: this
        });
      }
      if (added.error) {
        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")]) {
            this.emit({
              type: "error",
              name: _flashStateErrorNames[i],
              client: this
            });
            break;
          }
        }
        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
          this.emit({
            type: "error",
            name: "version-mismatch",
            jsVersion: ZeroClipboard.version,
            swfVersion: _zcSwfVersion
          });
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.off`.
 * @private
 */
  var _clientOff = function(eventType, listener) {
    var i, len, foundIndex, events, perEventHandlers, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
    if (!handlers) {
      return this;
    }
    if (arguments.length === 0) {
      events = _keys(handlers);
    } else if (typeof eventType === "string" && eventType) {
      events = eventType.split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          this.off(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].toLowerCase().replace(/^on/, "");
        perEventHandlers = handlers[eventType];
        if (perEventHandlers && perEventHandlers.length) {
          if (listener) {
            foundIndex = perEventHandlers.indexOf(listener);
            while (foundIndex !== -1) {
              perEventHandlers.splice(foundIndex, 1);
              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
            }
          } else {
            perEventHandlers.length = 0;
          }
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.
 * @private
 */
  var _clientListeners = function(eventType) {
    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;
    if (handlers) {
      if (typeof eventType === "string" && eventType) {
        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];
      } else {
        copy = _deepCopy(handlers);
      }
    }
    return copy;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.
 * @private
 */
  var _clientEmit = function(event) {
    if (_clientShouldEmit.call(this, event)) {
      if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
        event = _extend({}, event);
      }
      var eventCopy = _extend({}, _createEvent(event), {
        client: this
      });
      _clientDispatchCallbacks.call(this, eventCopy);
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.
 * @private
 */
  var _clientClip = function(elements) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to clip element(s) to a destroyed ZeroClipboard client instance");
    }
    elements = _prepClip(elements);
    for (var i = 0; i < elements.length; i++) {
      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
        if (!elements[i].zcClippingId) {
          elements[i].zcClippingId = "zcClippingId_" + _elementIdCounter++;
          _elementMeta[elements[i].zcClippingId] = [ this.id ];
          if (_globalConfig.autoActivate === true) {
            _addMouseHandlers(elements[i]);
          }
        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {
          _elementMeta[elements[i].zcClippingId].push(this.id);
        }
        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;
        if (clippedElements.indexOf(elements[i]) === -1) {
          clippedElements.push(elements[i]);
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.
 * @private
 */
  var _clientUnclip = function(elements) {
    var meta = _clientMeta[this.id];
    if (!meta) {
      return this;
    }
    var clippedElements = meta.elements;
    var arrayIndex;
    if (typeof elements === "undefined") {
      elements = clippedElements.slice(0);
    } else {
      elements = _prepClip(elements);
    }
    for (var i = elements.length; i--; ) {
      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
        arrayIndex = 0;
        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {
          clippedElements.splice(arrayIndex, 1);
        }
        var clientIds = _elementMeta[elements[i].zcClippingId];
        if (clientIds) {
          arrayIndex = 0;
          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {
            clientIds.splice(arrayIndex, 1);
          }
          if (clientIds.length === 0) {
            if (_globalConfig.autoActivate === true) {
              _removeMouseHandlers(elements[i]);
            }
            delete elements[i].zcClippingId;
          }
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.
 * @private
 */
  var _clientElements = function() {
    var meta = _clientMeta[this.id];
    return meta && meta.elements ? meta.elements.slice(0) : [];
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.
 * @private
 */
  var _clientDestroy = function() {
    if (!_clientMeta[this.id]) {
      return;
    }
    this.unclip();
    this.off();
    delete _clientMeta[this.id];
  };
  /**
 * Inspect an Event to see if the Client (`this`) should honor it for emission.
 * @private
 */
  var _clientShouldEmit = function(event) {
    if (!(event && event.type)) {
      return false;
    }
    if (event.client && event.client !== this) {
      return false;
    }
    var meta = _clientMeta[this.id];
    var clippedEls = meta && meta.elements;
    var hasClippedEls = !!clippedEls && clippedEls.length > 0;
    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;
    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;
    var goodClient = event.client && event.client === this;
    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {
      return false;
    }
    return true;
  };
  /**
 * Handle the actual dispatching of events to a client instance.
 *
 * @returns `undefined`
 * @private
 */
  var _clientDispatchCallbacks = function(event) {
    var meta = _clientMeta[this.id];
    if (!(typeof event === "object" && event && event.type && meta)) {
      return;
    }
    var async = _shouldPerformAsync(event);
    var wildcardTypeHandlers = meta && meta.handlers["*"] || [];
    var specificTypeHandlers = meta && meta.handlers[event.type] || [];
    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
    if (handlers && handlers.length) {
      var i, len, func, context, eventCopy, originalContext = this;
      for (i = 0, len = handlers.length; i < len; i++) {
        func = handlers[i];
        context = originalContext;
        if (typeof func === "string" && typeof _window[func] === "function") {
          func = _window[func];
        }
        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
          context = func;
          func = func.handleEvent;
        }
        if (typeof func === "function") {
          eventCopy = _extend({}, event);
          _dispatchCallback(func, context, [ eventCopy ], async);
        }
      }
    }
  };
  /**
 * Prepares the elements for clipping/unclipping.
 *
 * @returns An Array of elements.
 * @private
 */
  var _prepClip = function(elements) {
    if (typeof elements === "string") {
      elements = [];
    }
    return typeof elements.length !== "number" ? [ elements ] : elements;
  };
  /**
 * Add a `mouseover` handler function for a clipped element.
 *
 * @returns `undefined`
 * @private
 */
  var _addMouseHandlers = function(element) {
    if (!(element && element.nodeType === 1)) {
      return;
    }
    var _suppressMouseEvents = function(event) {
      if (!(event || (event = _window.event))) {
        return;
      }
      if (event._source !== "js") {
        event.stopImmediatePropagation();
        event.preventDefault();
      }
      delete event._source;
    };
    var _elementMouseOver = function(event) {
      if (!(event || (event = _window.event))) {
        return;
      }
      _suppressMouseEvents(event);
      ZeroClipboard.focus(element);
    };
    element.addEventListener("mouseover", _elementMouseOver, false);
    element.addEventListener("mouseout", _suppressMouseEvents, false);
    element.addEventListener("mouseenter", _suppressMouseEvents, false);
    element.addEventListener("mouseleave", _suppressMouseEvents, false);
    element.addEventListener("mousemove", _suppressMouseEvents, false);
    _mouseHandlers[element.zcClippingId] = {
      mouseover: _elementMouseOver,
      mouseout: _suppressMouseEvents,
      mouseenter: _suppressMouseEvents,
      mouseleave: _suppressMouseEvents,
      mousemove: _suppressMouseEvents
    };
  };
  /**
 * Remove a `mouseover` handler function for a clipped element.
 *
 * @returns `undefined`
 * @private
 */
  var _removeMouseHandlers = function(element) {
    if (!(element && element.nodeType === 1)) {
      return;
    }
    var mouseHandlers = _mouseHandlers[element.zcClippingId];
    if (!(typeof mouseHandlers === "object" && mouseHandlers)) {
      return;
    }
    var key, val, mouseEvents = [ "move", "leave", "enter", "out", "over" ];
    for (var i = 0, len = mouseEvents.length; i < len; i++) {
      key = "mouse" + mouseEvents[i];
      val = mouseHandlers[key];
      if (typeof val === "function") {
        element.removeEventListener(key, val, false);
      }
    }
    delete _mouseHandlers[element.zcClippingId];
  };
  /**
 * Creates a new ZeroClipboard client instance.
 * Optionally, auto-`clip` an element or collection of elements.
 *
 * @constructor
 */
  ZeroClipboard._createClient = function() {
    _clientConstructor.apply(this, _args(arguments));
  };
  /**
 * Register an event listener to the client.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.on = function() {
    return _clientOn.apply(this, _args(arguments));
  };
  /**
 * Unregister an event handler from the client.
 * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.
 * If no `eventType` is provided, it will unregister all handlers for every event type.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.off = function() {
    return _clientOff.apply(this, _args(arguments));
  };
  /**
 * Retrieve event listeners for an `eventType` from the client.
 * If no `eventType` is provided, it will retrieve all listeners for every event type.
 *
 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
 */
  ZeroClipboard.prototype.handlers = function() {
    return _clientListeners.apply(this, _args(arguments));
  };
  /**
 * Event emission receiver from the Flash object for this client's registered JavaScript event listeners.
 *
 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
 */
  ZeroClipboard.prototype.emit = function() {
    return _clientEmit.apply(this, _args(arguments));
  };
  /**
 * Register clipboard actions for new element(s) to the client.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.clip = function() {
    return _clientClip.apply(this, _args(arguments));
  };
  /**
 * Unregister the clipboard actions of previously registered element(s) on the page.
 * If no elements are provided, ALL registered elements will be unregistered.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.unclip = function() {
    return _clientUnclip.apply(this, _args(arguments));
  };
  /**
 * Get all of the elements to which this client is clipped.
 *
 * @returns array of clipped elements
 */
  ZeroClipboard.prototype.elements = function() {
    return _clientElements.apply(this, _args(arguments));
  };
  /**
 * Self-destruct and clean up everything for a single client.
 * This will NOT destroy the embedded Flash object.
 *
 * @returns `undefined`
 */
  ZeroClipboard.prototype.destroy = function() {
    return _clientDestroy.apply(this, _args(arguments));
  };
  /**
 * Stores the pending plain text to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setText = function(text) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData("text/plain", text);
    return this;
  };
  /**
 * Stores the pending HTML text to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setHtml = function(html) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData("text/html", html);
    return this;
  };
  /**
 * Stores the pending rich text (RTF) to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setRichText = function(richText) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData("application/rtf", richText);
    return this;
  };
  /**
 * Stores the pending data to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setData = function() {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData.apply(this, _args(arguments));
    return this;
  };
  /**
 * Clears the pending data to inject into the clipboard.
 * If no `format` is provided, all pending data formats will be cleared.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.clearData = function() {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.clearData.apply(this, _args(arguments));
    return this;
  };
  /**
 * Gets a copy of the pending data to inject into the clipboard.
 * If no `format` is provided, a copy of ALL pending data formats will be returned.
 *
 * @returns `String` or `Object`
 */
  ZeroClipboard.prototype.getData = function() {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    return ZeroClipboard.getData.apply(this, _args(arguments));
  };
  if (typeof define === "function" && define.amd) {
    define(function() {
      return ZeroClipboard;
    });
  } else if (typeof module === "object" && module && typeof module.exports === "object" && module.exports) {
    module.exports = ZeroClipboard;
  } else {
    window.ZeroClipboard = ZeroClipboard;
  }
})(function() {
  return this || window;
}());
/*!
(The MIT License)

Copyright (c) 2012-2014 Marcin Warpechowski
Copyright (c) 2015 Handsoncode sp. z o.o. <hello@handsoncode.net>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.Handsontable=e()}}(function(){var e;return function t(e,n,o){function r(l,a){if(!n[l]){if(!e[l]){var u="function"==typeof require&&require;if(!a&&u)return u(l,!0);if(i)return i(l,!0);if(s[l]&&"undefined"!=typeof window[s[l]])return window[s[l]];var c=new Error("Cannot find module '"+l+"'");throw c.code="MODULE_NOT_FOUND",c}var d=n[l]={exports:{}};e[l][0].call(d.exports,function(t){var n=e[l][1][t];return r(n?n:t)},d,d.exports,t,e,n,o)}return n[l].exports}for(var i="function"==typeof require&&require,s=JSON.parse('{"zeroclipboard":"ZeroClipboard","moment":"moment","pikaday":"Pikaday"}')||{},l=0;l<o.length;l++)r(o[l]);return r}({1:[function(e,t,n){window.jQuery&&($.fn.handsontable=function(e){var t,n,o,r,i,s=this.first(),l=s.data("handsontable");if("string"!=typeof e)return i=e||{},l?l.updateSettings(i):(l=new Handsontable.Core(s[0],i),s.data("handsontable",l),l.init()),s;if(o=[],arguments.length>1)for(t=1,n=arguments.length;n>t;t++)o.push(arguments[t]);if(l){if("undefined"==typeof l[e])throw new Error("Handsontable do not provide action: "+e);r=l[e].apply(l,o),"destroy"===e&&s.removeData()}return r})},{}],2:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableBorder:{get:function(){return C}},__esModule:{value:!0}});var o,r,i,s,l,a,u=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),c=u.getComputedStyle,d=u.getTrimmingContainer,h=u.innerWidth,f=u.innerHeight,p=u.offset,g=u.outerHeight,m=u.outerWidth,w=(r=e("helpers/dom/event"),r&&r.__esModule&&r||{"default":r}).stopImmediatePropagation,v=(i=e("helpers/browser"),i&&i.__esModule&&i||{"default":i}).isMobileBrowser,y=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).EventManager,b=(l=e("cell/coords"),l&&l.__esModule&&l||{"default":l}).WalkontableCellCoords,C=((a=e("overlay/_base.js"),a&&a.__esModule&&a||{"default":a}).WalkontableOverlay,function(e,t){t&&(this.eventManager=new y(e),this.instance=e,this.wot=e,this.settings=t,this.mouseDown=!1,this.main=null,this.top=null,this.left=null,this.bottom=null,this.right=null,this.topStyle=null,this.leftStyle=null,this.bottomStyle=null,this.rightStyle=null,this.cornerDefaultStyle={width:"5px",height:"5px",borderWidth:"2px",borderStyle:"solid",borderColor:"#FFF"},this.corner=null,this.cornerStyle=null,this.createBorders(t),this.registerListeners())});$traceurRuntime.createClass(C,{registerListeners:function(){var e=this;this.eventManager.addEventListener(document.body,"mousedown",function(){return e.onMouseDown()}),this.eventManager.addEventListener(document.body,"mouseup",function(){return e.onMouseUp()});for(var t=this,n=function(n,o){t.eventManager.addEventListener(t.main.childNodes[n],"mouseenter",function(t){return e.onMouseEnter(t,e.main.childNodes[n])})},o=0,r=this.main.childNodes.length;r>o;o++)n(o,r)},onMouseDown:function(){this.mouseDown=!0},onMouseUp:function(){this.mouseDown=!1},onMouseEnter:function(e,t){function n(e){return e.clientY<Math.floor(i.top)?!0:e.clientY>Math.ceil(i.top+i.height)?!0:e.clientX<Math.floor(i.left)?!0:e.clientX>Math.ceil(i.left+i.width)?!0:void 0}function o(e){n(e)&&(r.eventManager.removeEventListener(document.body,"mousemove",o),t.style.display="block")}if(this.mouseDown&&this.wot.getSetting("hideBorderOnMouseDownOver")){e.preventDefault(),w(e);var r=this,i=t.getBoundingClientRect();t.style.display="none",this.eventManager.addEventListener(document.body,"mousemove",o)}},createBorders:function(e){this.main=document.createElement("div");var t=["top","left","bottom","right","corner"],n=this.main.style;n.position="absolute",n.top=0,n.left=0;for(var o=0;5>o;o++){var r=t[o],i=document.createElement("div");i.className="wtBorder "+(this.settings.className||""),this.settings[r]&&this.settings[r].hide&&(i.className+=" hidden"),n=i.style,n.backgroundColor=this.settings[r]&&this.settings[r].color?this.settings[r].color:e.border.color,n.height=this.settings[r]&&this.settings[r].width?this.settings[r].width+"px":e.border.width+"px",n.width=this.settings[r]&&this.settings[r].width?this.settings[r].width+"px":e.border.width+"px",this.main.appendChild(i)}this.top=this.main.childNodes[0],this.left=this.main.childNodes[1],this.bottom=this.main.childNodes[2],this.right=this.main.childNodes[3],this.topStyle=this.top.style,this.leftStyle=this.left.style,this.bottomStyle=this.bottom.style,this.rightStyle=this.right.style,this.corner=this.main.childNodes[4],this.corner.className+=" corner",this.cornerStyle=this.corner.style,this.cornerStyle.width=this.cornerDefaultStyle.width,this.cornerStyle.height=this.cornerDefaultStyle.height,this.cornerStyle.border=[this.cornerDefaultStyle.borderWidth,this.cornerDefaultStyle.borderStyle,this.cornerDefaultStyle.borderColor].join(" "),v()&&this.createMultipleSelectorHandles(),this.disappear(),this.wot.wtTable.bordersHolder||(this.wot.wtTable.bordersHolder=document.createElement("div"),this.wot.wtTable.bordersHolder.className="htBorders",this.wot.wtTable.spreader.appendChild(this.wot.wtTable.bordersHolder)),this.wot.wtTable.bordersHolder.insertBefore(this.main,this.wot.wtTable.bordersHolder.firstChild)},createMultipleSelectorHandles:function(){this.selectionHandles={topLeft:document.createElement("DIV"),topLeftHitArea:document.createElement("DIV"),bottomRight:document.createElement("DIV"),bottomRightHitArea:document.createElement("DIV")};var e=10,t=40;this.selectionHandles.topLeft.className="topLeftSelectionHandle",this.selectionHandles.topLeftHitArea.className="topLeftSelectionHandle-HitArea",this.selectionHandles.bottomRight.className="bottomRightSelectionHandle",this.selectionHandles.bottomRightHitArea.className="bottomRightSelectionHandle-HitArea",this.selectionHandles.styles={topLeft:this.selectionHandles.topLeft.style,topLeftHitArea:this.selectionHandles.topLeftHitArea.style,bottomRight:this.selectionHandles.bottomRight.style,bottomRightHitArea:this.selectionHandles.bottomRightHitArea.style};var n={position:"absolute",height:t+"px",width:t+"px","border-radius":parseInt(t/1.5,10)+"px"};for(var o in n)n.hasOwnProperty(o)&&(this.selectionHandles.styles.bottomRightHitArea[o]=n[o],this.selectionHandles.styles.topLeftHitArea[o]=n[o]);var r={position:"absolute",height:e+"px",width:e+"px","border-radius":parseInt(e/1.5,10)+"px",background:"#F5F5FF",border:"1px solid #4285c8"};for(var i in r)r.hasOwnProperty(i)&&(this.selectionHandles.styles.bottomRight[i]=r[i],this.selectionHandles.styles.topLeft[i]=r[i]);this.main.appendChild(this.selectionHandles.topLeft),this.main.appendChild(this.selectionHandles.bottomRight),this.main.appendChild(this.selectionHandles.topLeftHitArea),this.main.appendChild(this.selectionHandles.bottomRightHitArea)},isPartRange:function(e,t){return this.wot.selections.area.cellRange&&(e!=this.wot.selections.area.cellRange.to.row||t!=this.wot.selections.area.cellRange.to.col)},updateMultipleSelectionHandlesPosition:function(e,t,n,o,r,i){var s=parseInt(this.selectionHandles.styles.topLeft.width,10),l=parseInt(this.selectionHandles.styles.topLeftHitArea.width,10);this.selectionHandles.styles.topLeft.top=parseInt(n-s,10)+"px",this.selectionHandles.styles.topLeft.left=parseInt(o-s,10)+"px",this.selectionHandles.styles.topLeftHitArea.top=parseInt(n-l/4*3,10)+"px",this.selectionHandles.styles.topLeftHitArea.left=parseInt(o-l/4*3,10)+"px",this.selectionHandles.styles.bottomRight.top=parseInt(n+i,10)+"px",this.selectionHandles.styles.bottomRight.left=parseInt(o+r,10)+"px",this.selectionHandles.styles.bottomRightHitArea.top=parseInt(n+i-l/4,10)+"px",this.selectionHandles.styles.bottomRightHitArea.left=parseInt(o+r-l/4,10)+"px",this.settings.border.multipleSelectionHandlesVisible&&this.settings.border.multipleSelectionHandlesVisible()?(this.selectionHandles.styles.topLeft.display="block",this.selectionHandles.styles.topLeftHitArea.display="block",this.isPartRange(e,t)?(this.selectionHandles.styles.bottomRight.display="none",this.selectionHandles.styles.bottomRightHitArea.display="none"):(this.selectionHandles.styles.bottomRight.display="block",this.selectionHandles.styles.bottomRightHitArea.display="block")):(this.selectionHandles.styles.topLeft.display="none",this.selectionHandles.styles.bottomRight.display="none",this.selectionHandles.styles.topLeftHitArea.display="none",this.selectionHandles.styles.bottomRightHitArea.display="none"),e==this.wot.wtSettings.getSetting("fixedRowsTop")||t==this.wot.wtSettings.getSetting("fixedColumnsLeft")?(this.selectionHandles.styles.topLeft.zIndex="9999",this.selectionHandles.styles.topLeftHitArea.zIndex="9999"):(this.selectionHandles.styles.topLeft.zIndex="",this.selectionHandles.styles.topLeftHitArea.zIndex="")},appear:function(e){if(!this.disabled){var t,n,o,r,i,s,l,a,u,w,y,C,_,R,S,E,M,T,O;O=this.wot.wtTable.getRenderedRowsCount();for(var k=0;O>k;k++){var D=this.wot.wtTable.rowFilter.renderedToSource(k);if(D>=e[0]&&D<=e[2]){_=D;break}}for(var A=O-1;A>=0;A--){var x=this.wot.wtTable.rowFilter.renderedToSource(A);if(x>=e[0]&&x<=e[2]){S=x;break}}O=this.wot.wtTable.getRenderedColumnsCount();for(var H=0;O>H;H++){var P=this.wot.wtTable.columnFilter.renderedToSource(H);if(P>=e[1]&&P<=e[3]){R=P;break}}for(var N=O-1;N>=0;N--){var L=this.wot.wtTable.columnFilter.renderedToSource(N);if(L>=e[1]&&L<=e[3]){E=L;break}}if(void 0===_||void 0===R)return void this.disappear();t=_!==S||R!==E,n=this.wot.wtTable.getCell(new b(_,R)),o=t?this.wot.wtTable.getCell(new b(S,E)):n,r=p(n),i=t?p(o):r,s=p(this.wot.wtTable.TABLE),a=r.top,y=i.top+g(o)-a,w=r.left,C=i.left+m(o)-w,l=a-s.top-1,u=w-s.left-1;var W=c(n);parseInt(W.borderTopWidth,10)>0&&(l+=1,y=y>0?y-1:0),parseInt(W.borderLeftWidth,10)>0&&(u+=1,C=C>0?C-1:0),this.topStyle.top=l+"px",this.topStyle.left=u+"px",this.topStyle.width=C+"px",this.topStyle.display="block",this.leftStyle.top=l+"px",this.leftStyle.left=u+"px",this.leftStyle.height=y+"px",this.leftStyle.display="block";var I=Math.floor(this.settings.border.width/2);this.bottomStyle.top=l+y-I+"px",this.bottomStyle.left=u+"px",this.bottomStyle.width=C+"px",this.bottomStyle.display="block",this.rightStyle.top=l+"px",this.rightStyle.left=u+C-I+"px",this.rightStyle.height=y+1+"px",this.rightStyle.display="block",v()||!this.hasSetting(this.settings.border.cornerVisible)||this.isPartRange(S,E)?this.cornerStyle.display="none":(this.cornerStyle.top=l+y-4+"px",this.cornerStyle.left=u+C-4+"px",this.cornerStyle.borderRightWidth=this.cornerDefaultStyle.borderWidth,this.cornerStyle.width=this.cornerDefaultStyle.width,this.cornerStyle.display="block",M=d(this.wot.wtTable.TABLE),E===this.wot.getSetting("totalColumns")-1&&(T=o.offsetLeft+m(o)>=h(M),T&&(this.cornerStyle.left=Math.floor(u+C-3-parseInt(this.cornerDefaultStyle.width)/2)+"px",this.cornerStyle.borderRightWidth=0)),S===this.wot.getSetting("totalRows")-1&&(T=o.offsetTop+g(o)>=f(M),T&&(this.cornerStyle.top=Math.floor(l+y-3-parseInt(this.cornerDefaultStyle.height)/2)+"px",this.cornerStyle.borderBottomWidth=0))),v()&&this.updateMultipleSelectionHandlesPosition(_,R,l,u,C,y)}},disappear:function(){this.topStyle.display="none",this.leftStyle.display="none",this.bottomStyle.display="none",this.rightStyle.display="none",this.cornerStyle.display="none",v()&&(this.selectionHandles.styles.topLeft.display="none",this.selectionHandles.styles.bottomRight.display="none")},hasSetting:function(e){return"function"==typeof e?e():!!e}},{}),window.WalkontableBorder=C},{"cell/coords":5,eventManager:41,"helpers/browser":43,"helpers/dom/element":46,"helpers/dom/event":47,"overlay/_base.js":11}],3:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableViewportColumnsCalculator:{get:function(){return r}},__esModule:{value:!0}});var o=new WeakMap,r=function(e,t,n,r,i,s,l){var a=void 0!==arguments[7]?arguments[7]:function(e){return e};o.set(this,{viewportWidth:e,scrollOffset:t,totalColumns:n,columnWidthFn:r,overrideFn:i,onlyFullyVisible:s,stretchingColumnWidthFn:a}),this.count=0,this.startColumn=null,this.endColumn=null,this.startPosition=null,this.stretchAllRatio=0,this.stretchLastWidth=0,this.stretch=l,this.totalTargetWidth=0,this.needVerifyLastColumnWidth=!0,this.stretchAllColumnsWidth=[],this.calculate()},i=r;$traceurRuntime.createClass(r,{calculate:function(){for(var e,t=0,n=!0,r=[],i=o.get(this),s=i.onlyFullyVisible,l=i.overrideFn,a=i.scrollOffset,u=i.totalColumns,c=i.viewportWidth,d=0;u>d;d++)if(e=this._getColumnWidth(d),a>=t&&!s&&(this.startColumn=d),t>=a&&a+c>=t+e&&(null==this.startColumn&&(this.startColumn=d),this.endColumn=d),r.push(t),t+=e,s||(this.endColumn=d),t>=a+c){n=!1;break}if(this.endColumn===u-1&&n)for(this.startColumn=this.endColumn;this.startColumn>0;){var h=r[this.endColumn]+e-r[this.startColumn-1];if((c>=h||!s)&&this.startColumn--,h>c)break}null!==this.startColumn&&l&&l(this),this.startPosition=r[this.startColumn],void 0==this.startPosition&&(this.startPosition=null),null!==this.startColumn&&(this.count=this.endColumn-this.startColumn+1)},refreshStretching:function(e){if("none"!==this.stretch){this.totalTargetWidth=e;for(var t=o.get(this),n=t.totalColumns,r=0,i=0;n>i;i++){var s=this._getColumnWidth(i),l=t.stretchingColumnWidthFn(void 0,i);"number"==typeof l?e-=l:r+=s}var a=e-r;if("all"===this.stretch&&a>0)this.stretchAllRatio=e/r,this.stretchAllColumnsWidth=[],this.needVerifyLastColumnWidth=!0;else if("last"===this.stretch&&e!==1/0){var u=this._getColumnWidth(n-1),c=a+u;this.stretchLastWidth=c>=0?c:u}}},getStretchedColumnWidth:function(e,t){var n=null;return"all"===this.stretch&&0!==this.stretchAllRatio?n=this._getStretchedAllColumnWidth(e,t):"last"===this.stretch&&0!==this.stretchLastWidth&&(n=this._getStretchedLastColumnWidth(e)),n},_getStretchedAllColumnWidth:function(e,t){var n=0,r=o.get(this),i=r.totalColumns;if(!this.stretchAllColumnsWidth[e]){var s=Math.round(t*this.stretchAllRatio),l=r.stretchingColumnWidthFn(s,e);void 0===l?this.stretchAllColumnsWidth[e]=s:this.stretchAllColumnsWidth[e]=isNaN(l)?this._getColumnWidth(e):l}if(this.stretchAllColumnsWidth.length===i&&this.needVerifyLastColumnWidth){this.needVerifyLastColumnWidth=!1;for(var a=0;a<this.stretchAllColumnsWidth.length;a++)n+=this.stretchAllColumnsWidth[a];n!==this.totalTargetWidth&&(this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length-1]+=this.totalTargetWidth-n)}return this.stretchAllColumnsWidth[e]},_getStretchedLastColumnWidth:function(e){var t=o.get(this),n=t.totalColumns;return e===n-1?this.stretchLastWidth:null},_getColumnWidth:function(e){var t=o.get(this).columnWidthFn(e);return void 0===t&&(t=i.DEFAULT_WIDTH),t}},{get DEFAULT_WIDTH(){return 50}}),window.WalkontableViewportColumnsCalculator=r},{}],4:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableViewportRowsCalculator:{get:function(){return r}},__esModule:{value:!0}});var o=new WeakMap,r=function(e,t,n,r,i,s,l){o.set(this,{viewportHeight:e,scrollOffset:t,totalRows:n,rowHeightFn:r,overrideFn:i,onlyFullyVisible:s,horizontalScrollbarHeight:l}),this.count=0,this.startRow=null,this.endRow=null,this.startPosition=null,this.calculate()},i=r;$traceurRuntime.createClass(r,{calculate:function(){for(var e=0,t=!0,n=[],r=o.get(this),s=r.onlyFullyVisible,l=r.overrideFn,a=r.rowHeightFn,u=r.scrollOffset,c=r.totalRows,d=r.viewportHeight,h=r.horizontalScrollbarHeight||0,f=0;c>f;f++){var p=a(f);if(void 0===p&&(p=i.DEFAULT_HEIGHT),u>=e&&!s&&(this.startRow=f),e>=u&&u+d-h>=e+p&&(null===this.startRow&&(this.startRow=f),this.endRow=f),n.push(e),e+=p,s||(this.endRow=f),e>=u+d-h){t=!1;break}}if(this.endRow===c-1&&t)for(this.startRow=this.endRow;this.startRow>0;){var g=n[this.endRow]+p-n[this.startRow-1];if((d-h>=g||!s)&&this.startRow--,g>=d-h)break}null!==this.startRow&&l&&l(this),this.startPosition=n[this.startRow],void 0==this.startPosition&&(this.startPosition=null),null!==this.startRow&&(this.count=this.endRow-this.startRow+1)}},{get DEFAULT_HEIGHT(){return 23}}),window.WalkontableViewportRowsCalculator=r},{}],5:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableCellCoords:{get:function(){return o}},__esModule:{value:!0}});var o=function(e,t){"undefined"!=typeof e&&"undefined"!=typeof t?(this.row=e,this.col=t):(this.row=null,this.col=null)};$traceurRuntime.createClass(o,{isValid:function(e){return this.row<0||this.col<0?!1:!(this.row>=e.getSetting("totalRows")||this.col>=e.getSetting("totalColumns"))},isEqual:function(e){return e===this?!0:this.row===e.row&&this.col===e.col},isSouthEastOf:function(e){return this.row>=e.row&&this.col>=e.col},isNorthWestOf:function(e){return this.row<=e.row&&this.col<=e.col},isSouthWestOf:function(e){return this.row>=e.row&&this.col<=e.col},isNorthEastOf:function(e){return this.row<=e.row&&this.col>=e.col}},{}),window.WalkontableCellCoords=o},{}],6:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableCellRange:{get:function(){return i}},__esModule:{value:!0}});var o,r=(o=e("cell/coords"),o&&o.__esModule&&o||{"default":o}).WalkontableCellCoords,i=function(e,t,n){this.highlight=e,this.from=t,this.to=n},s=i;$traceurRuntime.createClass(i,{isValid:function(e){return this.from.isValid(e)&&this.to.isValid(e)},isSingle:function(){return this.from.row===this.to.row&&this.from.col===this.to.col},getHeight:function(){return Math.max(this.from.row,this.to.row)-Math.min(this.from.row,this.to.row)+1},getWidth:function(){return Math.max(this.from.col,this.to.col)-Math.min(this.from.col,this.to.col)+1},includes:function(e){var t=this.getTopLeftCorner(),n=this.getBottomRightCorner();return e.row<0&&(e.row=0),e.col<0&&(e.col=0),t.row<=e.row&&n.row>=e.row&&t.col<=e.col&&n.col>=e.col},includesRange:function(e){return this.includes(e.getTopLeftCorner())&&this.includes(e.getBottomRightCorner())},isEqual:function(e){return Math.min(this.from.row,this.to.row)==Math.min(e.from.row,e.to.row)&&Math.max(this.from.row,this.to.row)==Math.max(e.from.row,e.to.row)&&Math.min(this.from.col,this.to.col)==Math.min(e.from.col,e.to.col)&&Math.max(this.from.col,this.to.col)==Math.max(e.from.col,e.to.col)},overlaps:function(e){return e.isSouthEastOf(this.getTopLeftCorner())&&e.isNorthWestOf(this.getBottomRightCorner())},isSouthEastOf:function(e){return this.getTopLeftCorner().isSouthEastOf(e)||this.getBottomRightCorner().isSouthEastOf(e)},isNorthWestOf:function(e){return this.getTopLeftCorner().isNorthWestOf(e)||this.getBottomRightCorner().isNorthWestOf(e)},expand:function(e){var t=this.getTopLeftCorner(),n=this.getBottomRightCorner();return e.row<t.row||e.col<t.col||e.row>n.row||e.col>n.col?(this.from=new r(Math.min(t.row,e.row),Math.min(t.col,e.col)),this.to=new r(Math.max(n.row,e.row),Math.max(n.col,e.col)),!0):!1},expandByRange:function(e){if(this.includesRange(e)||!this.overlaps(e))return!1;var t=this.getTopLeftCorner(),n=this.getBottomRightCorner(),o=(this.getTopRightCorner(),this.getBottomLeftCorner(),e.getTopLeftCorner()),i=e.getBottomRightCorner(),l=Math.min(t.row,o.row),a=Math.min(t.col,o.col),u=Math.max(n.row,i.row),c=Math.max(n.col,i.col),d=new r(l,a),h=new r(u,c),f=new s(d,d,h).isCorner(this.from,e),p=e.isEqual(new s(d,d,h));return f&&!p&&(this.from.col>d.col&&(d.col=c,h.col=a),this.from.row>d.row&&(d.row=u,h.row=l)),this.from=d,this.to=h,!0},getDirection:function(){return this.from.isNorthWestOf(this.to)?"NW-SE":this.from.isNorthEastOf(this.to)?"NE-SW":this.from.isSouthEastOf(this.to)?"SE-NW":this.from.isSouthWestOf(this.to)?"SW-NE":void 0},setDirection:function(e){switch(e){case"NW-SE":this.from=this.getTopLeftCorner(),this.to=this.getBottomRightCorner();break;case"NE-SW":this.from=this.getTopRightCorner(),this.to=this.getBottomLeftCorner();break;case"SE-NW":this.from=this.getBottomRightCorner(),this.to=this.getTopLeftCorner();break;case"SW-NE":this.from=this.getBottomLeftCorner(),this.to=this.getTopRightCorner()}},getTopLeftCorner:function(){return new r(Math.min(this.from.row,this.to.row),Math.min(this.from.col,this.to.col))},getBottomRightCorner:function(){return new r(Math.max(this.from.row,this.to.row),Math.max(this.from.col,this.to.col))},getTopRightCorner:function(){return new r(Math.min(this.from.row,this.to.row),Math.max(this.from.col,this.to.col))},getBottomLeftCorner:function(){return new r(Math.max(this.from.row,this.to.row),Math.min(this.from.col,this.to.col))},isCorner:function(e,t){return t&&t.includes(e)&&(this.getTopLeftCorner().isEqual(new r(t.from.row,t.from.col))||this.getTopRightCorner().isEqual(new r(t.from.row,t.to.col))||this.getBottomLeftCorner().isEqual(new r(t.to.row,t.from.col))||this.getBottomRightCorner().isEqual(new r(t.to.row,t.to.col)))?!0:e.isEqual(this.getTopLeftCorner())||e.isEqual(this.getTopRightCorner())||e.isEqual(this.getBottomLeftCorner())||e.isEqual(this.getBottomRightCorner())},getOppositeCorner:function(e,t){if(!(e instanceof r))return!1;if(t&&t.includes(e)){if(this.getTopLeftCorner().isEqual(new r(t.from.row,t.from.col)))return this.getBottomRightCorner();if(this.getTopRightCorner().isEqual(new r(t.from.row,t.to.col)))return this.getBottomLeftCorner();if(this.getBottomLeftCorner().isEqual(new r(t.to.row,t.from.col)))return this.getTopRightCorner();if(this.getBottomRightCorner().isEqual(new r(t.to.row,t.to.col)))return this.getTopLeftCorner()}return e.isEqual(this.getBottomRightCorner())?this.getTopLeftCorner():e.isEqual(this.getTopLeftCorner())?this.getBottomRightCorner():e.isEqual(this.getTopRightCorner())?this.getBottomLeftCorner():e.isEqual(this.getBottomLeftCorner())?this.getTopRightCorner():void 0},getBordersSharedWith:function(e){if(!this.includesRange(e))return[];var t={top:Math.min(this.from.row,this.to.row),bottom:Math.max(this.from.row,this.to.row),left:Math.min(this.from.col,this.to.col),right:Math.max(this.from.col,this.to.col)},n={top:Math.min(e.from.row,e.to.row),bottom:Math.max(e.from.row,e.to.row),left:Math.min(e.from.col,e.to.col),right:Math.max(e.from.col,e.to.col)},o=[];return t.top==n.top&&o.push("top"),t.right==n.right&&o.push("right"),t.bottom==n.bottom&&o.push("bottom"),t.left==n.left&&o.push("left"),o},getInner:function(){for(var e=this.getTopLeftCorner(),t=this.getBottomRightCorner(),n=[],o=e.row;o<=t.row;o++)for(var i=e.col;i<=t.col;i++)this.from.row===o&&this.from.col===i||this.to.row===o&&this.to.col===i||n.push(new r(o,i));return n},getAll:function(){for(var e=this.getTopLeftCorner(),t=this.getBottomRightCorner(),n=[],o=e.row;o<=t.row;o++)for(var i=e.col;i<=t.col;i++)e.row===o&&e.col===i?n.push(e):t.row===o&&t.col===i?n.push(t):n.push(new r(o,i));return n},forAll:function(e){for(var t=this.getTopLeftCorner(),n=this.getBottomRightCorner(),o=t.row;o<=n.row;o++)for(var r=t.col;r<=n.col;r++){var i=e(o,r);if(i===!1)return}}},{}),window.WalkontableCellRange=i},{"cell/coords":5}],7:[function(e,t,n){"use strict";Object.defineProperties(n,{Walkontable:{get:function(){return x}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d,h,f,p,g,m,w=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),v=w.addClass,y=w.fastInnerText,b=w.isVisible,C=w.removeClass,_=(r=e("helpers/object"),r&&r.__esModule&&r||{"default":r}).objectEach,R=(i=e("helpers/string"),i&&i.__esModule&&i||{"default":i}),S=R.toUpperCaseFirst,E=R.randomString,M=(s=e("event"),s&&s.__esModule&&s||{"default":s}).WalkontableEvent,T=(l=e("overlays"),l&&l.__esModule&&l||{"default":l}).WalkontableOverlays,O=(a=e("scroll"),a&&a.__esModule&&a||{"default":a}).WalkontableScroll,k=(u=e("settings"),u&&u.__esModule&&u||{"default":u}).WalkontableSettings,D=(c=e("table"),c&&c.__esModule&&c||{"default":c}).WalkontableTable,A=(d=e("viewport"),d&&d.__esModule&&d||{"default":d}).WalkontableViewport,x=((h=e("overlay/_base.js"),h&&h.__esModule&&h||{"default":h}).WalkontableOverlay,(f=e("overlay/top.js"),f&&f.__esModule&&f||{"default":f}).WalkontableTopOverlay,(p=e("overlay/left.js"),p&&p.__esModule&&p||{"default":p}).WalkontableLeftOverlay,(g=e("overlay/debug.js"),g&&g.__esModule&&g||{"default":g}).WalkontableDebugOverlay,(m=e("overlay/topLeftCorner.js"),m&&m.__esModule&&m||{"default":m}).WalkontableTopLeftCornerOverlay,function(e){var t=[];if(this.guid="wt_"+E(),e.cloneSource?(this.cloneSource=e.cloneSource,this.cloneOverlay=e.cloneOverlay,this.wtSettings=e.cloneSource.wtSettings,this.wtTable=new D(this,e.table,e.wtRootElement),this.wtScroll=new O(this),this.wtViewport=e.cloneSource.wtViewport,this.wtEvent=new M(this),this.selections=this.cloneSource.selections):(this.wtSettings=new k(this,e),this.wtTable=new D(this,e.table),this.wtScroll=new O(this),this.wtViewport=new A(this),this.wtEvent=new M(this),this.selections=this.getSetting("selections"),this.wtOverlays=new T(this),this.exportSettingsAsClassNames()),this.wtTable.THEAD.childNodes.length&&this.wtTable.THEAD.childNodes[0].childNodes.length){for(var n=0,o=this.wtTable.THEAD.childNodes[0].childNodes.length;o>n;n++)t.push(this.wtTable.THEAD.childNodes[0].childNodes[n].innerHTML);this.getSetting("columnHeaders").length||this.update("columnHeaders",[function(e,n){y(n,t[e])}])}this.drawn=!1,this.drawInterrupted=!1});$traceurRuntime.createClass(x,{draw:function(){var e=void 0!==arguments[0]?arguments[0]:!1;return this.drawInterrupted=!1,e||b(this.wtTable.TABLE)?this.wtTable.draw(e):this.drawInterrupted=!0,this},getCell:function(e){var t=void 0!==arguments[1]?arguments[1]:!1;if(!t)return this.wtTable.getCell(e);var n=this.wtSettings.getSetting("totalRows"),o=this.wtSettings.getSetting("fixedRowsTop"),r=this.wtSettings.getSetting("fixedRowsBottom"),i=this.wtSettings.getSetting("fixedColumnsLeft");if(e.row<o&&e.col<i)return this.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell(e);if(e.row<o)return this.wtOverlays.topOverlay.clone.wtTable.getCell(e);if(e.col<i&&e.row>=n-r){if(this.wtOverlays.bottomLeftCornerOverlay.clone)return this.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell(e)}else{if(e.col<i)return this.wtOverlays.leftOverlay.clone.wtTable.getCell(e);if(e.row<n&&e.row>n-r&&this.wtOverlays.bottomOverlay.clone)return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(e)}return this.wtTable.getCell(e)},update:function(e,t){return this.wtSettings.update(e,t)},scrollVertical:function(e){return this.wtOverlays.topOverlay.scrollTo(e),this.getSetting("onScrollVertically"),this},scrollHorizontal:function(e){return this.wtOverlays.leftOverlay.scrollTo(e),this.getSetting("onScrollHorizontally"),this},scrollViewport:function(e){return this.wtScroll.scrollViewport(e),this},getViewport:function(){return[this.wtTable.getFirstVisibleRow(),this.wtTable.getFirstVisibleColumn(),this.wtTable.getLastVisibleRow(),this.wtTable.getLastVisibleColumn()]},getOverlayName:function(){return this.cloneOverlay?this.cloneOverlay.type:"master"},isOverlayName:function(e){return this.cloneOverlay?this.cloneOverlay.type===e:!1},exportSettingsAsClassNames:function(){var e=this,t={rowHeaders:["array"],columnHeaders:["array"]},n=[],o=[];_(t,function(t,r){t.indexOf("array")>-1&&e.getSetting(r).length&&o.push("ht"+S(r)),n.push("ht"+S(r))}),C(this.wtTable.wtRootElement.parentNode,n),v(this.wtTable.wtRootElement.parentNode,o)},getSetting:function(e,t,n,o,r){return this.wtSettings.getSetting(e,t,n,o,r)},hasSetting:function(e){return this.wtSettings.has(e)},destroy:function(){this.wtOverlays.destroy(),this.wtEvent.destroy()}},{}),window.Walkontable=x},{event:8,"helpers/dom/element":46,"helpers/object":52,"helpers/string":54,"overlay/_base.js":11,"overlay/debug.js":12,"overlay/left.js":13,"overlay/top.js":14,"overlay/topLeftCorner.js":15,overlays:16,scroll:17,settings:19,table:20,viewport:22}],8:[function(e,t,n){"use strict";function o(e){var t=this,n=h(e);this.instance=e;var o=[null,null];this.dblClickTimeout=[null,null];var r,i=function(e){var n=t.parentCell(e.realTarget);u(e.realTarget,"corner")?t.instance.getSetting("onCellCornerMouseDown",e,e.realTarget):n.TD&&t.instance.hasSetting("onCellMouseDown")&&t.instance.getSetting("onCellMouseDown",e,n.coords,n.TD,t.instance),2!==e.button&&n.TD&&(o[0]=n.TD,clearTimeout(t.dblClickTimeout[0]),t.dblClickTimeout[0]=setTimeout(function(){o[0]=null},1e3))},s=function(e){t.instance.touchMoving=!0},l=function(e){n.addEventListener(this,"touchmove",s),t.checkIfTouchMove=setTimeout(function(){return t.instance.touchMoving===!0?(t.instance.touchMoving=void 0,void n.removeEventListener("touchmove",s,!1)):void i(e)},30)},f=function(e){var n,o,r;t.instance.hasSetting("onCellMouseOver")&&(n=t.instance.wtTable.TABLE,o=a(e.realTarget,["TD","TH"],n),r=t.instance.cloneSource||t.instance,o&&o!==r.lastMouseOver&&c(o,n)&&(r.lastMouseOver=o,t.instance.getSetting("onCellMouseOver",e,t.instance.wtTable.getCoords(o),o,t.instance)))},p=function(e){if(2!==e.button){var n=t.parentCell(e.realTarget);n.TD===o[0]&&n.TD===o[1]?(u(e.realTarget,"corner")?t.instance.getSetting("onCellCornerDblClick",e,n.coords,n.TD,t.instance):t.instance.getSetting("onCellDblClick",e,n.coords,n.TD,t.instance),o[0]=null,o[1]=null):n.TD===o[0]&&(o[1]=n.TD,clearTimeout(t.dblClickTimeout[1]),t.dblClickTimeout[1]=setTimeout(function(){o[1]=null},500))}},g=function(e){clearTimeout(r),e.preventDefault(),p(e)};if(n.addEventListener(this.instance.wtTable.holder,"mousedown",i),n.addEventListener(this.instance.wtTable.TABLE,"mouseover",f),n.addEventListener(this.instance.wtTable.holder,"mouseup",p),this.instance.wtTable.holder.parentNode.parentNode&&d()&&!t.instance.wtTable.isWorkingOnClone()){var m="."+this.instance.wtTable.holder.parentNode.className.split(" ").join(".");n.addEventListener(this.instance.wtTable.holder,"touchstart",function(e){t.instance.touchApplied=!0,c(e.target,m)&&l.call(e.target,e)}),n.addEventListener(this.instance.wtTable.holder,"touchend",function(e){t.instance.touchApplied=!1,c(e.target,m)&&g.call(e.target,e)}),t.instance.momentumScrolling||(t.instance.momentumScrolling={}),n.addEventListener(this.instance.wtTable.holder,"scroll",function(e){clearTimeout(t.instance.momentumScrolling._timeout),t.instance.momentumScrolling.ongoing||t.instance.getSetting("onBeforeTouchScroll"),t.instance.momentumScrolling.ongoing=!0,t.instance.momentumScrolling._timeout=setTimeout(function(){t.instance.touchApplied||(t.instance.momentumScrolling.ongoing=!1,t.instance.getSetting("onAfterMomentumScroll"))},200)})}n.addEventListener(window,"resize",function(){"none"!==t.instance.getSetting("stretchH")&&t.instance.draw()}),this.destroy=function(){clearTimeout(this.dblClickTimeout[0]),clearTimeout(this.dblClickTimeout[1]),n.destroy()}}Object.defineProperties(n,{WalkontableEvent:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),a=l.closest,u=l.hasClass,c=l.isChildOf,d=(i=e("helpers/browser"),i&&i.__esModule&&i||{"default":i}).isMobileBrowser,h=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).eventManager;o.prototype.parentCell=function(e){var t={},n=this.instance.wtTable.TABLE,o=a(e,["TD","TH"],n),r=a(o,["TABLE"]);return o&&c(o,n)&&r==n?(t.coords=this.instance.wtTable.getCoords(o),t.TD=o):u(e,"wtBorder")&&u(e,"current")?(t.coords=this.instance.selections.current.cellRange.highlight,t.TD=this.instance.wtTable.getCell(t.coords)):u(e,"wtBorder")&&u(e,"area")&&this.instance.selections.area.cellRange&&(t.coords=this.instance.selections.area.cellRange.to,t.TD=this.instance.wtTable.getCell(t.coords)),t},window.WalkontableEvent=o},{eventManager:41,"helpers/browser":43,"helpers/dom/element":46}],9:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableColumnFilter:{get:function(){return o}},__esModule:{value:!0}});var o=function(e,t,n){this.offset=e,this.total=t,this.countTH=n};$traceurRuntime.createClass(o,{offsetted:function(e){return e+this.offset},unOffsetted:function(e){return e-this.offset},renderedToSource:function(e){return this.offsetted(e)},sourceToRendered:function(e){return this.unOffsetted(e)},offsettedTH:function(e){return e-this.countTH},unOffsettedTH:function(e){return e+this.countTH},visibleRowHeadedColumnToSourceColumn:function(e){return this.renderedToSource(this.offsettedTH(e))},sourceColumnToVisibleRowHeadedColumn:function(e){
return this.unOffsettedTH(this.sourceToRendered(e))}},{}),window.WalkontableColumnFilter=o},{}],10:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableRowFilter:{get:function(){return o}},__esModule:{value:!0}});var o=function(e,t,n){this.offset=e,this.total=t,this.countTH=n};$traceurRuntime.createClass(o,{offsetted:function(e){return e+this.offset},unOffsetted:function(e){return e-this.offset},renderedToSource:function(e){return this.offsetted(e)},sourceToRendered:function(e){return this.unOffsetted(e)},offsettedTH:function(e){return e-this.countTH},unOffsettedTH:function(e){return e+this.countTH},visibleColHeadedRowToSourceRow:function(e){return this.renderedToSource(this.offsettedTH(e))},sourceRowToVisibleColHeadedRow:function(e){return this.unOffsettedTH(this.sourceToRendered(e))}},{}),window.WalkontableRowFilter=o},{}],11:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableOverlay:{get:function(){return h}},__esModule:{value:!0}});var o,r,i,s=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),l=s.getScrollableElement,a=s.getTrimmingContainer,u=(r=e("helpers/object"),r&&r.__esModule&&r||{"default":r}).defineGetter,c=(i=e("eventManager"),i&&i.__esModule&&i||{"default":i}).eventManager,d={},h=function(e){u(this,"wot",e,{writable:!1}),this.instance=this.wot,this.type="",this.mainTableScrollableElement=null,this.TABLE=this.wot.wtTable.TABLE,this.hider=this.wot.wtTable.hider,this.spreader=this.wot.wtTable.spreader,this.holder=this.wot.wtTable.holder,this.wtRootElement=this.wot.wtTable.wtRootElement,this.trimmingContainer=a(this.hider.parentNode.parentNode),this.needFullRender=this.shouldBeRendered(),this.areElementSizesAdjusted=!1},f=h;$traceurRuntime.createClass(h,{shouldBeRendered:function(){return!0},updateTrimmingContainer:function(){this.trimmingContainer=a(this.hider.parentNode.parentNode)},updateMainScrollableElement:function(){this.mainTableScrollableElement=l(this.wot.wtTable.TABLE)},makeClone:function(e){if(-1===f.CLONE_TYPES.indexOf(e))throw new Error('Clone type "'+e+'" is not supported.');var t=document.createElement("DIV"),n=document.createElement("TABLE");t.className="ht_clone_"+e+" handsontable",t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.overflow="hidden",n.className=this.wot.wtTable.TABLE.className,t.appendChild(n),this.type=e,this.wot.wtTable.wtRootElement.parentNode.appendChild(t);var o=this.wot.getSetting("preventOverflow");return o===!0||"horizontal"===o&&this.type===f.CLONE_TOP||"vertical"===o&&this.type===f.CLONE_LEFT?this.mainTableScrollableElement=window:this.mainTableScrollableElement=l(this.wot.wtTable.TABLE),new Walkontable({cloneSource:this.wot,cloneOverlay:this,table:n})},refresh:function(){var e=void 0!==arguments[0]?arguments[0]:!1,t=this.shouldBeRendered();this.clone&&(this.needFullRender||t)&&this.clone.draw(e),this.needFullRender=t},destroy:function(){c(this.clone).destroy()}},{get CLONE_TOP(){return"top"},get CLONE_BOTTOM(){return"bottom"},get CLONE_LEFT(){return"left"},get CLONE_TOP_LEFT_CORNER(){return"top_left_corner"},get CLONE_BOTTOM_LEFT_CORNER(){return"bottom_left_corner"},get CLONE_DEBUG(){return"debug"},get CLONE_TYPES(){return[f.CLONE_TOP,f.CLONE_BOTTOM,f.CLONE_LEFT,f.CLONE_TOP_LEFT_CORNER,f.CLONE_BOTTOM_LEFT_CORNER,f.CLONE_DEBUG]},registerOverlay:function(e,t){if(-1===f.CLONE_TYPES.indexOf(e))throw new Error("Unsupported overlay ("+e+").");d[e]=t},createOverlay:function(e,t){return new d[e](t)},isOverlayTypeOf:function(e,t){return e&&d[t]?e instanceof d[t]:!1}}),window.WalkontableOverlay=h},{eventManager:41,"helpers/dom/element":46,"helpers/object":52}],12:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableDebugOverlay:{get:function(){return l}},__esModule:{value:!0}});var o,r,i=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}).addClass,s=(r=e("_base"),r&&r.__esModule&&r||{"default":r}).WalkontableOverlay,l=function(e){$traceurRuntime.superConstructor(a).call(this,e),this.clone=this.makeClone(s.CLONE_DEBUG),this.clone.wtTable.holder.style.opacity=.4,this.clone.wtTable.holder.style.textShadow="0 0 2px #ff0000",i(this.clone.wtTable.holder.parentNode,"wtDebugVisible")},a=l;$traceurRuntime.createClass(l,{},{},s),window.WalkontableDebugOverlay=l,s.registerOverlay(s.CLONE_DEBUG,l)},{_base:11,"helpers/dom/element":46}],13:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableLeftOverlay:{get:function(){return w}},__esModule:{value:!0}});var o,r,i=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),s=i.addClass,l=i.getScrollbarWidth,a=i.getScrollLeft,u=i.getWindowScrollTop,c=i.hasClass,d=i.outerWidth,h=i.innerHeight,f=i.removeClass,p=i.setOverlayPosition,g=i.resetCssTransform,m=(r=e("_base"),r&&r.__esModule&&r||{"default":r}).WalkontableOverlay,w=function(e){$traceurRuntime.superConstructor(v).call(this,e),this.clone=this.makeClone(m.CLONE_LEFT)},v=w;$traceurRuntime.createClass(w,{shouldBeRendered:function(){return!(!this.wot.getSetting("fixedColumnsLeft")&&!this.wot.getSetting("rowHeaders").length)},resetFixedPosition:function(){if(this.needFullRender&&this.wot.wtTable.holder.parentNode){var e=this.clone.wtTable.holder.parentNode,t=0,n=this.wot.getSetting("preventOverflow");if(this.trimmingContainer!==window||n&&"horizontal"===n)t=this.getScrollPosition(),g(e);else{var o,r,i=this.wot.wtTable.hider.getBoundingClientRect(),s=Math.ceil(i.left),l=Math.ceil(i.right);r=this.wot.wtTable.hider.style.top,r=""===r?0:r,o=0>s&&l-e.offsetWidth>0?-s:0,t=o,o+="px",p(e,o,r)}this.adjustHeaderBordersPosition(t),this.adjustElementsSize()}},setScrollPosition:function(e){this.mainTableScrollableElement===window?window.scrollTo(e,u()):this.mainTableScrollableElement.scrollLeft=e},onScroll:function(){this.wot.getSetting("onScrollVertically")},sumCellSizes:function(e,t){for(var n=0,o=this.wot.wtSettings.defaultColumnWidth;t>e;)n+=this.wot.wtTable.getStretchedColumnWidth(e)||o,e++;return n},adjustElementsSize:function(){var e=void 0!==arguments[0]?arguments[0]:!1;this.updateTrimmingContainer(),(this.needFullRender||e)&&(this.adjustRootElementSize(),this.adjustRootChildrenSize(),e||(this.areElementSizesAdjusted=!0))},adjustRootElementSize:function(){var e,t=this.wot.wtTable.holder,n=t.clientHeight===t.offsetHeight?0:l(),o=this.clone.wtTable.holder.parentNode,r=o.style,i=this.wot.getSetting("preventOverflow");if(this.trimmingContainer!==window||"vertical"===i){var s=this.wot.wtViewport.getWorkspaceHeight()-n;s=Math.min(s,h(this.wot.wtTable.wtRootElement)),r.height=s+"px"}else r.height="";this.clone.wtTable.holder.style.height=r.height,e=d(this.clone.wtTable.TABLE),r.width=(0===e?e:e+4)+"px"},adjustRootChildrenSize:function(){var e=l();this.clone.wtTable.hider.style.height=this.hider.style.height,this.clone.wtTable.holder.style.height=this.clone.wtTable.holder.parentNode.style.height,0===e&&(e=30),this.clone.wtTable.holder.style.width=parseInt(this.clone.wtTable.holder.parentNode.style.width,10)+e+"px"},applyToDOM:function(){var e=this.wot.getSetting("totalColumns");if(this.areElementSizesAdjusted||this.adjustElementsSize(),"number"==typeof this.wot.wtViewport.columnsRenderCalculator.startPosition)this.spreader.style.left=this.wot.wtViewport.columnsRenderCalculator.startPosition+"px";else{if(0!==e)throw new Error("Incorrect value of the columnsRenderCalculator");this.spreader.style.left="0"}this.spreader.style.right="",this.needFullRender&&this.syncOverlayOffset()},syncOverlayOffset:function(){"number"==typeof this.wot.wtViewport.rowsRenderCalculator.startPosition?this.clone.wtTable.spreader.style.top=this.wot.wtViewport.rowsRenderCalculator.startPosition+"px":this.clone.wtTable.spreader.style.top=""},scrollTo:function(e,t){var n=this.getTableParentOffset(),o=this.wot.cloneSource?this.wot.cloneSource:this.wot,r=o.wtTable.holder,i=0;t&&r.offsetWidth!==r.clientWidth&&(i=l()),t?(n+=this.sumCellSizes(0,e+1),n-=this.wot.wtViewport.getViewportWidth()):n+=this.sumCellSizes(this.wot.getSetting("fixedColumnsLeft"),e),n+=i,this.setScrollPosition(n)},getTableParentOffset:function(){var e=this.wot.getSetting("preventOverflow"),t=0;return e||this.trimmingContainer!==window||(t=this.wot.wtTable.holderOffset.left),t},getScrollPosition:function(){return a(this.mainTableScrollableElement)},adjustHeaderBordersPosition:function(e){var t=this.wot.wtTable.holder.parentNode,n=this.wot.getSetting("rowHeaders"),o=this.wot.getSetting("fixedColumnsLeft");if(o&&!n.length)s(t,"innerBorderLeft");else if(!o&&n.length){var r=c(t,"innerBorderLeft");e?s(t,"innerBorderLeft"):f(t,"innerBorderLeft"),(!r&&e||r&&!e)&&this.wot.wtOverlays.adjustElementsSize()}}},{},m),window.WalkontableLeftOverlay=w,m.registerOverlay(m.CLONE_LEFT,w)},{_base:11,"helpers/dom/element":46}],14:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableTopOverlay:{get:function(){return w}},__esModule:{value:!0}});var o,r,i=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),s=i.addClass,l=i.getScrollbarWidth,a=i.getScrollTop,u=i.getWindowScrollLeft,c=i.hasClass,d=i.outerHeight,h=i.innerWidth,f=i.removeClass,p=i.setOverlayPosition,g=i.resetCssTransform,m=(r=e("_base"),r&&r.__esModule&&r||{"default":r}).WalkontableOverlay,w=function(e){$traceurRuntime.superConstructor(v).call(this,e),this.clone=this.makeClone(m.CLONE_TOP)},v=w;$traceurRuntime.createClass(w,{shouldBeRendered:function(){return!(!this.wot.getSetting("fixedRowsTop")&&!this.wot.getSetting("columnHeaders").length)},resetFixedPosition:function(){if(this.needFullRender&&this.wot.wtTable.holder.parentNode){var e=this.clone.wtTable.holder.parentNode,t=0,n=this.wot.getSetting("preventOverflow");if(this.trimmingContainer!==window||n&&"vertical"===n)t=this.getScrollPosition(),g(e);else{var o,r,i=this.wot.wtTable.hider.getBoundingClientRect(),s=Math.ceil(i.top),l=Math.ceil(i.bottom);o=this.wot.wtTable.hider.style.left,o=""===o?0:o,r=0>s&&l-e.offsetHeight>0?-s:0,t=r,r+="px",p(e,o,r)}this.adjustHeaderBordersPosition(t),this.adjustElementsSize()}},setScrollPosition:function(e){this.mainTableScrollableElement===window?window.scrollTo(u(),e):this.mainTableScrollableElement.scrollTop=e},onScroll:function(){this.wot.getSetting("onScrollHorizontally")},sumCellSizes:function(e,t){for(var n=0,o=this.wot.wtSettings.settings.defaultRowHeight;t>e;){var r=this.wot.wtTable.getRowHeight(e);n+=void 0===r?o:r,e++}return n},adjustElementsSize:function(){var e=void 0!==arguments[0]?arguments[0]:!1;this.updateTrimmingContainer(),(this.needFullRender||e)&&(this.adjustRootElementSize(),this.adjustRootChildrenSize(),e||(this.areElementSizesAdjusted=!0))},adjustRootElementSize:function(){var e,t=this.wot.wtTable.holder,n=t.clientWidth===t.offsetWidth?0:l(),o=this.clone.wtTable.holder.parentNode,r=o.style,i=this.wot.getSetting("preventOverflow");if(this.trimmingContainer!==window||"horizontal"===i){var s=this.wot.wtViewport.getWorkspaceWidth()-n;s=Math.min(s,h(this.wot.wtTable.wtRootElement)),r.width=s+"px"}else r.width="";this.clone.wtTable.holder.style.width=r.width,e=d(this.clone.wtTable.TABLE),r.height=(0===e?e:e+4)+"px"},adjustRootChildrenSize:function(){var e=l();this.clone.wtTable.hider.style.width=this.hider.style.width,this.clone.wtTable.holder.style.width=this.clone.wtTable.holder.parentNode.style.width,0===e&&(e=30),this.clone.wtTable.holder.style.height=parseInt(this.clone.wtTable.holder.parentNode.style.height,10)+e+"px"},applyToDOM:function(){var e=this.wot.getSetting("totalRows");if(this.areElementSizesAdjusted||this.adjustElementsSize(),"number"==typeof this.wot.wtViewport.rowsRenderCalculator.startPosition)this.spreader.style.top=this.wot.wtViewport.rowsRenderCalculator.startPosition+"px";else{if(0!==e)throw new Error("Incorrect value of the rowsRenderCalculator");this.spreader.style.top="0"}this.spreader.style.bottom="",this.needFullRender&&this.syncOverlayOffset()},syncOverlayOffset:function(){"number"==typeof this.wot.wtViewport.columnsRenderCalculator.startPosition?this.clone.wtTable.spreader.style.left=this.wot.wtViewport.columnsRenderCalculator.startPosition+"px":this.clone.wtTable.spreader.style.left=""},scrollTo:function(e,t){var n=this.getTableParentOffset(),o=this.wot.cloneSource?this.wot.cloneSource:this.wot,r=o.wtTable.holder,i=0;if(t&&r.offsetHeight!==r.clientHeight&&(i=l()),t){var s=this.wot.getSetting("fixedRowsBottom"),a=(this.wot.getSetting("fixedRowsTop"),this.wot.getSetting("totalRows"));n+=this.sumCellSizes(0,e+1),n-=this.wot.wtViewport.getViewportHeight()-this.sumCellSizes(a-s,a),n+=1}else n+=this.sumCellSizes(this.wot.getSetting("fixedRowsTop"),e);n+=i,this.setScrollPosition(n)},getTableParentOffset:function(){return this.mainTableScrollableElement===window?this.wot.wtTable.holderOffset.top:0},getScrollPosition:function(){return a(this.mainTableScrollableElement)},adjustHeaderBordersPosition:function(e){if(0===this.wot.getSetting("fixedRowsTop")&&this.wot.getSetting("columnHeaders").length>0){var t=this.wot.wtTable.holder.parentNode,n=c(t,"innerBorderTop");e||0===this.wot.getSetting("totalRows")?s(t,"innerBorderTop"):f(t,"innerBorderTop"),(!n&&e||n&&!e)&&this.wot.wtOverlays.adjustElementsSize()}if(0===this.wot.getSetting("rowHeaders").length){var o=this.clone.wtTable.THEAD.querySelectorAll("th:nth-of-type(2)");if(o)for(var r=0;r<o.length;r++)o[r].style["border-left-width"]=0}}},{},m),window.WalkontableTopOverlay=w,m.registerOverlay(m.CLONE_TOP,w)},{_base:11,"helpers/dom/element":46}],15:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableTopLeftCornerOverlay:{get:function(){return d}},__esModule:{value:!0}});var o,r,i=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),s=i.outerHeight,l=i.outerWidth,a=i.setOverlayPosition,u=i.resetCssTransform,c=(r=e("_base"),r&&r.__esModule&&r||{"default":r}).WalkontableOverlay,d=function(e){$traceurRuntime.superConstructor(h).call(this,e),this.clone=this.makeClone(c.CLONE_TOP_LEFT_CORNER)},h=d;$traceurRuntime.createClass(d,{shouldBeRendered:function(){return!(!this.wot.getSetting("fixedRowsTop")&&!this.wot.getSetting("columnHeaders").length||!this.wot.getSetting("fixedColumnsLeft")&&!this.wot.getSetting("rowHeaders").length)},resetFixedPosition:function(){if(this.updateTrimmingContainer(),this.wot.wtTable.holder.parentNode){var e=this.clone.wtTable.holder.parentNode,t=s(this.clone.wtTable.TABLE),n=l(this.clone.wtTable.TABLE),o=this.wot.getSetting("preventOverflow");if(this.trimmingContainer===window){var r=this.wot.wtTable.hider.getBoundingClientRect(),i=Math.ceil(r.top),c=Math.ceil(r.left),d=Math.ceil(r.bottom),h=Math.ceil(r.right),f="0",p="0";o&&"vertical"!==o||0>c&&h-e.offsetWidth>0&&(f=-c+"px"),o&&"horizontal"!==o||0>i&&d-e.offsetHeight>0&&(p=-i+"px"),a(e,f,p)}else u(e);e.style.height=(0===t?t:t+4)+"px",e.style.width=(0===n?n:n+4)+"px"}}},{},c),window.WalkontableTopLeftCornerOverlay=d,c.registerOverlay(c.CLONE_TOP_LEFT_CORNER,d)},{_base:11,"helpers/dom/element":46}],16:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableOverlays:{get:function(){return g}},__esModule:{value:!0}});var o,r,i,s,l=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),a=l.getScrollableElement,u=l.getScrollbarWidth,c=l.getScrollLeft,d=l.getScrollTop,h=(r=e("helpers/unicode"),r&&r.__esModule&&r||{"default":r}).isKey,f=(i=e("helpers/browser"),i&&i.__esModule&&i||{"default":i}).isMobileBrowser,p=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).EventManager,g=function(e){this.wot=e,this.instance=this.wot,this.eventManager=new p(this.wot),this.wot.update("scrollbarWidth",u()),this.wot.update("scrollbarHeight",u()),this.scrollableElement=a(this.wot.wtTable.TABLE),this.topOverlay=WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_TOP,this.wot),"undefined"==typeof WalkontableBottomOverlay?this.bottomOverlay={needFullRender:!1}:this.bottomOverlay=WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_BOTTOM,this.wot),this.leftOverlay=WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_LEFT,this.wot),this.topOverlay.needFullRender&&this.leftOverlay.needFullRender&&(this.topLeftCornerOverlay=WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_TOP_LEFT_CORNER,this.wot)),this.bottomOverlay.needFullRender&&this.leftOverlay.needFullRender&&"undefined"!=typeof WalkontableBottomLeftCornerOverlay?this.bottomLeftCornerOverlay=WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER,this.wot):this.bottomLeftCornerOverlay={needFullRender:!1},this.wot.getSetting("debug")&&(this.debug=WalkontableOverlay.createOverlay(WalkontableOverlay.CLONE_DEBUG,this.wot)),this.destroyed=!1,this.keyPressed=!1,this.spreaderLastSize={width:null,height:null},this.overlayScrollPositions={master:{top:0,left:0},top:{top:null,left:0},bottom:{top:null,left:0},left:{top:0,left:null}},this.pendingScrollCallbacks={master:{top:0,left:0},top:{left:0},bottom:{left:0},left:{top:0}},this.verticalScrolling=!1,this.horizontalScrolling=!1,this.delegatedScrollCallback=!1,this.registeredListeners=[],this.registerListeners()};$traceurRuntime.createClass(g,{refreshAll:function(){if(this.wot.drawn){if(!this.wot.wtTable.holder.parentNode)return void this.destroy();this.wot.draw(!0),this.verticalScrolling&&this.leftOverlay.onScroll(),this.horizontalScrolling&&this.topOverlay.onScroll(),this.verticalScrolling=!1,this.horizontalScrolling=!1}},registerListeners:function(){var e=this,t=this.topOverlay.mainTableScrollableElement,n=this.leftOverlay.mainTableScrollableElement,o=[];for(o.push([document.documentElement,"keydown",function(t){return e.onKeyDown(t)}]),o.push([document.documentElement,"keyup",function(){return e.onKeyUp()}]),o.push([document,"visibilitychange",function(){return e.onKeyUp()}]),o.push([t,"scroll",function(t){return e.onTableScroll(t)}]),t!==n&&o.push([n,"scroll",function(t){return e.onTableScroll(t)}]),this.topOverlay.needFullRender&&(o.push([this.topOverlay.clone.wtTable.holder,"scroll",function(t){return e.onTableScroll(t)}]),o.push([this.topOverlay.clone.wtTable.holder,"wheel",function(t){return e.onTableScroll(t)}])),this.bottomOverlay.needFullRender&&(o.push([this.bottomOverlay.clone.wtTable.holder,"scroll",function(t){return e.onTableScroll(t)}]),o.push([this.bottomOverlay.clone.wtTable.holder,"wheel",function(t){return e.onTableScroll(t)}])),this.leftOverlay.needFullRender&&(o.push([this.leftOverlay.clone.wtTable.holder,"scroll",function(t){return e.onTableScroll(t)}]),o.push([this.leftOverlay.clone.wtTable.holder,"wheel",function(t){return e.onTableScroll(t)}])),this.topOverlay.trimmingContainer!==window&&this.leftOverlay.trimmingContainer!==window&&o.push([window,"wheel",function(t){var n,o=t.wheelDeltaY||t.deltaY,r=t.wheelDeltaX||t.deltaX;e.topOverlay.clone.wtTable.holder.contains(t.realTarget)?n="top":e.bottomOverlay.clone&&e.bottomOverlay.clone.wtTable.holder.contains(t.realTarget)?n="bottom":e.leftOverlay.clone.wtTable.holder.contains(t.realTarget)&&(n="left"),"top"==n&&0!==o?t.preventDefault():"left"==n&&0!==r?t.preventDefault():"bottom"==n&&0!==o&&t.preventDefault()}]);o.length;){var r=o.pop();this.eventManager.addEventListener(r[0],r[1],r[2]),this.registeredListeners.push(r)}},deregisterListeners:function(){for(;this.registeredListeners.length;){var e=this.registeredListeners.pop();this.eventManager.removeEventListener(e[0],e[1],e[2])}},onTableScroll:function(e){if(!f()){var t=this.leftOverlay.mainTableScrollableElement,n=this.topOverlay.mainTableScrollableElement,o=e.target;this.keyPressed&&(n!==window&&o!==window&&!e.target.contains(n)||t!==window&&o!==window&&!e.target.contains(t))||("scroll"===e.type?this.syncScrollPositions(e):this.translateMouseWheelToScroll(e))}},onKeyDown:function(e){this.keyPressed=h(e.keyCode,"ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT")},onKeyUp:function(){this.keyPressed=!1},translateMouseWheelToScroll:function(e){var t,n=this.topOverlay.clone.wtTable.holder,o=this.bottomOverlay.clone?this.bottomOverlay.clone.wtTable.holder:null,r=this.leftOverlay.clone.wtTable.holder,i={type:"wheel"},s=e.target,l=e.wheelDeltaY||-1*e.deltaY,a=e.wheelDeltaX||-1*e.deltaX;for(1===e.deltaMode&&(l=120*l,a=120*a);s!=document&&null!=s;){if(s.className.indexOf("wtHolder")>-1){t=s;break}s=s.parentNode}return i.target=t,t==n?this.syncScrollPositions(i,-.2*l):t==o?this.syncScrollPositions(i,-.2*l):t==r&&this.syncScrollPositions(i,-.2*a),!1},syncScrollPositions:function(e){var t=void 0!==arguments[1]?arguments[1]:null;if(!this.destroyed){if(0===arguments.length)return void this.syncScrollWithMaster();var n,o,r,i=this.leftOverlay.mainTableScrollableElement,s=this.topOverlay.mainTableScrollableElement,l=e.target,a=0,u=!1,h=!1,f=this.wot.getSetting("preventOverflow");this.topOverlay.needFullRender&&(n=this.topOverlay.clone.wtTable.holder),this.bottomOverlay.needFullRender&&(r=this.bottomOverlay.clone.wtTable.holder),this.leftOverlay.needFullRender&&(o=this.leftOverlay.clone.wtTable.holder),l===document&&(l=window),l===i||l===s?(a=c(f?this.scrollableElement:l),this.horizontalScrolling=!0,this.overlayScrollPositions.master.left=a,u=!0,this.pendingScrollCallbacks.master.left>0?this.pendingScrollCallbacks.master.left--:(n&&n.scrollLeft!==a&&(null==t&&this.pendingScrollCallbacks.top.left++,n.scrollLeft=a,h=i!==window),r&&r.scrollLeft!==a&&(null==t&&this.pendingScrollCallbacks.bottom.left++,r.scrollLeft=a,h=i!==window)),a=d(l),this.verticalScrolling=!0,this.overlayScrollPositions.master.top=a,u=!0,this.pendingScrollCallbacks.master.top>0?this.pendingScrollCallbacks.master.top--:o&&o.scrollTop!==a&&(null==t&&this.pendingScrollCallbacks.left.top++,o.scrollTop=a,h=s!==window)):l===r?(a=c(l),this.horizontalScrolling=!0,this.overlayScrollPositions.bottom.left=a,u=!0,this.pendingScrollCallbacks.bottom.left>0?this.pendingScrollCallbacks.bottom.left--:(null==t&&this.pendingScrollCallbacks.master.left++,i.scrollLeft=a,n&&n.scrollLeft!==a&&(null==t&&this.pendingScrollCallbacks.top.left++,n.scrollLeft=a,h=s!==window)),null!==t&&(u=!0,s.scrollTop+=t)):l===n?(a=c(l),this.horizontalScrolling=!0,this.overlayScrollPositions.top.left=a,u=!0,this.pendingScrollCallbacks.top.left>0?this.pendingScrollCallbacks.top.left--:(null==t&&this.pendingScrollCallbacks.master.left++,i.scrollLeft=a),null!==t&&(u=!0,s.scrollTop+=t),r&&r.scrollLeft!==a&&(null==t&&this.pendingScrollCallbacks.bottom.left++,r.scrollLeft=a,h=s!==window)):l===o&&(a=d(l),this.overlayScrollPositions.left.top!==a&&(this.verticalScrolling=!0,this.overlayScrollPositions.left.top=a,u=!0,this.pendingScrollCallbacks.left.top>0?this.pendingScrollCallbacks.left.top--:(null==t&&this.pendingScrollCallbacks.master.top++,s.scrollTop=a)),null!==t&&(u=!0,s.scrollLeft+=t)),!this.keyPressed&&u&&"scroll"===e.type&&(this.delegatedScrollCallback?this.delegatedScrollCallback=!1:this.refreshAll(),h&&(this.delegatedScrollCallback=!0))}},syncScrollWithMaster:function(){var e=this.topOverlay.mainTableScrollableElement;this.topOverlay.needFullRender&&(this.topOverlay.clone.wtTable.holder.scrollLeft=e.scrollLeft),this.leftOverlay.needFullRender&&(this.leftOverlay.clone.wtTable.holder.scrollTop=e.scrollTop)},updateMainScrollableElements:function(){this.deregisterListeners(),this.leftOverlay.updateMainScrollableElement(),this.topOverlay.updateMainScrollableElement(),this.bottomOverlay.needFullRender&&this.bottomOverlay.updateMainScrollableElement(),this.scrollableElement=a(this.wot.wtTable.TABLE),this.registerListeners()},destroy:function(){this.eventManager.destroy(),this.topOverlay.destroy(),this.bottomOverlay.clone&&this.bottomOverlay.destroy(),this.leftOverlay.destroy(),this.topLeftCornerOverlay&&this.topLeftCornerOverlay.destroy(),this.bottomLeftCornerOverlay&&this.bottomLeftCornerOverlay.clone&&this.bottomLeftCornerOverlay.destroy(),this.debug&&this.debug.destroy(),this.destroyed=!0},refresh:function(){var e=void 0!==arguments[0]?arguments[0]:!1;if(this.topOverlay.areElementSizesAdjusted&&this.leftOverlay.areElementSizesAdjusted){var t=this.wot.wtTable.wtRootElement.parentNode||this.wot.wtTable.wtRootElement,n=t.clientWidth,o=t.clientHeight;n===this.spreaderLastSize.width&&o===this.spreaderLastSize.height||(this.spreaderLastSize.width=n,this.spreaderLastSize.height=o,this.adjustElementsSize())}this.bottomOverlay.clone&&this.bottomOverlay.refresh(e),this.leftOverlay.refresh(e),this.topOverlay.refresh(e),this.topLeftCornerOverlay&&this.topLeftCornerOverlay.refresh(e),this.bottomLeftCornerOverlay&&this.bottomLeftCornerOverlay.clone&&this.bottomLeftCornerOverlay.refresh(e),this.debug&&this.debug.refresh(e)},adjustElementsSize:function(){var e=void 0!==arguments[0]?arguments[0]:!1,t=this.wot.getSetting("totalColumns"),n=this.wot.getSetting("totalRows"),o=this.wot.wtViewport.getRowHeaderWidth(),r=this.wot.wtViewport.getColumnHeaderHeight(),i=this.wot.wtTable.hider.style;i.width=o+this.leftOverlay.sumCellSizes(0,t)+"px",i.height=r+this.topOverlay.sumCellSizes(0,n)+1+"px",this.topOverlay.adjustElementsSize(e),this.leftOverlay.adjustElementsSize(e),this.bottomOverlay.clone&&this.bottomOverlay.adjustElementsSize(e)},applyToDOM:function(){this.topOverlay.areElementSizesAdjusted&&this.leftOverlay.areElementSizesAdjusted||this.adjustElementsSize(),this.topOverlay.applyToDOM(),this.bottomOverlay.clone&&this.bottomOverlay.applyToDOM(),this.leftOverlay.applyToDOM()}},{}),window.WalkontableOverlays=g},{eventManager:41,"helpers/browser":43,"helpers/dom/element":46,"helpers/unicode":55}],17:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableScroll:{get:function(){return p}},__esModule:{value:!0}});var o,r,i=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),s=i.innerHeight,l=i.innerWidth,a=i.getScrollLeft,u=i.getScrollTop,c=i.offset,d=(r=e("helpers/number"),r&&r.__esModule&&r||{"default":r}),h=d.rangeEach,f=d.rangeEachReverse,p=function(e){this.wot=e,this.instance=e};$traceurRuntime.createClass(p,{scrollViewport:function(e){if(this.wot.drawn){var t=this._getVariables(),n=t.topOverlay,o=t.leftOverlay,r=t.totalRows,i=t.totalColumns,s=t.fixedRowsTop,l=t.fixedRowsBottom,a=t.fixedColumnsLeft;if(e.row<0||e.row>r-1)throw new Error("row "+e.row+" does not exist");if(e.col<0||e.col>i-1)throw new Error("column "+e.col+" does not exist");e.row>=s&&e.row<this.getFirstVisibleRow()?n.scrollTo(e.row):e.row>this.getLastVisibleRow()&&e.row<r-l&&n.scrollTo(e.row,!0),e.col>=a&&e.col<this.getFirstVisibleColumn()?o.scrollTo(e.col):e.col>this.getLastVisibleColumn()&&o.scrollTo(e.col,!0)}},getFirstVisibleRow:function(){var e=this._getVariables(),t=e.topOverlay,n=e.wtTable,o=e.wtViewport,r=e.totalRows,i=e.fixedRowsTop,l=n.getFirstVisibleRow();if(t.mainTableScrollableElement===window){var a=c(n.wtRootElement),d=s(n.hider),h=s(window),p=u(window);if(a.top+d-h<=p){var g=o.getColumnHeaderHeight();g+=t.sumCellSizes(0,i),f(r,1,function(e){return g+=t.sumCellSizes(e-1,e),a.top+d-g<=p?(l=e,!1):void 0})}}return l},getLastVisibleRow:function(){var e=this._getVariables(),t=e.topOverlay,n=e.wtTable,o=e.wtViewport,r=e.totalRows,i=n.getLastVisibleRow();if(t.mainTableScrollableElement===window){var l=c(n.wtRootElement),a=s(window),d=u(window);if(l.top>d){var f=o.getColumnHeaderHeight();h(1,r,function(e){return f+=t.sumCellSizes(e-1,e),l.top+f-d>=a?(i=e-2,!1):void 0})}}return i},getFirstVisibleColumn:function(){var e=this._getVariables(),t=e.leftOverlay,n=e.wtTable,o=e.wtViewport,r=e.totalColumns,i=(e.fixedColumnsLeft,n.getFirstVisibleColumn());if(t.mainTableScrollableElement===window){var s=c(n.wtRootElement),u=l(n.hider),d=l(window),h=a(window);if(s.left+u-d<=h){var p=o.getRowHeaderWidth();f(r,1,function(e){return p+=t.sumCellSizes(e-1,e),s.left+u-p<=h?(i=e,!1):void 0})}}return i},getLastVisibleColumn:function(){var e=this._getVariables(),t=e.leftOverlay,n=e.wtTable,o=e.wtViewport,r=e.totalColumns,i=n.getLastVisibleColumn();if(t.mainTableScrollableElement===window){var s=c(n.wtRootElement),u=l(window),d=a(window);if(s.left>d){var f=o.getRowHeaderWidth();h(1,r,function(e){return f+=t.sumCellSizes(e-1,e),s.left+f-d>=u?(i=e-2,!1):void 0})}}return i},_getVariables:function(){var e=this.wot,t=e.wtOverlays.topOverlay,n=e.wtOverlays.leftOverlay,o=e.wtTable,r=e.wtViewport,i=e.getSetting("totalRows"),s=e.getSetting("totalColumns"),l=e.getSetting("fixedRowsTop"),a=e.getSetting("fixedRowsBottom"),u=e.getSetting("fixedColumnsLeft");return{topOverlay:t,leftOverlay:n,wtTable:o,wtViewport:r,totalRows:i,totalColumns:s,fixedRowsTop:l,fixedRowsBottom:a,fixedColumnsLeft:u}}},{}),window.WalkontableScroll=p},{"helpers/dom/element":46,"helpers/number":51}],18:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableSelection:{get:function(){return d}},__esModule:{value:!0}});var o,r,i,s,l=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}).addClass,a=(r=e("border"),r&&r.__esModule&&r||{"default":r}).WalkontableBorder,u=(i=e("cell/coords"),i&&i.__esModule&&i||{"default":i}).WalkontableCellCoords,c=(s=e("cell/range"),s&&s.__esModule&&s||{"default":s}).WalkontableCellRange,d=function(e,t){this.settings=e,this.cellRange=t||null,this.instanceBorders={}};$traceurRuntime.createClass(d,{getBorder:function(e){return this.instanceBorders[e.guid]?this.instanceBorders[e.guid]:void(this.instanceBorders[e.guid]=new a(e,this.settings))},isEmpty:function(){return null===this.cellRange},add:function(e){this.isEmpty()?this.cellRange=new c(e,e,e):this.cellRange.expand(e)},replace:function(e,t){if(!this.isEmpty()){if(this.cellRange.from.isEqual(e))return this.cellRange.from=t,!0;if(this.cellRange.to.isEqual(e))return this.cellRange.to=t,!0}return!1},clear:function(){this.cellRange=null},getCorners:function(){var e=this.cellRange.getTopLeftCorner(),t=this.cellRange.getBottomRightCorner();return[e.row,e.col,t.row,t.col]},addClassAtCoords:function(e,t,n,o){var r=e.wtTable.getCell(new u(t,n));"object"==typeof r&&l(r,o)},draw:function(e){if(this.isEmpty()){if(this.settings.border){var t=this.getBorder(e);t&&t.disappear()}}else{for(var n,o,r,i=e.wtTable.getRenderedRowsCount(),s=e.wtTable.getRenderedColumnsCount(),a=this.getCorners(),u=0;s>u;u++)o=e.wtTable.columnFilter.renderedToSource(u),o>=a[1]&&o<=a[3]&&(r=e.wtTable.getColumnHeader(o),r&&this.settings.highlightColumnClassName&&l(r,this.settings.highlightColumnClassName));for(var c=0;i>c;c++){n=e.wtTable.rowFilter.renderedToSource(c),n>=a[0]&&n<=a[2]&&(r=e.wtTable.getRowHeader(n),r&&this.settings.highlightRowClassName&&l(r,this.settings.highlightRowClassName));for(var d=0;s>d;d++)o=e.wtTable.columnFilter.renderedToSource(d),n>=a[0]&&n<=a[2]&&o>=a[1]&&o<=a[3]?this.settings.className&&this.addClassAtCoords(e,n,o,this.settings.className):n>=a[0]&&n<=a[2]?this.settings.highlightRowClassName&&this.addClassAtCoords(e,n,o,this.settings.highlightRowClassName):o>=a[1]&&o<=a[3]&&this.settings.highlightColumnClassName&&this.addClassAtCoords(e,n,o,this.settings.highlightColumnClassName)}if(e.getSetting("onBeforeDrawBorders",a,this.settings.className),this.settings.border){var h=this.getBorder(e);h&&h.appear(a)}}}},{}),window.WalkontableSelection=d},{border:2,"cell/coords":5,"cell/range":6,"helpers/dom/element":46}],19:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableSettings:{get:function(){return i}},__esModule:{value:!0}});var o,r=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}).fastInnerText,i=function(e,t){var n=this;this.wot=e,this.instance=e,this.defaults={table:void 0,debug:!1,externalRowCalculator:!1,stretchH:"none",currentRowClassName:null,currentColumnClassName:null,preventOverflow:function(){return!1},data:void 0,fixedColumnsLeft:0,fixedRowsTop:0,fixedRowsBottom:0,minSpareRows:0,rowHeaders:function(){return[]},columnHeaders:function(){return[]},totalRows:void 0,totalColumns:void 0,cellRenderer:function(e,t,o){var i=n.getSetting("data",e,t);r(o,void 0===i||null===i?"":i)},columnWidth:function(e){},rowHeight:function(e){},defaultRowHeight:23,defaultColumnWidth:50,selections:null,hideBorderOnMouseDownOver:!1,viewportRowCalculatorOverride:null,viewportColumnCalculatorOverride:null,onCellMouseDown:null,onCellMouseOver:null,onCellDblClick:null,onCellCornerMouseDown:null,onCellCornerDblClick:null,beforeDraw:null,
onDraw:null,onBeforeDrawBorders:null,onScrollVertically:null,onScrollHorizontally:null,onBeforeTouchScroll:null,onAfterMomentumScroll:null,onBeforeStretchingColumnWidth:function(e){return e},scrollbarWidth:10,scrollbarHeight:10,renderAllRows:!1,groups:!1,rowHeaderWidth:null,columnHeaderHeight:null},this.settings={};for(var o in this.defaults)if(this.defaults.hasOwnProperty(o))if(void 0!==t[o])this.settings[o]=t[o];else{if(void 0===this.defaults[o])throw new Error('A required setting "'+o+'" was not provided');this.settings[o]=this.defaults[o]}};$traceurRuntime.createClass(i,{update:function(e,t){if(void 0===t)for(var n in e)e.hasOwnProperty(n)&&(this.settings[n]=e[n]);else this.settings[e]=t;return this.wot},getSetting:function(e,t,n,o,r){return"function"==typeof this.settings[e]?this.settings[e](t,n,o,r):void 0!==t&&Array.isArray(this.settings[e])?this.settings[e][t]:this.settings[e]},has:function(e){return!!this.settings[e]}},{}),window.WalkontableSettings=i},{"helpers/dom/element":46}],20:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableTable:{get:function(){return R}},__esModule:{value:!0}});var o,r,i,s,l,a,u=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}),c=u.getStyle,d=u.getTrimmingContainer,h=u.hasClass,f=u.index,p=u.offset,g=u.removeClass,m=u.removeTextNodes,w=u.overlayContainsElement,v=u.closest,y=(r=e("cell/coords"),r&&r.__esModule&&r||{"default":r}).WalkontableCellCoords,b=((i=e("cell/range"),i&&i.__esModule&&i||{"default":i}).WalkontableCellRange,(s=e("filter/column"),s&&s.__esModule&&s||{"default":s}).WalkontableColumnFilter),C=(l=e("filter/row"),l&&l.__esModule&&l||{"default":l}).WalkontableRowFilter,_=(a=e("tableRenderer"),a&&a.__esModule&&a||{"default":a}).WalkontableTableRenderer,R=function(e,t){this.wot=e,this.instance=this.wot,this.TABLE=t,this.TBODY=null,this.THEAD=null,this.COLGROUP=null,this.tableOffset=0,this.holderOffset=0,m(this.TABLE),this.spreader=this.createSpreader(this.TABLE),this.hider=this.createHider(this.spreader),this.holder=this.createHolder(this.hider),this.wtRootElement=this.holder.parentNode,this.alignOverlaysWithTrimmingContainer(),this.fixTableDomTree(),this.colgroupChildrenLength=this.COLGROUP.childNodes.length,this.theadChildrenLength=this.THEAD.firstChild?this.THEAD.firstChild.childNodes.length:0,this.tbodyChildrenLength=this.TBODY.childNodes.length,this.rowFilter=null,this.columnFilter=null};$traceurRuntime.createClass(R,{fixTableDomTree:function(){this.TBODY=this.TABLE.querySelector("tbody"),this.TBODY||(this.TBODY=document.createElement("tbody"),this.TABLE.appendChild(this.TBODY)),this.THEAD=this.TABLE.querySelector("thead"),this.THEAD||(this.THEAD=document.createElement("thead"),this.TABLE.insertBefore(this.THEAD,this.TBODY)),this.COLGROUP=this.TABLE.querySelector("colgroup"),this.COLGROUP||(this.COLGROUP=document.createElement("colgroup"),this.TABLE.insertBefore(this.COLGROUP,this.THEAD)),this.wot.getSetting("columnHeaders").length&&!this.THEAD.childNodes.length&&this.THEAD.appendChild(document.createElement("TR"))},createSpreader:function(e){var t,n=e.parentNode;return n&&1===n.nodeType&&h(n,"wtHolder")||(t=document.createElement("div"),t.className="wtSpreader",n&&n.insertBefore(t,e),t.appendChild(e)),t.style.position="relative",t},createHider:function(e){var t,n=e.parentNode;return n&&1===n.nodeType&&h(n,"wtHolder")||(t=document.createElement("div"),t.className="wtHider",n&&n.insertBefore(t,e),t.appendChild(e)),t},createHolder:function(e){var t,n=e.parentNode;return n&&1===n.nodeType&&h(n,"wtHolder")||(t=document.createElement("div"),t.style.position="relative",t.className="wtHolder",n&&n.insertBefore(t,e),this.isWorkingOnClone()||(t.parentNode.className+="ht_master handsontable"),t.appendChild(e)),t},alignOverlaysWithTrimmingContainer:function(){var e=d(this.wtRootElement);if(!this.isWorkingOnClone())if(this.holder.parentNode.style.position="relative",e===window){var t=this.wot.getSetting("preventOverflow");t||(this.holder.style.overflow="visible",this.wtRootElement.style.overflow="visible")}else this.holder.style.width=c(e,"width"),this.holder.style.height=c(e,"height"),this.holder.style.overflow=""},isWorkingOnClone:function(){return!!this.wot.cloneSource},draw:function(e){var t=this.instance.getSetting("totalRows");if(this.isWorkingOnClone()||(this.holderOffset=p(this.holder),e=this.wot.wtViewport.createRenderCalculators(e)),e)this.isWorkingOnClone()||this.wot.wtViewport.createVisibleCalculators(),this.wot.wtOverlays&&this.wot.wtOverlays.refresh(!0);else{this.isWorkingOnClone()?this.tableOffset=this.wot.cloneSource.wtTable.tableOffset:this.tableOffset=p(this.TABLE);var n;n=WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_DEBUG)||WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_TOP)||WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_TOP_LEFT_CORNER)?0:WalkontableOverlay.isOverlayTypeOf(this.instance.cloneOverlay,WalkontableOverlay.CLONE_BOTTOM)||WalkontableOverlay.isOverlayTypeOf(this.instance.cloneOverlay,WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)?Math.max(t-this.wot.getSetting("fixedRowsBottom"),0):this.wot.wtViewport.rowsRenderCalculator.startRow;var o;o=WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_DEBUG)||WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_LEFT)||WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_TOP_LEFT_CORNER)||WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER)?0:this.wot.wtViewport.columnsRenderCalculator.startColumn,this.rowFilter=new C(n,t,this.wot.getSetting("columnHeaders").length),this.columnFilter=new b(o,this.wot.getSetting("totalColumns"),this.wot.getSetting("rowHeaders").length),this.alignOverlaysWithTrimmingContainer(),this._doDraw()}return this.refreshSelections(e),this.isWorkingOnClone()||(this.wot.wtOverlays.topOverlay.resetFixedPosition(),this.wot.wtOverlays.bottomOverlay.clone&&this.wot.wtOverlays.bottomOverlay.resetFixedPosition(),this.wot.wtOverlays.leftOverlay.resetFixedPosition(),this.wot.wtOverlays.topLeftCornerOverlay&&this.wot.wtOverlays.topLeftCornerOverlay.resetFixedPosition(),this.instance.wtOverlays.bottomLeftCornerOverlay&&this.instance.wtOverlays.bottomLeftCornerOverlay.clone&&this.wot.wtOverlays.bottomLeftCornerOverlay.resetFixedPosition()),this.wot.drawn=!0,this},_doDraw:function(){var e=new _(this);e.render()},removeClassFromCells:function(e){for(var t=this.TABLE.querySelectorAll("."+e),n=0,o=t.length;o>n;n++)g(t[n],e)},refreshSelections:function(e){if(this.wot.selections){var t=this.wot.selections.length;if(e)for(var n=0;t>n;n++)this.wot.selections[n].settings.className&&this.removeClassFromCells(this.wot.selections[n].settings.className),this.wot.selections[n].settings.highlightRowClassName&&this.removeClassFromCells(this.wot.selections[n].settings.highlightRowClassName),this.wot.selections[n].settings.highlightColumnClassName&&this.removeClassFromCells(this.wot.selections[n].settings.highlightColumnClassName);for(var o=0;t>o;o++)this.wot.selections[o].draw(this.wot,e)}},getCell:function(e){if(this.isRowBeforeRenderedRows(e.row))return-1;if(this.isRowAfterRenderedRows(e.row))return-2;var t=this.TBODY.childNodes[this.rowFilter.sourceToRendered(e.row)];return t?t.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e.col)]:void 0},getColumnHeader:function(e){var t=void 0!==arguments[1]?arguments[1]:0,n=this.THEAD.childNodes[t];return n?n.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(e)]:void 0},getRowHeader:function(e){if(0===this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0))return null;var t=this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)];return t?t.childNodes[0]:void 0},getCoords:function(e){"TD"!==e.nodeName&&"TH"!==e.nodeName&&(e=v(e,["TD","TH"]));var t=e.parentNode,n=t.parentNode,o=f(t),r=e.cellIndex;return w(WalkontableOverlay.CLONE_TOP_LEFT_CORNER,e)||w(WalkontableOverlay.CLONE_TOP,e)?"THEAD"===n.nodeName&&(o-=n.childNodes.length):o=n===this.THEAD?this.rowFilter.visibleColHeadedRowToSourceRow(o):this.rowFilter.renderedToSource(o),r=w(WalkontableOverlay.CLONE_TOP_LEFT_CORNER,e)||w(WalkontableOverlay.CLONE_LEFT,e)?this.columnFilter.offsettedTH(r):this.columnFilter.visibleRowHeadedColumnToSourceColumn(r),new y(o,r)},getTrForRow:function(e){return this.TBODY.childNodes[this.rowFilter.sourceToRendered(e)]},getFirstRenderedRow:function(){return this.wot.wtViewport.rowsRenderCalculator.startRow},getFirstVisibleRow:function(){return this.wot.wtViewport.rowsVisibleCalculator.startRow},getFirstRenderedColumn:function(){return this.wot.wtViewport.columnsRenderCalculator.startColumn},getFirstVisibleColumn:function(){return this.wot.wtViewport.columnsVisibleCalculator.startColumn},getLastRenderedRow:function(){return this.wot.wtViewport.rowsRenderCalculator.endRow},getLastVisibleRow:function(){return this.wot.wtViewport.rowsVisibleCalculator.endRow},getLastRenderedColumn:function(){return this.wot.wtViewport.columnsRenderCalculator.endColumn},getLastVisibleColumn:function(){return this.wot.wtViewport.columnsVisibleCalculator.endColumn},isRowBeforeRenderedRows:function(e){return this.rowFilter.sourceToRendered(e)<0&&e>=0},isRowAfterViewport:function(e){return this.rowFilter.sourceToRendered(e)>this.getLastVisibleRow()},isRowAfterRenderedRows:function(e){return this.rowFilter.sourceToRendered(e)>this.getLastRenderedRow()},isColumnBeforeViewport:function(e){return this.columnFilter.sourceToRendered(e)<0&&e>=0},isColumnAfterViewport:function(e){return this.columnFilter.sourceToRendered(e)>this.getLastVisibleColumn()},isLastRowFullyVisible:function(){return this.getLastVisibleRow()===this.getLastRenderedRow()},isLastColumnFullyVisible:function(){return this.getLastVisibleColumn()===this.getLastRenderedColumn()},getRenderedColumnsCount:function(){var e=this.wot.wtViewport.columnsRenderCalculator.count,t=this.wot.getSetting("totalColumns");if(this.wot.isOverlayName(WalkontableOverlay.CLONE_DEBUG))e=t;else if(this.wot.isOverlayName(WalkontableOverlay.CLONE_LEFT)||this.wot.isOverlayName(WalkontableOverlay.CLONE_TOP_LEFT_CORNER)||this.wot.isOverlayName(WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER))return Math.min(this.wot.getSetting("fixedColumnsLeft"),t);return e},getRenderedRowsCount:function(){var e=this.wot.wtViewport.rowsRenderCalculator.count,t=this.wot.getSetting("totalRows");return this.wot.isOverlayName(WalkontableOverlay.CLONE_DEBUG)?e=t:this.wot.isOverlayName(WalkontableOverlay.CLONE_TOP)||this.wot.isOverlayName(WalkontableOverlay.CLONE_TOP_LEFT_CORNER)?e=Math.min(this.wot.getSetting("fixedRowsTop"),t):(this.wot.isOverlayName(WalkontableOverlay.CLONE_BOTTOM)||this.wot.isOverlayName(WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER))&&(e=Math.min(this.wot.getSetting("fixedRowsBottom"),t)),e},getVisibleRowsCount:function(){return this.wot.wtViewport.rowsVisibleCalculator.count},allRowsInViewport:function(){return this.wot.getSetting("totalRows")==this.getVisibleRowsCount()},getRowHeight:function(e){var t=this.wot.wtSettings.settings.rowHeight(e),n=this.wot.wtViewport.oversizedRows[e];return void 0!==n&&(t=void 0===t?n:Math.max(t,n)),t},getColumnHeaderHeight:function(e){var t=this.wot.wtSettings.settings.defaultRowHeight,n=this.wot.wtViewport.oversizedColumnHeaders[e];return void 0!==n&&(t=t?Math.max(t,n):n),t},getVisibleColumnsCount:function(){return this.wot.wtViewport.columnsVisibleCalculator.count},allColumnsInViewport:function(){return this.wot.getSetting("totalColumns")==this.getVisibleColumnsCount()},getColumnWidth:function(e){var t=this.wot.wtSettings.settings.columnWidth;return"function"==typeof t?t=t(e):"object"==typeof t&&(t=t[e]),t||this.wot.wtSettings.settings.defaultColumnWidth},getStretchedColumnWidth:function(e){var t=this.getColumnWidth(e),n=null==t?this.instance.wtSettings.settings.defaultColumnWidth:t,o=this.wot.wtViewport.columnsRenderCalculator;if(o){var r=o.getStretchedColumnWidth(e,n);r&&(n=r)}return n}},{}),window.WalkontableTable=R},{"cell/coords":5,"cell/range":6,"filter/column":9,"filter/row":10,"helpers/dom/element":46,tableRenderer:21}],21:[function(e,t,n){"use strict";function o(e,t){var n=document.createElement("TH");return t.insertBefore(n,e),t.removeChild(e),n}function r(e,t){var n=document.createElement("TD");return t.insertBefore(n,e),t.removeChild(e),n}Object.defineProperties(n,{WalkontableTableRenderer:{get:function(){return p}},__esModule:{value:!0}});var i,s=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),l=s.addClass,a=s.empty,u=s.getScrollbarWidth,c=s.hasClass,d=s.innerHeight,h=s.outerWidth,f=!1,p=function(e){this.wtTable=e,this.wot=e.instance,this.instance=e.instance,this.rowFilter=e.rowFilter,this.columnFilter=e.columnFilter,this.TABLE=e.TABLE,this.THEAD=e.THEAD,this.TBODY=e.TBODY,this.COLGROUP=e.COLGROUP,this.rowHeaders=[],this.rowHeaderCount=0,this.columnHeaders=[],this.columnHeaderCount=0,this.fixedRowsTop=0,this.fixedRowsBottom=0};$traceurRuntime.createClass(p,{render:function(){this.wtTable.isWorkingOnClone()||this.wot.getSetting("beforeDraw",!0),this.rowHeaders=this.wot.getSetting("rowHeaders"),this.rowHeaderCount=this.rowHeaders.length,this.fixedRowsTop=this.wot.getSetting("fixedRowsTop"),this.fixedRowsBottom=this.wot.getSetting("fixedRowsBottom"),this.columnHeaders=this.wot.getSetting("columnHeaders"),this.columnHeaderCount=this.columnHeaders.length;var e,t=this.wtTable.getRenderedColumnsCount(),n=this.wtTable.getRenderedRowsCount(),o=this.wot.getSetting("totalColumns"),r=this.wot.getSetting("totalRows"),i=!1;if((WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_BOTTOM)||WalkontableOverlay.isOverlayTypeOf(this.wot.cloneOverlay,WalkontableOverlay.CLONE_BOTTOM_LEFT_CORNER))&&(this.columnHeaders=[],this.columnHeaderCount=0),o>0&&(this.adjustAvailableNodes(),i=!0,this.renderColumnHeaders(),this.renderRows(r,n,t),this.wtTable.isWorkingOnClone()||(e=this.wot.wtViewport.getWorkspaceWidth(),this.wot.wtViewport.containerWidth=null),this.adjustColumnHeaderHeights(),this.adjustColumnWidths(t),this.markOversizedColumns()),i||this.adjustAvailableNodes(),this.removeRedundantRows(n),this.wtTable.isWorkingOnClone()&&!this.wot.isOverlayName(WalkontableOverlay.CLONE_BOTTOM)||this.markOversizedRows(),this.wtTable.isWorkingOnClone())this.wot.isOverlayName(WalkontableOverlay.CLONE_BOTTOM)&&this.wot.cloneSource.wtOverlays.adjustElementsSize();else{this.wot.wtViewport.createVisibleCalculators(),this.wot.wtOverlays.refresh(!1);var s=h(this.wtTable.hider),l=h(this.wtTable.TABLE);if(0!==s&&l!==s&&this.adjustColumnWidths(t),this.wot.wtOverlays.applyToDOM(),e!==this.wot.wtViewport.getWorkspaceWidth()){this.wot.wtViewport.containerWidth=null;var a=this.wtTable.getFirstRenderedColumn(),u=this.wtTable.getLastRenderedColumn(),c=this.wot.getSetting("rowHeaderWidth");if(null!=c)for(var d=0;d<this.rowHeaderCount;d++)this.COLGROUP.childNodes[d].style.width=(isNaN(c)?c[d]:c)+"px";for(var f=a;u>f;f++){var p=this.wtTable.getStretchedColumnWidth(f),g=this.columnFilter.sourceToRendered(f);this.COLGROUP.childNodes[g+this.rowHeaderCount].style.width=p+"px"}}this.wot.getSetting("onDraw",!0)}},removeRedundantRows:function(e){for(;this.wtTable.tbodyChildrenLength>e;)this.TBODY.removeChild(this.TBODY.lastChild),this.wtTable.tbodyChildrenLength--},renderRows:function(e,t,n){for(var o,r,i=0,s=this.rowFilter.renderedToSource(i),l=this.wtTable.isWorkingOnClone();e>s&&s>=0&&(!f&&i>1e3&&(f=!0,console.warn('Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting the number of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.')),void 0===t||i!==t);){if(r=this.getOrCreateTrForRow(i,r),this.renderRowHeaders(s,r),this.adjustColumns(r,n+this.rowHeaderCount),o=this.renderCells(s,r,n),l&&!this.wot.isOverlayName(WalkontableOverlay.CLONE_BOTTOM)||this.resetOversizedRow(s),r.firstChild){var a=this.wot.wtTable.getRowHeight(s);a?(a--,r.firstChild.style.height=a+"px"):r.firstChild.style.height=""}i++,s=this.rowFilter.renderedToSource(i)}},resetOversizedRow:function(e){this.wot.getSetting("externalRowCalculator")||this.wot.wtViewport.oversizedRows&&this.wot.wtViewport.oversizedRows[e]&&(this.wot.wtViewport.oversizedRows[e]=void 0)},markOversizedRows:function(){if(!this.wot.getSetting("externalRowCalculator")){var e,t,n,o,r,i=this.instance.wtTable.TBODY.childNodes.length,s=i*this.instance.wtSettings.settings.defaultRowHeight,l=d(this.instance.wtTable.TBODY)-1;this.instance.getSetting("totalRows");if(s!==l||this.instance.getSetting("fixedRowsBottom"))for(;i;)i--,n=this.instance.wtTable.rowFilter.renderedToSource(i),e=this.instance.wtTable.getRowHeight(n),o=this.instance.wtTable.getTrForRow(n),r=o.querySelector("th"),t=r?d(r):d(o)-1,(!e&&this.instance.wtSettings.settings.defaultRowHeight<t||t>e)&&(this.instance.wtViewport.oversizedRows[n]=++t)}},markOversizedColumns:function(){var e=this.wot.getOverlayName();if(this.columnHeaderCount&&!this.wot.wtViewport.isMarkedOversizedColumn[e]&&!this.wtTable.isWorkingOnClone()){for(var t=this.wtTable.getRenderedColumnsCount(),n=0;n<this.columnHeaderCount;n++)for(var o=-1*this.rowHeaderCount;t>o;o++)this.markIfOversizedColumnHeader(o);this.wot.wtViewport.isMarkedOversizedColumn[e]=!0}},adjustColumnHeaderHeights:function(){for(var e=this.wot.getSetting("columnHeaders"),t=this.wot.wtTable.THEAD.childNodes,n=this.wot.wtViewport.oversizedColumnHeaders,o=0,r=e.length;r>o;o++)if(n[o]){if(0===t[o].childNodes.length)return;t[o].childNodes[0].style.height=n[o]+"px"}},markIfOversizedColumnHeader:function(e){for(var t,n,o,r=this.wot.wtTable.columnFilter.renderedToSource(e),i=this.columnHeaderCount,s=this.wot.wtSettings.settings.defaultRowHeight,l=this.wot.getSetting("columnHeaderHeight")||[];i;)i--,t=this.wot.wtTable.getColumnHeaderHeight(i),n=this.wot.wtTable.getColumnHeader(r,i),n&&(o=d(n),(!t&&o>s||o>t)&&(this.wot.wtViewport.oversizedColumnHeaders[i]=o),this.wot.wtViewport.oversizedColumnHeaders[i]<(l[i]||l)&&(this.wot.wtViewport.oversizedColumnHeaders[i]=l[i]||l))},renderCells:function(e,t,n){for(var o,i,s=0;n>s;s++)i=this.columnFilter.renderedToSource(s),o=0===s?t.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(i)]:o.nextSibling,"TH"==o.nodeName&&(o=r(o,t)),c(o,"hide")||(o.className=""),o.removeAttribute("style"),this.wot.wtSettings.settings.cellRenderer(e,i,o);return o},adjustColumnWidths:function(e){var t=0,n=this.wot.cloneSource?this.wot.cloneSource:this.wot,o=n.wtTable.holder;o.offsetHeight<o.scrollHeight&&(t=u()),this.wot.wtViewport.columnsRenderCalculator.refreshStretching(this.wot.wtViewport.getViewportWidth()-t);var r=this.wot.getSetting("rowHeaderWidth");if(null!=r)for(var i=0;i<this.rowHeaderCount;i++)this.COLGROUP.childNodes[i].style.width=(isNaN(r)?r[i]:r)+"px";for(var s=0;e>s;s++){var l=this.wtTable.getStretchedColumnWidth(this.columnFilter.renderedToSource(s));this.COLGROUP.childNodes[s+this.rowHeaderCount].style.width=l+"px"}},appendToTbody:function(e){this.TBODY.appendChild(e),this.wtTable.tbodyChildrenLength++},getOrCreateTrForRow:function(e,t){var n;return e>=this.wtTable.tbodyChildrenLength?(n=this.createRow(),this.appendToTbody(n)):n=0===e?this.TBODY.firstChild:t.nextSibling,n.className&&n.removeAttribute("class"),n},createRow:function(){for(var e=document.createElement("TR"),t=0;t<this.rowHeaderCount;t++)e.appendChild(document.createElement("TH"));return e},renderRowHeader:function(e,t,n){n.className="",n.removeAttribute("style"),this.rowHeaders[t](e,n,t)},renderRowHeaders:function(e,t){for(var n=t.firstChild,r=0;r<this.rowHeaderCount;r++)n?"TD"==n.nodeName&&(n=o(n,t)):(n=document.createElement("TH"),t.appendChild(n)),this.renderRowHeader(e,r,n),n=n.nextSibling},adjustAvailableNodes:function(){this.adjustColGroups(),this.adjustThead()},renderColumnHeaders:function(){this.wot.getOverlayName();if(this.columnHeaderCount)for(var e=this.wtTable.getRenderedColumnsCount(),t=0;t<this.columnHeaderCount;t++)for(var n=this.getTrForColumnHeaders(t),o=-1*this.rowHeaderCount;e>o;o++){var r=this.columnFilter.renderedToSource(o);this.renderColumnHeader(t,r,n.childNodes[o+this.rowHeaderCount])}},adjustColGroups:function(){for(var e=this.wtTable.getRenderedColumnsCount();this.wtTable.colgroupChildrenLength<e+this.rowHeaderCount;)this.COLGROUP.appendChild(document.createElement("COL")),this.wtTable.colgroupChildrenLength++;for(;this.wtTable.colgroupChildrenLength>e+this.rowHeaderCount;)this.COLGROUP.removeChild(this.COLGROUP.lastChild),this.wtTable.colgroupChildrenLength--;this.rowHeaderCount&&l(this.COLGROUP.childNodes[0],"rowHeader")},adjustThead:function(){var e=this.wtTable.getRenderedColumnsCount(),t=this.THEAD.firstChild;if(this.columnHeaders.length){for(var n=0,o=this.columnHeaders.length;o>n;n++){for(t=this.THEAD.childNodes[n],t||(t=document.createElement("TR"),this.THEAD.appendChild(t)),this.theadChildrenLength=t.childNodes.length;this.theadChildrenLength<e+this.rowHeaderCount;)t.appendChild(document.createElement("TH")),this.theadChildrenLength++;for(;this.theadChildrenLength>e+this.rowHeaderCount;)t.removeChild(t.lastChild),this.theadChildrenLength--}var r=this.THEAD.childNodes.length;if(r>this.columnHeaders.length)for(var i=this.columnHeaders.length;r>i;i++)this.THEAD.removeChild(this.THEAD.lastChild)}else t&&a(t)},getTrForColumnHeaders:function(e){return this.THEAD.childNodes[e]},renderColumnHeader:function(e,t,n){return n.className="",n.removeAttribute("style"),this.columnHeaders[e](t,n,e)},adjustColumns:function(e,t){for(var n=e.childNodes.length;t>n;){var o=document.createElement("TD");e.appendChild(o),n++}for(;n>t;)e.removeChild(e.lastChild),n--},removeRedundantColumns:function(e){for(;this.wtTable.tbodyChildrenLength>e;)this.TBODY.removeChild(this.TBODY.lastChild),this.wtTable.tbodyChildrenLength--}},{}),window.WalkontableTableRenderer=p},{"helpers/dom/element":46}],22:[function(e,t,n){"use strict";Object.defineProperties(n,{WalkontableViewport:{get:function(){return v}},__esModule:{value:!0}});var o,r,i,s,l,a=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],u=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),c=u.getScrollbarWidth,d=(u.getScrollTop,u.getStyle),h=u.offset,f=u.outerHeight,p=u.outerWidth,g=(i=e("eventManager"),i&&i.__esModule&&i||{"default":i}).EventManager,m=(s=e("calculator/viewportColumns"),s&&s.__esModule&&s||{"default":s}).WalkontableViewportColumnsCalculator,w=(l=e("calculator/viewportRows"),l&&l.__esModule&&l||{"default":l}).WalkontableViewportRowsCalculator,v=function(e){var t=this;this.wot=e,this.instance=this.wot,this.oversizedRows=[],this.oversizedColumnHeaders=[],this.isMarkedOversizedColumn={},this.clientHeight=0,this.containerWidth=NaN,this.rowHeaderWidth=NaN,this.rowsVisibleCalculator=null,this.columnsVisibleCalculator=null,this.eventManager=new g(this.wot),this.eventManager.addEventListener(window,"resize",function(){t.clientHeight=t.getWorkspaceHeight()})};$traceurRuntime.createClass(v,{getWorkspaceHeight:function(){var e,t=this.instance.wtOverlays.topOverlay.trimmingContainer,n=0;return t===window?n=document.documentElement.clientHeight:(e=f(t),n=e>0&&t.clientHeight>0?t.clientHeight:1/0),n},getWorkspaceWidth:function(){var e,t,n=this.wot.getSetting("totalColumns"),o=this.instance.wtOverlays.leftOverlay.trimmingContainer,r=this.wot.getSetting("stretchH"),i=document.documentElement.offsetWidth,s=this.wot.getSetting("preventOverflow");return s?p(this.instance.wtTable.wtRootElement):(e=a.freezeOverlays?Math.min(i-this.getWorkspaceOffset().left,i):Math.min(this.getContainerFillWidth(),i-this.getWorkspaceOffset().left,i),o===window&&n>0&&this.sumColumnWidths(0,n-1)>e?document.documentElement.clientWidth:o!==window&&(t=d(this.instance.wtOverlays.leftOverlay.trimmingContainer,"overflow"),"scroll"==t||"hidden"==t||"auto"==t)?Math.max(e,o.clientWidth):"none"!==r&&r?e:Math.max(e,p(this.instance.wtTable.TABLE)))},hasVerticalScroll:function(){return this.getWorkspaceActualHeight()>this.getWorkspaceHeight()},hasHorizontalScroll:function(){return this.getWorkspaceActualWidth()>this.getWorkspaceWidth()},sumColumnWidths:function(e,t){for(var n=0;t>e;)n+=this.wot.wtTable.getColumnWidth(e),e++;return n},getContainerFillWidth:function(){if(this.containerWidth)return this.containerWidth;var e,t,n=this.instance.wtTable.holder;return t=document.createElement("div"),t.style.width="100%",t.style.height="1px",n.appendChild(t),e=t.offsetWidth,this.containerWidth=e,n.removeChild(t),e},getWorkspaceOffset:function(){return h(this.wot.wtTable.TABLE)},getWorkspaceActualHeight:function(){return f(this.wot.wtTable.TABLE)},getWorkspaceActualWidth:function(){return p(this.wot.wtTable.TABLE)||p(this.wot.wtTable.TBODY)||p(this.wot.wtTable.THEAD)},getColumnHeaderHeight:function(){return isNaN(this.columnHeaderHeight)&&(this.columnHeaderHeight=f(this.wot.wtTable.THEAD)),this.columnHeaderHeight},getViewportHeight:function(){var e,t=this.getWorkspaceHeight();return t===1/0?t:(e=this.getColumnHeaderHeight(),e>0&&(t-=e),t)},getRowHeaderWidth:function(){var e=this.instance.getSetting("rowHeaderWidth"),t=this.instance.getSetting("rowHeaders");if(e){this.rowHeaderWidth=0;for(var n=0,o=t.length;o>n;n++)this.rowHeaderWidth+=e[n]||e}if(this.wot.cloneSource)return this.wot.cloneSource.wtViewport.getRowHeaderWidth();if(isNaN(this.rowHeaderWidth))if(t.length){var r=this.instance.wtTable.TABLE.querySelector("TH");this.rowHeaderWidth=0;for(var i=0,s=t.length;s>i;i++)r?(this.rowHeaderWidth+=p(r),r=r.nextSibling):this.rowHeaderWidth+=50}else this.rowHeaderWidth=0;return this.rowHeaderWidth},getViewportWidth:function(){var e,t=this.getWorkspaceWidth();return t===1/0?t:(e=this.getRowHeaderWidth(),e>0?t-e:t)},createRowsCalculator:function(){var e,t,n,o,r,i,s,l=void 0!==arguments[0]?arguments[0]:!1,a=this;return this.rowHeaderWidth=NaN,e=this.wot.wtSettings.settings.renderAllRows?1/0:this.getViewportHeight(),t=this.wot.wtOverlays.topOverlay.getScrollPosition()-this.wot.wtOverlays.topOverlay.getTableParentOffset(),0>t&&(t=0),n=this.wot.getSetting("fixedRowsTop"),r=this.wot.getSetting("fixedRowsBottom"),s=this.wot.getSetting("totalRows"),n&&(i=this.wot.wtOverlays.topOverlay.sumCellSizes(0,n),t+=i,e-=i),r&&this.wot.wtOverlays.bottomOverlay.clone&&(i=this.wot.wtOverlays.bottomOverlay.sumCellSizes(s-r,s),e-=i),o=this.wot.wtTable.holder.clientHeight===this.wot.wtTable.holder.offsetHeight?0:c(),new w(e,t,this.wot.getSetting("totalRows"),function(e){return a.wot.wtTable.getRowHeight(e)},l?null:this.wot.wtSettings.settings.viewportRowCalculatorOverride,l,o)},createColumnsCalculator:function(){var e,t,n=void 0!==arguments[0]?arguments[0]:!1,o=this,r=this.getViewportWidth();if(this.columnHeaderHeight=NaN,e=this.wot.wtOverlays.leftOverlay.getScrollPosition()-this.wot.wtOverlays.leftOverlay.getTableParentOffset(),0>e&&(e=0),t=this.wot.getSetting("fixedColumnsLeft")){var i=this.wot.wtOverlays.leftOverlay.sumCellSizes(0,t);e+=i,r-=i}return this.wot.wtTable.holder.clientWidth!==this.wot.wtTable.holder.offsetWidth&&(r-=c()),new m(r,e,this.wot.getSetting("totalColumns"),function(e){return o.wot.wtTable.getColumnWidth(e)},n?null:this.wot.wtSettings.settings.viewportColumnCalculatorOverride,n,this.wot.getSetting("stretchH"),function(e,t){return o.wot.getSetting("onBeforeStretchingColumnWidth",e,t)})},createRenderCalculators:function(){var e=void 0!==arguments[0]?arguments[0]:!1;if(e){var t=this.createRowsCalculator(!0),n=this.createColumnsCalculator(!0);this.areAllProposedVisibleRowsAlreadyRendered(t)&&this.areAllProposedVisibleColumnsAlreadyRendered(n)||(e=!1)}return e||(this.rowsRenderCalculator=this.createRowsCalculator(),this.columnsRenderCalculator=this.createColumnsCalculator()),this.rowsVisibleCalculator=null,this.columnsVisibleCalculator=null,e},createVisibleCalculators:function(){this.rowsVisibleCalculator=this.createRowsCalculator(!0),this.columnsVisibleCalculator=this.createColumnsCalculator(!0)},areAllProposedVisibleRowsAlreadyRendered:function(e){return this.rowsVisibleCalculator?e.startRow<this.rowsRenderCalculator.startRow||e.startRow===this.rowsRenderCalculator.startRow&&e.startRow>0?!1:!(e.endRow>this.rowsRenderCalculator.endRow||e.endRow===this.rowsRenderCalculator.endRow&&e.endRow<this.wot.getSetting("totalRows")-1):!1},areAllProposedVisibleColumnsAlreadyRendered:function(e){return this.columnsVisibleCalculator?e.startColumn<this.columnsRenderCalculator.startColumn||e.startColumn===this.columnsRenderCalculator.startColumn&&e.startColumn>0?!1:!(e.endColumn>this.columnsRenderCalculator.endColumn||e.endColumn===this.columnsRenderCalculator.endColumn&&e.endColumn<this.wot.getSetting("totalColumns")-1):!1}},{}),window.WalkontableViewport=v},{browser:23,"calculator/viewportColumns":3,"calculator/viewportRows":4,eventManager:41,"helpers/dom/element":46}],23:[function(e,t,n){"use strict";function o(e,t){var n=new o.Core(e,t||{});return n.init(),n}var r,i,s,l,a,u,c,d,h,f,p,g,m,w,v,y,b,C,_,R,S,E;t.exports=o,o.utils={},r=e("shims/runtime"),r&&r.__esModule&&r||{"default":r},i=e("es6collections"),i&&i.__esModule&&i||{"default":i};var M=(s=e("pluginHooks"),s&&s.__esModule&&s||{"default":s}).Hooks;o.hooks||(o.hooks=new M),o.utils.Hooks=M,l=e("core"),l&&l.__esModule&&l||{"default":l},a=e("renderers/_cellDecorator"),a&&a.__esModule&&a||{"default":a},u=e("cellTypes"),u&&u.__esModule&&u||{"default":u},c=e("plugins/jqueryHandsontable"),c&&c.__esModule&&c||{"default":c};var T=(d=e("helpers/array"),d&&d.__esModule&&d||{"default":d}),O=(h=e("helpers/browser"),h&&h.__esModule&&h||{"default":h}),k=(f=e("helpers/data"),f&&f.__esModule&&f||{"default":f}),D=(p=e("helpers/date"),p&&p.__esModule&&p||{"default":p}),A=(g=e("helpers/feature"),g&&g.__esModule&&g||{"default":g}),x=(m=e("helpers/function"),m&&m.__esModule&&m||{"default":m}),H=(w=e("helpers/mixed"),w&&w.__esModule&&w||{"default":w}),P=(v=e("helpers/number"),v&&v.__esModule&&v||{"default":v}),N=(y=e("helpers/object"),y&&y.__esModule&&y||{"default":y}),L=(b=e("helpers/setting"),b&&b.__esModule&&b||{"default":b}),W=(C=e("helpers/string"),C&&C.__esModule&&C||{"default":C}),I=(_=e("helpers/unicode"),_&&_.__esModule&&_||{"default":_}),j=(R=e("helpers/dom/element"),R&&R.__esModule&&R||{"default":R}),V=(S=e("helpers/dom/event"),S&&S.__esModule&&S||{"default":S}),F=[T,O,k,D,A,x,H,P,N,L,W,I],B=[j,V];o.buildDate="Thu Apr 28 2016 15:03:36 GMT+0200 (CEST)",o.packageName="handsontable",o.version="0.24.3";var z="@@baseVersion";/^@@/.test(z)||(o.baseVersion=z),o.plugins={};var Y=(E=e("plugins"),E&&E.__esModule&&E||{"default":E}).registerPlugin;o.plugins.registerPlugin=Y,o.helper={},o.dom={},o.Dom=o.dom,T.arrayEach(F,function(e){T.arrayEach(Object.getOwnPropertyNames(e),function(t){"_"!==t.charAt(0)&&(o.helper[t]=e[t])})}),T.arrayEach(B,function(e){T.arrayEach(Object.getOwnPropertyNames(e),function(t){"_"!==t.charAt(0)&&(o.dom[t]=e[t])})})},{cellTypes:24,core:25,es6collections:"es6collections","helpers/array":42,"helpers/browser":43,"helpers/data":44,"helpers/date":45,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/feature":48,"helpers/function":49,"helpers/mixed":50,"helpers/number":51,"helpers/object":52,"helpers/setting":53,"helpers/string":54,"helpers/unicode":55,pluginHooks:58,plugins:59,"plugins/jqueryHandsontable":1,"renderers/_cellDecorator":93,"shims/runtime":100}],24:[function(e,t,n){"use strict";var o,r,i,s,l,a,u,c,d,h,f,p,g,m,w,v,y,b,C,_,R,S,E,M,T=(o=e("helpers/browser"),o&&o.__esModule&&o||{"default":o}).isMobileBrowser,O=(r=e("editors"),r&&r.__esModule&&r||{"default":r}).getEditorConstructor,k=(i=e("renderers"),i&&i.__esModule&&i||{"default":i}).getRenderer,D=((s=e("editors/autocompleteEditor"),s&&s.__esModule&&s||{"default":s}).AutocompleteEditor,(l=e("editors/checkboxEditor"),l&&l.__esModule&&l||{"default":l}).CheckboxEditor,(a=e("editors/dateEditor"),a&&a.__esModule&&a||{"default":a}).DateEditor,(u=e("editors/dropdownEditor"),u&&u.__esModule&&u||{"default":u
}).DropdownEditor,(c=e("editors/handsontableEditor"),c&&c.__esModule&&c||{"default":c}).HandsontableEditor,(d=e("editors/mobileTextEditor"),d&&d.__esModule&&d||{"default":d}).MobileTextEditor,(h=e("editors/numericEditor"),h&&h.__esModule&&h||{"default":h}).NumericEditor,(f=e("editors/passwordEditor"),f&&f.__esModule&&f||{"default":f}).PasswordEditor,(p=e("editors/selectEditor"),p&&p.__esModule&&p||{"default":p}).SelectEditor,(g=e("editors/textEditor"),g&&g.__esModule&&g||{"default":g}).TextEditor,(m=e("renderers/autocompleteRenderer"),m&&m.__esModule&&m||{"default":m}).AutocompleteRenderer,(w=e("renderers/checkboxRenderer"),w&&w.__esModule&&w||{"default":w}).CheckboxRenderer,(v=e("renderers/htmlRenderer"),v&&v.__esModule&&v||{"default":v}).HtmlRenderer,(y=e("renderers/numericRenderer"),y&&y.__esModule&&y||{"default":y}).NumericRenderer,(b=e("renderers/passwordRenderer"),b&&b.__esModule&&b||{"default":b}).PasswordRenderer,(C=e("renderers/textRenderer"),C&&C.__esModule&&C||{"default":C}).TextRenderer,(_=e("validators/autocompleteValidator"),_&&_.__esModule&&_||{"default":_}).AutocompleteValidator,(R=e("validators/dateValidator"),R&&R.__esModule&&R||{"default":R}).DateValidator,(S=e("validators/timeValidator"),S&&S.__esModule&&S||{"default":S}).TimeValidator,(E=e("validators/numericValidator"),E&&E.__esModule&&E||{"default":E}).NumericValidator,(M=e("browser"),M&&M.__esModule&&M||{"default":M})["default"]);D.AutocompleteCell={editor:O("autocomplete"),renderer:k("autocomplete"),validator:D.AutocompleteValidator},D.CheckboxCell={editor:O("checkbox"),renderer:k("checkbox")},D.TextCell={editor:O(T()?"mobile":"text"),renderer:k("text")},D.NumericCell={editor:O("numeric"),renderer:k("numeric"),validator:D.NumericValidator,dataType:"number"},D.DateCell={editor:O("date"),validator:D.DateValidator,renderer:k("autocomplete")},D.TimeCell={editor:O("text"),validator:D.TimeValidator,renderer:k("text")},D.HandsontableCell={editor:O("handsontable"),renderer:k("autocomplete")},D.PasswordCell={editor:O("password"),renderer:k("password"),copyable:!1},D.DropdownCell={editor:O("dropdown"),renderer:k("autocomplete"),validator:D.AutocompleteValidator},D.cellTypes={text:D.TextCell,date:D.DateCell,time:D.TimeCell,numeric:D.NumericCell,checkbox:D.CheckboxCell,autocomplete:D.AutocompleteCell,handsontable:D.HandsontableCell,password:D.PasswordCell,dropdown:D.DropdownCell},D.cellLookup={validator:{numeric:D.NumericValidator,autocomplete:D.AutocompleteValidator}}},{browser:23,editors:29,"editors/autocompleteEditor":31,"editors/checkboxEditor":32,"editors/dateEditor":33,"editors/dropdownEditor":34,"editors/handsontableEditor":35,"editors/mobileTextEditor":36,"editors/numericEditor":37,"editors/passwordEditor":38,"editors/selectEditor":39,"editors/textEditor":40,"helpers/browser":43,renderers:92,"renderers/autocompleteRenderer":94,"renderers/checkboxRenderer":95,"renderers/htmlRenderer":96,"renderers/numericRenderer":97,"renderers/passwordRenderer":98,"renderers/textRenderer":99,"validators/autocompleteValidator":105,"validators/dateValidator":106,"validators/numericValidator":107,"validators/timeValidator":108}],25:[function(e,t,n){"use strict";var o,r,i,s,l,a,u,c,d,h,f,p,g,m,w,v,y,b,C,_,R,S=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],E=(r=e("numeral"),r&&r.__esModule&&r||{"default":r})["default"],M=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),T=M.addClass,O=M.empty,k=M.isChildOfWebComponentTable,D=M.removeClass,A=(s=e("helpers/setting"),s&&s.__esModule&&s||{"default":s}).columnFactory,x=(l=e("helpers/browser"),l&&l.__esModule&&l||{"default":l}).isMobileBrowser,H=(a=e("dataMap"),a&&a.__esModule&&a||{"default":a}).DataMap,P=(u=e("editorManager"),u&&u.__esModule&&u||{"default":u}).EditorManager,N=(c=e("eventManager"),c&&c.__esModule&&c||{"default":c}).eventManager,L=(d=e("helpers/object"),d&&d.__esModule&&d||{"default":d}),W=L.extend,I=L.duckSchema,j=L.isObjectEquals,V=L.deepClone,F=(h=e("helpers/array"),h&&h.__esModule&&h||{"default":h}),B=F.arrayFlatten,z=F.arrayMap,Y=(f=e("plugins"),f&&f.__esModule&&f||{"default":f}).getPlugin,U=(p=e("renderers"),p&&p.__esModule&&p||{"default":p}).getRenderer,G=(g=e("helpers/string"),g&&g.__esModule&&g||{"default":g}).randomString,$=(m=e("helpers/number"),m&&m.__esModule&&m||{"default":m}).rangeEach,X=(w=e("tableView"),w&&w.__esModule&&w||{"default":w}).TableView,K=(v=e("dataSource"),v&&v.__esModule&&v||{"default":v}).DataSource,q=(y=e("helpers/data"),y&&y.__esModule&&y||{"default":y}),Z=q.translateRowsToColumns,J=q.cellMethodLookupFactory,Q=q.spreadsheetColumnLabel,ee=(b=e("3rdparty/walkontable/src/cell/coords"),b&&b.__esModule&&b||{"default":b}).WalkontableCellCoords,te=(C=e("3rdparty/walkontable/src/cell/range"),C&&C.__esModule&&C||{"default":C}).WalkontableCellRange,ne=((_=e("3rdparty/walkontable/src/selection"),_&&_.__esModule&&_||{"default":_}).WalkontableSelection,(R=e("3rdparty/walkontable/src/calculator/viewportColumns"),R&&R.__esModule&&R||{"default":R}).WalkontableViewportColumnsCalculator);S.activeGuid=null,S.Core=function(e,t){function n(){var e=!1;return{validatorsInQueue:0,valid:!0,addValidatorToQueue:function(){this.validatorsInQueue++,e=!1},removeValidatorFormQueue:function(){this.validatorsInQueue=this.validatorsInQueue-1<0?0:this.validatorsInQueue-1,this.checkIfQueueIsEmpty()},onQueueEmpty:function(e){},checkIfQueueIsEmpty:function(){0==this.validatorsInQueue&&0==e&&(e=!0,this.onQueueEmpty(this.valid))}}}function o(e,t,o){function r(){var n;e.length&&(n=S.hooks.run(m,"beforeChange",e,t),"function"==typeof n?console.warn("Your beforeChange callback returns a function. It's not supported since Handsontable 0.12.1 (and the returned function will not be executed)."):n===!1&&e.splice(0,e.length)),o()}var i=new n;i.onQueueEmpty=r;for(var s=e.length-1;s>=0;s--)if(null===e[s])e.splice(s,1);else{var l=e[s][0],a=d.propToCol(e[s][1]),u=m.getCellMeta(l,a);if("numeric"===u.type&&"string"==typeof e[s][3]&&e[s][3].length>0&&(/^-?[\d\s]*(\.|\,)?\d*$/.test(e[s][3])||u.format)){var c=e[s][3].length;"undefined"==typeof u.language?E.language("en"):e[s][3].indexOf(".")===c-3&&-1===e[s][3].indexOf(",")?E.language("en"):E.language(u.language),E.validate(e[s][3])&&(e[s][3]=E().unformat(e[s][3]))}m.getCellValidator(u)&&(i.addValidatorToQueue(),m.validateCell(e[s][3],u,function(t,n){return function(o){if("boolean"!=typeof o)throw new Error("Validation error: result is not boolean");o===!1&&n.allowInvalid===!1&&(e.splice(t,1),n.valid=!0,--t),i.removeValidatorFormQueue()}}(s,u),t))}i.checkIfQueueIsEmpty()}function r(e,t){var n=e.length-1;if(!(0>n)){for(;n>=0;n--)if(null!==e[n]){if(null!=e[n][2]||null!=e[n][3]){if(c.settings.allowInsertRow)for(;e[n][0]>m.countRows()-1;)d.createRow();if("array"===m.dataType&&(!c.settings.columns||0===c.settings.columns.length)&&c.settings.allowInsertColumn)for(;d.propToCol(e[n][1])>m.countCols()-1;)d.createCol();d.set(e[n][0],e[n][1],e[n][3])}}else e.splice(n,1);m.forceFullRender=!0,f.adjustRowsAndCols(),S.hooks.run(m,"beforeChangeRender",e,t),p.refreshBorders(null,!0),m.view.wt.wtOverlays.adjustElementsSize(),S.hooks.run(m,"afterChange",e,t||"edit")}}function i(e,t,n){return"object"==typeof e?e:[[e,t,n]]}function s(e){if(e.hasOwnProperty("type")){var t,n={};if("object"==typeof e.type)t=e.type;else if("string"==typeof e.type&&(t=S.cellTypes[e.type],void 0===t))throw new Error('You declared cell type "'+e.type+'" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');for(var o in t)t.hasOwnProperty(o)&&!e.hasOwnProperty(o)&&(n[o]=t[o]);return n}}function l(e){return S.hooks.run(m,"modifyRow",e)}function a(e){return S.hooks.run(m,"modifyCol",e)}function u(){throw new Error("This method cannot be called because this Handsontable instance has been destroyed")}var c,d,h,f,p,g,m=this,w=function(){},v=N(m);W(w.prototype,oe.prototype),W(w.prototype,t),W(w.prototype,s(t)),this.rootElement=e,this.isHotTableEnv=k(this.rootElement),S.eventManager.isHotTableEnv=this.isHotTableEnv,this.container=document.createElement("DIV"),this.renderCall=!1,e.insertBefore(this.container,e.firstChild),this.guid="ht_"+G(),h=new K(m),this.rootElement.id&&"ht_"!==this.rootElement.id.substring(0,3)||(this.rootElement.id=this.guid),c={cellSettings:[],columnSettings:[],columnsSettingConflicts:["data","width"],settings:new w,selRange:null,isPopulated:null,scrollable:null,firstRun:!0},f={alter:function(e,t,n,o,r){function i(e,t,n,o){var r=function(){var e;return"array"===o?e=[]:"object"===o&&(e={}),e},i=z(new Array(n),function(){return r()});i.unshift(t,0),e.splice.apply(e,i)}var s;switch(n=n||1,e){case"insert_row":if(m.getSettings().maxRows===m.countSourceRows())return;s=d.createRow(t,n),i(c.cellSettings,t,n,"array"),s&&(p.isSelected()&&c.selRange.from.row>=t?(c.selRange.from.row=c.selRange.from.row+s,p.transformEnd(s,0)):p.refreshBorders());break;case"insert_col":s=d.createCol(t,n);for(var l=0,u=m.countSourceRows();u>l;l++)c.cellSettings[l]&&i(c.cellSettings[l],t,n);if(s){if(Array.isArray(m.getSettings().colHeaders)){var h=[t,0];h.length+=s,Array.prototype.splice.apply(m.getSettings().colHeaders,h)}p.isSelected()&&c.selRange.from.col>=t?(c.selRange.from.col=c.selRange.from.col+s,p.transformEnd(0,s)):p.refreshBorders()}break;case"remove_row":d.removeRow(t,n),c.cellSettings.splice(t,n);var g=m.countRows(),w=m.getSettings().fixedRowsTop;w>=t+1&&(m.getSettings().fixedRowsTop-=Math.min(n,w-t));var v=m.getSettings().fixedRowsBottom;v&&t>=g-v&&(m.getSettings().fixedRowsBottom-=Math.min(n,v)),f.adjustRowsAndCols(),p.refreshBorders();break;case"remove_col":var y=a(t);d.removeCol(t,n);for(var b=0,C=m.countSourceRows();C>b;b++)c.cellSettings[b]&&c.cellSettings[b].splice(y,n);var _=m.getSettings().fixedColumnsLeft;_>=t+1&&(m.getSettings().fixedColumnsLeft-=Math.min(n,_-t)),Array.isArray(m.getSettings().colHeaders)&&("undefined"==typeof y&&(y=-1),m.getSettings().colHeaders.splice(y,n)),f.adjustRowsAndCols(),p.refreshBorders();break;default:throw new Error('There is no such action "'+e+'"')}r||f.adjustRowsAndCols()},adjustRowsAndCols:function(){if(c.settings.minRows){var e=m.countRows();if(e<c.settings.minRows)for(var t=0,n=c.settings.minRows;n-e>t;t++)d.createRow(m.countRows(),1,!0)}if(c.settings.minSpareRows){var o=m.countEmptyRows(!0);if(o<c.settings.minSpareRows)for(;o<c.settings.minSpareRows&&m.countRows()<c.settings.maxRows;o++)d.createRow(m.countRows(),1,!0)}var r;if((c.settings.minCols||c.settings.minSpareCols)&&(r=m.countEmptyCols(!0)),c.settings.minCols&&!c.settings.columns&&m.countCols()<c.settings.minCols)for(;m.countCols()<c.settings.minCols;r++)d.createCol(m.countCols(),1,!0);if(c.settings.minSpareCols&&!c.settings.columns&&"array"===m.dataType&&r<c.settings.minSpareCols)for(;r<c.settings.minSpareCols&&m.countCols()<c.settings.maxCols;r++)d.createCol(m.countCols(),1,!0);var i=m.countRows(),s=m.countCols();if(0!==i&&0!==s||p.deselect(),p.isSelected()){var l=!1,a=c.selRange.from.row,u=c.selRange.from.col,h=c.selRange.to.row,f=c.selRange.to.col;a>i-1?(a=i-1,l=!0,h>a&&(h=a)):h>i-1&&(h=i-1,l=!0,a>h&&(a=h)),u>s-1?(u=s-1,l=!0,f>u&&(f=u)):f>s-1&&(f=s-1,l=!0,u>f&&(u=f)),l&&m.selectCell(a,u,h,f)}m.view&&m.view.wt.wtOverlays.adjustElementsSize()},populateFromArray:function(e,t,n,o,r,i,s){var l,a,u,d,h=[],f={};if(a=t.length,0===a)return!1;var p,g,w,v;({row:null===n?null:n.row,col:null===n?null:n.col});switch(r){case"shift_down":for(p=n?n.col-e.col+1:0,g=n?n.row-e.row+1:0,t=Z(t),u=0,d=t.length,w=Math.max(d,p);w>u;u++)if(d>u){for(l=0,a=t[u].length;g-a>l;l++)t[u].push(t[u][l%a]);t[u].unshift(e.col+u,e.row,0),m.spliceCol.apply(m,t[u])}else t[u%d][0]=e.col+u,m.spliceCol.apply(m,t[u%d]);break;case"shift_right":for(p=n?n.col-e.col+1:0,g=n?n.row-e.row+1:0,l=0,a=t.length,v=Math.max(a,g);v>l;l++)if(a>l){for(u=0,d=t[l].length;p-d>u;u++)t[l].push(t[l][u%d]);t[l].unshift(e.row+l,e.col,0),m.spliceRow.apply(m,t[l])}else t[l%a][0]=e.row+l,m.spliceRow.apply(m,t[l%a]);break;case"overwrite":default:f.row=e.row,f.col=e.col;var y,b={row:n&&e?n.row-e.row+1:1,col:n&&e?n.col-e.col+1:1},C=0,_=0,R=!0,S=function(e){var n=void 0!==arguments[1]?arguments[1]:null,o=t[e%t.length];return null!==n?o[n%o.length]:o},E=t.length,M=n?n.row-e.row+1:0;for(a=n?M:Math.max(E,M),l=0;a>l&&!(n&&f.row>n.row&&M>E||!c.settings.allowInsertRow&&f.row>m.countRows()-1||f.row>=c.settings.maxRows);l++){var T=l-C,O=S(T).length,k=n?n.col-e.col+1:0;if(d=n?k:Math.max(O,k),f.col=e.col,y=m.getCellMeta(f.row,f.col),"paste"!==o&&"autofill"!==o||!y.skipRowOnPaste){for(_=0,u=0;d>u&&!(n&&f.col>n.col&&k>O||!c.settings.allowInsertColumn&&f.col>m.countCols()-1||f.col>=c.settings.maxCols);u++)if(y=m.getCellMeta(f.row,f.col),"paste"!==o&&"autofill"!==o||!y.skipColumnOnPaste)if(y.readOnly)f.col++;else{var D=u-_,A=S(T,D),x=m.getDataAtCell(f.row,f.col),H={row:T,col:D};if("autofill"===o){var P=m.runHooks("beforeAutofillInsidePopulate",H,i,t,s,{},b);P&&(A="undefined"==typeof P.value?A:P.value)}if(null!==A&&"object"==typeof A)if(null===x||"object"!=typeof x)R=!1;else{var N=I(x[0]||x),L=I(A[0]||A);j(N,L)?A=V(A):R=!1}else null!==x&&"object"==typeof x&&(R=!1);R&&h.push([f.row,f.col,A]),R=!0,f.col++}else _++,f.col++,d++;f.row++}else C++,f.row++,a++}m.setDataAtCell(h,null,null,o||"populateFromArray")}}},this.selection=p={inProgress:!1,selectedHeader:{cols:!1,rows:!1},setSelectedHeaders:function(e,t){m.selection.selectedHeader.rows=e,m.selection.selectedHeader.cols=t},begin:function(){m.selection.inProgress=!0},finish:function(){var e=m.getSelected();S.hooks.run(m,"afterSelectionEnd",e[0],e[1],e[2],e[3]),S.hooks.run(m,"afterSelectionEndByProp",e[0],m.colToProp(e[1]),e[2],m.colToProp(e[3])),m.selection.inProgress=!1},isInProgress:function(){return m.selection.inProgress},setRangeStart:function(e,t){S.hooks.run(m,"beforeSetRangeStart",e),c.selRange=new te(e,e,e),p.setRangeEnd(e,null,t)},setRangeEnd:function(e,t,n){if(null!==c.selRange){var o,r=!1,i=!0,s=m.view.wt.wtTable.getFirstVisibleRow(),l=m.view.wt.wtTable.getFirstVisibleColumn(),a={row:null,col:null};S.hooks.run(m,"beforeSetRangeEnd",e),m.selection.begin(),a.row=e.row<0?s:e.row,a.col=e.col<0?l:e.col,c.selRange.to=new ee(a.row,a.col),c.settings.multiSelect||(c.selRange.from=e),m.view.wt.selections.current.clear(),o=m.getCellMeta(c.selRange.highlight.row,c.selRange.highlight.col).disableVisualSelection,"string"==typeof o&&(o=[o]),(o===!1||Array.isArray(o)&&-1===o.indexOf("current"))&&m.view.wt.selections.current.add(c.selRange.highlight),m.view.wt.selections.area.clear(),(o===!1||Array.isArray(o)&&-1===o.indexOf("area"))&&p.isMultiple()&&(m.view.wt.selections.area.add(c.selRange.from),m.view.wt.selections.area.add(c.selRange.to)),(c.settings.currentRowClassName||c.settings.currentColClassName)&&(m.view.wt.selections.highlight.clear(),m.view.wt.selections.highlight.add(c.selRange.from),m.view.wt.selections.highlight.add(c.selRange.to)),S.hooks.run(m,"afterSelection",c.selRange.from.row,c.selRange.from.col,c.selRange.to.row,c.selRange.to.col),S.hooks.run(m,"afterSelectionByProp",c.selRange.from.row,d.colToProp(c.selRange.from.col),c.selRange.to.row,d.colToProp(c.selRange.to.col)),(0===c.selRange.from.row&&c.selRange.to.row===m.countRows()-1&&m.countRows()>1||0===c.selRange.from.col&&c.selRange.to.col===m.countCols()-1&&m.countCols()>1)&&(r=!0),(e.row<0||e.col<0)&&(i=!1),t!==!1&&!r&&i&&(c.selRange.from&&!p.isMultiple()?m.view.scrollViewport(c.selRange.from):m.view.scrollViewport(e)),p.refreshBorders(null,n)}},refreshBorders:function(e,t){t||g.destroyEditor(e),m.view.render(),p.isSelected()&&!t&&g.prepareEditor()},isMultiple:function(){var e=!(c.selRange.to.col===c.selRange.from.col&&c.selRange.to.row===c.selRange.from.row),t=S.hooks.run(m,"afterIsMultipleSelection",e);return e?t:void 0},transformStart:function(e,t,n,o){var r,i,s,l,a=new ee(e,t),u=0,d=0;m.runHooks("modifyTransformStart",a),r=m.countRows(),i=m.countCols(),l=m.getSettings().fixedRowsBottom,c.selRange.highlight.row+e>r-1?n&&c.settings.minSpareRows>0&&!(l&&c.selRange.highlight.row>=r-l-1)?(m.alter("insert_row",r),r=m.countRows()):c.settings.autoWrapCol&&(a.row=1-r,a.col=c.selRange.highlight.col+a.col==i-1?1-i:1):c.settings.autoWrapCol&&c.selRange.highlight.row+a.row<0&&c.selRange.highlight.col+a.col>=0&&(a.row=r-1,a.col=c.selRange.highlight.col+a.col==0?i-1:-1),c.selRange.highlight.col+a.col>i-1?n&&c.settings.minSpareCols>0?(m.alter("insert_col",i),i=m.countCols()):c.settings.autoWrapRow&&(a.row=c.selRange.highlight.row+a.row==r-1?1-r:1,a.col=1-i):c.settings.autoWrapRow&&c.selRange.highlight.col+a.col<0&&c.selRange.highlight.row+a.row>=0&&(a.row=c.selRange.highlight.row+a.row==0?r-1:-1,a.col=i-1),s=new ee(c.selRange.highlight.row+a.row,c.selRange.highlight.col+a.col),s.row<0?(u=-1,s.row=0):s.row>0&&s.row>=r&&(u=1,s.row=r-1),s.col<0?(d=-1,s.col=0):s.col>0&&s.col>=i&&(d=1,s.col=i-1),m.runHooks("afterModifyTransformStart",s,u,d),p.setRangeStart(s,o)},transformEnd:function(e,t){var n,o,r,i=new ee(e,t),s=0,l=0;m.runHooks("modifyTransformEnd",i),n=m.countRows(),o=m.countCols(),r=new ee(c.selRange.to.row+i.row,c.selRange.to.col+i.col),r.row<0?(s=-1,r.row=0):r.row>0&&r.row>=n&&(s=1,r.row=n-1),r.col<0?(l=-1,r.col=0):r.col>0&&r.col>=o&&(l=1,r.col=o-1),m.runHooks("afterModifyTransformEnd",r,s,l),p.setRangeEnd(r,!0)},isSelected:function(){return null!==c.selRange},inInSelection:function(e){return p.isSelected()?c.selRange.includes(e):!1},deselect:function(){p.isSelected()&&(m.selection.inProgress=!1,c.selRange=null,m.view.wt.selections.current.clear(),m.view.wt.selections.area.clear(),(c.settings.currentRowClassName||c.settings.currentColClassName)&&m.view.wt.selections.highlight.clear(),g.destroyEditor(),p.refreshBorders(),S.hooks.run(m,"afterDeselect"))},selectAll:function(){c.settings.multiSelect&&(p.setRangeStart(new ee(0,0)),p.setRangeEnd(new ee(m.countRows()-1,m.countCols()-1),!1))},empty:function(){if(p.isSelected()){var e,t,n=c.selRange.getTopLeftCorner(),o=c.selRange.getBottomRightCorner(),r=[];for(e=n.row;e<=o.row;e++)for(t=n.col;t<=o.col;t++)m.getCellMeta(e,t).readOnly||r.push([e,t,""]);m.setDataAtCell(r)}}},this.init=function(){h.setData(c.settings.data),S.hooks.run(m,"beforeInit"),x()&&T(m.rootElement,"mobile"),this.updateSettings(c.settings,!0),this.view=new X(this),g=new P(m,c,p,d),this.forceFullRender=!0,S.hooks.run(m,"init"),this.view.render(),"object"==typeof c.firstRun&&(S.hooks.run(m,"afterChange",c.firstRun[0],c.firstRun[1]),c.firstRun=!1),S.hooks.run(m,"afterInit")},this.validateCell=function(e,t,n,o){function r(e){var o=t.visualCol,r=t.visualRow,i=m.getCell(r,o,!0);i&&"TH"!=i.nodeName&&m.view.wt.wtSettings.settings.cellRenderer(r,o,i),n(e)}var i=m.getCellValidator(t);"[object RegExp]"===Object.prototype.toString.call(i)&&(i=function(e){return function(t,n){n(e.test(t))}}(i)),"function"==typeof i?(e=S.hooks.run(m,"beforeValidate",e,t.visualRow,t.prop,o),m._registerTimeout(setTimeout(function(){i.call(t,e,function(n){n=S.hooks.run(m,"afterValidate",n,e,t.visualRow,t.prop,o),t.valid=n,r(n),S.hooks.run(m,"postAfterValidate",n,e,t.visualRow,t.prop,o)})},0))):m._registerTimeout(setTimeout(function(){t.valid=!0,r(t.valid)},0))},this.setDataAtCell=function(e,t,n,s){var l,a,u,c=i(e,t,n),h=[];for(l=0,a=c.length;a>l;l++){if("object"!=typeof c[l])throw new Error("Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter");if("number"!=typeof c[l][1])throw new Error("Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`");u=d.colToProp(c[l][1]),h.push([c[l][0],u,d.get(c[l][0],u),c[l][2]])}s||"object"!=typeof e||(s=t),o(h,s,function(){r(h,s)})},this.setDataAtRowProp=function(e,t,n,s){var l,a,u=i(e,t,n),c=[];for(l=0,a=u.length;a>l;l++)c.push([u[l][0],u[l][1],d.get(u[l][0],u[l][1]),u[l][2]]);s||"object"!=typeof e||(s=t),o(c,s,function(){r(c,s)})},this.listen=function(){S.activeGuid=m.guid},this.unlisten=function(){S.activeGuid=null},this.isListening=function(){return S.activeGuid===m.guid},this.destroyEditor=function(e){p.refreshBorders(e)},this.populateFromArray=function(e,t,n,o,r,i,s,l,a){var u;if("object"!=typeof n||"object"!=typeof n[0])throw new Error("populateFromArray parameter `input` must be an array of arrays");return u="number"==typeof o?new ee(o,r):null,f.populateFromArray(new ee(e,t),n,u,i,s,l,a)},this.spliceCol=function(e,t,n){return d.spliceCol.apply(d,arguments)},this.spliceRow=function(e,t,n){return d.spliceRow.apply(d,arguments)},this.getSelected=function(){return p.isSelected()?[c.selRange.from.row,c.selRange.from.col,c.selRange.to.row,c.selRange.to.col]:void 0},this.getSelectedRange=function(){return p.isSelected()?c.selRange:void 0},this.render=function(){m.view&&(m.renderCall=!0,m.forceFullRender=!0,p.refreshBorders(null,!0))},this.loadData=function(e){function t(){c.cellSettings.length=0}if("object"==typeof e&&null!==e)e.push&&e.splice||(e=[e]);else{if(null!==e)throw new Error("loadData only accepts array of objects or array of arrays ("+typeof e+" given)");e=[];for(var n,o=0,r=c.settings.startRows;r>o;o++){n=[];for(var i=0,s=c.settings.startCols;s>i;i++)n.push(null);e.push(n)}}c.isPopulated=!1,w.prototype.data=e,Array.isArray(c.settings.dataSchema)||Array.isArray(e[0])?m.dataType="array":"function"==typeof c.settings.dataSchema?m.dataType="function":m.dataType="object",d&&d.destroy(),d=new H(m,c,w),h.data=e,h.dataType=m.dataType,h.colToProp=d.colToProp.bind(d),h.propToCol=d.propToCol.bind(d),t(),f.adjustRowsAndCols(),S.hooks.run(m,"afterLoadData",c.firstRun),c.firstRun?c.firstRun=[null,"loadData"]:(S.hooks.run(m,"afterChange",null,"loadData"),m.render()),c.isPopulated=!0},this.getData=function(e,t,n,o){return"undefined"==typeof e?d.getAll():d.getRange(new ee(e,t),new ee(n,o),d.DESTINATION_RENDERER)},this.getCopyableText=function(e,t,n,o){return d.getCopyableText(new ee(e,t),new ee(n,o))},this.getCopyableData=function(e,t){return d.getCopyable(e,d.colToProp(t))},this.getSchema=function(){return d.getSchema()},this.updateSettings=function(e,t){var n,o;if("undefined"!=typeof e.rows)throw new Error('"rows" setting is no longer supported. do you mean startRows, minRows or maxRows?');if("undefined"!=typeof e.cols)throw new Error('"cols" setting is no longer supported. do you mean startCols, minCols or maxCols?');for(n in e)"data"!==n&&(S.hooks.getRegistered().indexOf(n)>-1?("function"==typeof e[n]||Array.isArray(e[n]))&&m.addHook(n,e[n]):!t&&e.hasOwnProperty(n)&&(w.prototype[n]=e[n]));if(void 0===e.data&&void 0===c.settings.data?m.loadData(null):void 0!==e.data?m.loadData(e.data):void 0!==e.columns&&d.createMap(),o=m.countCols(),void 0===e.cell&&void 0===e.cells&&void 0===e.columns||(c.cellSettings.length=0),o>0){var r,i;for(n=0;o>n;n++)c.columnSettings[n]=A(w,c.columnsSettingConflicts),r=c.columnSettings[n].prototype,w.prototype.columns&&(i=w.prototype.columns[n],i&&(W(r,i),W(r,s(i))))}if("undefined"!=typeof e.cell)for(n in e.cell)if(e.cell.hasOwnProperty(n)){var l=e.cell[n];m.setCellMetaObject(l.row,l.col,l)}S.hooks.run(m,"afterCellMetaReset"),"undefined"!=typeof e.className&&(w.prototype.className&&D(m.rootElement,w.prototype.className),e.className&&T(m.rootElement,e.className));var a=m.rootElement.style.height;""!==a&&(a=parseInt(m.rootElement.style.height,10));var u=e.height;if("function"==typeof u&&(u=u()),t){var h=m.rootElement.getAttribute("style");h&&m.rootElement.setAttribute("data-initialstyle",m.rootElement.getAttribute("style"))}if(null===u){var g=m.rootElement.getAttribute("data-initialstyle");g&&(g.indexOf("height")>-1||g.indexOf("overflow")>-1)?m.rootElement.setAttribute("style",g):(m.rootElement.style.height="",m.rootElement.style.overflow="")}else void 0!==u&&(m.rootElement.style.height=u+"px",m.rootElement.style.overflow="hidden");if("undefined"!=typeof e.width){var v=e.width;"function"==typeof v&&(v=v()),m.rootElement.style.width=v+"px"}t||(d.clearLengthCache(),S.hooks.run(m,"afterUpdateSettings")),f.adjustRowsAndCols(),m.view&&!c.firstRun&&(m.forceFullRender=!0,p.refreshBorders(null,!0)),t||!m.view||""!==a&&""!==u&&void 0!==u||a===u||m.view.wt.wtOverlays.updateMainScrollableElements()},this.getValue=function(){var e=m.getSelected();if(w.prototype.getValue){if("function"==typeof w.prototype.getValue)return w.prototype.getValue.call(m);if(e)return m.getData()[e[0]][w.prototype.getValue]}else if(e)return m.getDataAtCell(e[0],e[1])},this.getSettings=function(){return c.settings},this.clear=function(){p.selectAll(),p.empty()},this.alter=function(e,t,n,o,r){f.alter(e,t,n,o,r)},this.getCell=function(e,t,n){return m.view.getCellAtCoords(new ee(e,t),n)},this.getCoords=function(e){return this.view.wt.wtTable.getCoords.call(this.view.wt.wtTable,e)},this.colToProp=function(e){return d.colToProp(e)},this.propToCol=function(e){return d.propToCol(e)},this.getDataAtCell=function(e,t){return d.get(e,d.colToProp(t))},this.getDataAtRowProp=function(e,t){return d.get(e,t)},this.getDataAtCol=function(e){var t=[];return t.concat.apply(t,d.getRange(new ee(0,e),new ee(c.settings.data.length-1,e),d.DESTINATION_RENDERER))},this.getDataAtProp=function(e){var t,n=[];return t=d.getRange(new ee(0,d.propToCol(e)),new ee(c.settings.data.length-1,d.propToCol(e)),d.DESTINATION_RENDERER),n.concat.apply(n,t)},this.getSourceData=function(e,t,n,o){var r;return r=void 0===e?h.getData():h.getByRange(new ee(e,t),new ee(n,o))},this.getSourceDataAtCol=function(e){return h.getAtColumn(e)},this.getSourceDataAtRow=function(e){return h.getAtRow(e)},this.getSourceDataAtCell=function(e,t){return h.getAtCell(e,t)},this.getDataAtRow=function(e){var t=d.getRange(new ee(e,0),new ee(e,this.countCols()-1),d.DESTINATION_RENDERER);return t[0]},this.getDataType=function(e,t,n,o){var r=this,i=null,s=null;void 0===e&&(e=0,n=this.countRows(),t=0,o=this.countCols()),void 0===n&&(n=e),void 0===o&&(o=t);var l="mixed";return $(Math.min(e,n),Math.max(e,n),function(e){var n=!0;return $(Math.min(t,o),Math.max(t,o),function(t){var o=r.getCellMeta(e,t);return s=o.type,i?n=i===s:i=s,n}),l=n?s:"mixed",n}),l},this.removeCellMeta=function(e,t,n){var o=m.getCellMeta(e,t);void 0!=o[n]&&delete c.cellSettings[e][t][n]},this.setCellMetaObject=function(e,t,n){if("object"==typeof n)for(var o in n)if(n.hasOwnProperty(o)){var r=n[o];this.setCellMeta(e,t,o,r)}},this.setCellMeta=function(e,t,n,o){c.cellSettings[e]||(c.cellSettings[e]=[]),c.cellSettings[e][t]||(c.cellSettings[e][t]=new c.columnSettings[t]),c.cellSettings[e][t][n]=o,S.hooks.run(m,"afterSetCellMeta",e,t,n,o)},this.getCellsMeta=function(){return B(c.cellSettings)},this.getCellMeta=function(e,t){var n,o=d.colToProp(t),r=e,i=t;if(e=l(e),t=a(t),c.columnSettings[t]||(c.columnSettings[t]=A(w,c.columnsSettingConflicts)),c.cellSettings[e]||(c.cellSettings[e]=[]),c.cellSettings[e][t]||(c.cellSettings[e][t]=new c.columnSettings[t]),n=c.cellSettings[e][t],n.row=e,n.col=t,n.visualRow=r,n.visualCol=i,n.prop=o,n.instance=m,S.hooks.run(m,"beforeGetCellMeta",e,t,n),W(n,s(n)),n.cells){var u=n.cells.call(n,e,t,o);u&&(W(n,u),W(n,s(u)))}return S.hooks.run(m,"afterGetCellMeta",e,t,n),n},this.isColumnModificationAllowed=function(){return!("object"===m.dataType||m.getSettings().columns)};var y=J("renderer");this.getCellRenderer=function(e,t){var n=y.call(this,e,t);return U(n)},this.getCellEditor=J("editor"),this.getCellValidator=J("validator"),this.validateCells=function(e){var t=new n;e&&(t.onQueueEmpty=e);for(var o=m.countRows()-1;o>=0;){for(var r=m.countCols()-1;r>=0;)t.addValidatorToQueue(),m.validateCell(m.getDataAtCell(o,r),m.getCellMeta(o,r),function(e){if("boolean"!=typeof e)throw new Error("Validation error: result is not boolean");e===!1&&(t.valid=!1),t.removeValidatorFormQueue()},"validateCells"),r--;o--}t.checkIfQueueIsEmpty()},this.getRowHeader=function(e){var t=c.settings.rowHeaders;return void 0!==e&&(e=S.hooks.run(m,"modifyRowHeader",e)),void 0===e?(t=[],$(m.countRows()-1,function(e){t.push(m.getRowHeader(e))})):Array.isArray(t)&&void 0!==t[e]?t=t[e]:"function"==typeof t?t=t(e):t&&"string"!=typeof t&&"number"!=typeof t&&(t=e+1),t},this.hasRowHeaders=function(){return!!c.settings.rowHeaders},this.hasColHeaders=function(){if(void 0!==c.settings.colHeaders&&null!==c.settings.colHeaders)return!!c.settings.colHeaders;for(var e=0,t=m.countCols();t>e;e++)if(m.getColHeader(e))return!0;return!1},this.getColHeader=function(e){if(e=S.hooks.run(m,"modifyColHeader",e),void 0===e){for(var t=[],n=0,o=m.countCols();o>n;n++)t.push(m.getColHeader(n));return t}var r=e;return e=S.hooks.run(m,"modifyCol",e),c.settings.columns&&c.settings.columns[e]&&c.settings.columns[e].title?c.settings.columns[e].title:Array.isArray(c.settings.colHeaders)&&void 0!==c.settings.colHeaders[e]?c.settings.colHeaders[e]:"function"==typeof c.settings.colHeaders?c.settings.colHeaders(e):c.settings.colHeaders&&"string"!=typeof c.settings.colHeaders&&"number"!=typeof c.settings.colHeaders?Q(r):c.settings.colHeaders},this._getColWidthFromSettings=function(e){var t=m.getCellMeta(0,e),n=t.width;if(void 0!==n&&n!==c.settings.width||(n=t.colWidths),void 0!==n&&null!==n){switch(typeof n){case"object":n=n[e];break;case"function":n=n(e)}"string"==typeof n&&(n=parseInt(n,10))}return n},this.getColWidth=function(e){var t=m._getColWidthFromSettings(e);return t=S.hooks.run(m,"modifyColWidth",t,e),void 0===t&&(t=ne.DEFAULT_WIDTH),t},this._getRowHeightFromSettings=function(e){var t=c.settings.rowHeights;if(void 0!==t&&null!==t){switch(typeof t){case"object":t=t[e];break;case"function":t=t(e)}"string"==typeof t&&(t=parseInt(t,10))}return t},this.getRowHeight=function(e){var t=m._getRowHeightFromSettings(e);return t=S.hooks.run(m,"modifyRowHeight",t,e)},this.countSourceRows=function(){return m.getSourceData()?m.getSourceData().length:0},this.countRows=function(){return d.getLength()},this.countCols=function(){return"object"===m.dataType||"function"===m.dataType?c.settings.columns&&c.settings.columns.length?c.settings.columns.length:d.colToPropCache.length:"array"===m.dataType?c.settings.columns&&c.settings.columns.length?c.settings.columns.length:c.settings.data&&c.settings.data[0]&&c.settings.data[0].length?c.settings.data[0].length:0:void 0},this.getColspanOffset=function(e,t){var n=0;if(m.colspanArray){for(var o=0;e>o;o++)n+=m.colspanArray[t][o]-1||0;return n}for(var n=0,r=m.view.wt.wtTable.THEAD.childNodes.length-t-1,i=m.view.wt.wtTable.THEAD.querySelector("tr:nth-child("+parseInt(r+1,10)+")"),s=m.view.wt.wtSettings.settings.rowHeaders().length,o=s;s+e>o;o++)i.childNodes[o].hasAttribute("colspan")&&(n+=parseInt(i.childNodes[o].getAttribute("colspan"),10)-1);return n},this.getHeaderColspan=function(e,t){var n=m.view.wt.wtTable.THEAD.childNodes.length-t-1,o=m.view.wt.wtSettings.settings.rowHeaders().length,r=m.view.wt.wtTable.THEAD.querySelector("tr:nth-child("+parseInt(n+1,10)+")"),i=o+e-m.view.wt.wtViewport.columnsRenderCalculator.startColumn;return r.childNodes[i].hasAttribute("colspan")?parseInt(r.childNodes[i].getAttribute("colspan"),10):0},this.rowOffset=function(){return m.view.wt.wtTable.getFirstRenderedRow()},this.colOffset=function(){return m.view.wt.wtTable.getFirstRenderedColumn()},this.countRenderedRows=function(){return m.view.wt.drawn?m.view.wt.wtTable.getRenderedRowsCount():-1},this.countVisibleRows=function(){return m.view.wt.drawn?m.view.wt.wtTable.getVisibleRowsCount():-1},this.countRenderedCols=function(){return m.view.wt.drawn?m.view.wt.wtTable.getRenderedColumnsCount():-1},this.countVisibleCols=function(){return m.view.wt.drawn?m.view.wt.wtTable.getVisibleColumnsCount():-1},this.countEmptyRows=function(e){for(var t,n=m.countRows()-1,o=0;n>=0;){if(t=S.hooks.run(this,"modifyRow",n),m.isEmptyRow(t))o++;else if(e)break;n--}return o},this.countEmptyCols=function(e){if(m.countRows()<1)return 0;for(var t=m.countCols()-1,n=0;t>=0;){if(m.isEmptyCol(t))n++;else if(e)break;t--}return n},this.isEmptyRow=function(e){return c.settings.isEmptyRow.call(m,e)},this.isEmptyCol=function(e){return c.settings.isEmptyCol.call(m,e)},this.selectCell=function(e,t,n,o,r,i){var s;if(i="undefined"==typeof i||i===!0,
"number"!=typeof e||0>e||e>=m.countRows())return!1;if("number"!=typeof t||0>t||t>=m.countCols())return!1;if("undefined"!=typeof n){if("number"!=typeof n||0>n||n>=m.countRows())return!1;if("number"!=typeof o||0>o||o>=m.countCols())return!1}return s=new ee(e,t),c.selRange=new te(s,s,s),i&&m.listen(),"undefined"==typeof n?p.setRangeEnd(c.selRange.from,r):p.setRangeEnd(new ee(n,o),r),m.selection.finish(),!0},this.selectCellByProp=function(e,t,n,o,r){return arguments[1]=d.propToCol(arguments[1]),"undefined"!=typeof arguments[3]&&(arguments[3]=d.propToCol(arguments[3])),m.selectCell.apply(m,arguments)},this.deselectCell=function(){p.deselect()},this.scrollViewportTo=function(e,t){if(void 0!==e&&(0>e||e>=m.countRows()))return!1;if(void 0!==t&&(0>t||t>=m.countCols()))return!1;var n=!1;return void 0!==e&&void 0!==t&&(m.view.wt.scrollVertical(e),m.view.wt.scrollHorizontal(t),n=!0),"number"==typeof e&&"number"!=typeof t&&(m.view.wt.scrollVertical(e),n=!0),"number"==typeof t&&"number"!=typeof e&&(m.view.wt.scrollHorizontal(t),n=!0),n},this.destroy=function(){m._clearTimeouts(),m.view&&m.view.destroy(),h&&h.destroy(),h=null,O(m.rootElement),v.destroy(),S.hooks.run(m,"afterDestroy"),S.hooks.destroy(m);for(var e in m)m.hasOwnProperty(e)&&("function"==typeof m[e]?m[e]=u:"guid"!==e&&(m[e]=null));d&&d.destroy(),d=null,c=null,f=null,p=null,g=null,m=null,w=null},this.getActiveEditor=function(){return g.getActiveEditor()},this.getPlugin=function(e){return Y(this,e)},this.getInstance=function(){return m},this.addHook=function(e,t){S.hooks.add(e,t,m)},this.hasHook=function(e){return S.hooks.has(e,m)},this.addHookOnce=function(e,t){S.hooks.once(e,t,m)},this.removeHook=function(e,t){S.hooks.remove(e,t,m)},this.runHooks=function(e,t,n,o,r,i,s){return S.hooks.run(m,e,t,n,o,r,i,s)},this.timeouts=[],this._registerTimeout=function(e){this.timeouts.push(e)},this._clearTimeouts=function(){for(var e=0,t=this.timeouts.length;t>e;e++)clearTimeout(this.timeouts[e])},this.version=S.version,S.hooks.run(m,"construct")};var oe=function(){};oe.prototype={data:void 0,dataSchema:void 0,width:void 0,height:void 0,startRows:5,startCols:5,rowHeaders:void 0,colHeaders:null,colWidths:void 0,rowHeights:void 0,columns:void 0,cells:void 0,cell:[],comments:!1,customBorders:!1,minRows:0,minCols:0,maxRows:1/0,maxCols:1/0,minSpareRows:0,minSpareCols:0,allowInsertRow:!0,allowInsertColumn:!0,allowRemoveRow:!0,allowRemoveColumn:!0,multiSelect:!0,fillHandle:!0,fixedRowsTop:0,fixedRowsBottom:0,fixedColumnsLeft:0,outsideClickDeselects:!0,enterBeginsEditing:!0,enterMoves:{row:1,col:0},tabMoves:{row:0,col:1},autoWrapRow:!1,autoWrapCol:!1,copyRowsLimit:1e3,copyColsLimit:1e3,pasteMode:"overwrite",persistentState:void 0,currentRowClassName:void 0,currentColClassName:void 0,className:void 0,tableClassName:void 0,stretchH:"none",isEmptyRow:function(e){var t,n,o,r;for(t=0,n=this.countCols();n>t;t++)if(o=this.getDataAtCell(e,t),""!==o&&null!==o&&"undefined"!=typeof o)return"object"==typeof o?(r=this.getCellMeta(e,t),j(this.getSchema()[r.prop],o)):!1;return!0},isEmptyCol:function(e){var t,n,o;for(t=0,n=this.countRows();n>t;t++)if(o=this.getDataAtCell(t,e),""!==o&&null!==o&&"undefined"!=typeof o)return!1;return!0},observeDOMVisibility:!0,allowInvalid:!0,allowEmpty:!0,invalidCellClassName:"htInvalid",placeholder:!1,placeholderCellClassName:"htPlaceholder",readOnlyCellClassName:"htDimmed",renderer:void 0,commentedCellClassName:"htCommentCell",fragmentSelection:!1,readOnly:!1,skipColumnOnPaste:!1,search:!1,type:"text",copyable:!0,editor:void 0,autoComplete:void 0,visibleRows:10,trimDropdown:!0,debug:!1,wordWrap:!0,noWordWrapClassName:"htNoWrap",contextMenu:void 0,contextMenuCopyPaste:void 0,copyPaste:void 0,undo:void 0,columnSorting:void 0,manualColumnMove:void 0,manualColumnResize:void 0,manualRowMove:void 0,manualRowResize:void 0,mergeCells:!1,viewportRowRenderingOffset:"auto",viewportColumnRenderingOffset:"auto",validator:void 0,disableVisualSelection:!1,sortIndicator:void 0,manualColumnFreeze:void 0,trimWhitespace:!0,settings:void 0,source:void 0,title:void 0,checkedTemplate:void 0,uncheckedTemplate:void 0,label:void 0,format:void 0,language:void 0,selectOptions:void 0,autoColumnSize:void 0,autoRowSize:void 0,dateFormat:void 0,correctFormat:!1,defaultDate:void 0,strict:void 0,renderAllRows:void 0,preventOverflow:!1,bindRowsWithHeaders:void 0,collapsibleColumns:void 0,columnSummary:void 0,dropdownMenu:void 0,filters:void 0,ganttChart:void 0,headerTooltips:void 0,hiddenColumns:void 0,hiddenRows:void 0,nestedHeaders:void 0,trimRows:void 0,rowHeaderWidth:void 0,columnHeaderHeight:void 0,observeChanges:void 0,sortFunction:void 0,sortByRelevance:!0,filter:!0,filteringCaseSensitive:!1},S.DefaultSettings=oe},{"3rdparty/walkontable/src/calculator/viewportColumns":3,"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/selection":18,browser:23,dataMap:26,dataSource:27,editorManager:28,eventManager:41,"helpers/array":42,"helpers/browser":43,"helpers/data":44,"helpers/dom/element":46,"helpers/number":51,"helpers/object":52,"helpers/setting":53,"helpers/string":54,numeral:"numeral",plugins:59,renderers:92,tableView:101}],26:[function(e,t,n){"use strict";function o(e,t,n){var o=this;this.instance=e,this.priv=t,this.GridSettings=n,this.dataSource=this.instance.getSettings().data,this.cachedLength=null,this.latestSourceRowsCount=0,this.dataSource[0]?this.duckSchema=this.recursiveDuckSchema(this.dataSource[0]):this.duckSchema={},this.createMap(),this.interval=S.create(function(){return o.clearLengthCache()},"15fps")}Object.defineProperties(n,{DataMap:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l,a,u,c,d,h,f=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],p=(i=e("SheetClip"),i&&i.__esModule&&i||{"default":i})["default"],g=(s=e("helpers/data"),s&&s.__esModule&&s||{"default":s}).cellMethodLookupFactory,m=(l=e("helpers/setting"),l&&l.__esModule&&l||{"default":l}).columnFactory,w=(a=e("helpers/object"),a&&a.__esModule&&a||{"default":a}),v=w.duckSchema,y=w.deepExtend,b=w.deepClone,C=(u=e("helpers/array"),u&&u.__esModule&&u||{"default":u}),_=C.extendArray,R=C.to2dArray,S=(c=e("utils/interval"),c&&c.__esModule&&c||{"default":c}).Interval,E=(d=e("helpers/number"),d&&d.__esModule&&d||{"default":d}).rangeEach,M=(h=e("multiMap"),h&&h.__esModule&&h||{"default":h}).MultiMap;o.prototype.DESTINATION_RENDERER=1,o.prototype.DESTINATION_CLIPBOARD_GENERATOR=2,o.prototype.recursiveDuckSchema=function(e){return v(e)},o.prototype.recursiveDuckColumns=function(e,t,n){var o,r;if("undefined"==typeof t&&(t=0,n=""),"object"==typeof e&&!Array.isArray(e))for(r in e)e.hasOwnProperty(r)&&(null===e[r]?(o=n+r,this.colToPropCache.push(o),this.propToColCache.set(o,t),t++):t=this.recursiveDuckColumns(e[r],t,r+"."));return t},o.prototype.createMap=function(){var e,t,n=this.getSchema();if("undefined"==typeof n)throw new Error("trying to create `columns` definition but you didnt' provide `schema` nor `data`");this.colToPropCache=[],this.propToColCache=new M;var o=this.instance.getSettings().columns;if(o)for(e=0,t=o.length;t>e;e++)"undefined"!=typeof o[e].data&&(this.colToPropCache[e]=o[e].data,this.propToColCache.set(o[e].data,e));else this.recursiveDuckColumns(n)},o.prototype.colToProp=function(e){return e=f.hooks.run(this.instance,"modifyCol",e),this.colToPropCache&&"undefined"!=typeof this.colToPropCache[e]?this.colToPropCache[e]:e},o.prototype.propToCol=function(e){var t;return t="undefined"==typeof this.propToColCache.get(e)?e:this.propToColCache.get(e),t=f.hooks.run(this.instance,"unmodifyCol",t)},o.prototype.getSchema=function(){var e=this.instance.getSettings().dataSchema;return e?"function"==typeof e?e():e:this.duckSchema},o.prototype.createRow=function(e,t,n){var o,r,i=this.instance.countCols(),s=0;t||(t=1),("number"!=typeof e||e>=this.instance.countSourceRows())&&(e=this.instance.countSourceRows()),r=e;for(var l=this.instance.getSettings().maxRows;t>s&&this.instance.countSourceRows()<l;)"array"===this.instance.dataType?this.instance.getSettings().dataSchema?o=b(this.getSchema()):(o=[],E(i-1,function(){return o.push(null)})):"function"===this.instance.dataType?o=this.instance.getSettings().dataSchema(e):(o={},y(o,this.getSchema())),e===this.instance.countSourceRows()?this.dataSource.push(o):this.dataSource.splice(e,0,o),s++,r++;return f.hooks.run(this.instance,"afterCreateRow",e,s,n),this.instance.forceFullRender=!0,s},o.prototype.createCol=function(e,t,n){if(!this.instance.isColumnModificationAllowed())throw new Error("Cannot create new column. When data source in an object, you can only have as much columns as defined in first data row, data schema or in the 'columns' setting.If you want to be able to add new columns, you have to use array datasource.");var o,r,i=this.instance.countSourceRows(),s=this.dataSource,l=0;t||(t=1),("number"!=typeof e||e>=this.instance.countCols())&&(e=this.instance.countCols()),r=e;for(var a=this.instance.getSettings().maxCols;t>l&&this.instance.countCols()<a;){if(o=m(this.GridSettings,this.priv.columnsSettingConflicts),"number"!=typeof e||e>=this.instance.countCols()){for(var u=0;i>u;u++)"undefined"==typeof s[u]&&(s[u]=[]),s[u].push(null);this.priv.columnSettings.push(o)}else{for(var u=0;i>u;u++)s[u].splice(r,0,null);this.priv.columnSettings.splice(r,0,o)}l++,r++}return f.hooks.run(this.instance,"afterCreateCol",e,l,n),this.instance.forceFullRender=!0,l},o.prototype.removeRow=function(e,t){t||(t=1),"number"!=typeof e&&(e=-t),e=(this.instance.countSourceRows()+e)%this.instance.countSourceRows();var n=this.physicalRowsToLogical(e,t),o=(n.slice(0).sort(function(e,t){return t-e}),f.hooks.run(this.instance,"beforeRemoveRow",e,t,n));if(o!==!1){var r,i=this.dataSource;r=i.filter(function(e,t){return-1==n.indexOf(t)}),i.length=0,Array.prototype.push.apply(i,r),f.hooks.run(this.instance,"afterRemoveRow",e,t,n),this.instance.forceFullRender=!0}},o.prototype.removeCol=function(e,t){if("object"===this.instance.dataType||this.instance.getSettings().columns)throw new Error("cannot remove column with object data source or columns option specified");t||(t=1),"number"!=typeof e&&(e=-t),e=(this.instance.countCols()+e)%this.instance.countCols();var n=this.physicalColumnsToLogical(e,t),o=n.slice(0).sort(function(e,t){return t-e}),r=f.hooks.run(this.instance,"beforeRemoveCol",e,t,n);if(r!==!1){for(var i=!0,s=o.length,l=this.dataSource,a=0;s>a;a++)i&&n[0]!==n[a]-a&&(i=!1);if(i)for(var u=0,c=this.instance.countSourceRows();c>u;u++)l[u].splice(n[0],t);else{for(var d=0,h=this.instance.countSourceRows();h>d;d++)for(var p=0;s>p;p++)l[d].splice(o[p],1);for(var g=0;s>g;g++)this.priv.columnSettings.splice(n[g],1)}f.hooks.run(this.instance,"afterRemoveCol",e,t),this.instance.forceFullRender=!0}},o.prototype.spliceCol=function(e,t,n){var o=4<=arguments.length?[].slice.call(arguments,3):[],r=this.instance.getDataAtCol(e),i=r.slice(t,t+n),s=r.slice(t+n);_(o,s);for(var l=0;n>l;)o.push(null),l++;return R(o),this.instance.populateFromArray(t,e,o,null,null,"spliceCol"),i},o.prototype.spliceRow=function(e,t,n){var o=4<=arguments.length?[].slice.call(arguments,3):[],r=this.instance.getSourceDataAtRow(e),i=r.slice(t,t+n),s=r.slice(t+n);_(o,s);for(var l=0;n>l;)o.push(null),l++;return this.instance.populateFromArray(e,t,[o],null,null,"spliceRow"),i},o.prototype.get=function(e,t){e=f.hooks.run(this.instance,"modifyRow",e);var n=this.dataSource[e];if(n&&n.hasOwnProperty&&n.hasOwnProperty(t))return n[t];if("string"==typeof t&&t.indexOf(".")>-1){var o=t.split("."),r=n;if(!r)return null;for(var i=0,s=o.length;s>i;i++)if(r=r[o[i]],"undefined"==typeof r)return null;return r}return"function"==typeof t?t(this.dataSource.slice(e,e+1)[0]):null};var T=g("copyable",!1);o.prototype.getCopyable=function(e,t){return T.call(this.instance,e,this.propToCol(t))?this.get(e,t):""},o.prototype.set=function(e,t,n,o){e=f.hooks.run(this.instance,"modifyRow",e,o||"datamapGet");var r=this.dataSource[e];if(r&&r.hasOwnProperty&&r.hasOwnProperty(t))r[t]=n;else if("string"==typeof t&&t.indexOf(".")>-1){for(var i=t.split("."),s=r,l=0,a=i.length-1;a>l;l++)"undefined"==typeof s[i[l]]&&(s[i[l]]={}),s=s[i[l]];s[i[l]]=n}else"function"==typeof t?t(this.dataSource.slice(e,e+1)[0],n):r[t]=n},o.prototype.physicalRowsToLogical=function(e,t){for(var n,o=this.instance.countSourceRows(),r=(o+e)%o,i=[],s=t;o>r&&s;)n=f.hooks.run(this.instance,"modifyRow",r),i.push(n),s--,r++;return i},o.prototype.physicalColumnsToLogical=function(e,t){for(var n=this.instance.countCols(),o=(n+e)%n,r=[],i=t;n>o&&i;){var s=f.hooks.run(this.instance,"modifyCol",o);r.push(s),i--,o++}return r},o.prototype.clear=function(){for(var e=0;e<this.instance.countSourceRows();e++)for(var t=0;t<this.instance.countCols();t++)this.set(e,this.colToProp(t),"")},o.prototype.clearLengthCache=function(){this.cachedLength=null},o.prototype.getLength=function(){var e=this,t=this.instance.countSourceRows();if(f.hooks.has("modifyRow",this.instance)){var n=!1;this.interval.start(),t!==this.latestSourceRowsCount&&(n=!0),this.latestSourceRowsCount=t,null===this.cachedLength||n?(E(t-1,function(n){n=f.hooks.run(e.instance,"modifyRow",n),null===n&&--t}),this.cachedLength=t):t=this.cachedLength}else this.interval.stop();return t},o.prototype.getAll=function(){var e={row:0,col:0},t={row:Math.max(this.instance.countSourceRows()-1,0),col:Math.max(this.instance.countCols()-1,0)};return e.row-t.row!==0||this.instance.countSourceRows()?this.getRange(e,t,o.prototype.DESTINATION_RENDERER):[]},o.prototype.getRange=function(e,t,n){var o,r,i,s,l,a=[],u=n===this.DESTINATION_CLIPBOARD_GENERATOR?this.getCopyable:this.get;for(r=Math.max(e.row,t.row),s=Math.max(e.col,t.col),o=Math.min(e.row,t.row);r>=o;o++){l=[];var c=f.hooks.run(this.instance,"modifyRow",o);for(i=Math.min(e.col,t.col);s>=i;i++){if(null===c)break;l.push(u.call(this,o,this.colToProp(i)))}null!==c&&a.push(l)}return a},o.prototype.getText=function(e,t){return p.stringify(this.getRange(e,t,this.DESTINATION_RENDERER))},o.prototype.getCopyableText=function(e,t){return p.stringify(this.getRange(e,t,this.DESTINATION_CLIPBOARD_GENERATOR))},o.prototype.destroy=function(){this.interval.stop(),this.interval=null,this.instance=null,this.priv=null,this.GridSettings=null,this.dataSource=null,this.cachedLength=null,this.duckSchema=null}},{SheetClip:"SheetClip",browser:23,"helpers/array":42,"helpers/data":44,"helpers/number":51,"helpers/object":52,"helpers/setting":53,multiMap:57,"utils/interval":103}],27:[function(e,t,n){"use strict";Object.defineProperties(n,{DataSource:{get:function(){return f}},__esModule:{value:!0}});var o,r,i,s,l,a=((o=e("helpers/data"),o&&o.__esModule&&o||{"default":o}).cellMethodLookupFactory,(r=e("helpers/setting"),r&&r.__esModule&&r||{"default":r}).columnFactory,i=e("helpers/object"),i&&i.__esModule&&i||{"default":i}),u=(a.duckSchema,a.deepExtend,a.getProperty),c=(s=e("helpers/array"),s&&s.__esModule&&s||{"default":s}),d=(c.extendArray,c.arrayEach),h=(l=e("helpers/number"),l&&l.__esModule&&l||{"default":l}).rangeEach,f=function(e){var t=void 0!==arguments[1]?arguments[1]:[];this.hot=e,this.data=t,this.dataType="array",this.colToProp=function(){},this.propToCol=function(){}};$traceurRuntime.createClass(f,{getData:function(){return this.data},setData:function(e){this.data=e},getAtColumn:function(e){var t=this,n=[];return d(this.data,function(o){var r=t.colToProp(e);o="string"==typeof r?u(o,r):o[r],n.push(o)}),n},getAtRow:function(e){return this.data[e]},getAtCell:function(e,t){return this.data[e][this.colToProp(t)]},getByRange:function(e,t){var n=this,o=Math.min(e.row,t.row),r=Math.min(e.col,t.col),i=Math.max(e.row,t.row),s=Math.max(e.col,t.col),l=[];return h(o,i,function(e){var t,o=n.getAtRow(e);"array"===n.dataType?t=o.slice(r,s):"object"===n.dataType&&(t={},h(r,s,function(e){var r=n.colToProp(e);t[r]=o[r]})),l.push(t)}),l},destroy:function(){this.data=null,this.hot=null}},{})},{"helpers/array":42,"helpers/data":44,"helpers/number":51,"helpers/object":52,"helpers/setting":53}],28:[function(e,t,n){"use strict";function o(e,t,n){function o(e){var o="function"==typeof t.settings.enterMoves?t.settings.enterMoves(event):t.settings.enterMoves;e?n.transformStart(-o.row,-o.col):n.transformStart(o.row,o.col,!0)}function r(e){e?n.transformEnd(-1,0):n.transformStart(-1,0)}function i(e){e?n.transformEnd(1,0):n.transformStart(1,0)}function s(e){e?n.transformEnd(0,1):n.transformStart(0,1)}function l(e){e?n.transformEnd(0,-1):n.transformStart(0,-1)}function a(a){var u,h;if(e.isListening()&&(c.hooks.run(e,"beforeKeyDown",a),!_&&!y(a)&&(t.lastKeyCode=a.keyCode,n.isSelected()))){if(u=(a.ctrlKey||a.metaKey)&&!a.altKey,m&&!m.isWaiting()&&!(p(a.keyCode)||g(a.keyCode)||u||C.isEditorOpened()))return void C.openEditor("",a);switch(h=a.shiftKey?n.setRangeEnd:n.setRangeStart,a.keyCode){case f.A:!C.isEditorOpened()&&u&&(n.selectAll(),a.preventDefault(),w(a));break;case f.ARROW_UP:C.isEditorOpened()&&!m.isWaiting()&&C.closeEditorAndSaveChanges(u),r(a.shiftKey),a.preventDefault(),w(a);break;case f.ARROW_DOWN:C.isEditorOpened()&&!m.isWaiting()&&C.closeEditorAndSaveChanges(u),i(a.shiftKey),a.preventDefault(),w(a);break;case f.ARROW_RIGHT:C.isEditorOpened()&&!m.isWaiting()&&C.closeEditorAndSaveChanges(u),s(a.shiftKey),a.preventDefault(),w(a);break;case f.ARROW_LEFT:C.isEditorOpened()&&!m.isWaiting()&&C.closeEditorAndSaveChanges(u),l(a.shiftKey),a.preventDefault(),w(a);break;case f.TAB:var b="function"==typeof t.settings.tabMoves?t.settings.tabMoves(a):t.settings.tabMoves;a.shiftKey?n.transformStart(-b.row,-b.col):n.transformStart(b.row,b.col,!0),a.preventDefault(),w(a);break;case f.BACKSPACE:case f.DELETE:n.empty(a),C.prepareEditor(),a.preventDefault();break;case f.F2:C.openEditor(null,a),m&&m.enableFullEditMode(),a.preventDefault();break;case f.ENTER:C.isEditorOpened()?(m&&m.state!==c.EditorState.WAITING&&C.closeEditorAndSaveChanges(u),o(a.shiftKey)):e.getSettings().enterBeginsEditing?(C.openEditor(null,a),m&&m.enableFullEditMode()):o(a.shiftKey),a.preventDefault(),v(a);break;case f.ESCAPE:C.isEditorOpened()&&C.closeEditorAndRestoreOriginalValue(u),a.preventDefault();break;case f.HOME:h(a.ctrlKey||a.metaKey?new d(0,t.selRange.from.col):new d(t.selRange.from.row,0)),a.preventDefault(),w(a);break;case f.END:h(a.ctrlKey||a.metaKey?new d(e.countRows()-1,t.selRange.from.col):new d(t.selRange.from.row,e.countCols()-1)),a.preventDefault(),w(a);break;case f.PAGE_UP:n.transformStart(-e.countVisibleRows(),0),a.preventDefault(),w(a);break;case f.PAGE_DOWN:n.transformStart(e.countVisibleRows(),0),a.preventDefault(),w(a)}}}function u(){function t(e,t,n){"TD"==n.nodeName&&(C.openEditor(),m&&m.enableFullEditMode())}e.addHook("afterDocumentKeyDown",a),h.addEventListener(document.documentElement,"keydown",function(t){e.runHooks("afterDocumentKeyDown",t)}),e.view.wt.update("onCellDblClick",t),e.addHook("afterDestroy",function(){_=!0})}var h,m,C=this,_=!1;h=b(e),this.destroyEditor=function(e){this.closeEditor(e)},this.getActiveEditor=function(){return m},this.prepareEditor=function(){var n,o,r,i,s,l,a;return m&&m.isWaiting()?void this.closeEditor(!1,!1,function(e){e&&C.prepareEditor()}):(n=t.selRange.highlight.row,o=t.selRange.highlight.col,r=e.colToProp(o),i=e.getCell(n,o),s=e.getDataAtCell(n,o),l=e.getCellMeta(n,o),a=e.getCellEditor(l),void(a?(m=c.editors.getEditor(a,e),m.prepare(n,o,r,i,s,l)):m=void 0))},this.isEditorOpened=function(){return m&&m.isOpened()},this.openEditor=function(e,t){m&&!m.cellProperties.readOnly?m.beginEditing(e,t):m&&m.cellProperties.readOnly&&t&&t.keyCode===f.ENTER&&o()},this.closeEditor=function(e,t,n){m?m.finishEditing(e,t,n):n&&n(!1)},this.closeEditorAndSaveChanges=function(e){return this.closeEditor(!1,e)},this.closeEditorAndRestoreOriginalValue=function(e){return this.closeEditor(!0,e)},u()}Object.defineProperties(n,{EditorManager:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l,a,u,c=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],d=(i=e("3rdparty/walkontable/src/cell/coords"),i&&i.__esModule&&i||{"default":i}).WalkontableCellCoords,h=(s=e("helpers/unicode"),s&&s.__esModule&&s||{"default":s}),f=h.KEY_CODES,p=h.isMetaKey,g=h.isCtrlKey,m=(l=e("helpers/dom/event"),l&&l.__esModule&&l||{"default":l}),w=m.stopPropagation,v=m.stopImmediatePropagation,y=m.isImmediatePropagationStopped,b=((a=e("editors"),a&&a.__esModule&&a||{"default":a}).getEditor,(u=e("eventManager"),u&&u.__esModule&&u||{"default":u}).eventManager);c.EditorManager=o},{"3rdparty/walkontable/src/cell/coords":5,browser:23,editors:29,eventManager:41,"helpers/dom/event":47,"helpers/unicode":55}],29:[function(e,t,n){"use strict";function o(e){var t,n;n={},t=e,this.getConstructor=function(){return e},this.getInstance=function(e){return e.guid in n||(n[e.guid]=new t(e)),n[e.guid]}}function r(e,t){var n=new o(t);"string"==typeof e&&(h[e]=n,c.editors[d(e)+"Editor"]=t),f.set(t,n)}function i(e,t){var n;if("function"==typeof e)f.get(e)||r(null,e),n=f.get(e);else{if("string"!=typeof e)throw Error('Only strings and functions can be passed as "editor" parameter ');n=h[e]}if(!n)throw Error('No editor registered under name "'+e+'"');return n.getInstance(t)}function s(e){var t;if("string"!=typeof e)throw Error('Only strings and functions can be passed as "editor" parameter ');if(t=h[e],!t)throw Error('No editor registered under name "'+e+'"');return t.getConstructor()}function l(e){return!!h[e]}Object.defineProperties(n,{registerEditor:{get:function(){return r}},getEditor:{get:function(){return i}},hasEditor:{get:function(){return l}},getEditorConstructor:{get:function(){return s}},__esModule:{value:!0}});var a,u,c=(a=e("browser"),a&&a.__esModule&&a||{"default":a})["default"],d=(u=e("helpers/string"),u&&u.__esModule&&u||{"default":u}).toUpperCaseFirst,h={},f=new WeakMap;c.editors=c.editors||{},c.editors.registerEditor=r,c.editors.getEditor=i},{browser:23,"helpers/string":54}],30:[function(e,t,n){"use strict";function o(e){this.instance=e,this.state=l.EditorState.VIRGIN,this._opened=!1,this._fullEditMode=!1,this._closeCallback=null,this.init()}Object.defineProperties(n,{BaseEditor:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],a=(i=e("helpers/mixed"),i&&i.__esModule&&i||{"default":i}).stringify,u=(s=e("3rdparty/walkontable/src/cell/coords"),s&&s.__esModule&&s||{"default":s}).WalkontableCellCoords;l.editors=l.editors||{},l.editors.BaseEditor=o,l.EditorState={VIRGIN:"STATE_VIRGIN",EDITING:"STATE_EDITING",WAITING:"STATE_WAITING",FINISHED:"STATE_FINISHED"},o.prototype._fireCallbacks=function(e){this._closeCallback&&(this._closeCallback(e),this._closeCallback=null)},o.prototype.init=function(){},o.prototype.getValue=function(){throw Error("Editor getValue() method unimplemented")},o.prototype.setValue=function(e){throw Error("Editor setValue() method unimplemented")},o.prototype.open=function(){throw Error("Editor open() method unimplemented")},o.prototype.close=function(){throw Error("Editor close() method unimplemented")},o.prototype.prepare=function(e,t,n,o,r,i){this.TD=o,this.row=e,this.col=t,this.prop=n,this.originalValue=r,this.cellProperties=i,this.instance.view.isMouseDown()&&document.activeElement&&document.activeElement!==document.body?document.activeElement.blur():document.activeElement||document.body.focus(),this.state=l.EditorState.VIRGIN},o.prototype.extend=function(){function e(){n.apply(this,arguments)}function t(e,t){function n(){}return n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e,e}var n=this.constructor;return t(e,n)},o.prototype.saveValue=function(e,t){var n,o;t?(n=this.instance.getSelected(),n[0]>n[2]&&(o=n[0],n[0]=n[2],n[2]=o),n[1]>n[3]&&(o=n[1],n[1]=n[3],n[3]=o),this.instance.populateFromArray(n[0],n[1],e,n[2],n[3],"edit")):this.instance.populateFromArray(this.row,this.col,e,null,null,"edit")},o.prototype.beginEditing=function(e,t){this.state==l.EditorState.VIRGIN&&(this.instance.view.scrollViewport(new u(this.row,this.col)),this.instance.view.render(),this.state=l.EditorState.EDITING,e="string"==typeof e?e:this.originalValue,this.setValue(a(e)),this.open(t),this._opened=!0,this.focus(),this.instance.view.render())},o.prototype.finishEditing=function(e,t,n){var o,r=this;if(n){var i=this._closeCallback;this._closeCallback=function(e){i&&i(e),n(e)}}if(!this.isWaiting()){if(this.state==l.EditorState.VIRGIN)return void this.instance._registerTimeout(setTimeout(function(){r._fireCallbacks(!0)},0));if(this.state==l.EditorState.EDITING){if(e)return this.cancelChanges(),void this.instance.view.render();var s=this.getValue();o=this.instance.getSettings().trimWhitespace?[["string"==typeof s?String.prototype.trim.call(s||""):s]]:[[s]],this.state=l.EditorState.WAITING,this.saveValue(o,t),this.instance.getCellValidator(this.cellProperties)?this.instance.addHookOnce("postAfterValidate",function(e){r.state=l.EditorState.FINISHED,r.discardEditor(e)}):(this.state=l.EditorState.FINISHED,this.discardEditor(!0))}}},o.prototype.cancelChanges=function(){this.state=l.EditorState.FINISHED,this.discardEditor()},o.prototype.discardEditor=function(e){this.state===l.EditorState.FINISHED&&(e===!1&&this.cellProperties.allowInvalid!==!0?(this.instance.selectCell(this.row,this.col),this.focus(),this.state=l.EditorState.EDITING,this._fireCallbacks(!1)):(this.close(),this._opened=!1,this._fullEditMode=!1,this.state=l.EditorState.VIRGIN,this._fireCallbacks(!0)))},o.prototype.enableFullEditMode=function(){this._fullEditMode=!0},o.prototype.isInFullEditMode=function(){return this._fullEditMode},o.prototype.isOpened=function(){return this._opened},o.prototype.isWaiting=function(){return this.state===l.EditorState.WAITING},o.prototype.checkEditorSection=function(){var e=this.instance.countRows(),t="";return this.row<this.instance.getSettings().fixedRowsTop?t=this.col<this.instance.getSettings().fixedColumnsLeft?"top-left-corner":"top":this.instance.getSettings().fixedRowsBottom&&this.row>=e-this.instance.getSettings().fixedRowsBottom?t=this.col<this.instance.getSettings().fixedColumnsLeft?"bottom-left-corner":"bottom":this.col<this.instance.getSettings().fixedColumnsLeft&&(t="left"),t}},{"3rdparty/walkontable/src/cell/coords":5,browser:23,"helpers/mixed":50}],31:[function(e,t,n){"use strict";function o(e){k=!1;var t=this.getActiveEditor();if(f(e.keyCode)||e.keyCode===h.BACKSPACE||e.keyCode===h.DELETE||e.keyCode===h.INSERT){var n=0;if(e.keyCode===h.C&&(e.ctrlKey||e.metaKey))return;t.isOpened()||(n+=10),t.htEditor&&t.instance._registerTimeout(setTimeout(function(){t.queryChoices(t.TEXTAREA.value),k=!0},n))}}Object.defineProperties(n,{AutocompleteEditor:{get:function(){return O}},__esModule:{value:!0}});var r,i,s,l,a,u,c,d=((r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],i=e("helpers/unicode"),i&&i.__esModule&&i||{"default":i}),h=d.KEY_CODES,f=d.isPrintableChar,p=(s=e("helpers/mixed"),s&&s.__esModule&&s||{"default":s}).stringify,g=(l=e("helpers/array"),l&&l.__esModule&&l||{"default":l}).pivot,m=(a=e("helpers/dom/element"),a&&a.__esModule&&a||{"default":a}),w=m.addClass,v=m.getCaretPosition,y=m.getScrollbarWidth,b=m.getSelectionEndPosition,C=m.outerWidth,_=m.outerHeight,R=m.offset,S=m.getTrimmingContainer,E=m.setCaretPosition,M=(u=e("editors"),u&&u.__esModule&&u||{"default":u}).registerEditor,T=(c=e("handsontableEditor"),c&&c.__esModule&&c||{"default":c}).HandsontableEditor,O=T.prototype.extend();O.prototype.init=function(){T.prototype.init.apply(this,arguments),this.query=null,this.choices=[]},O.prototype.createElements=function(){T.prototype.createElements.apply(this,arguments),w(this.htContainer,"autocompleteEditor"),w(this.htContainer,-1===window.navigator.platform.indexOf("Mac")?"":"htMacScroll")};var k=!1;O.prototype.prepare=function(){this.instance.addHook("beforeKeyDown",o),T.prototype.prepare.apply(this,arguments)},O.prototype.open=function(){this.TEXTAREA_PARENT.style.overflow="auto",T.prototype.open.apply(this,arguments),this.TEXTAREA_PARENT.style.overflow="";var e=this.htEditor.getInstance(),t=this,n=void 0===this.cellProperties.trimDropdown?!0:this.cellProperties.trimDropdown;this.TEXTAREA.style.visibility="visible",this.focus(),e.updateSettings({colWidths:n?[C(this.TEXTAREA)-2]:void 0,width:n?C(this.TEXTAREA)+y()+2:void 0,afterRenderer:function(e,n,o,r,i){var s,l,a=this.getCellMeta(n,o).filteringCaseSensitive===!0;i=p(i),i&&(s=a?i.indexOf(this.query):i.toLowerCase().indexOf(t.query.toLowerCase()),-1!=s&&(l=i.substr(s,t.query.length),e.innerHTML=i.replace(l,"<strong>"+l+"</strong>")))},autoColumnSize:!0,modifyColWidth:function(e,t){var o=this.getPlugin("autoColumnSize").widths;return o[t]&&(e=o[t]),n?e:e+15}}),this.htEditor.view.wt.wtTable.holder.parentNode.style["padding-right"]=y()+2+"px",k&&(k=!1),t.instance._registerTimeout(setTimeout(function(){t.queryChoices(t.TEXTAREA.value)},0))},O.prototype.close=function(){T.prototype.close.apply(this,arguments)},O.prototype.queryChoices=function(e){this.query=e;var t=this.cellProperties.source,n=this.cellProperties.filter,o=this.cellProperties.filteringCaseSensitive;if("function"==typeof t){var r=this;t(e,function(e){r.updateChoicesList(e)})}else if(Array.isArray(t)){var i;if(e&&n!==!1){var s=e.toLowerCase();i=t.filter(function(t){return o?-1!=t.indexOf(e):-1!=t.toLowerCase().indexOf(s)})}else i=t;this.updateChoicesList(i)}else this.updateChoicesList([])},O.prototype.updateChoicesList=function(e){var t=v(this.TEXTAREA),n=b(this.TEXTAREA),o=this.cellProperties.sortByRelevance,r=this.cellProperties.filter,i=null,s=null;if(o&&(i=O.sortByRelevance(this.getValue(),e,this.cellProperties.filteringCaseSensitive)),r===!1)s=i?i[0]:0;else{for(var l=[],a=0,u=e.length;u>a;a++)i?l.push(e[i[a]]):l.push(e[a]);s=0,e=l}this.choices=e,this.htEditor.loadData(g([e])),this.updateDropdownHeight(),this.flipDropdownIfNeeded(),this.cellProperties.strict===!0&&this.highlightBestMatchingChoice(s),this.instance.listen(),this.TEXTAREA.focus(),E(this.TEXTAREA,t,t===n?void 0:n)},O.prototype.flipDropdownIfNeeded=function(){var e=R(this.TEXTAREA),t=_(this.TEXTAREA),n=this.getDropdownHeight(),o=S(this.instance.view.wt.wtTable.TABLE),r={row:0,col:0};o!==window&&(r=R(o));var i=r.top+(o.scrollHeight-o.scrollTop),s=r.top+o.scrollHeight,l=e.top+t+n>i;l&&s>i?this.flipDropdown(n):this.unflipDropdown()},O.prototype.flipDropdown=function(e){var t=this.htEditor.rootElement.style;t.position="absolute",t.top=-e+"px",this.htEditor.flipped=!0},O.prototype.unflipDropdown=function(){var e=this.htEditor.rootElement.style;"absolute"===e.position&&(e.position="",e.top=""),this.htEditor.flipped=void 0},O.prototype.updateDropdownHeight=function(){var e=this.htEditor.getColWidth(0)+y()+2,t=this.cellProperties.trimDropdown;this.htEditor.updateSettings({height:this.getDropdownHeight(),width:t?void 0:e}),this.htEditor.view.wt.wtTable.alignOverlaysWithTrimmingContainer()},O.prototype.finishEditing=function(e){e||this.instance.removeHook("beforeKeyDown",o),T.prototype.finishEditing.apply(this,arguments)},O.prototype.highlightBestMatchingChoice=function(e){"number"==typeof e?this.htEditor.selectCell(e,0):this.htEditor.deselectCell()},O.sortByRelevance=function(e,t,n){var o,r,i,s,l=[],a=e.length,u=[],c=t.length;if(0===a){for(s=0;c>s;s++)u.push(s);return u}for(s=0;c>s;s++)o=p(t[s]),r=n?o.indexOf(e):o.toLowerCase().indexOf(e.toLowerCase()),-1!=r&&(i=o.length-r-a,l.push({baseIndex:s,index:r,charsLeft:i,value:o}));for(l.sort(function(e,t){return-1===t.index?-1:-1===e.index?1:e.index<t.index?-1:t.index<e.index?1:e.index===t.index?e.charsLeft<t.charsLeft?-1:e.charsLeft>t.charsLeft?1:0:void 0}),s=0,c=l.length;c>s;s++)u.push(l[s].baseIndex);return u},O.prototype.getDropdownHeight=function(){var e=this.htEditor.getInstance().getRowHeight(0)||23,t=this.cellProperties.visibleRows;return this.choices.length>=t?t*e:this.choices.length*e+8},O.prototype.allowKeyEventPropagation=function(e){var t={row:this.htEditor.getSelectedRange()?this.htEditor.getSelectedRange().from.row:-1},n=!1;return e===h.ARROW_DOWN&&t.row>0&&t.row<this.htEditor.countRows()-1&&(n=!0),
e===h.ARROW_UP&&t.row>-1&&(n=!0),n},M("autocomplete",O)},{browser:23,editors:29,handsontableEditor:35,"helpers/array":42,"helpers/dom/element":46,"helpers/mixed":50,"helpers/unicode":55}],32:[function(e,t,n){"use strict";Object.defineProperties(n,{CheckboxEditor:{get:function(){return c}},__esModule:{value:!0}});var o,r,i,s,l=((o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],(r=e("editors"),r&&r.__esModule&&r||{"default":r}).registerEditor),a=(i=e("_baseEditor"),i&&i.__esModule&&i||{"default":i}).BaseEditor,u=(s=e("helpers/dom/element"),s&&s.__esModule&&s||{"default":s}).hasClass,c=function(){$traceurRuntime.superConstructor(d).apply(this,arguments)},d=c;$traceurRuntime.createClass(c,{beginEditing:function(e,t){if(void 0===t){var n=this.TD.querySelector('input[type="checkbox"]');u(n,"htBadValue")||n.click()}},finishEditing:function(){},init:function(){},open:function(){},close:function(){},getValue:function(){},setValue:function(){},focus:function(){}},{},a),l("checkbox",c)},{_baseEditor:30,browser:23,editors:29,"helpers/dom/element":46}],33:[function(e,t,n){"use strict";Object.defineProperties(n,{DateEditor:{get:function(){return M}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d,h,f=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],p=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),g=p.addClass,m=p.outerHeight,w=(i=e("helpers/object"),i&&i.__esModule&&i||{"default":i}).deepExtend,v=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).EventManager,y=(l=e("editors"),l&&l.__esModule&&l||{"default":l}),b=(y.getEditor,y.registerEditor),C=(a=e("helpers/unicode"),a&&a.__esModule&&a||{"default":a}).isMetaKey,_=(u=e("helpers/dom/event"),u&&u.__esModule&&u||{"default":u}).stopPropagation,R=(c=e("textEditor"),c&&c.__esModule&&c||{"default":c}).TextEditor,S=(d=e("moment"),d&&d.__esModule&&d||{"default":d})["default"],E=(h=e("pikaday"),h&&h.__esModule&&h||{"default":h})["default"];f.editors=f.editors||{},f.editors.DateEditor=M;var M=function(e){this.$datePicker=null,this.datePicker=null,this.datePickerStyle=null,this.defaultDateFormat="DD/MM/YYYY",this.isCellEdited=!1,this.parentDestroyed=!1,$traceurRuntime.superConstructor(T).call(this,e)},T=M;$traceurRuntime.createClass(M,{init:function(){var e=this;if("function"!=typeof S)throw new Error("You need to include moment.js to your project.");if("function"!=typeof E)throw new Error("You need to include Pikaday to your project.");$traceurRuntime.superGet(this,T.prototype,"init").call(this),this.instance.addHook("afterDestroy",function(){e.parentDestroyed=!0,e.destroyElements()})},createElements:function(){$traceurRuntime.superGet(this,T.prototype,"createElements").call(this),this.datePicker=document.createElement("DIV"),this.datePickerStyle=this.datePicker.style,this.datePickerStyle.position="absolute",this.datePickerStyle.top=0,this.datePickerStyle.left=0,this.datePickerStyle.zIndex=9999,g(this.datePicker,"htDatepickerHolder"),document.body.appendChild(this.datePicker),this.$datePicker=new E(this.getDatePickerConfig());var e=new v(this);e.addEventListener(this.datePicker,"mousedown",function(e){return _(e)}),this.hideDatepicker()},destroyElements:function(){this.$datePicker.destroy()},prepare:function(e,t,n,o,r,i){this._opened=!1,$traceurRuntime.superGet(this,T.prototype,"prepare").call(this,e,t,n,o,r,i)},open:function(){var e=void 0!==arguments[0]?arguments[0]:null;$traceurRuntime.superGet(this,T.prototype,"open").call(this),this.showDatepicker(e)},close:function(){var e=this;this._opened=!1,this.instance._registerTimeout(setTimeout(function(){e.instance.selection.refreshBorders()},0)),$traceurRuntime.superGet(this,T.prototype,"close").call(this)},finishEditing:function(){var e=void 0!==arguments[0]?arguments[0]:!1,t=void 0!==arguments[1]?arguments[1]:!1;if(e){var n=this.originalValue;void 0!==n&&this.setValue(n)}this.hideDatepicker(),$traceurRuntime.superGet(this,T.prototype,"finishEditing").call(this,e,t)},showDatepicker:function(e){this.$datePicker.config(this.getDatePickerConfig());var t,n=this.TD.getBoundingClientRect(),o=this.cellProperties.dateFormat||this.defaultDateFormat,r=this.$datePicker.config(),i=this.instance.view.isMouseDown(),s=e?C(e.keyCode):!1;this.datePickerStyle.top=window.pageYOffset+n.top+m(this.TD)+"px",this.datePickerStyle.left=window.pageXOffset+n.left+"px",this.$datePicker._onInputFocus=function(){},r.format=o,this.originalValue?(t=this.originalValue,S(t,o,!0).isValid()&&this.$datePicker.setMoment(S(t,o),!0),this.getValue()!==this.originalValue&&this.setValue(this.originalValue),s||i||this.setValue("")):this.cellProperties.defaultDate?(t=this.cellProperties.defaultDate,r.defaultDate=t,S(t,o,!0).isValid()&&this.$datePicker.setMoment(S(t,o),!0),s||i||this.setValue("")):this.$datePicker.gotoToday(),this.datePickerStyle.display="block",this.$datePicker.show()},hideDatepicker:function(){this.datePickerStyle.display="none",this.$datePicker.hide()},getDatePickerConfig:function(){var e=this,t=this.TEXTAREA,n={};this.cellProperties&&this.cellProperties.datePickerConfig&&w(n,this.cellProperties.datePickerConfig);var o=n.onSelect,r=n.onClose;return n.field=t,n.trigger=t,n.container=this.datePicker,n.bound=!1,n.format=n.format||this.defaultDateFormat,n.reposition=n.reposition||!1,n.onSelect=function(t){isNaN(t.getTime())||(t=S(t).format(e.cellProperties.dateFormat||e.defaultDateFormat)),e.setValue(t),e.hideDatepicker(),o&&o()},n.onClose=function(){e.parentDestroyed||e.finishEditing(!1),r&&r()},n}},{},R),b("date",M)},{browser:23,editors:29,eventManager:41,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/object":52,"helpers/unicode":55,moment:"moment",pikaday:"pikaday",textEditor:40}],34:[function(e,t,n){"use strict";Object.defineProperties(n,{DropdownEditor:{get:function(){return c}},__esModule:{value:!0}});var o,r,i,s=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],l=(r=e("editors"),r&&r.__esModule&&r||{"default":r}),a=(l.getEditor,l.registerEditor),u=(l.getEditorConstructor,(i=e("autocompleteEditor"),i&&i.__esModule&&i||{"default":i}).AutocompleteEditor),c=function(){$traceurRuntime.superConstructor(d).apply(this,arguments)},d=c;$traceurRuntime.createClass(c,{prepare:function(e,t,n,o,r,i){$traceurRuntime.superGet(this,d.prototype,"prepare").call(this,e,t,n,o,r,i),this.cellProperties.filter=!1,this.cellProperties.strict=!0}},{},u),s.hooks.add("beforeValidate",function(e,t,n,o){var r=this.getCellMeta(t,this.propToCol(n));r.editor===s.editors.DropdownEditor&&void 0===r.strict&&(r.filter=!1,r.strict=!0)}),a("dropdown",c)},{autocompleteEditor:31,browser:23,editors:29}],35:[function(e,t,n){"use strict";Object.defineProperties(n,{HandsontableEditor:{get:function(){return b}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],d=(r=e("helpers/unicode"),r&&r.__esModule&&r||{"default":r}).KEY_CODES,h=(i=e("helpers/object"),i&&i.__esModule&&i||{"default":i}).extend,f=(s=e("helpers/dom/element"),s&&s.__esModule&&s||{"default":s}).setCaretPosition,p=(l=e("helpers/dom/event"),l&&l.__esModule&&l||{"default":l}),g=p.stopImmediatePropagation,m=p.isImmediatePropagationStopped,w=(a=e("editors"),a&&a.__esModule&&a||{"default":a}),v=(w.getEditor,w.registerEditor),y=(u=e("textEditor"),u&&u.__esModule&&u||{"default":u}).TextEditor,b=y.prototype.extend();b.prototype.createElements=function(){y.prototype.createElements.apply(this,arguments);var e=document.createElement("DIV");e.className="handsontableEditor",this.TEXTAREA_PARENT.appendChild(e),this.htContainer=e,this.assignHooks()},b.prototype.prepare=function(e,t,n,o,r,i){y.prototype.prepare.apply(this,arguments);var s=this,l={startRows:0,startCols:0,minRows:0,minCols:0,className:"listbox",copyPaste:!1,autoColumnSize:!1,autoRowSize:!1,readOnly:!0,fillHandle:!1,afterOnCellMouseDown:function(){var e=this.getValue();void 0!==e&&s.setValue(e),s.instance.destroyEditor()}};this.cellProperties.handsontable&&h(l,i.handsontable),this.htOptions=l};var C=function(e){if(!m(e)){var t,n=this.getActiveEditor(),o=n.htEditor.getInstance();if(e.keyCode==d.ARROW_DOWN)if(o.getSelected()||o.flipped){if(o.getSelected())if(o.flipped)t=o.getSelected()[0]+1;else if(!o.flipped){var r=o.getSelected()[0],i=o.countRows()-1;t=Math.min(i,r+1)}}else t=0;else if(e.keyCode==d.ARROW_UP)if(!o.getSelected()&&o.flipped)t=o.countRows()-1;else if(o.getSelected())if(o.flipped){var r=o.getSelected()[0];t=Math.max(0,r-1)}else{var r=o.getSelected()[0];t=r-1}void 0!==t&&(0>t||o.flipped&&t>o.countRows()-1?o.deselectCell():o.selectCell(t,0),o.getData().length&&(e.preventDefault(),g(e),n.instance.listen(),n.TEXTAREA.focus()))}};b.prototype.open=function(){this.instance.addHook("beforeKeyDown",C),y.prototype.open.apply(this,arguments),this.htEditor&&this.htEditor.destroy(),this.htEditor=new c(this.htContainer,this.htOptions),this.cellProperties.strict?(this.htEditor.selectCell(0,0),this.TEXTAREA.style.visibility="hidden"):(this.htEditor.deselectCell(),this.TEXTAREA.style.visibility="visible"),f(this.TEXTAREA,0,this.TEXTAREA.value.length)},b.prototype.close=function(){this.instance.removeHook("beforeKeyDown",C),this.instance.listen(),y.prototype.close.apply(this,arguments)},b.prototype.focus=function(){this.instance.listen(),y.prototype.focus.apply(this,arguments)},b.prototype.beginEditing=function(e){var t=this.instance.getSettings().onBeginEditing;t&&t()===!1||y.prototype.beginEditing.apply(this,arguments)},b.prototype.finishEditing=function(e,t){if(this.htEditor&&this.htEditor.isListening()&&this.instance.listen(),this.htEditor&&this.htEditor.getSelected()){var n=this.htEditor.getInstance().getValue();void 0!==n&&this.setValue(n)}return y.prototype.finishEditing.apply(this,arguments)},b.prototype.assignHooks=function(){var e=this;this.instance.addHook("afterDestroy",function(){e.htEditor&&e.htEditor.destroy()})},v("handsontable",b)},{browser:23,editors:29,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/object":52,"helpers/unicode":55,textEditor:40}],36:[function(e,t,n){"use strict";Object.defineProperties(n,{MobileTextEditor:{get:function(){return k}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c=((o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],(r=e("helpers/unicode"),r&&r.__esModule&&r||{"default":r}).KEY_CODES),d=(i=e("helpers/dom/event"),i&&i.__esModule&&i||{"default":i}),h=d.stopImmediatePropagation,f=d.isImmediatePropagationStopped,p=(s=e("helpers/dom/element"),s&&s.__esModule&&s||{"default":s}),g=p.addClass,m=p.getScrollLeft,w=p.getScrollTop,v=p.hasClass,y=p.isChildOf,b=p.offset,C=p.outerHeight,_=p.outerWidth,R=p.removeClass,S=p.setCaretPosition,E=(l=e("editors"),l&&l.__esModule&&l||{"default":l}),M=(E.getEditor,E.registerEditor),T=(a=e("_baseEditor"),a&&a.__esModule&&a||{"default":a}).BaseEditor,O=(u=e("eventManager"),u&&u.__esModule&&u||{"default":u}).eventManager,k=T.prototype.extend(),D={},A=function(){this.controls={},this.controls.leftButton=document.createElement("DIV"),this.controls.leftButton.className="leftButton",this.controls.rightButton=document.createElement("DIV"),this.controls.rightButton.className="rightButton",this.controls.upButton=document.createElement("DIV"),this.controls.upButton.className="upButton",this.controls.downButton=document.createElement("DIV"),this.controls.downButton.className="downButton";for(var e in this.controls)this.controls.hasOwnProperty(e)&&this.positionControls.appendChild(this.controls[e])};k.prototype.valueChanged=function(){return this.initValue!=this.getValue()},k.prototype.init=function(){var e=this;this.eventManager=O(this.instance),this.createElements(),this.bindEvents(),this.instance.addHook("afterDestroy",function(){e.destroy()})},k.prototype.getValue=function(){return this.TEXTAREA.value},k.prototype.setValue=function(e){this.initValue=e,this.TEXTAREA.value=e},k.prototype.createElements=function(){this.editorContainer=document.createElement("DIV"),this.editorContainer.className="htMobileEditorContainer",this.cellPointer=document.createElement("DIV"),this.cellPointer.className="cellPointer",this.moveHandle=document.createElement("DIV"),this.moveHandle.className="moveHandle",this.inputPane=document.createElement("DIV"),this.inputPane.className="inputs",this.positionControls=document.createElement("DIV"),this.positionControls.className="positionControls",this.TEXTAREA=document.createElement("TEXTAREA"),g(this.TEXTAREA,"handsontableInput"),this.inputPane.appendChild(this.TEXTAREA),this.editorContainer.appendChild(this.cellPointer),this.editorContainer.appendChild(this.moveHandle),this.editorContainer.appendChild(this.inputPane),this.editorContainer.appendChild(this.positionControls),A.call(this),document.body.appendChild(this.editorContainer)},k.prototype.onBeforeKeyDown=function(e){var t=this,n=t.getActiveEditor();if(e.target===n.TEXTAREA&&!f(e))switch(e.keyCode){case c.ENTER:n.close(),e.preventDefault();break;case c.BACKSPACE:h(e)}},k.prototype.open=function(){this.instance.addHook("beforeKeyDown",this.onBeforeKeyDown),g(this.editorContainer,"active"),R(this.cellPointer,"hidden"),this.updateEditorPosition()},k.prototype.focus=function(){this.TEXTAREA.focus(),S(this.TEXTAREA,this.TEXTAREA.value.length)},k.prototype.close=function(){this.TEXTAREA.blur(),this.instance.removeHook("beforeKeyDown",this.onBeforeKeyDown),R(this.editorContainer,"active")},k.prototype.scrollToView=function(){var e=this.instance.getSelectedRange().highlight;this.instance.view.scrollViewport(e)},k.prototype.hideCellPointer=function(){v(this.cellPointer,"hidden")||g(this.cellPointer,"hidden")},k.prototype.updateEditorPosition=function(e,t){if(e&&t)e=parseInt(e,10),t=parseInt(t,10),this.editorContainer.style.top=t+"px",this.editorContainer.style.left=e+"px";else{var n=this.instance.getSelected(),o=this.instance.getCell(n[0],n[1]);if(D.cellPointer||(D.cellPointer={height:C(this.cellPointer),width:_(this.cellPointer)}),D.editorContainer||(D.editorContainer={width:_(this.editorContainer)}),void 0!==o){var r=this.instance.view.wt.wtOverlays.leftOverlay.trimmingContainer==window?0:m(this.instance.view.wt.wtOverlays.leftOverlay.holder),i=this.instance.view.wt.wtOverlays.topOverlay.trimmingContainer==window?0:w(this.instance.view.wt.wtOverlays.topOverlay.holder),s=b(o),l=_(o),a={x:r,y:i};this.editorContainer.style.top=parseInt(s.top+C(o)-a.y+D.cellPointer.height,10)+"px",this.editorContainer.style.left=parseInt(window.innerWidth/2-D.editorContainer.width/2,10)+"px",s.left+l/2>parseInt(this.editorContainer.style.left,10)+D.editorContainer.width?this.editorContainer.style.left=window.innerWidth-D.editorContainer.width+"px":s.left+l/2<parseInt(this.editorContainer.style.left,10)+20&&(this.editorContainer.style.left="0px"),this.cellPointer.style.left=parseInt(s.left-D.cellPointer.width/2-b(this.editorContainer).left+l/2-a.x,10)+"px"}}},k.prototype.updateEditorData=function(){var e=this.instance.getSelected(),t=this.instance.getDataAtCell(e[0],e[1]);this.row=e[0],this.col=e[1],this.setValue(t),this.updateEditorPosition()},k.prototype.prepareAndSave=function(){var e;return this.valueChanged()?(e=this.instance.getSettings().trimWhitespace?[[String.prototype.trim.call(this.getValue())]]:[[this.getValue()]],void this.saveValue(e)):!0},k.prototype.bindEvents=function(){var e=this;this.eventManager.addEventListener(this.controls.leftButton,"touchend",function(t){e.prepareAndSave(),e.instance.selection.transformStart(0,-1,null,!0),e.updateEditorData(),t.preventDefault()}),this.eventManager.addEventListener(this.controls.rightButton,"touchend",function(t){e.prepareAndSave(),e.instance.selection.transformStart(0,1,null,!0),e.updateEditorData(),t.preventDefault()}),this.eventManager.addEventListener(this.controls.upButton,"touchend",function(t){e.prepareAndSave(),e.instance.selection.transformStart(-1,0,null,!0),e.updateEditorData(),t.preventDefault()}),this.eventManager.addEventListener(this.controls.downButton,"touchend",function(t){e.prepareAndSave(),e.instance.selection.transformStart(1,0,null,!0),e.updateEditorData(),t.preventDefault()}),this.eventManager.addEventListener(this.moveHandle,"touchstart",function(t){if(1==t.touches.length){var n=t.touches[0],o={x:e.editorContainer.offsetLeft,y:e.editorContainer.offsetTop},r={x:n.pageX-o.x,y:n.pageY-o.y};e.eventManager.addEventListener(this,"touchmove",function(t){var n=t.touches[0];e.updateEditorPosition(n.pageX-r.x,n.pageY-r.y),e.hideCellPointer(),t.preventDefault()})}}),this.eventManager.addEventListener(document.body,"touchend",function(t){y(t.target,e.editorContainer)||y(t.target,e.instance.rootElement)||e.close()}),this.eventManager.addEventListener(this.instance.view.wt.wtOverlays.leftOverlay.holder,"scroll",function(t){e.instance.view.wt.wtOverlays.leftOverlay.trimmingContainer!=window&&e.hideCellPointer()}),this.eventManager.addEventListener(this.instance.view.wt.wtOverlays.topOverlay.holder,"scroll",function(t){e.instance.view.wt.wtOverlays.topOverlay.trimmingContainer!=window&&e.hideCellPointer()})},k.prototype.destroy=function(){this.eventManager.clear(),this.editorContainer.parentNode.removeChild(this.editorContainer)},M("mobile",k)},{_baseEditor:30,browser:23,editors:29,eventManager:41,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/unicode":55}],37:[function(e,t,n){"use strict";Object.defineProperties(n,{NumericEditor:{get:function(){return d}},__esModule:{value:!0}});var o,r,i,s,l=((o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],(r=e("numeral"),r&&r.__esModule&&r||{"default":r})["default"]),a=(i=e("editors"),i&&i.__esModule&&i||{"default":i}),u=(a.getEditor,a.registerEditor),c=(s=e("textEditor"),s&&s.__esModule&&s||{"default":s}).TextEditor,d=function(){$traceurRuntime.superConstructor(h).apply(this,arguments)},h=d;$traceurRuntime.createClass(d,{beginEditing:function(e){if("undefined"==typeof e&&this.originalValue){"undefined"!=typeof this.cellProperties.language&&l.language(this.cellProperties.language);var t=l.languageData().delimiters.decimal;e=(""+this.originalValue).replace(".",t)}$traceurRuntime.superGet(this,h.prototype,"beginEditing").call(this,e)}},{},c),u("numeric",d)},{browser:23,editors:29,numeral:"numeral",textEditor:40}],38:[function(e,t,n){"use strict";Object.defineProperties(n,{PasswordEditor:{get:function(){return d}},__esModule:{value:!0}});var o,r,i,s,l=((o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}).empty),a=(i=e("editors"),i&&i.__esModule&&i||{"default":i}),u=(a.getEditor,a.registerEditor),c=(s=e("textEditor"),s&&s.__esModule&&s||{"default":s}).TextEditor,d=function(){$traceurRuntime.superConstructor(h).apply(this,arguments)},h=d;$traceurRuntime.createClass(d,{createElements:function(){$traceurRuntime.superGet(this,h.prototype,"createElements").call(this),this.TEXTAREA=document.createElement("input"),this.TEXTAREA.setAttribute("type","password"),this.TEXTAREA.className="handsontableInput",this.textareaStyle=this.TEXTAREA.style,this.textareaStyle.width=0,this.textareaStyle.height=0,l(this.TEXTAREA_PARENT),this.TEXTAREA_PARENT.appendChild(this.TEXTAREA)}},{},c),u("password",d)},{browser:23,editors:29,"helpers/dom/element":46,textEditor:40}],39:[function(e,t,n){"use strict";Object.defineProperties(n,{SelectEditor:{get:function(){return M}},__esModule:{value:!0}});var o,r,i,s,l,a,u=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],c=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),d=c.addClass,h=c.empty,f=c.fastInnerHTML,p=c.getComputedStyle,g=c.getCssTransform,m=c.getScrollableElement,w=c.offset,v=c.outerHeight,y=c.outerWidth,b=c.resetCssTransform,C=(i=e("helpers/dom/event"),i&&i.__esModule&&i||{"default":i}).stopImmediatePropagation,_=(s=e("helpers/unicode"),s&&s.__esModule&&s||{"default":s}).KEY_CODES,R=(l=e("editors"),l&&l.__esModule&&l||{"default":l}),S=(R.getEditor,R.registerEditor),E=(a=e("_baseEditor"),a&&a.__esModule&&a||{"default":a}).BaseEditor,M=E.prototype.extend();M.prototype.init=function(){this.select=document.createElement("SELECT"),d(this.select,"htSelectEditor"),this.select.style.display="none",this.instance.rootElement.appendChild(this.select),this.registerHooks()},M.prototype.registerHooks=function(){var e=this;this.instance.addHook("afterScrollHorizontally",function(){return e.refreshDimensions()}),this.instance.addHook("afterScrollVertically",function(){return e.refreshDimensions()}),this.instance.addHook("afterColumnResize",function(){return e.refreshDimensions()}),this.instance.addHook("afterRowResize",function(){return e.refreshDimensions()})},M.prototype.prepare=function(){E.prototype.prepare.apply(this,arguments);var e,t=this.cellProperties.selectOptions;e="function"==typeof t?this.prepareOptions(t(this.row,this.col,this.prop)):this.prepareOptions(t),h(this.select);for(var n in e)if(e.hasOwnProperty(n)){var o=document.createElement("OPTION");o.value=n,f(o,e[n]),this.select.appendChild(o)}},M.prototype.prepareOptions=function(e){var t={};if(Array.isArray(e))for(var n=0,o=e.length;o>n;n++)t[e[n]]=e[n];else"object"==typeof e&&(t=e);return t},M.prototype.getValue=function(){return this.select.value},M.prototype.setValue=function(e){this.select.value=e};var T=function(e){var t=this,n=t.getActiveEditor();switch(e.keyCode){case _.ARROW_UP:var o=n.select.selectedIndex-1;o>=0&&(n.select[o].selected=!0),C(e),e.preventDefault();break;case _.ARROW_DOWN:var r=n.select.selectedIndex+1;r<=n.select.length-1&&(n.select[r].selected=!0),C(e),e.preventDefault()}};M.prototype.open=function(){this._opened=!0,this.refreshDimensions(),this.select.style.display="",this.instance.addHook("beforeKeyDown",T)},M.prototype.close=function(){this._opened=!1,this.select.style.display="none",this.instance.removeHook("beforeKeyDown",T)},M.prototype.focus=function(){this.select.focus()},M.prototype.refreshDimensions=function(){if(this.state===u.EditorState.EDITING){if(this.TD=this.getEditedCell(),!this.TD)return void this.close();var e,t=y(this.TD)+1,n=v(this.TD)+1,o=w(this.TD),r=w(this.instance.rootElement),i=m(this.TD),s=o.top-r.top-1-(i.scrollTop||0),l=o.left-r.left-1-(i.scrollLeft||0),a=this.checkEditorSection(),c=this.instance.getSettings();c.rowHeaders?1:0,c.colHeaders?1:0;switch(a){case"top":e=g(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);break;case"left":e=g(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);break;case"top-left-corner":e=g(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);break;case"bottom-left-corner":e=g(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);break;case"bottom":e=g(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode)}0===this.instance.getSelected()[0]&&(s+=1),0===this.instance.getSelected()[1]&&(l+=1);var d=this.select.style;e&&-1!=e?d[e[0]]=e[1]:b(this.select);var h=p(this.TD);parseInt(h.borderTopWidth,10)>0&&(n-=1),parseInt(h.borderLeftWidth,10)>0&&(t-=1),d.height=n+"px",d.minWidth=t+"px",d.top=s+"px",d.left=l+"px",d.margin="0px"}},M.prototype.getEditedCell=function(){var e,t=this.checkEditorSection();switch(t){case"top":e=this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.select.style.zIndex=101;break;case"corner":e=this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.select.style.zIndex=103;break;case"left":e=this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.select.style.zIndex=102;break;default:e=this.instance.getCell(this.row,this.col),this.select.style.zIndex=""}return-1!=e&&-2!=e?e:void 0},S("select",M)},{_baseEditor:30,browser:23,editors:29,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/unicode":55}],40:[function(e,t,n){"use strict";Object.defineProperties(n,{TextEditor:{get:function(){return N}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],h=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),f=h.addClass,p=h.getCaretPosition,g=h.getComputedStyle,m=h.getCssTransform,w=h.getScrollableElement,v=h.getScrollbarWidth,y=h.innerWidth,b=h.offset,C=h.resetCssTransform,_=h.setCaretPosition,R=h.hasVerticalScrollbar,S=h.hasHorizontalScrollbar,E=(i=e("autoResize"),i&&i.__esModule&&i||{"default":i})["default"],M=(s=e("_baseEditor"),s&&s.__esModule&&s||{"default":s}).BaseEditor,T=(l=e("eventManager"),l&&l.__esModule&&l||{"default":l}).eventManager,O=(a=e("editors"),a&&a.__esModule&&a||{"default":a}),k=(O.getEditor,O.registerEditor),D=(u=e("helpers/unicode"),u&&u.__esModule&&u||{"default":u}).KEY_CODES,A=(c=e("helpers/dom/event"),c&&c.__esModule&&c||{"default":c}),x=A.stopPropagation,H=A.stopImmediatePropagation,P=A.isImmediatePropagationStopped,N=M.prototype.extend();N.prototype.init=function(){var e=this;this.createElements(),this.eventManager=T(this),this.bindEvents(),this.autoResize=E(),this.instance.addHook("afterDestroy",function(){e.destroy()})},N.prototype.getValue=function(){return this.TEXTAREA.value},N.prototype.setValue=function(e){this.TEXTAREA.value=e};var L=function(e){var t,n=this,o=n.getActiveEditor();if(t=(e.ctrlKey||e.metaKey)&&!e.altKey,e.target===o.TEXTAREA&&!P(e)){if(17===e.keyCode||224===e.keyCode||91===e.keyCode||93===e.keyCode)return void H(e);switch(e.keyCode){case D.ARROW_RIGHT:o.isInFullEditMode()&&(!o.isWaiting()&&!o.allowKeyEventPropagation||!o.isWaiting()&&o.allowKeyEventPropagation&&!o.allowKeyEventPropagation(e.keyCode))&&H(e);break;case D.ARROW_LEFT:o.isInFullEditMode()&&(!o.isWaiting()&&!o.allowKeyEventPropagation||!o.isWaiting()&&o.allowKeyEventPropagation&&!o.allowKeyEventPropagation(e.keyCode))&&H(e);break;case D.ARROW_UP:case D.ARROW_DOWN:o.isInFullEditMode()&&(!o.isWaiting()&&!o.allowKeyEventPropagation||!o.isWaiting()&&o.allowKeyEventPropagation&&!o.allowKeyEventPropagation(e.keyCode))&&H(e);break;case D.ENTER:var r=o.instance.getSelected(),i=!(r[0]===r[2]&&r[1]===r[3]);if(t&&!i||e.altKey){if(o.isOpened()){var s=p(o.TEXTAREA),l=o.getValue(),a=l.slice(0,s)+"\n"+l.slice(s);o.setValue(a),_(o.TEXTAREA,s+1)}else o.beginEditing(o.originalValue+"\n");H(e)}e.preventDefault();break;case D.A:case D.X:case D.C:case D.V:t&&H(e);break;case D.BACKSPACE:case D.DELETE:case D.HOME:case D.END:H(e)}-1===[D.ARROW_UP,D.ARROW_RIGHT,D.ARROW_DOWN,D.ARROW_LEFT].indexOf(e.keyCode)&&o.autoResize.resize(String.fromCharCode(e.keyCode))}};N.prototype.open=function(){this.refreshDimensions(),this.instance.addHook("beforeKeyDown",L)},N.prototype.close=function(e){this.textareaParentStyle.display="none",this.autoResize.unObserve(),document.activeElement===this.TEXTAREA&&this.instance.listen(),this.instance.removeHook("beforeKeyDown",L)},N.prototype.focus=function(){this.TEXTAREA.focus(),_(this.TEXTAREA,this.TEXTAREA.value.length)},N.prototype.createElements=function(){this.TEXTAREA=document.createElement("TEXTAREA"),f(this.TEXTAREA,"handsontableInput"),this.textareaStyle=this.TEXTAREA.style,this.textareaStyle.width=0,this.textareaStyle.height=0,this.TEXTAREA_PARENT=document.createElement("DIV"),f(this.TEXTAREA_PARENT,"handsontableInputHolder"),this.textareaParentStyle=this.TEXTAREA_PARENT.style,this.textareaParentStyle.top=0,this.textareaParentStyle.left=0,this.textareaParentStyle.display="none",this.TEXTAREA_PARENT.appendChild(this.TEXTAREA),this.instance.rootElement.appendChild(this.TEXTAREA_PARENT);var e=this;this.instance._registerTimeout(setTimeout(function(){e.refreshDimensions()},0))},N.prototype.getEditedCell=function(){var e,t=this.checkEditorSection();switch(t){case"top":e=this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.textareaParentStyle.zIndex=101;break;case"top-left-corner":e=this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.textareaParentStyle.zIndex=103;break;case"bottom-left-corner":e=this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.textareaParentStyle.zIndex=103;break;case"left":e=this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.textareaParentStyle.zIndex=102;break;case"bottom":e=this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.getCell({row:this.row,col:this.col}),this.textareaParentStyle.zIndex=102;break;default:e=this.instance.getCell(this.row,this.col),this.textareaParentStyle.zIndex=""}return-1!=e&&-2!=e?e:void 0},N.prototype.refreshDimensions=function(){if(this.state===d.EditorState.EDITING){if(this.TD=this.getEditedCell(),!this.TD)return void this.close(!0);var e,t=b(this.TD),n=b(this.instance.rootElement),o=w(this.TD),r=this.instance.countRows(),i=t.top-n.top-1-(o.scrollTop||0),s=t.left-n.left-1-(o.scrollLeft||0),l=this.instance.getSettings(),a=(this.instance.hasRowHeaders(),this.instance.hasColHeaders()),u=this.checkEditorSection(),c=this.TD.style.backgroundColor;switch(u){case"top":e=m(this.instance.view.wt.wtOverlays.topOverlay.clone.wtTable.holder.parentNode);break;case"left":e=m(this.instance.view.wt.wtOverlays.leftOverlay.clone.wtTable.holder.parentNode);break;case"top-left-corner":e=m(this.instance.view.wt.wtOverlays.topLeftCornerOverlay.clone.wtTable.holder.parentNode);break;case"bottom-left-corner":e=m(this.instance.view.wt.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode);break;case"bottom":e=m(this.instance.view.wt.wtOverlays.bottomOverlay.clone.wtTable.holder.parentNode)}(a&&0===this.instance.getSelected()[0]||l.fixedRowsBottom&&this.instance.getSelected()[0]===r-l.fixedRowsBottom)&&(i+=1),0===this.instance.getSelected()[1]&&(s+=1),e&&-1!=e?this.textareaParentStyle[e[0]]=e[1]:C(this.TEXTAREA_PARENT),this.textareaParentStyle.top=i+"px",this.textareaParentStyle.left=s+"px";var h=this.instance.view.wt.wtViewport.rowsRenderCalculator.startPosition,f=this.instance.view.wt.wtViewport.columnsRenderCalculator.startPosition,p=this.instance.view.wt.wtOverlays.leftOverlay.getScrollPosition(),_=this.instance.view.wt.wtOverlays.topOverlay.getScrollPosition(),E=v(),M=this.TD.offsetTop+h-_,T=this.TD.offsetLeft+f-p,O=y(this.TD)-8,k=R(o)?E:0,D=S(o)?E:0,A=this.instance.view.maximumVisibleElementWidth(T)-9-k,x=this.TD.scrollHeight+1,H=Math.max(this.instance.view.maximumVisibleElementHeight(M)-D,23),P=g(this.TD);this.TEXTAREA.style.fontSize=P.fontSize,this.TEXTAREA.style.fontFamily=P.fontFamily,this.TEXTAREA.style.backgroundColor="",this.TEXTAREA.style.backgroundColor=c?c:g(this.TEXTAREA).backgroundColor,this.autoResize.init(this.TEXTAREA,{minHeight:Math.min(x,H),maxHeight:H,minWidth:Math.min(O,A),maxWidth:A},!0),this.textareaParentStyle.display="block"}},N.prototype.bindEvents=function(){var e=this;this.eventManager.addEventListener(this.TEXTAREA,"cut",function(e){x(e)}),this.eventManager.addEventListener(this.TEXTAREA,"paste",function(e){x(e)}),this.instance.addHook("afterScrollHorizontally",function(){e.refreshDimensions()}),this.instance.addHook("afterScrollVertically",function(){e.refreshDimensions()}),this.instance.addHook("afterColumnResize",function(){e.refreshDimensions(),e.focus()}),this.instance.addHook("afterRowResize",function(){e.refreshDimensions(),e.focus()}),this.instance.addHook("afterDestroy",function(){e.eventManager.destroy()})},N.prototype.destroy=function(){this.eventManager.destroy()},k("text",N)},{_baseEditor:30,autoResize:"autoResize",browser:23,editors:29,eventManager:41,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/unicode":55}],41:[function(e,t,n){"use strict";function o(e,t){var n,o,r,i,s,l,a="HOT-TABLE";if(t.isTargetWebComponent=!1,t.realTarget=t.target,l=t.stopImmediatePropagation,t.stopImmediatePropagation=function(){l.apply(this),p(this)},!u.eventManager.isHotTableEnv)return t;for(t=d(t),s=t.path?t.path.length:0;s--;){if(t.path[s].nodeName===a)n=!0;else if(n&&t.path[s].shadowRoot){i=t.path[s];break}0!==s||i||(i=t.path[s])}return i||(i=t.target),t.isTargetWebComponent=!0,
f()?t.realTarget=t.srcElement||t.toElement:(e instanceof u.Core||e instanceof Walkontable)&&(e instanceof u.Core?o=e.view?e.view.wt.wtTable.TABLE:null:e instanceof Walkontable&&(o=e.wtTable.TABLE.parentNode.parentNode),r=h(t.target,[a],o),r?t.realTarget=o.querySelector(a)||t.target:t.realTarget=t.target),Object.defineProperty(t,"target",{get:function(){return d(i)},enumerable:!0,configurable:!0}),t}function r(e){return new g(e)}Object.defineProperties(n,{EventManager:{get:function(){return g}},eventManager:{get:function(){return r}},__esModule:{value:!0}});var i,s,l,a,u=(i=e("browser"),i&&i.__esModule&&i||{"default":i})["default"],c=(s=e("helpers/dom/element"),s&&s.__esModule&&s||{"default":s}),d=c.polymerWrap,h=c.closest,f=(l=e("helpers/feature"),l&&l.__esModule&&l||{"default":l}).isWebComponentSupportedNatively,p=(a=e("helpers/dom/event"),a&&a.__esModule&&a||{"default":a}).stopImmediatePropagation,g=function(){var e=void 0!==arguments[0]?arguments[0]:null;this.context=e||this,this.context.eventListeners||(this.context.eventListeners=[])};$traceurRuntime.createClass(g,{addEventListener:function(e,t,n){function r(e){e=o(s,e),n.call(this,e)}var i=this,s=this.context;return this.context.eventListeners.push({element:e,event:t,callback:n,callbackProxy:r}),window.addEventListener?e.addEventListener(t,r,!1):e.attachEvent("on"+t,r),u.countEventManagerListeners++,function(){i.removeEventListener(e,t,n)}},removeEventListener:function(e,t,n){for(var o,r=this.context.eventListeners.length;r--;)if(o=this.context.eventListeners[r],o.event==t&&o.element==e){if(n&&n!=o.callback)continue;this.context.eventListeners.splice(r,1),o.element.removeEventListener?o.element.removeEventListener(o.event,o.callbackProxy,!1):o.element.detachEvent("on"+o.event,o.callbackProxy),u.countEventManagerListeners--}},clearEvents:function(){if(this.context)for(var e=this.context.eventListeners.length;e--;){var t=this.context.eventListeners[e];t&&this.removeEventListener(t.element,t.event,t.callback)}},clear:function(){this.clearEvents()},destroy:function(){this.clearEvents(),this.context=null},fireEvent:function(e,t){var n,o={bubbles:!0,cancelable:"mousemove"!==t,view:window,detail:0,screenX:0,screenY:0,clientX:1,clientY:1,ctrlKey:!1,altKey:!1,shiftKey:!1,metaKey:!1,button:0,relatedTarget:void 0};document.createEvent?(n=document.createEvent("MouseEvents"),n.initMouseEvent(t,o.bubbles,o.cancelable,o.view,o.detail,o.screenX,o.screenY,o.clientX,o.clientY,o.ctrlKey,o.altKey,o.shiftKey,o.metaKey,o.button,o.relatedTarget||document.body.parentNode)):n=document.createEventObject(),e.dispatchEvent?e.dispatchEvent(n):e.fireEvent("on"+t,n)}},{}),u.countEventManagerListeners=0,u.eventManager=r},{browser:23,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/feature":48}],42:[function(e,t,n){"use strict";function o(e){for(var t=0,n=e.length;n>t;)e[t]=[e[t]],t++}function r(e,t){for(var n=0,o=t.length;o>n;)e.push(t[n]),n++}function i(e){var t=[];if(!e||0===e.length||!e[0]||0===e[0].length)return t;for(var n=e.length,o=e[0].length,r=0;n>r;r++)for(var i=0;o>i;i++)t[i]||(t[i]=[]),t[i][r]=e[r][i];return t}function s(e,t,n,o){var r=-1,i=e.length;for(o&&i&&(n=e[++r]);++r<i;)n=t(n,e[r],r,e);return n}function l(e,t){for(var n=-1,o=e.length,r=-1,i=[];++n<o;){var s=e[n];t(s,n,e)&&(i[++r]=s)}return i}function a(e,t){for(var n=-1,o=e.length,r=-1,i=[];++n<o;){var s=e[n];i[++r]=t(s,n,e)}return i}function u(e,t){for(var n=-1,o=e.length;++n<o&&t(e[n],n,e)!==!1;);return e}function c(e){return s(e,function(e,t){return e+t},0)}function d(e){return s(e,function(e,t){return e>t?e:t},Array.isArray(e)?e[0]:void 0)}function h(e){return s(e,function(e,t){return t>e?e:t},Array.isArray(e)?e[0]:void 0)}function f(e){return e.length?c(e)/e.length:0}function p(e){return s(e,function(e,t){return e.concat(Array.isArray(t)?p(t):t)},[])}function g(e){var t=[];return u(e,function(e){-1===t.indexOf(e)&&t.push(e)}),t}Object.defineProperties(n,{to2dArray:{get:function(){return o}},extendArray:{get:function(){return r}},pivot:{get:function(){return i}},arrayReduce:{get:function(){return s}},arrayFilter:{get:function(){return l}},arrayMap:{get:function(){return a}},arrayEach:{get:function(){return u}},arraySum:{get:function(){return c}},arrayMax:{get:function(){return d}},arrayMin:{get:function(){return h}},arrayAvg:{get:function(){return f}},arrayFlatten:{get:function(){return p}},arrayUnique:{get:function(){return g}},__esModule:{value:!0}})},{}],43:[function(e,t,n){"use strict";function o(){return a}function r(){return u}function i(){return c}function s(){return d}function l(e){return e||(e=navigator.userAgent),/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e)}Object.defineProperties(n,{isIE8:{get:function(){return o}},isIE9:{get:function(){return r}},isSafari:{get:function(){return i}},isChrome:{get:function(){return s}},isMobileBrowser:{get:function(){return l}},__esModule:{value:!0}});var a=!document.createTextNode("test").textContent,u=!!document.documentMode,c=/Safari/.test(navigator.userAgent)&&/Apple Computer/.test(navigator.vendor),d=/Chrome/.test(navigator.userAgent)&&/Google/.test(navigator.vendor)},{}],44:[function(e,t,n){"use strict";function o(e){for(var t,n=e+1,o="";n>0;)t=(n-1)%26,o=String.fromCharCode(65+t)+o,n=parseInt((n-t)/26,10);return o}function r(e,t){e="number"==typeof e?e:100,t="number"==typeof t?t:4;var n,r,i=[];for(n=0;e>n;n++){var s=[];for(r=0;t>r;r++)s.push(o(r)+(n+1));i.push(s)}return i}function i(e,t){e="number"==typeof e?e:100,t="number"==typeof t?t:4;var n,r,i=[];for(n=0;e>n;n++){var s={};for(r=0;t>r;r++)s["prop"+r]=o(r)+(n+1);i.push(s)}return i}function s(e,t){for(var n,o=[],r=0;e>r;r++){n=[];for(var i=0;t>i;i++)n.push("");o.push(n)}return o}function l(e){var t,n,o,r,i=[],s=0;for(t=0,n=e.length;n>t;t++)for(o=0,r=e[t].length;r>o;o++)o==s&&(i.push([]),s++),i[o].push(e[t][o]);return i}function a(e,t){function n(e){var t=d.cellTypes[e];if("undefined"==typeof t)throw new Error('You declared cell type "'+e+'" as a string that is not mapped to a known object. Cell type must be an object or a string mapped to an object in Handsontable.cellTypes');return t}return t="undefined"==typeof t?!0:t,function(o,r){return function i(o){if(o){if(o.hasOwnProperty(e)&&void 0!==o[e])return o[e];if(o.hasOwnProperty("type")&&o.type){var r;if("string"!=typeof o.type)throw new Error("Cell type must be a string ");if(r=n(o.type),r.hasOwnProperty(e))return r[e];if(t)return}return i(h(o))}}("number"==typeof o?this.getCellMeta(o,r):o)}}Object.defineProperties(n,{spreadsheetColumnLabel:{get:function(){return o}},createSpreadsheetData:{get:function(){return r}},createSpreadsheetObjectData:{get:function(){return i}},createEmptySpreadsheetData:{get:function(){return s}},translateRowsToColumns:{get:function(){return l}},cellMethodLookupFactory:{get:function(){return a}},__esModule:{value:!0}});var u,c,d=(u=e("browser"),u&&u.__esModule&&u||{"default":u})["default"],h=(c=e("object"),c&&c.__esModule&&c||{"default":c}).getPrototypeOf},{browser:23,object:52}],45:[function(e,t,n){"use strict";function o(e){var t=new Date(e);return isNaN(new Date(e+"T00:00").getDate())?t:new Date(t.getTime()+6e4*t.getTimezoneOffset())}Object.defineProperties(n,{getNormalizedDate:{get:function(){return o}},__esModule:{value:!0}})},{}],46:[function(e,t,n){"use strict";function o(e,t,n){for(;null!=e&&e!==n;){if(e.nodeType===Node.ELEMENT_NODE&&(t.indexOf(e.nodeName)>-1||t.indexOf(e)>-1))return e;e=e.host&&e.nodeType===Node.DOCUMENT_FRAGMENT_NODE?e.host:e.parentNode}return null}function r(e,t){var n=e.parentNode,o=[];for("string"==typeof t?o=Array.prototype.slice.call(document.querySelectorAll(t),0):o.push(t);null!=n;){if(o.indexOf(n)>-1)return!0;n=n.parentNode}return!1}function i(e){function t(e){return e.nodeType===Node.ELEMENT_NODE&&e.nodeName===o.toUpperCase()}var n,o="hot-table",r=!1;for(n=s(e);null!=n;){if(t(n)){r=!0;break}if(n.host&&n.nodeType===Node.DOCUMENT_FRAGMENT_NODE){if(r=t(n.host))break;n=n.host}n=n.parentNode}return r}function s(e){return"undefined"!=typeof Polymer&&"function"==typeof wrap?wrap(e):e}function l(e){return"undefined"!=typeof Polymer&&"function"==typeof unwrap?unwrap(e):e}function a(e){var t=0;if(e.previousSibling)for(;e=e.previousSibling;)++t;return t}function u(e,t){var n=document.querySelector(".ht_clone_"+e);return n?n.contains(t):null}function c(e){var t=0,n=[];if(!e||!e.length)return n;for(;e[t];)n.push(e[t]),t++;return n}function d(e,t){return K(e,t)}function h(e,t){return q(e,t)}function f(e,t){return Z(e,t)}function p(e,t){if(3===e.nodeType)t.removeChild(e);else if(["TABLE","THEAD","TBODY","TFOOT","TR"].indexOf(e.nodeName)>-1)for(var n=e.childNodes,o=n.length-1;o>=0;o--)p(n[o],e)}function g(e){for(var t;t=e.lastChild;)e.removeChild(t)}function m(e,t){le.test(t)?e.innerHTML=t:w(e,t)}function w(e,t){var n=e.firstChild;n&&3===n.nodeType&&null===n.nextSibling?ae?n.textContent=t:n.data=t:(g(e),e.appendChild(document.createTextNode(t)))}function v(e){for(var t=e;l(t)!==document.documentElement;){if(null===t)return!1;if(t.nodeType===Node.DOCUMENT_FRAGMENT_NODE){if(t.host){if(t.host.impl)return v(t.host.impl);if(t.host)return v(t.host);throw new Error("Lost in Web Components world")}return!1}if("none"===t.style.display)return!1;t=t.parentNode}return!0}function y(e){var t,n,o,r,i;if(r=document.documentElement,ne()&&e.firstChild&&"CAPTION"===e.firstChild.nodeName)return i=e.getBoundingClientRect(),{top:i.top+(window.pageYOffset||r.scrollTop)-(r.clientTop||0),left:i.left+(window.pageXOffset||r.scrollLeft)-(r.clientLeft||0)};for(t=e.offsetLeft,n=e.offsetTop,o=e;(e=e.offsetParent)&&e!==document.body;)t+=e.offsetLeft,n+=e.offsetTop,o=e;return o&&"fixed"===o.style.position&&(t+=window.pageXOffset||r.scrollLeft,n+=window.pageYOffset||r.scrollTop),{left:t,top:n}}function b(){var e=window.scrollY;return void 0===e&&(e=document.documentElement.scrollTop),e}function C(){var e=window.scrollX;return void 0===e&&(e=document.documentElement.scrollLeft),e}function _(e){return e===window?b():e.scrollTop}function R(e){return e===window?C():e.scrollLeft}function S(e){for(var t,n,o,r=e.parentNode,i=["auto","scroll"],s="",l="",a="",u="";r&&r.style&&document.body!==r;){if(t=r.style.overflow,n=r.style.overflowX,o=r.style.overflowY,"scroll"==t||"scroll"==n||"scroll"==o)return r;if(window.getComputedStyle&&(s=window.getComputedStyle(r),l=s.getPropertyValue("overflow"),a=s.getPropertyValue("overflow-y"),u=s.getPropertyValue("overflow-x"),"scroll"===l||"scroll"===u||"scroll"===a))return r;if(r.clientHeight<=r.scrollHeight&&(-1!==i.indexOf(o)||-1!==i.indexOf(t)||-1!==i.indexOf(l)||-1!==i.indexOf(a)))return r;if(r.clientWidth<=r.scrollWidth&&(-1!==i.indexOf(n)||-1!==i.indexOf(t)||-1!==i.indexOf(l)||-1!==i.indexOf(u)))return r;r=r.parentNode}return window}function E(e){for(var t=e.parentNode;t&&t.style&&document.body!==t;){if("visible"!==t.style.overflow&&""!==t.style.overflow)return t;if(window.getComputedStyle){var n=window.getComputedStyle(t);if("visible"!==n.getPropertyValue("overflow")&&""!==n.getPropertyValue("overflow"))return t}t=t.parentNode}return window}function M(e,t){if(e){if(e!==window){var n,o=e.style[t];return""!==o&&void 0!==o?o:(n=T(e),""!==n[t]&&void 0!==n[t]?n[t]:void 0)}if("width"===t)return window.innerWidth+"px";if("height"===t)return window.innerHeight+"px"}}function T(e){return e.currentStyle||document.defaultView.getComputedStyle(e)}function O(e){return e.offsetWidth}function k(e){return ne()&&e.firstChild&&"CAPTION"===e.firstChild.nodeName?e.offsetHeight+e.firstChild.offsetHeight:e.offsetHeight}function D(e){return e.clientHeight||e.innerHeight}function A(e){return e.clientWidth||e.innerWidth}function x(e,t,n){window.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function H(e,t,n){window.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)}function P(e){if(e.selectionStart)return e.selectionStart;if(document.selection){e.focus();var t=document.selection.createRange();if(null==t)return 0;var n=e.createTextRange(),o=n.duplicate();return n.moveToBookmark(t.getBookmark()),o.setEndPoint("EndToStart",n),o.text.length}return 0}function N(e){if(e.selectionEnd)return e.selectionEnd;if(document.selection){var t=document.selection.createRange();if(null==t)return 0;var n=e.createTextRange();return n.text.indexOf(t.text)+t.text.length}}function L(){var e="";return window.getSelection?e=window.getSelection().toString():document.selection&&"Control"!==document.selection.type&&(e=document.selection.createRange().text),e}function W(e,t,n){if(void 0===n&&(n=t),e.setSelectionRange){e.focus();try{e.setSelectionRange(t,n)}catch(o){var r=e.parentNode,i=r.style.display;r.style.display="block",e.setSelectionRange(t,n),r.style.display=i}}else if(e.createTextRange){var s=e.createTextRange();s.collapse(!0),s.moveEnd("character",n),s.moveStart("character",t),s.select()}}function I(){var e=document.createElement("p");e.style.width="100%",e.style.height="200px";var t=document.createElement("div");t.style.position="absolute",t.style.top="0px",t.style.left="0px",t.style.visibility="hidden",t.style.width="200px",t.style.height="150px",t.style.overflow="hidden",t.appendChild(e),(document.body||document.documentElement).appendChild(t);var n=e.offsetWidth;t.style.overflow="scroll";var o=e.offsetWidth;return n==o&&(o=t.clientWidth),(document.body||document.documentElement).removeChild(t),n-o}function j(){return void 0===se&&(se=I()),se}function V(e){return e.offsetWidth!==e.clientWidth}function F(e){return e.offsetHeight!==e.clientHeight}function B(e,t,n){Q()||ee()?(e.style.top=n,e.style.left=t):te()?e.style["-webkit-transform"]="translate3d("+t+","+n+",0)":e.style.transform="translate3d("+t+","+n+",0)"}function z(e){var t;return e.style.transform&&""!==(t=e.style.transform)?["transform",t]:e.style["-webkit-transform"]&&""!==(t=e.style["-webkit-transform"])?["-webkit-transform",t]:-1}function Y(e){e.style.transform&&""!==e.style.transform?e.style.transform="":e.style["-webkit-transform"]&&""!==e.style["-webkit-transform"]&&(e.style["-webkit-transform"]="")}function U(e){var t=["INPUT","SELECT","TEXTAREA"];return e&&(t.indexOf(e.nodeName)>-1||"true"===e.contentEditable)}function G(e){return U(e)&&-1==e.className.indexOf("handsontableInput")&&-1==e.className.indexOf("copyPaste")}Object.defineProperties(n,{closest:{get:function(){return o}},isChildOf:{get:function(){return r}},isChildOfWebComponentTable:{get:function(){return i}},polymerWrap:{get:function(){return s}},polymerUnwrap:{get:function(){return l}},index:{get:function(){return a}},overlayContainsElement:{get:function(){return u}},hasClass:{get:function(){return d}},addClass:{get:function(){return h}},removeClass:{get:function(){return f}},removeTextNodes:{get:function(){return p}},empty:{get:function(){return g}},HTML_CHARACTERS:{get:function(){return le}},fastInnerHTML:{get:function(){return m}},fastInnerText:{get:function(){return w}},isVisible:{get:function(){return v}},offset:{get:function(){return y}},getWindowScrollTop:{get:function(){return b}},getWindowScrollLeft:{get:function(){return C}},getScrollTop:{get:function(){return _}},getScrollLeft:{get:function(){return R}},getScrollableElement:{get:function(){return S}},getTrimmingContainer:{get:function(){return E}},getStyle:{get:function(){return M}},getComputedStyle:{get:function(){return T}},outerWidth:{get:function(){return O}},outerHeight:{get:function(){return k}},innerHeight:{get:function(){return D}},innerWidth:{get:function(){return A}},addEvent:{get:function(){return x}},removeEvent:{get:function(){return H}},getCaretPosition:{get:function(){return P}},getSelectionEndPosition:{get:function(){return N}},getSelectionText:{get:function(){return L}},setCaretPosition:{get:function(){return W}},getScrollbarWidth:{get:function(){return j}},hasVerticalScrollbar:{get:function(){return V}},hasHorizontalScrollbar:{get:function(){return F}},setOverlayPosition:{get:function(){return B}},getCssTransform:{get:function(){return z}},resetCssTransform:{get:function(){return Y}},isInput:{get:function(){return U}},isOutsideInput:{get:function(){return G}},__esModule:{value:!0}});var $,X,K,q,Z,J=($=e("../browser"),$&&$.__esModule&&$||{"default":$}),Q=J.isIE8,ee=J.isIE9,te=J.isSafari,ne=(X=e("../feature"),X&&X.__esModule&&X||{"default":X}).hasCaptionProblem,oe=!!document.documentElement.classList;if(oe){var re=function(){var e=document.createElement("div");return e.classList.add("test","test2"),e.classList.contains("test2")}();K=function(e,t){return""===t?!1:e.classList.contains(t)},q=function(e,t){var n=0;if("string"==typeof t&&(t=t.split(" ")),t=c(t),re)e.classList.add.apply(e.classList,t);else for(;t&&t[n];)e.classList.add(t[n]),n++},Z=function(e,t){var n=0;if("string"==typeof t&&(t=t.split(" ")),t=c(t),re)e.classList.remove.apply(e.classList,t);else for(;t&&t[n];)e.classList.remove(t[n]),n++}}else{var ie=function(e){return new RegExp("(\\s|^)"+e+"(\\s|$)")};K=function(e,t){return!!e.className.match(ie(t))},q=function(e,t){var n=0,o=e.className;if("string"==typeof t&&(t=t.split(" ")),""===o)o=t.join(" ");else for(;t&&t[n];)ie(t[n]).test(o)||(o+=" "+t[n]),n++;e.className=o},Z=function(e,t){var n=0,o=e.className;for("string"==typeof t&&(t=t.split(" "));t&&t[n];)o=o.replace(ie(t[n])," ").trim(),n++;e.className!==o&&(e.className=o)}}var se,le=/(<(.*)>|&(.*);)/,ae=!!document.createTextNode("test").textContent},{"../browser":43,"../feature":48}],47:[function(e,t,n){"use strict";function o(e){e.isImmediatePropagationEnabled=!1,e.cancelBubble=!0}function r(e){return e.isImmediatePropagationEnabled===!1}function i(e){"function"==typeof e.stopPropagation?e.stopPropagation():e.cancelBubble=!0}function s(e){return e.pageX?e.pageX:e.clientX+d()}function l(e){return e.pageY?e.pageY:e.clientY+c()}Object.defineProperties(n,{stopImmediatePropagation:{get:function(){return o}},isImmediatePropagationStopped:{get:function(){return r}},stopPropagation:{get:function(){return i}},pageX:{get:function(){return s}},pageY:{get:function(){return l}},__esModule:{value:!0}});var a,u=(a=e("element"),a&&a.__esModule&&a||{"default":a}),c=u.getWindowScrollTop,d=u.getWindowScrollLeft},{element:46}],48:[function(e,t,n){"use strict";function o(e){return h.call(window,e)}function r(e){f.call(window,e)}function i(){return"ontouchstart"in window}function s(){var e=document.createElement("div");return!(!e.createShadowRoot||!e.createShadowRoot.toString().match(/\[native code\]/))}function l(){var e=document.createElement("TABLE");e.style.borderSpacing=0,e.style.borderWidth=0,e.style.padding=0;var t=document.createElement("TBODY");e.appendChild(t),t.appendChild(document.createElement("TR")),t.firstChild.appendChild(document.createElement("TD")),t.firstChild.firstChild.innerHTML="<tr><td>t<br>t</td></tr>";var n=document.createElement("CAPTION");n.innerHTML="c<br>c<br>c<br>c",n.style.padding=0,n.style.margin=0,e.insertBefore(n,t),document.body.appendChild(e),g=e.offsetHeight<2*e.lastChild.offsetHeight,document.body.removeChild(e)}function a(){return void 0===g&&l(),g}function u(e){var t=void 0!==arguments[1]?arguments[1]:{};return m?m:m="object"==typeof Intl?new Intl.Collator(e,t).compare:"function"==typeof String.prototype.localeCompare?function(e,t){return(e+"").localeCompare(t)}:function(e,t){return e===t?0:e>t?-1:1}}Object.defineProperties(n,{requestAnimationFrame:{get:function(){return o}},cancelAnimationFrame:{get:function(){return r}},isTouchSupported:{get:function(){return i}},isWebComponentSupportedNatively:{get:function(){return s}},hasCaptionProblem:{get:function(){return a}},getComparisonFunction:{get:function(){return u}},__esModule:{value:!0}});for(var c=0,d=["ms","moz","webkit","o"],h=window.requestAnimationFrame,f=window.cancelAnimationFrame,p=0;p<d.length&&!h;++p)h=window[d[p]+"RequestAnimationFrame"],f=window[d[p]+"CancelAnimationFrame"]||window[d[p]+"CancelRequestAnimationFrame"];h||(h=function(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-c)),o=window.setTimeout(function(){e(t+n)},n);return c=t+n,o}),f||(f=function(e){clearTimeout(e)});var g,m},{}],49:[function(e,t,n){"use strict";function o(e,t){return function(){return e.apply(t,arguments)}}function r(e){function t(){var t=this,s=arguments,l=Date.now(),a=!1;r.lastCallThrottled=!0,o||(o=l,a=!0);var u=n-(l-o);return a?(r.lastCallThrottled=!1,e.apply(this,s)):(i&&clearTimeout(i),i=setTimeout(function(){r.lastCallThrottled=!1,e.apply(t,s),o=0,i=void 0},u)),r}var n=void 0!==arguments[1]?arguments[1]:200,o=0,r={lastCallThrottled:!0},i=null;return t}function i(e){function t(){l=i}function n(){return l?(l--,e.apply(this,arguments)):s.apply(this,arguments)}var o=void 0!==arguments[1]?arguments[1]:200,i=void 0!==arguments[2]?arguments[2]:10,s=r(e,o),l=i;return n.clearHits=t,n}function s(e){function t(){var t=this,i=arguments;return r&&clearTimeout(r),r=setTimeout(function(){n=e.apply(t,i)},o),n}var n,o=void 0!==arguments[1]?arguments[1]:200,r=null;return t}function l(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e,o=n[0],r=Array.prototype.slice.call(n,1);return function(){return h(r,function(e,t){return t(e)},o.apply(this,arguments))}}function a(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return e.apply(this,t.concat(n))}}function u(e){function t(o){return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var s,l=o.concat(r);return s=l.length>=n?e.apply(this,l):t(l)}}var n=e.length;return t([])}function c(e){function t(o){return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];var s,l=o.concat(r.reverse());return s=l.length>=n?e.apply(this,l):t(l)}}var n=e.length;return t([])}Object.defineProperties(n,{proxy:{get:function(){return o}},throttle:{get:function(){return r}},throttleAfterHits:{get:function(){return i}},debounce:{get:function(){return s}},pipe:{get:function(){return l}},partial:{get:function(){return a}},curry:{get:function(){return u}},curryRight:{get:function(){return c}},__esModule:{value:!0}});var d,h=(d=e("array"),d&&d.__esModule&&d||{"default":d}).arrayReduce},{array:42}],50:[function(e,t,n){"use strict";function o(e){switch(typeof e){case"string":case"number":return e+"";case"object":return null===e?"":e.toString();case"undefined":return"";default:return e.toString()}}Object.defineProperties(n,{stringify:{get:function(){return o}},__esModule:{value:!0}})},{}],51:[function(e,t,n){"use strict";function o(e){var t=typeof e;return"number"==t?!isNaN(e)&&isFinite(e):"string"==t?e.length?1==e.length?/\d/.test(e):/^\s*[+-]?\s*(?:(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?)|(?:0x[a-f\d]+))\s*$/i.test(e):!1:"object"==t?!(!e||"number"!=typeof e.valueOf()||e instanceof Date):!1}function r(e,t,n){var o=-1;for("function"==typeof t?(n=t,t=e):o=e-1;++o<=t&&n(o)!==!1;);}function i(e,t,n){var o=e+1;for("function"==typeof t&&(n=t,t=0);--o>=t&&n(o)!==!1;);}function s(e,t){return t=parseInt(t.toString().replace("%",""),10),t=parseInt(e*t/100)}Object.defineProperties(n,{isNumeric:{get:function(){return o}},rangeEach:{get:function(){return r}},rangeEachReverse:{get:function(){return i}},valueAccordingPercent:{get:function(){return s}},__esModule:{value:!0}})},{}],52:[function(e,t,n){"use strict";function o(e){var t;return Array.isArray(e)?t=[]:(t={},p(e,function(e,n){e&&"object"==typeof e&&!Array.isArray(e)?t[n]=o(e):Array.isArray(e)?e.length&&"object"==typeof e[0]&&!Array.isArray(e[0])?t[n]=[o(e[0])]:t[n]=[]:t[n]=null})),t}function r(e,t){return t.prototype.constructor=t,e.prototype=new t,e.prototype.constructor=e,e}function i(e,t){return p(t,function(t,n){e[n]=t}),e}function s(e,t){p(t,function(n,o){t[o]&&"object"==typeof t[o]?(e[o]||(Array.isArray(t[o])?e[o]=[]:"[object Date]"===Object.prototype.toString.call(t[o])?e[o]=t[o]:e[o]={}),s(e[o],t[o])):e[o]=t[o]})}function l(e){return"object"==typeof e?JSON.parse(JSON.stringify(e)):e}function a(e){var t={};return p(e,function(e,n){t[n]=e}),t}function u(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return e.MIXINS||(e.MIXINS=[]),w(t,function(t){e.MIXINS.push(t.MIXIN_NAME),p(t,function(t,n){if(void 0!==e.prototype[n])throw new Error("Mixin conflict. Property '"+n+"' already exist and cannot be overwritten.");if("function"==typeof t)e.prototype[n]=t;else{var o=function(e,t){e="_"+e;var n=function(e){return(Array.isArray(e)||d(e))&&(e=l(e)),e};return function(){return void 0===this[e]&&(this[e]=n(t)),this[e]}},r=function(e){return e="_"+e,function(t){this[e]=t}};Object.defineProperty(e.prototype,n,{get:o(n,t),set:r(n),configurable:!0})}})}),e}function c(e,t){return JSON.stringify(e)===JSON.stringify(t)}function d(e){return"[object Object]"==Object.prototype.toString.call(e)}function h(e){var t;if("object"==typeof e.__proto__)t=e.__proto__;else{var n,o=e.constructor;"function"==typeof e.constructor&&(n=o,delete e.constructor&&(o=e.constructor,e.constructor=n)),t=o?o.prototype:null}return t}function f(e,t,n,o){o.value=n,o.writable=o.writable!==!1,o.enumerable=o.enumerable!==!1,o.configurable=o.configurable!==!1,Object.defineProperty(e,t,o)}function p(e,t){for(var n in e)if((!e.hasOwnProperty||e.hasOwnProperty&&e.hasOwnProperty(n))&&t(e[n],n,e)===!1)break;return e}function g(e,t){var n=t.split("."),o=e;return p(n,function(e){return o=o[e],void 0===o?(o=void 0,!1):void 0}),o}Object.defineProperties(n,{duckSchema:{get:function(){return o}},inherit:{get:function(){return r}},extend:{get:function(){return i}},deepExtend:{get:function(){return s}},deepClone:{get:function(){return l}},clone:{get:function(){return a}},mixin:{get:function(){return u}},isObjectEquals:{get:function(){return c}},isObject:{get:function(){return d}},getPrototypeOf:{get:function(){return h}},defineGetter:{get:function(){return f}},objectEach:{get:function(){return p}},getProperty:{get:function(){return g}},__esModule:{value:!0}});var m,w=(m=e("array"),m&&m.__esModule&&m||{"default":m}).arrayEach},{array:42}],53:[function(e,t,n){"use strict";function o(e,t){function n(){}i(n,e);for(var o=0,r=t.length;r>o;o++)n.prototype[t[o]]=void 0;return n}Object.defineProperties(n,{columnFactory:{get:function(){return o}},__esModule:{value:!0}});var r,i=(r=e("object"),r&&r.__esModule&&r||{"default":r}).inherit},{object:52}],54:[function(e,t,n){"use strict";function o(e){return e[0].toUpperCase()+e.substr(1)}function r(e,t){var n=!0;return p(t.length-1,function(o){return e.charAt(o)!==t.charAt(o)?(n=!1,!1):void 0}),n}function i(e,t){var n=!0,o=t.length-1,r=e.length-1;return p(o,function(i){var s=r-i,l=o-i;return e.charAt(s)!==t.charAt(l)?(n=!1,!1):void 0}),n}function s(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=[],o=e.length;o--;){var r=f(e[o]).toLowerCase();-1===n.indexOf(r)&&n.push(r)}return 1===n.length}function l(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+e()+e()}function a(e){return/^([0-9][0-9]?\%$)|(^100\%$)/.test(e)}function u(e){var t=void 0!==arguments[1]?arguments[1]:{};return(e+"").replace(/(?:\\)?\[([^\[\]]+)]/g,function(e,n){return"\\"===e.charAt(0)?e.substr(1,e.length-1):void 0===t[n]?"":t[n]})}function c(e,t){var n=void 0!==arguments[2]?arguments[2]:" ";if(e+="",e.length>=t)return e;n=String(n);var o=n.length;o||(n=" ");var r=t-e.length,i=Math.ceil(r/n.length),s="";return p(i,function(e){s+=n}),s=s.slice(0,r),s+e}Object.defineProperties(n,{toUpperCaseFirst:{get:function(){return o}},startsWith:{get:function(){return r}},endsWith:{get:function(){return i}},equalsIgnoreCase:{get:function(){return s}},randomString:{get:function(){return l}},isPercentValue:{get:function(){return a}},substitute:{get:function(){return u}},padStart:{get:function(){return c}},__esModule:{value:!0}});var d,h,f=(d=e("mixed"),d&&d.__esModule&&d||{"default":d}).stringify,p=(h=e("number"),h&&h.__esModule&&h||{"default":h}).rangeEach},{mixed:50,number:51}],55:[function(e,t,n){"use strict";function o(e){return 32==e||e>=48&&57>=e||e>=96&&111>=e||e>=186&&192>=e||e>=219&&222>=e||e>=226||e>=65&&90>=e}function r(e){var t=[u.ARROW_DOWN,u.ARROW_UP,u.ARROW_LEFT,u.ARROW_RIGHT,u.HOME,u.END,u.DELETE,u.BACKSPACE,u.F1,u.F2,u.F3,u.F4,u.F5,u.F6,u.F7,u.F8,u.F9,u.F10,u.F11,u.F12,u.TAB,u.PAGE_DOWN,u.PAGE_UP,u.ENTER,u.ESCAPE,u.SHIFT,u.CAPS_LOCK,u.ALT];return-1!==t.indexOf(e)}function i(e){return-1!==[u.CONTROL_LEFT,224,u.COMMAND_LEFT,u.COMMAND_RIGHT].indexOf(e)}function s(e,t){var n=t.split("|"),o=!1;return a(n,function(t){return e===u[t]?(o=!0,!1):void 0}),o}Object.defineProperties(n,{KEY_CODES:{get:function(){return u}},isPrintableChar:{get:function(){return o}},isMetaKey:{get:function(){return r}},isCtrlKey:{get:function(){return i}},isKey:{get:function(){return s}},__esModule:{value:!0}});var l,a=(l=e("array"),l&&l.__esModule&&l||{"default":l}).arrayEach,u={MOUSE_LEFT:1,MOUSE_RIGHT:3,MOUSE_MIDDLE:2,BACKSPACE:8,COMMA:188,INSERT:45,DELETE:46,END:35,ENTER:13,ESCAPE:27,CONTROL_LEFT:91,COMMAND_LEFT:17,COMMAND_RIGHT:93,ALT:18,HOME:36,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,SPACE:32,SHIFT:16,CAPS_LOCK:20,TAB:9,ARROW_RIGHT:39,ARROW_LEFT:37,ARROW_UP:38,ARROW_DOWN:40,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,A:65,X:88,C:67,V:86}},{array:42}],56:[function(e,t,n){"use strict";Object.defineProperties(n,{localHooks:{get:function(){return c}},__esModule:{value:!0}});var o,r,i,s=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],l=(r=e("helpers/array"),r&&r.__esModule&&r||{"default":r}).arrayEach,a=(i=e("helpers/object"),i&&i.__esModule&&i||{"default":i}).defineGetter,u="localHooks",c={_localHooks:Object.create(null),addLocalHook:function(e,t){this._localHooks[e]||(this._localHooks[e]=[]),this._localHooks[e].push(t)},runLocalHooks:function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=this;this._localHooks[e]&&l(this._localHooks[e],function(e){return e.apply(o,t)})},clearLocalHooks:function(){this._localHooks={}}};a(c,"MIXIN_NAME",u,{writable:!1,enumerable:!1}),s.utils.localHooks=c},{browser:23,"helpers/array":42,"helpers/object":52}],57:[function(e,t,n){"use strict";function o(){function e(e){return null!==e&&!n(e)&&("string"==typeof e||"number"==typeof e)}function t(e){return null!==e&&("object"==typeof e||"function"==typeof e)}function n(e){return e!==e}var o={arrayMap:[],weakMap:new WeakMap};return{get:function(n){return e(n)?o.arrayMap[n]:t(n)?o.weakMap.get(n):void 0},set:function(n,r){if(e(n))o.arrayMap[n]=r;else{if(!t(n))throw new Error("Invalid key type");o.weakMap.set(n,r)}},"delete":function(n){e(n)?delete o.arrayMap[n]:t(n)&&o.weakMap["delete"](n)}}}Object.defineProperties(n,{MultiMap:{get:function(){return o}},__esModule:{value:!0}}),window.MultiMap=o},{}],58:[function(e,t,n){"use strict";Object.defineProperties(n,{Hooks:{get:function(){return a}},__esModule:{value:!0}});var o,r,i=["afterCellMetaReset","afterChange","afterChangesObserved","afterContextMenuDefaultOptions","afterContextMenuHide","afterContextMenuShow","afterCopyLimit","afterCreateCol","afterCreateRow","afterDeselect","afterDestroy","afterDocumentKeyDown","afterGetCellMeta","afterGetColHeader","afterGetRowHeader","afterInit","afterLoadData","afterMomentumScroll","afterOnCellCornerMouseDown","afterOnCellMouseDown","afterOnCellMouseOver","afterRemoveCol","afterRemoveRow","afterRender","beforeRenderer","afterRenderer","afterScrollHorizontally","afterScrollVertically","afterSelection","afterSelectionByProp","afterSelectionEnd","afterSelectionEndByProp","afterSetCellMeta","afterUpdateSettings","afterValidate","beforeAutofill","beforeCellAlignment","beforeChange","beforeChangeRender","beforeDrawBorders","beforeGetCellMeta","beforeInit","beforeInitWalkontable","beforeKeyDown","beforeOnCellMouseDown","beforeRemoveCol","beforeRemoveRow","beforeRender","beforeSetRangeEnd","beforeTouchScroll","beforeValidate","construct","init","modifyCol","unmodifyCol","modifyColHeader","modifyColWidth","modifyRow","modifyRowHeader","modifyRowHeight","persistentStateLoad","persistentStateReset","persistentStateSave","beforeColumnSort","afterColumnSort","afterAutofillApplyValues","modifyCopyableRange","beforeColumnMove","afterColumnMove","beforeRowMove","afterRowMove","beforeColumnResize","afterColumnResize","beforeRowResize","afterRowResize","afterGetColumnHeaderRenderers","afterGetRowHeaderRenderers","beforeStretchingColumnWidth","beforeFilter","afterFilter"],s=(o=e("helpers/array"),
o&&o.__esModule&&o||{"default":o}).arrayEach,l=(r=e("helpers/object"),r&&r.__esModule&&r||{"default":r}).objectEach,a=function(){this.globalBucket=this.createEmptyBucket()};$traceurRuntime.createClass(a,{createEmptyBucket:function(){var e=Object.create(null);return s(i,function(t){return e[t]=[]}),e},getBucket:function(){var e=void 0!==arguments[0]?arguments[0]:null;return e?(e.pluginHookBucket||(e.pluginHookBucket=this.createEmptyBucket()),e.pluginHookBucket):this.globalBucket},add:function(e,t){var n=void 0!==arguments[2]?arguments[2]:null,o=this;if(Array.isArray(t))s(t,function(t){return o.add(e,t,n)});else{var r=this.getBucket(n);"undefined"==typeof r[e]&&(this.register(e),r[e]=[]),t.skip=!1,-1===r[e].indexOf(t)&&r[e].push(t)}return this},once:function(e,t){var n=void 0!==arguments[2]?arguments[2]:null,o=this;Array.isArray(t)?s(t,function(t){return o.once(e,t,n)}):(t.runOnce=!0,this.add(e,t,n))},remove:function(e,t){var n=void 0!==arguments[2]?arguments[2]:null,o=this.getBucket(n);return"undefined"!=typeof o[e]&&o[e].indexOf(t)>=0?(t.skip=!0,!0):!1},has:function(e){var t=void 0!==arguments[1]?arguments[1]:null,n=this.getBucket(t);return!(void 0===n[e]||!n[e].length)},run:function(e,t,n,o,r,i,s,l){var a=this.globalBucket[t],u=-1,c=a?a.length:0;if(c)for(;++u<c;)if(a[u]&&!a[u].skip){var d=a[u].call(e,n,o,r,i,s,l);void 0!==d&&(n=d),a[u]&&a[u].runOnce&&this.remove(t,a[u])}var h=this.getBucket(e)[t],f=-1,p=h?h.length:0;if(p)for(;++f<p;)if(h[f]&&!h[f].skip){var g=h[f].call(e,n,o,r,i,s,l);void 0!==g&&(n=g),h[f]&&h[f].runOnce&&this.remove(t,h[f],e)}return n},destroy:function(){var e=void 0!==arguments[0]?arguments[0]:null;l(this.getBucket(e),function(e,t,n){return n[t].length=0})},register:function(e){this.isRegistered(e)||i.push(e)},deregister:function(e){this.isRegistered(e)&&i.splice(i.indexOf(e),1)},isRegistered:function(e){return i.indexOf(e)>=0},getRegistered:function(){return i}},{})},{"helpers/array":42,"helpers/object":52}],59:[function(e,t,n){"use strict";function o(e,t){e=h(e),c.plugins[e]=t,c.hooks.add("construct",function(){var n;f.has(this)||f.set(this,{}),n=f.get(this),n[e]||(n[e]=new t(this))}),c.hooks.add("afterDestroy",function(){if(f.has(this)){var e=f.get(this);d(e,function(e){return e.destroy()}),f["delete"](this)}})}function r(e,t){if("string"!=typeof t)throw Error('Only strings can be passed as "plugin" parameter');var n=h(t);if(f.has(e)&&f.get(e)[n])return f.get(e)[n]}function i(e){return f.has(e)?Object.keys(f.get(e)):[]}function s(e,t){var n=null;return f.has(e)&&d(f.get(e),function(e,o){e===t&&(n=o)}),n}Object.defineProperties(n,{registerPlugin:{get:function(){return o}},getPlugin:{get:function(){return r}},getRegistredPluginNames:{get:function(){return i}},getPluginName:{get:function(){return s}},__esModule:{value:!0}});var l,a,u,c=(l=e("browser"),l&&l.__esModule&&l||{"default":l})["default"],d=(a=e("helpers/object"),a&&a.__esModule&&a||{"default":a}).objectEach,h=(u=e("helpers/string"),u&&u.__esModule&&u||{"default":u}).toUpperCaseFirst,f=new WeakMap},{browser:23,"helpers/object":52,"helpers/string":54}],60:[function(e,t,n){"use strict";Object.defineProperties(n,{"default":{get:function(){return v}},__esModule:{value:!0}});var o,r,i,s,l=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],a=(r=e("helpers/object"),r&&r.__esModule&&r||{"default":r}),u=a.defineGetter,c=a.objectEach,d=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}).arrayEach,h=(s=e("plugins"),s&&s.__esModule&&s||{"default":s}),f=h.getRegistredPluginNames,p=h.getPluginName,g=new WeakMap,m=null,w=function(e){var t=this;u(this,"hot",e,{writable:!1}),g.set(this,{hooks:{}}),m=null,this.pluginName=null,this.pluginsInitializedCallbacks=[],this.isPluginsReady=!1,this.enabled=!1,this.initialized=!1,this.hot.addHook("afterPluginsInitialized",function(){return t.onAfterPluginsInitialized()}),this.hot.addHook("afterUpdateSettings",function(){return t.onUpdateSettings()}),this.hot.addHook("beforeInit",function(){return t.init()})};$traceurRuntime.createClass(w,{init:function(){this.pluginName=p(this.hot,this),this.isEnabled&&this.isEnabled()&&this.enablePlugin(),m||(m=f(this.hot)),m.indexOf(this.pluginName)>=0&&m.splice(m.indexOf(this.pluginName),1),m.length||this.hot.runHooks("afterPluginsInitialized"),this.initialized=!0},enablePlugin:function(){this.enabled=!0},disablePlugin:function(){this.eventManager&&this.eventManager.clear(),this.clearHooks(),this.enabled=!1},addHook:function(e,t){var n=g.get(this).hooks[e]=g.get(this).hooks[e]||[];this.hot.addHook(e,t),n.push(t),g.get(this).hooks[e]=n},removeHooks:function(e){var t=this;d(g.get(this).hooks[e]||[],function(n){t.hot.removeHook(e,n)})},clearHooks:function(){var e=this,t=g.get(this).hooks;c(t,function(t,n){return e.removeHooks(n)}),t.length=0},callOnPluginsReady:function(e){this.isPluginsReady?e():this.pluginsInitializedCallbacks.push(e)},onAfterPluginsInitialized:function(){d(this.pluginsInitializedCallbacks,function(e){return e()}),this.pluginsInitializedCallbacks.length=0,this.isPluginsReady=!0},onUpdateSettings:function(){this.isEnabled&&(this.enabled&&!this.isEnabled()&&this.disablePlugin(),!this.enabled&&this.isEnabled()&&this.enablePlugin(),this.enabled&&this.isEnabled()&&this.updatePlugin())},updatePlugin:function(){},destroy:function(){var e=this;this.eventManager&&this.eventManager.destroy(),this.clearHooks(),c(this,function(t,n){"hot"!==n&&(e[n]=null)}),delete this.hot}},{});var v=w;l.plugins.BasePlugin=w},{browser:23,"helpers/array":42,"helpers/object":52,plugins:59}],61:[function(e,t,n){"use strict";Object.defineProperties(n,{AutoColumnSize:{get:function(){return x}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d,h,f,p=(o=e("_base"),o&&o.__esModule&&o||{"default":o})["default"],g=(r=e("helpers/array"),r&&r.__esModule&&r||{"default":r}),m=g.arrayEach,w=g.arrayFilter,v=(i=e("helpers/feature"),i&&i.__esModule&&i||{"default":i}),y=v.cancelAnimationFrame,b=v.requestAnimationFrame,C=(s=e("helpers/dom/element"),s&&s.__esModule&&s||{"default":s}).isVisible,_=(l=e("utils/ghostTable"),l&&l.__esModule&&l||{"default":l}).GhostTable,R=(a=e("helpers/object"),a&&a.__esModule&&a||{"default":a}),S=R.isObject,E=(R.objectEach,u=e("helpers/number"),u&&u.__esModule&&u||{"default":u}),M=E.valueAccordingPercent,T=E.rangeEach,O=(c=e("plugins"),c&&c.__esModule&&c||{"default":c}).registerPlugin,k=(d=e("utils/samplesGenerator"),d&&d.__esModule&&d||{"default":d}).SamplesGenerator,D=(h=e("helpers/string"),h&&h.__esModule&&h||{"default":h}).isPercentValue,A=(f=e("3rdparty/walkontable/src/calculator/viewportColumns"),f&&f.__esModule&&f||{"default":f}).WalkontableViewportColumnsCalculator,x=function(e){var t=this;$traceurRuntime.superConstructor(H).call(this,e),this.widths=[],this.ghostTable=new _(this.hot),this.samplesGenerator=new k(function(e,n){return t.hot.getDataAtCell(e,n)}),this.firstCalculation=!0,this.inProgress=!1,this.addHook("beforeColumnResize",function(e,n,o){return t.onBeforeColumnResize(e,n,o)})},H=x;$traceurRuntime.createClass(x,{isEnabled:function(){return this.hot.getSettings().autoColumnSize!==!1&&!this.hot.getSettings().colWidths},enablePlugin:function(){var e=this;if(!this.enabled){var t=this.hot.getSettings().autoColumnSize,n=t&&t.hasOwnProperty("samplingRatio")?this.hot.getSettings().autoColumnSize.samplingRatio:void 0;n&&!isNaN(n)&&(this.samplesGenerator.customSampleCount=parseInt(n,10)),this.addHook("afterLoadData",function(){return e.onAfterLoadData()}),this.addHook("beforeChange",function(t){return e.onBeforeChange(t)}),this.addHook("beforeRender",function(t){return e.onBeforeRender(t)}),this.addHook("modifyColWidth",function(t,n){return e.getColumnWidth(n,t)}),$traceurRuntime.superGet(this,H.prototype,"enablePlugin").call(this)}},disablePlugin:function(){$traceurRuntime.superGet(this,H.prototype,"disablePlugin").call(this)},calculateColumnsWidth:function(){var e=void 0!==arguments[0]?arguments[0]:{from:0,to:this.hot.countCols()-1},t=void 0!==arguments[1]?arguments[1]:{from:0,to:this.hot.countRows()-1},n=void 0!==arguments[2]?arguments[2]:!1,o=this;"number"==typeof e&&(e={from:e,to:e}),"number"==typeof t&&(t={from:t,to:t}),T(e.from,e.to,function(e){if(n||void 0===o.widths[e]&&!o.hot._getColWidthFromSettings(e)){var r=o.samplesGenerator.generateColumnSamples(e,t);r.forEach(function(e,t){return o.ghostTable.addColumn(t,e)})}}),this.ghostTable.columns.length&&(this.ghostTable.getWidths(function(e,t){return o.widths[e]=t}),this.ghostTable.clean())},calculateAllColumnsWidth:function(){var e=void 0!==arguments[0]?arguments[0]:{from:0,to:this.hot.countRows()-1},t=this,n=0,o=this.hot.countCols()-1,r=null;this.inProgress=!0;var i=function(){return t.hot?(t.calculateColumnsWidth({from:n,to:Math.min(n+H.CALCULATION_STEP,o)},e),n=n+H.CALCULATION_STEP+1,void(o>n?r=b(i):(y(r),t.inProgress=!1,t.hot.view.wt.wtOverlays.adjustElementsSize(!0),t.hot.view.wt.wtOverlays.leftOverlay.needFullRender&&t.hot.view.wt.wtOverlays.leftOverlay.clone.draw()))):(y(r),void(t.inProgress=!1))};this.firstCalculation&&this.getSyncCalculationLimit()&&(this.calculateColumnsWidth({from:0,to:this.getSyncCalculationLimit()},e),this.firstCalculation=!1,n=this.getSyncCalculationLimit()+1),o>n?i():this.inProgress=!1},recalculateAllColumnsWidth:function(){this.hot.view&&C(this.hot.view.wt.wtTable.TABLE)&&(this.clearCache(),this.calculateAllColumnsWidth())},getSyncCalculationLimit:function(){var e=H.SYNC_CALCULATION_LIMIT,t=this.hot.countCols()-1;return S(this.hot.getSettings().autoColumnSize)&&(e=this.hot.getSettings().autoColumnSize.syncLimit,D(e)?e=M(t,e):e>>=0),Math.min(e,t)},getColumnWidth:function(e){var t=arguments[1],n=void 0!==arguments[2]?arguments[2]:!0,o=t;return void 0===o&&(o=this.widths[e],n&&"number"==typeof o&&(o=Math.max(o,A.DEFAULT_WIDTH))),o},getFirstVisibleColumn:function(){var e=this.hot.view.wt;return e.wtViewport.columnsVisibleCalculator?e.wtTable.getFirstVisibleColumn():e.wtViewport.columnsRenderCalculator?e.wtTable.getFirstRenderedColumn():-1},getLastVisibleColumn:function(){var e=this.hot.view.wt;return e.wtViewport.columnsVisibleCalculator?e.wtTable.getLastVisibleColumn():e.wtViewport.columnsRenderCalculator?e.wtTable.getLastRenderedColumn():-1},clearCache:function(){this.widths.length=0},isNeedRecalculate:function(){return!!w(this.widths,function(e){return void 0===e}).length},onBeforeRender:function(){var e=this.hot.renderCall,t=this.hot.countRows();t&&(this.calculateColumnsWidth({from:this.getFirstVisibleColumn(),to:this.getLastVisibleColumn()},void 0,e),this.isNeedRecalculate()&&!this.inProgress&&this.calculateAllColumnsWidth())},onAfterLoadData:function(){var e=this;this.hot.view?this.recalculateAllColumnsWidth():setTimeout(function(){e.hot&&e.recalculateAllColumnsWidth()},0)},onBeforeChange:function(e){var t=this;m(e,function(e){return t.widths[t.hot.propToCol(e[1])]=void 0})},onBeforeColumnResize:function(e,t,n){return n&&(this.calculateColumnsWidth(e,void 0,!0),t=this.getColumnWidth(e,void 0,!1)),t},destroy:function(){this.ghostTable.clean(),$traceurRuntime.superGet(this,H.prototype,"destroy").call(this)}},{get CALCULATION_STEP(){return 50},get SYNC_CALCULATION_LIMIT(){return 50}},p),O("autoColumnSize",x)},{"3rdparty/walkontable/src/calculator/viewportColumns":3,_base:60,"helpers/array":42,"helpers/dom/element":46,"helpers/feature":48,"helpers/number":51,"helpers/object":52,"helpers/string":54,plugins:59,"utils/ghostTable":102,"utils/samplesGenerator":104}],62:[function(e,t,n){"use strict";Object.defineProperties(n,{AutoRowSize:{get:function(){return k}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d,h,f=(o=e("_base"),o&&o.__esModule&&o||{"default":o})["default"],p=(r=e("helpers/array"),r&&r.__esModule&&r||{"default":r}),g=(p.arrayEach,p.arrayFilter),m=(i=e("helpers/feature"),i&&i.__esModule&&i||{"default":i}),w=m.cancelAnimationFrame,v=m.requestAnimationFrame,y=(s=e("helpers/dom/element"),s&&s.__esModule&&s||{"default":s}).isVisible,b=(l=e("utils/ghostTable"),l&&l.__esModule&&l||{"default":l}).GhostTable,C=(a=e("helpers/object"),a&&a.__esModule&&a||{"default":a}),_=C.isObject,R=(C.objectEach,u=e("helpers/number"),u&&u.__esModule&&u||{"default":u}),S=R.valueAccordingPercent,E=R.rangeEach,M=(c=e("plugins"),c&&c.__esModule&&c||{"default":c}).registerPlugin,T=(d=e("utils/samplesGenerator"),d&&d.__esModule&&d||{"default":d}).SamplesGenerator,O=(h=e("helpers/string"),h&&h.__esModule&&h||{"default":h}).isPercentValue,k=function(e){var t=this;$traceurRuntime.superConstructor(D).call(this,e),this.heights=[],this.ghostTable=new b(this.hot),this.samplesGenerator=new T(function(e,n){return t.hot.getDataAtCell(e,n)}),this.firstCalculation=!0,this.inProgress=!1,this.addHook("beforeRowResize",function(e,n,o){return t.onBeforeRowResize(e,n,o)})},D=k;$traceurRuntime.createClass(k,{isEnabled:function(){return this.hot.getSettings().autoRowSize===!0||_(this.hot.getSettings().autoRowSize)},enablePlugin:function(){var e=this;if(!this.enabled){var t=this.hot.getSettings().autoRowSize,n=t&&t.hasOwnProperty("samplingRatio")?this.hot.getSettings().autoRowSize.samplingRatio:void 0;n&&!isNaN(n)&&(this.samplesGenerator.customSampleCount=parseInt(n,10)),this.addHook("afterLoadData",function(){return e.onAfterLoadData()}),this.addHook("beforeChange",function(t){return e.onBeforeChange(t)}),this.addHook("beforeColumnMove",function(){return e.recalculateAllRowsHeight()}),this.addHook("beforeColumnResize",function(){return e.recalculateAllRowsHeight()}),this.addHook("beforeColumnSort",function(){return e.clearCache()}),this.addHook("beforeRender",function(t){return e.onBeforeRender(t)}),this.addHook("beforeRowMove",function(t,n){return e.onBeforeRowMove(t,n)}),this.addHook("modifyRowHeight",function(t,n){return e.getRowHeight(n,t)}),$traceurRuntime.superGet(this,D.prototype,"enablePlugin").call(this)}},disablePlugin:function(){$traceurRuntime.superGet(this,D.prototype,"disablePlugin").call(this)},calculateRowsHeight:function(){var e=void 0!==arguments[0]?arguments[0]:{from:0,to:this.hot.countRows()-1},t=void 0!==arguments[1]?arguments[1]:{from:0,to:this.hot.countCols()-1},n=void 0!==arguments[2]?arguments[2]:!1,o=this;"number"==typeof e&&(e={from:e,to:e}),"number"==typeof t&&(t={from:t,to:t}),E(e.from,e.to,function(e){if(n||void 0===o.heights[e]){var r=o.samplesGenerator.generateRowSamples(e,t);r.forEach(function(e,t){return o.ghostTable.addRow(t,e)})}}),this.ghostTable.rows.length&&(this.ghostTable.getHeights(function(e,t){return o.heights[e]=t}),this.ghostTable.clean())},calculateAllRowsHeight:function(){var e=void 0!==arguments[0]?arguments[0]:{from:0,to:this.hot.countCols()-1},t=this,n=0,o=this.hot.countRows()-1,r=null;this.inProgress=!0;var i=function(){return t.hot?(t.calculateRowsHeight({from:n,to:Math.min(n+D.CALCULATION_STEP,o)},e),n=n+D.CALCULATION_STEP+1,void(o>n?r=v(i):(w(r),t.inProgress=!1,t.hot.view.wt.wtOverlays.adjustElementsSize(!0),t.hot.view.wt.wtOverlays.leftOverlay.needFullRender&&t.hot.view.wt.wtOverlays.leftOverlay.clone.draw()))):(w(r),void(t.inProgress=!1))};this.firstCalculation&&this.getSyncCalculationLimit()&&(this.calculateRowsHeight({from:0,to:this.getSyncCalculationLimit()},e),this.firstCalculation=!1,n=this.getSyncCalculationLimit()+1),o>n?i():this.inProgress=!1},recalculateAllRowsHeight:function(){y(this.hot.view.wt.wtTable.TABLE)&&(this.clearCache(),this.calculateAllRowsHeight())},getSyncCalculationLimit:function(){var e=D.SYNC_CALCULATION_LIMIT,t=this.hot.countRows()-1;return _(this.hot.getSettings().autoRowSize)&&(e=this.hot.getSettings().autoRowSize.syncLimit,O(e)?e=S(t,e):e>>=0),Math.min(e,t)},getRowHeight:function(e){var t=arguments[1],n=t;return void 0!==this.heights[e]&&this.heights[e]>(t||0)&&(n=this.heights[e]),n},getFirstVisibleRow:function(){var e=this.hot.view.wt;return e.wtViewport.rowsVisibleCalculator?e.wtTable.getFirstVisibleRow():e.wtViewport.rowsRenderCalculator?e.wtTable.getFirstRenderedRow():-1},getLastVisibleRow:function(){var e=this.hot.view.wt;return e.wtViewport.rowsVisibleCalculator?e.wtTable.getLastVisibleRow():e.wtViewport.rowsRenderCalculator?e.wtTable.getLastRenderedRow():-1},clearCache:function(){this.heights.length=0},clearCacheByRange:function(e){var t=this;"number"==typeof e&&(e={from:e,to:e}),E(Math.min(e.from,e.to),Math.max(e.from,e.to),function(e){return t.heights[e]=void 0})},isNeedRecalculate:function(){return!!g(this.heights,function(e){return void 0===e}).length},onBeforeRender:function(){var e=this.hot.renderCall;this.calculateRowsHeight({from:this.getFirstVisibleRow(),to:this.getLastVisibleRow()},void 0,e);var t=this.hot.getSettings().fixedRowsBottom;if(t){var n=this.hot.countRows()-1;this.calculateRowsHeight({from:n-t,to:n})}this.isNeedRecalculate()&&!this.inProgress&&this.calculateAllRowsHeight()},onBeforeRowMove:function(e,t){this.clearCacheByRange({from:e,to:t}),this.calculateAllRowsHeight()},onBeforeRowResize:function(e,t,n){return n&&(this.calculateRowsHeight(e,void 0,!0),t=this.getRowHeight(e)),t},onAfterLoadData:function(){var e=this;this.hot.view?this.recalculateAllRowsHeight():setTimeout(function(){e.hot&&e.recalculateAllRowsHeight()},0)},onBeforeChange:function(e){var t=null;1===e.length?t=e[0][0]:e.length>1&&(t={from:e[0][0],to:e[e.length-1][0]}),null!==t&&this.clearCacheByRange(t)},destroy:function(){this.ghostTable.clean(),$traceurRuntime.superGet(this,D.prototype,"destroy").call(this)}},{get CALCULATION_STEP(){return 50},get SYNC_CALCULATION_LIMIT(){return 500}},f),M("autoRowSize",k)},{_base:60,"helpers/array":42,"helpers/dom/element":46,"helpers/feature":48,"helpers/number":51,"helpers/object":52,"helpers/string":54,plugins:59,"utils/ghostTable":102,"utils/samplesGenerator":104}],63:[function(e,t,n){"use strict";function o(e,t,n,o){var r,i,s,l,a,u=n.length,c=n?n[0].length:0,d=[],h=[];if(r=t.row-e.row,i=t.col-e.col,-1!==["down","up"].indexOf(o)){for(var f=0;i>=f;f++)s=parseInt(n[0][f],10),l=parseInt(n[u-1][f],10),a=("down"===o?l-s:s-l)/(u-1)||0,h.push(a);d.push(h)}if(-1!==["right","left"].indexOf(o))for(var p=0;r>=p;p++)s=parseInt(n[p][0],10),l=parseInt(n[p][c-1],10),a=("right"===o?l-s:s-l)/(c-1)||0,h=[],h.push(a),d.push(h);return d}function r(e){function t(t){return e.autofill?void(e.autofill.handle&&e.autofill.handle.isDragged&&(e.autofill.handle.isDragged>1&&e.autofill.apply(),e.autofill.handle.isDragged=0,l=!1)):!0}function n(e){var t,n;return s.instance.autofill?(t=f(s.instance.table).top-(window.pageYOffset||document.documentElement.scrollTop)+p(s.instance.table),n=f(s.instance.table).left-(window.pageXOffset||document.documentElement.scrollLeft)+g(s.instance.table),s.addingStarted===!1&&s.instance.autofill.handle.isDragged>0&&e.clientY>t&&e.clientX<=n?(s.instance.mouseDragOutside=!0,s.addingStarted=!0):s.instance.mouseDragOutside=!1,void(s.instance.mouseDragOutside&&v("autoInsertRow")&&setTimeout(function(){s.addingStarted=!1,s.instance.alter("insert_row")},200))):!1}var o,r,i,s=this,l=!1;this.instance=e,this.addingStarted=!1,i=m(e),i.addEventListener(document,"mouseup",t),i.addEventListener(document,"mousemove",n),o=this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown,this.instance.view.wt.wtSettings.settings.onCellCornerMouseDown=function(t){e.autofill.handle.isDragged=1,l=!0,o(t)},r=this.instance.view.wt.wtSettings.settings.onCellMouseOver,this.instance.view.wt.wtSettings.settings.onCellMouseOver=function(t,n,o,i){e.autofill&&l&&!e.view.isMouseDown()&&e.autofill.handle&&e.autofill.handle.isDragged&&(e.autofill.handle.isDragged++,e.autofill.showBorder(n),e.autofill.checkIfNewRowNeeded()),r(t,n,o,i)},this.instance.view.wt.wtSettings.settings.onCellCornerDblClick=function(){e.autofill.selectAdjacent()}}function i(e){return function(t){var n;return"direction"===t?n="string"==typeof e?e:"object"==typeof e&&void 0!==e[t]?e[t]:!0:"autoInsertRow"===t?n="object"==typeof e&&void 0!==e[t]?e[t]:!0:"fillHandle"===t&&(n=!!e),n}}Object.defineProperties(n,{Autofill:{get:function(){return r}},__esModule:{value:!0}});var s,l,a,u,c,d=(s=e("browser"),s&&s.__esModule&&s||{"default":s})["default"],h=(l=e("helpers/dom/element"),l&&l.__esModule&&l||{"default":l}),f=h.offset,p=h.outerHeight,g=h.outerWidth,m=(a=e("eventManager"),a&&a.__esModule&&a||{"default":a}).eventManager,w=((u=e("plugins"),u&&u.__esModule&&u||{"default":u}).registerPlugin,(c=e("3rdparty/walkontable/src/cell/coords"),c&&c.__esModule&&c||{"default":c}).WalkontableCellCoords);r.prototype.init=function(){this.handle={}},r.prototype.disable=function(){this.handle.disabled=!0},r.prototype.selectAdjacent=function(){var e,t,n,o,r;e=this.instance.selection.isMultiple()?this.instance.view.wt.selections.area.getCorners():this.instance.view.wt.selections.current.getCorners(),t=this.instance.getData();e:for(n=e[2]+1;n<this.instance.countRows();n++){for(r=e[1];r<=e[3];r++)if(t[n][r])break e;(t[n][e[1]-1]||t[n][e[3]+1])&&(o=n)}o&&(this.instance.view.wt.selections.fill.clear(),this.instance.view.wt.selections.fill.add(new w(e[0],e[1])),this.instance.view.wt.selections.fill.add(new w(o,e[3])),this.apply())},r.prototype.apply=function(){var e,t,n,r,i,s,l,a;this.handle.isDragged=0,this.instance.view.wt.selections.fill.isEmpty()||(e=this.instance.view.wt.selections.fill.getCorners(),this.instance.view.wt.selections.fill.clear(),t=this.instance.selection.isMultiple()?this.instance.view.wt.selections.area.getCorners():this.instance.view.wt.selections.current.getCorners(),d.hooks.run(this.instance,"afterAutofillApplyValues",t,e),e[0]===t[0]&&e[1]<t[1]?(s="left",n=new w(e[0],e[1]),r=new w(e[2],t[1]-1)):e[0]===t[0]&&e[3]>t[3]?(s="right",n=new w(e[0],t[3]+1),r=new w(e[2],e[3])):e[0]<t[0]&&e[1]===t[1]?(s="up",n=new w(e[0],e[1]),r=new w(t[0]-1,e[3])):e[2]>t[2]&&e[1]===t[1]&&(s="down",n=new w(t[2]+1,e[1]),r=new w(e[2],e[3])),n&&n.row>-1&&n.col>-1?(a={from:this.instance.getSelectedRange().from,to:this.instance.getSelectedRange().to},i=this.instance.getData(a.from.row,a.from.col,a.to.row,a.to.col),l=o(n,r,i,s),d.hooks.run(this.instance,"beforeAutofill",n,r,i),this.instance.populateFromArray(n.row,n.col,i,r.row,r.col,"autofill",null,s,l),this.instance.selection.setRangeStart(new w(e[0],e[1])),this.instance.selection.setRangeEnd(new w(e[2],e[3]))):this.instance.selection.refreshBorders())},r.prototype.showBorder=function(e){var t=this.instance.getSelectedRange().getTopLeftCorner(),n=this.instance.getSelectedRange().getBottomRightCorner();if("horizontal"!==v("direction")&&(n.row<e.row||t.row>e.row))e=new w(e.row,n.col);else{if("vertical"===v("direction"))return;e=new w(n.row,e.col)}this.instance.view.wt.selections.fill.clear(),this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().from),this.instance.view.wt.selections.fill.add(this.instance.getSelectedRange().to),this.instance.view.wt.selections.fill.add(e),this.instance.view.render()},r.prototype.checkIfNewRowNeeded=function(){var e,t,n=this.instance.countRows(),o=this;this.instance.view.wt.selections.fill.cellRange&&this.addingStarted===!1&&v("autoInsertRow")&&(t=this.instance.getSelected(),e=this.instance.view.wt.selections.fill.getCorners(),t[2]<n-1&&e[2]===n-1&&(this.addingStarted=!0,this.instance._registerTimeout(setTimeout(function(){o.instance.alter("insert_row"),o.addingStarted=!1},200))))},d.hooks.add("afterInit",function(){var e=new r(this);v=i(this.getSettings().fillHandle),void 0!==v("fillHandle")&&(e.handle&&v("fillHandle")===!1?e.disable():e.handle||v("fillHandle")===!1||(this.autofill=e,this.autofill.init()))});var v;d.Autofill=r},{"3rdparty/walkontable/src/cell/coords":5,browser:23,eventManager:41,"helpers/dom/element":46,plugins:59}],64:[function(e,t,n){"use strict";Object.defineProperties(n,{ColumnSorting:{get:function(){return _}},__esModule:{value:!0}});var o,r,i,s,l,a,u=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],c=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),d=c.addClass,h=c.closest,f=c.hasClass,p=c.index,g=c.removeClass,m=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}),w=(m.arrayEach,m.arrayMap),v=m.arrayReduce,y=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).eventManager,b=(l=e("_base"),l&&l.__esModule&&l||{"default":l})["default"],C=(a=e("plugins"),a&&a.__esModule&&a||{"default":a}).registerPlugin;u.hooks.register("beforeColumnSort"),u.hooks.register("afterColumnSort");var _=function(e){$traceurRuntime.superConstructor(R).call(this,e),this.sortIndicators=[],this.lastSortedColumn=null},R=_;$traceurRuntime.createClass(_,{isEnabled:function(){return!!this.hot.getSettings().columnSorting},enablePlugin:function(){var e=this;if(!this.enabled){var t=this;this.hot.sortIndex=[],this.hot.sort=function(){var e=Array.prototype.slice.call(arguments);return t.sortByColumn.apply(t,e)},"undefined"==typeof this.hot.getSettings().observeChanges&&this.enableObserveChangesPlugin(),this.bindColumnSortingAfterClick(),this.addHook("afterTrimRow",function(t){return e.sort()}),this.addHook("afterUntrimRow",function(t){return e.sort()}),this.addHook("modifyRow",function(t){return e.translateRow(t)}),this.addHook("afterUpdateSettings",function(){return e.onAfterUpdateSettings()}),this.addHook("afterGetColHeader",function(t,n){return e.getColHeader(t,n)}),this.addHook("afterCreateRow",function(){t.afterCreateRow.apply(t,arguments)}),this.addHook("afterRemoveRow",function(){t.afterRemoveRow.apply(t,arguments)}),this.addHook("afterInit",function(){return e.sortBySettings()}),this.addHook("afterLoadData",function(){e.hot.sortIndex=[],e.hot.view&&e.sortBySettings()}),this.hot.view&&this.sortBySettings(),$traceurRuntime.superGet(this,R.prototype,"enablePlugin").call(this)}},disablePlugin:function(){this.hot.sort=void 0,$traceurRuntime.superGet(this,R.prototype,"disablePlugin").call(this)},onAfterUpdateSettings:function(){this.sortBySettings()},sortBySettings:function(){var e,t,n=this.hot.getSettings().columnSorting,o=this.loadSortingState();"undefined"==typeof o?(e=n.column,t=n.sortOrder):(e=o.sortColumn,t=o.sortOrder),"number"==typeof e&&(this.lastSortedColumn=e,this.sortByColumn(e,t))},setSortingColumn:function(e,t){return"undefined"==typeof e?(this.hot.sortColumn=void 0,void(this.hot.sortOrder=void 0)):(this.hot.sortColumn===e&&"undefined"==typeof t?this.hot.sortOrder===!1?this.hot.sortOrder=void 0:this.hot.sortOrder=!this.hot.sortOrder:this.hot.sortOrder="undefined"==typeof t?!0:t,void(this.hot.sortColumn=e))},sortByColumn:function(e,t){if(this.setSortingColumn(e,t),"undefined"!=typeof this.hot.sortColumn){var n=u.hooks.run(this.hot,"beforeColumnSort",this.hot.sortColumn,this.hot.sortOrder);n!==!1&&this.sort(),this.updateOrderClass(),this.updateSortIndicator(),this.hot.render(),this.saveSortingState(),u.hooks.run(this.hot,"afterColumnSort",this.hot.sortColumn,this.hot.sortOrder)}},saveSortingState:function(){var e={};"undefined"!=typeof this.hot.sortColumn&&(e.sortColumn=this.hot.sortColumn),"undefined"!=typeof this.hot.sortOrder&&(e.sortOrder=this.hot.sortOrder),(e.hasOwnProperty("sortColumn")||e.hasOwnProperty("sortOrder"))&&u.hooks.run(this.hot,"persistentStateSave","columnSorting",e)},loadSortingState:function(){var e={};return u.hooks.run(this.hot,"persistentStateLoad","columnSorting",e),e.value},updateOrderClass:function(){var e;this.hot.sortOrder===!0?e="ascending":this.hot.sortOrder===!1&&(e="descending"),this.sortOrderClass=e},bindColumnSortingAfterClick:function(){function e(){var e=r.hot.view.TBODY.querySelector("tr"),t=1;return e&&(t=e.querySelectorAll("th").length),t}function t(t){var n=h(t,"TH");return r.hot.view.wt.wtTable.getFirstRenderedColumn()+p(n)-e()}var n=this;if(!this.bindedSortEvent){var o=y(this.hot),r=this;this.bindedSortEvent=!0,o.addEventListener(this.hot.rootElement,"click",function(e){if(f(e.target,"columnSorting")){var o=t(e.target);o!==n.lastSortedColumn&&(n.hot.sortOrder=!0),n.lastSortedColumn=o,n.sortByColumn(o)}})}},enableObserveChangesPlugin:function(){var e=this;this.hot._registerTimeout(setTimeout(function(){e.hot.updateSettings({observeChanges:!0})},0))},defaultSort:function(e){return function(t,n){return"string"==typeof t[1]&&(t[1]=t[1].toLowerCase()),"string"==typeof n[1]&&(n[1]=n[1].toLowerCase()),t[1]===n[1]?0:null===t[1]||""===t[1]?1:null===n[1]||""===n[1]?-1:isNaN(t[1])&&!isNaN(n[1])?e?1:-1:!isNaN(t[1])&&isNaN(n[1])?e?-1:1:t[1]<n[1]?e?-1:1:t[1]>n[1]?e?1:-1:0}},dateSort:function(e){return function(t,n){if(t[1]===n[1])return 0;if(null===t[1]||""===t[1])return 1;if(null===n[1]||""===n[1])return-1;var o=new Date(t[1]),r=new Date(n[1]);return r>o?e?-1:1:o>r?e?1:-1:0}},numericSort:function(e){return function(t,n){var o=parseFloat(t[1]),r=parseFloat(n[1]);return o===r||isNaN(o)&&isNaN(r)?0:isNaN(o)?1:isNaN(r)?-1:r>o?e?-1:1:o>r?e?1:-1:0}},sort:function(){if("undefined"==typeof this.hot.sortOrder)return void(this.hot.sortIndex.length=0);var e,t;this.hot.sortingEnabled=!1,this.hot.sortIndex.length=0;for(var n=0,o=this.hot.countRows()-this.hot.getSettings().minSpareRows;o>n;n++)this.hot.sortIndex.push([n,this.hot.getDataAtCell(n,this.hot.sortColumn)]);if(e=this.hot.getCellMeta(0,this.hot.sortColumn),e.sortFunction)t=e.sortFunction;else switch(e.type){case"date":t=this.dateSort;break;case"numeric":t=this.numericSort;break;default:t=this.defaultSort}this.hot.sortIndex.sort(t(this.hot.sortOrder));for(var r=this.hot.sortIndex.length;r<this.hot.countRows();r++)this.hot.sortIndex.push([r,this.hot.getDataAtCell(r,this.hot.sortColumn)]);this.hot.sortingEnabled=!0},updateSortIndicator:function(){if("undefined"!=typeof this.hot.sortOrder){var e=this.hot.getCellMeta(0,this.hot.sortColumn);this.sortIndicators[this.hot.sortColumn]=e.sortIndicator}},translateRow:function(e){return this.hot.sortingEnabled&&"undefined"!=typeof this.hot.sortOrder&&this.hot.sortIndex&&this.hot.sortIndex.length&&this.hot.sortIndex[e]?this.hot.sortIndex[e][0]:e},untranslateRow:function(e){if(this.hot.sortingEnabled&&this.hot.sortIndex&&this.hot.sortIndex.length)for(var t=0;t<this.hot.sortIndex.length;t++)if(this.hot.sortIndex[t][0]==e)return t},getColHeader:function(e,t){var n=t.querySelector(".colHeader"),o=(t.getAttribute("colspan"),t.parentNode.parentNode.childNodes),r=Array.prototype.indexOf.call(o,t.parentNode);r-=o.length,n&&(this.hot.getSettings().columnSorting&&e>=0&&-1===r&&d(n,"columnSorting"),g(n,"descending"),g(n,"ascending"),this.sortIndicators[e]&&e===this.hot.sortColumn&&("ascending"===this.sortOrderClass?d(n,"ascending"):"descending"===this.sortOrderClass&&d(n,"descending")))},isSorted:function(){return"undefined"!=typeof this.hot.sortColumn},afterCreateRow:function(e,t){if(this.isSorted()){for(var n=0;n<this.hot.sortIndex.length;n++)this.hot.sortIndex[n][0]>=e&&(this.hot.sortIndex[n][0]+=t);for(var n=0;t>n;n++)this.hot.sortIndex.splice(e+n,0,[e+n,this.hot.getSourceData()[e+n][this.hot.sortColumn+this.hot.colOffset()]]);this.saveSortingState()}},afterRemoveRow:function(e,t){function n(e){return v(o,function(t,n){return e>n&&t++,t},0)}if(this.isSorted()){var o=this.hot.sortIndex.splice(e,t);o=w(o,function(e){return e[0]}),this.hot.sortIndex=w(this.hot.sortIndex,function(e,t){var o=n(e[0]);return o&&(e[0]-=o),e}),this.saveSortingState()}}},{},b),C("columnSorting",_)},{_base:60,browser:23,eventManager:41,"helpers/array":42,"helpers/dom/element":46,plugins:59}],65:[function(e,t,n){"use strict";Object.defineProperties(n,{CommentEditor:{get:function(){return i}},__esModule:{value:!0}});var o,r=(o=e("helpers/dom/element"),o&&o.__esModule&&o||{"default":o}).addClass,i=function(){this.editor=this.createEditor(),this.editorStyle=this.editor.style,this.editorStyle.position="absolute",this.editorStyle.zIndex=100,this.hide()},s=i;$traceurRuntime.createClass(i,{setPosition:function(e,t){this.editorStyle.left=e+"px",this.editorStyle.top=t+"px"},show:function(){this.editorStyle.display="block"},hide:function(){this.editorStyle.display="none"},isVisible:function(){return"block"===this.editorStyle.display},setValue:function(){var e=void 0!==arguments[0]?arguments[0]:"";e=e||"",this.getInputElement().value=e},getValue:function(){return this.getInputElement().value},isFocused:function(){return document.activeElement===this.getInputElement();
},focus:function(){this.getInputElement().focus()},createEditor:function(){var e,t,n=document.querySelector("."+s.CLASS_EDITOR_CONTAINER);return n||(n=document.createElement("div"),r(n,s.CLASS_EDITOR_CONTAINER),document.body.appendChild(n)),e=document.createElement("div"),r(e,s.CLASS_EDITOR),t=document.createElement("textarea"),r(t,s.CLASS_INPUT),e.appendChild(t),n.appendChild(e),e},getInputElement:function(){return this.editor.querySelector("."+s.CLASS_INPUT)},destroy:function(){this.editor.parentNode.removeChild(this.editor),this.editor=null,this.editorStyle=null}},{get CLASS_EDITOR_CONTAINER(){return"htCommentsContainer"},get CLASS_EDITOR(){return"htComments"},get CLASS_INPUT(){return"htCommentTextArea"},get CLASS_CELL(){return"htCommentCell"}})},{"helpers/dom/element":46}],66:[function(e,t,n){"use strict";Object.defineProperties(n,{Comments:{get:function(){return S}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],d=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),h=d.addClass,f=d.closest,p=d.getWindowScrollLeft,g=d.getWindowScrollTop,m=d.hasClass,w=d.offset,v=(i=e("eventManager"),i&&i.__esModule&&i||{"default":i}).EventManager,y=(s=e("3rdparty/walkontable/src/cell/coords"),s&&s.__esModule&&s||{"default":s}).WalkontableCellCoords,b=(l=e("plugins"),l&&l.__esModule&&l||{"default":l}),C=b.registerPlugin,_=(b.getPlugin,(a=e("_base"),a&&a.__esModule&&a||{"default":a})["default"]),R=(u=e("commentEditor"),u&&u.__esModule&&u||{"default":u}).CommentEditor,S=function(e){$traceurRuntime.superConstructor(E).call(this,e),this.editor=null,this.eventManager=null,this.range={},this.mouseDown=!1,this.contextMenuEvent=!1,this.timer=null},E=S;$traceurRuntime.createClass(S,{isEnabled:function(){return this.hot.getSettings().comments},enablePlugin:function(){var e=this;this.enabled||(this.editor||(this.editor=new R),this.eventManager||(this.eventManager=new v(this)),this.addHook("afterContextMenuDefaultOptions",function(t){return e.addToContextMenu(t)}),this.addHook("afterRenderer",function(t,n,o,r,i,s){return e.onAfterRenderer(t,s)}),this.addHook("afterScrollHorizontally",function(){return e.refreshEditorPosition()}),this.addHook("afterScrollVertically",function(){return e.refreshEditorPosition()}),this.addHook("afterColumnResize",function(){return e.refreshEditorPosition()}),this.addHook("afterRowResize",function(){return e.refreshEditorPosition()}),this.registerListeners(),$traceurRuntime.superGet(this,E.prototype,"enablePlugin").call(this))},disablePlugin:function(){$traceurRuntime.superGet(this,E.prototype,"disablePlugin").call(this)},registerListeners:function(){var e=this;this.eventManager.addEventListener(document,"mouseover",function(t){return e.onMouseOver(t)}),this.eventManager.addEventListener(document,"mousedown",function(t){return e.onMouseDown(t)}),this.eventManager.addEventListener(document,"mousemove",function(t){return e.onMouseMove(t)}),this.eventManager.addEventListener(document,"mouseup",function(t){return e.onMouseUp(t)}),this.eventManager.addEventListener(this.editor.getInputElement(),"blur",function(t){return e.onEditorBlur(t)})},setRange:function(e){this.range=e},clearRange:function(){this.range={}},targetIsCellWithComment:function(e){return!(!m(e.target,"htCommentCell")||!f(e.target,[this.hot.rootElement]))},targetIsCommentTextArea:function(e){return this.editor.getInputElement()===e.target},saveComment:function(){if(!this.range.from)throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');var e=this.editor.getValue(),t=this.range.from.row,n=this.range.from.col;this.hot.setCellMeta(t,n,"comment",e),this.hot.render()},saveCommentAtCell:function(e,t){this.setRange({from:new y(e,t)}),this.saveComment()},removeComment:function(){if(!this.range.from)throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');this.hot.removeCellMeta(this.range.from.row,this.range.from.col,"comment"),this.hot.render(),this.hide()},removeCommentAtCell:function(e,t){this.setRange({from:new y(e,t)}),this.removeComment()},show:function(){if(!this.range.from)throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');var e=this.hot.getCellMeta(this.range.from.row,this.range.from.col);return this.refreshEditorPosition(!0),this.editor.setValue(e.comment||""),this.editor.show(),!0},showAtCell:function(e,t){return this.setRange({from:new y(e,t)}),this.show()},hide:function(){this.editor.hide()},refreshEditorPosition:function(){var e=void 0!==arguments[0]?arguments[0]:!1;if(e||this.range.from&&this.editor.isVisible()){var t=this.hot.view.wt.wtTable.getCell(this.range.from),n=w(t),o=this.hot.getColWidth(this.range.from.col),r=n.top,i=n.left,s=0,l=0;this.hot.view.wt.wtViewport.hasVerticalScroll()&&(r-=this.hot.view.wt.wtOverlays.topOverlay.getScrollPosition(),s=20),this.hot.view.wt.wtViewport.hasHorizontalScroll()&&(i-=this.hot.view.wt.wtOverlays.leftOverlay.getScrollPosition(),l=20);var a=i+o,u=r,c=this.hot.view.wt.wtTable.holder.getBoundingClientRect(),d={left:c.left+p()+l,right:c.right+p()-15,top:c.top+g()+s,bottom:c.bottom+g()};a<=d.left||a>d.right||u<=d.top||u>d.bottom?this.hide():this.editor.setPosition(a,u)}},onMouseDown:function(e){this.mouseDown=!0,this.hot.view&&this.hot.view.wt&&(this.contextMenuEvent||this.targetIsCommentTextArea(e)||this.targetIsCellWithComment(e)||this.hide(),this.contextMenuEvent=!1)},onMouseOver:function(e){if(!this.mouseDown&&!this.editor.isFocused())if(this.targetIsCellWithComment(e)){var t=this.hot.view.wt.wtTable.getCoords(e.target),n={from:new y(t.row,t.col)};this.setRange(n),this.show()}else this.targetIsCommentTextArea(e)||this.editor.isFocused()||this.hide()},onMouseMove:function(e){var t=this;this.targetIsCommentTextArea(e)&&(this.mouseDown=!0,clearTimeout(this.timer),this.timer=setTimeout(function(){t.mouseDown=!1},200))},onMouseUp:function(e){this.mouseDown=!1},onAfterRenderer:function(e,t){t.comment&&h(e,t.commentedCellClassName)},onEditorBlur:function(e){this.saveComment()},checkSelectionCommentsConsistency:function(){var e=this.hot.getSelectedRange();if(!e)return!1;var t=!1,n=e.from;return this.hot.getCellMeta(n.row,n.col).comment&&(t=!0),t},onContextMenuAddComment:function(){var e=this,t=this.hot.getSelectedRange();this.contextMenuEvent=!0,this.setRange({from:t.from}),this.show(),setTimeout(function(){e.hot&&(e.hot.deselectCell(),e.editor.focus())},10)},onContextMenuRemoveComment:function(e,t){this.contextMenuEvent=!0,this.removeCommentAtCell(t.start.row,t.start.col)},addToContextMenu:function(e){var t=this;e.items.push(c.plugins.ContextMenu.SEPARATOR,{key:"commentsAddEdit",name:function(){return t.checkSelectionCommentsConsistency()?"Edit Comment":"Add Comment"},callback:function(){return t.onContextMenuAddComment()},disabled:function(){return!this.getSelected()}},{key:"commentsRemove",name:function(){return"Delete Comment"},callback:function(e,n){return t.onContextMenuRemoveComment(e,n)},disabled:function(){return!t.checkSelectionCommentsConsistency()}})},destroy:function(){this.editor&&this.editor.destroy(),$traceurRuntime.superGet(this,E.prototype,"destroy").call(this)}},{},_),C("comments",S)},{"3rdparty/walkontable/src/cell/coords":5,_base:60,browser:23,commentEditor:65,eventManager:41,"helpers/dom/element":46,plugins:59}],67:[function(e,t,n){"use strict";function o(e,t){var n;return i(t,function(t){var o=t.key?t.key.split(":"):null;return Array.isArray(o)&&o[1]===e?(n=t,!1):void 0}),n}Object.defineProperties(n,{CommandExecutor:{get:function(){return s}},__esModule:{value:!0}});var r,i=(r=e("helpers/array"),r&&r.__esModule&&r||{"default":r}).arrayEach,s=function(e){this.hot=e,this.commands={},this.commonCallback=null};$traceurRuntime.createClass(s,{registerCommand:function(e,t){this.commands[e]=t},setCommonCallback:function(e){this.commonCallback=e},execute:function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=this,s=e.split(":");e=s[0];var l=2===s.length?s[1]:null,a=this.commands[e];if(!a)throw new Error("Menu command '"+e+"' not exists.");if(l&&a.submenu&&(a=o(l,a.submenu.items)),a.disabled!==!0&&("function"!=typeof a.disabled||a.disabled.call(this.hot)!==!0)&&!a.hasOwnProperty("submenu")){var u=[];"function"==typeof a.callback&&u.push(a.callback),"function"==typeof this.commonCallback&&u.push(this.commonCallback),t.unshift(s.join(":")),i(u,function(e){return e.apply(r.hot,t)})}}},{})},{"helpers/array":42}],68:[function(e,t,n){"use strict";Object.defineProperties(n,{ContextMenu:{get:function(){return B}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d,h,a,f,p=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],g=(r=e("_base"),r&&r.__esModule&&r||{"default":r})["default"],m=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}).arrayEach,w=(s=e("commandExecutor"),s&&s.__esModule&&s||{"default":s}).CommandExecutor,v=(l=e("eventManager"),l&&l.__esModule&&l||{"default":l}).EventManager,y=(a=e("helpers/dom/element"),a&&a.__esModule&&a||{"default":a}).hasClass,b=(u=e("itemsFactory"),u&&u.__esModule&&u||{"default":u}).ItemsFactory,C=(c=e("menu"),c&&c.__esModule&&c||{"default":c}).Menu,_=(d=e("plugins"),d&&d.__esModule&&d||{"default":d}).registerPlugin,R=(h=e("helpers/dom/event"),h&&h.__esModule&&h||{"default":h}),S=R.stopPropagation,E=R.pageX,M=R.pageY,T=(a=e("helpers/dom/element"),a&&a.__esModule&&a||{"default":a}),O=T.getWindowScrollLeft,k=T.getWindowScrollTop,D=(f=e("predefinedItems"),f&&f.__esModule&&f||{"default":f}),A=D.ROW_ABOVE,x=D.ROW_BELOW,H=D.COLUMN_LEFT,P=D.COLUMN_RIGHT,N=D.REMOVE_ROW,L=D.REMOVE_COLUMN,W=D.UNDO,I=D.REDO,j=D.READ_ONLY,V=D.ALIGNMENT,F=D.SEPARATOR,B=function(e){$traceurRuntime.superConstructor(z).call(this,e),this.eventManager=new v(this),this.commandExecutor=new w(this.hot),this.itemsFactory=null,this.menu=null},z=B;$traceurRuntime.createClass(B,{isEnabled:function(){return this.hot.getSettings().contextMenu},enablePlugin:function(){var e=this;if(!this.enabled){this.itemsFactory=new b(this.hot,z.DEFAULT_ITEMS);var t=this.hot.getSettings().contextMenu,n={items:this.itemsFactory.getItems(t)};this.registerEvents(),"function"==typeof t.callback&&this.commandExecutor.setCommonCallback(t.callback),$traceurRuntime.superGet(this,z.prototype,"enablePlugin").call(this),this.callOnPluginsReady(function(){e.hot.runHooks("afterContextMenuDefaultOptions",n),e.itemsFactory.setPredefinedItems(n.items);var o=e.itemsFactory.getItems(t);e.menu=new C(e.hot,{className:"htContextMenu",keepInViewport:!0}),e.menu.setMenuItems(o),e.menu.addLocalHook("afterOpen",function(){return e.onMenuAfterOpen()}),e.menu.addLocalHook("afterClose",function(){return e.onMenuAfterClose()}),e.menu.addLocalHook("executeCommand",function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.executeCommand.apply(e,t)}),m(o,function(t){return e.commandExecutor.registerCommand(t.key,t)})})}},updatePlugin:function(){this.disablePlugin(),this.enablePlugin(),$traceurRuntime.superGet(this,z.prototype,"updatePlugin").call(this)},disablePlugin:function(){this.close(),this.menu&&(this.menu.destroy(),this.menu=null),$traceurRuntime.superGet(this,z.prototype,"disablePlugin").call(this)},registerEvents:function(){var e=this;this.eventManager.addEventListener(this.hot.rootElement,"contextmenu",function(t){return e.onContextMenu(t)})},open:function(e){this.menu&&(this.menu.open(),this.menu.setPosition({top:parseInt(M(e),10)-k(),left:parseInt(E(e),10)-O()}),this.menu.hotMenu.isHotTableEnv=this.hot.isHotTableEnv,p.eventManager.isHotTableEnv=this.hot.isHotTableEnv)},close:function(){this.menu&&this.menu.close()},executeCommand:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.commandExecutor.execute.apply(this.commandExecutor,e)},onContextMenu:function(e){function t(e){return"TD"===e.nodeName||"TD"===e.parentNode.nodeName}var n=this.hot.getSettings(),o=n.rowHeaders,r=n.colHeaders,i=e.realTarget;if(this.close(),e.preventDefault(),S(e),o||r){if(o&&r){var s=i.parentNode.querySelectorAll(".cornerHeader").length>0;if(s)return}}else if(!(t(i)||y(i,"current")&&y(i,"wtBorder")))return;this.open(e)},onMenuAfterOpen:function(){this.hot.runHooks("afterContextMenuShow",this)},onMenuAfterClose:function(){this.hot.listen(),this.hot.runHooks("afterContextMenuHide",this)},destroy:function(){this.close(),this.menu&&this.menu.destroy(),$traceurRuntime.superGet(this,z.prototype,"destroy").call(this)}},{get DEFAULT_ITEMS(){return[A,x,F,H,P,F,N,L,F,W,I,F,j,F,V]}},g),B.SEPARATOR={name:F},p.hooks.register("afterContextMenuDefaultOptions"),p.hooks.register("afterContextMenuShow"),p.hooks.register("afterContextMenuHide"),p.hooks.register("afterContextMenuExecute"),_("contextMenu",B)},{_base:60,browser:23,commandExecutor:67,eventManager:41,"helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,itemsFactory:70,menu:71,plugins:59,predefinedItems:72}],69:[function(e,t,n){"use strict";Object.defineProperties(n,{Cursor:{get:function(){return f}},__esModule:{value:!0}});var o,r,i,s=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],l=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),a=l.getWindowScrollLeft,u=l.getWindowScrollTop,c=(i=e("helpers/dom/event"),i&&i.__esModule&&i||{"default":i}),d=c.pageX,h=c.pageY,f=function(e){var t,n,o,r,i,s,l=u(),c=a();this.type=this.getSourceType(e),"literal"===this.type?(t=parseInt(e.top,10),o=parseInt(e.left,10),i=e.height||0,s=e.width||0,n=t,r=o,t+=l,o+=c):"event"===this.type&&(t=parseInt(h(e),10),o=parseInt(d(e),10),i=e.target.clientHeight,s=e.target.clientWidth,n=t-l,r=o-c),this.top=t,this.topRelative=n,this.left=o,this.leftRelative=r,this.scrollTop=l,this.scrollLeft=c,this.cellHeight=i,this.cellWidth=s};$traceurRuntime.createClass(f,{getSourceType:function(e){var t="literal";return e instanceof Event&&(t="event"),t},fitsAbove:function(e){return this.topRelative>=e.offsetHeight},fitsBelow:function(e){var t=void 0!==arguments[1]?arguments[1]:window.innerHeight;return this.topRelative+e.offsetHeight<=t},fitsOnRight:function(e){var t=void 0!==arguments[1]?arguments[1]:window.innerWidth;return this.leftRelative+this.cellWidth+e.offsetWidth<=t},fitsOnLeft:function(e){return this.leftRelative>=e.offsetWidth}},{}),s.plugins.utils=s.plugins.utils||{},s.plugins.utils.Cursor=f},{browser:23,"helpers/dom/element":46,"helpers/dom/event":47}],70:[function(e,t,n){"use strict";function o(){var e=void 0!==arguments[0]?arguments[0]:null,t=void 0!==arguments[1]?arguments[1]:[],n=void 0!==arguments[2]?arguments[2]:{},o=[];return e&&e.items?e=e.items:Array.isArray(e)||(e=t),u(e)?a(e,function(e,t){var r=n["string"==typeof e?e:t];r||(r=e),u(e)?c(r,e):"string"==typeof r&&(r={name:r}),void 0===r.key&&(r.key=t),o.push(r)}):d(e,function(e,t){var r=n[e];!r&&p.indexOf(e)>=0||(r||(r={name:e,key:t+""}),u(e)&&c(r,e),void 0===r.key&&(r.key=t),o.push(r))}),o}Object.defineProperties(n,{ItemsFactory:{get:function(){return m}},__esModule:{value:!0}});var r,i,s,l=(r=e("helpers/object"),r&&r.__esModule&&r||{"default":r}),a=l.objectEach,u=l.isObject,c=l.extend,d=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}).arrayEach,h=(s=e("predefinedItems"),s&&s.__esModule&&s||{"default":s}),f=h.SEPARATOR,p=h.ITEMS,g=h.predefinedItems,m=function(e){var t=void 0!==arguments[1]?arguments[1]:null;this.hot=e,this.predefinedItems=g(),this.defaultOrderPattern=t};$traceurRuntime.createClass(m,{setPredefinedItems:function(e){var t=this,n={};this.defaultOrderPattern.length=0,a(e,function(e,o){var r="";e.name===f?(n[f]=e,r=f):isNaN(parseInt(o,10))?(e.key=void 0===e.key?o:e.key,n[o]=e,r=e.key):(n[e.key]=e,r=e.key),t.defaultOrderPattern.push(r)}),this.predefinedItems=n},getItems:function(){var e=void 0!==arguments[0]?arguments[0]:null;return o(e,this.defaultOrderPattern,this.predefinedItems)}},{})},{"helpers/array":42,"helpers/object":52,predefinedItems:72}],71:[function(e,t,n){"use strict";Object.defineProperties(n,{Menu:{get:function(){return z}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d,h,f,p,g=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],m=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),w=m.addClass,v=m.empty,y=m.fastInnerHTML,b=m.getScrollbarWidth,C=m.isChildOf,_=m.removeClass,R=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}),S=R.arrayEach,E=R.arrayFilter,M=R.arrayReduce,T=(s=e("cursor"),s&&s.__esModule&&s||{"default":s}).Cursor,O=(l=e("eventManager"),l&&l.__esModule&&l||{"default":l}).EventManager,k=(a=e("helpers/object"),a&&a.__esModule&&a||{"default":a}).mixin,D=(u=e("helpers/function"),u&&u.__esModule&&u||{"default":u}).debounce,A=(c=e("utils"),c&&c.__esModule&&c||{"default":c}),x=A.filterSeparators,H=A.hasSubMenu,P=A.isDisabled,N=A.isItemHidden,L=A.isSeparator,W=A.isSelectionDisabled,I=A.normalizeSelection,j=(d=e("helpers/unicode"),d&&d.__esModule&&d||{"default":d}).KEY_CODES,V=(h=e("mixins/localHooks"),h&&h.__esModule&&h||{"default":h}).localHooks,F=(f=e("predefinedItems"),f&&f.__esModule&&f||{"default":f}).SEPARATOR,B=(p=e("helpers/dom/event"),p&&p.__esModule&&p||{"default":p}).stopImmediatePropagation,z=function(e,t){this.hot=e,this.options=t||{parent:null,name:null,className:"",keepInViewport:!0,standalone:!1},this.eventManager=new O(this),this.container=this.createContainer(this.options.name),this.hotMenu=null,this.hotSubMenus={},this.parentMenu=this.options.parent||null,this.menuItems=null,this.origOutsideClickDeselects=null,this.offset={above:0,below:0,left:0,right:0},this._afterScrollCallback=null,this.registerEvents()},Y=z;$traceurRuntime.createClass(z,{registerEvents:function(){var e=this;this.eventManager.addEventListener(document.documentElement,"mousedown",function(t){return e.onDocumentMouseDown(t)})},setMenuItems:function(e){this.menuItems=e},setOffset:function(e){var t=void 0!==arguments[1]?arguments[1]:0;this.offset[e]=t},isSubMenu:function(){return null!==this.parentMenu},open:function(){var e=this;this.container.removeAttribute("style"),this.container.style.display="block";var t=D(function(t){return e.openSubMenu(t)},300),n=E(this.menuItems,function(t){return N(t,e.hot)});n=x(n,F);var o={data:n,colHeaders:!1,colWidths:[200],autoRowSize:!1,readOnly:!0,copyPaste:!1,columns:[{data:"name",renderer:function(t,n,o,r,i,s){return e.menuItemRenderer(t,n,o,r,i,s)}}],renderAllRows:!0,fragmentSelection:"cell",disableVisualSelection:"area",beforeKeyDown:function(t){return e.onBeforeKeyDown(t)},afterOnCellMouseOver:function(n,o,r){e.isAllSubMenusClosed()?t(o.row):e.openSubMenu(o.row)}};this.origOutsideClickDeselects=this.hot.getSettings().outsideClickDeselects,this.hot.getSettings().outsideClickDeselects=!1,this.hotMenu=new g.Core(this.container,o),this.hotMenu.addHook("afterInit",function(){return e.onAfterInit()}),this.hotMenu.init(),this.hotMenu.listen(),this.blockMainTableCallbacks(),this.runLocalHooks("afterOpen")},close:function(){var e=void 0!==arguments[0]?arguments[0]:!1;this.isOpened()&&(e&&this.parentMenu?this.parentMenu.close():(this.closeAllSubMenus(),this.container.style.display="none",this.releaseMainTableCallbacks(),this.hotMenu.destroy(),this.hotMenu=null,this.hot.getSettings().outsideClickDeselects=this.origOutsideClickDeselects,this.runLocalHooks("afterClose")))},openSubMenu:function(e){if(!this.hotMenu)return!1;var t=this.hotMenu.getCell(e,0);if(this.closeAllSubMenus(),!t||!H(t))return!1;var n=this.hotMenu.getSourceDataAtRow(e),o=new Y(this.hot,{parent:this,name:n.name,className:this.options.className,keepInViewport:!0});return o.setMenuItems(n.submenu.items),o.open(),o.setPosition(t.getBoundingClientRect()),this.hotSubMenus[n.key]=o,o},closeSubMenu:function(e){var t=this.hotMenu.getSourceDataAtRow(e),n=this.hotSubMenus[t.key];n&&(n.destroy(),delete this.hotSubMenus[t.key])},closeAllSubMenus:function(){var e=this;S(this.hotMenu.getData(),function(t,n){return e.closeSubMenu(n)})},isAllSubMenusClosed:function(){return 0===Object.keys(this.hotSubMenus).length},destroy:function(){this.clearLocalHooks(),this.close(),this.parentMenu=null,this.eventManager.destroy()},isOpened:function(){return null!==this.hotMenu},executeCommand:function(e){if(this.isOpened()&&this.hotMenu.getSelected()){var t=this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelected()[0]);if(this.runLocalHooks("select",t,e),t.isCommand!==!1&&t.name!==F){var n=this.hot.getSelectedRange(),o=n?I(n):{};this.runLocalHooks("executeCommand",t.key,o,e),this.isSubMenu()&&this.parentMenu.runLocalHooks("executeCommand",t.key,o,e),t.disabled===!0||"function"==typeof t.disabled&&t.disabled.call(this.hot)===!0||t.submenu||this.close(!0)}}},setPosition:function(e){var t=new T(e);this.options.keepInViewport?(t.fitsBelow(this.container)?this.setPositionBelowCursor(t):t.fitsAbove(this.container)?this.setPositionAboveCursor(t):this.setPositionBelowCursor(t),t.fitsOnRight(this.container)?this.setPositionOnRightOfCursor(t):this.setPositionOnLeftOfCursor(t)):(this.setPositionBelowCursor(t),this.setPositionOnRightOfCursor(t))},setPositionAboveCursor:function(e){var t=this.offset.above+e.top-this.container.offsetHeight;this.isSubMenu()&&(t=e.top+e.cellHeight-this.container.offsetHeight+3),this.container.style.top=t+"px"},setPositionBelowCursor:function(e){var t=this.offset.below+e.top;this.isSubMenu()&&(t=e.top-1),this.container.style.top=t+"px"},setPositionOnRightOfCursor:function(e){var t;t=this.isSubMenu()?1+e.left+e.cellWidth:this.offset.right+1+e.left,this.container.style.left=t+"px"},setPositionOnLeftOfCursor:function(e){var t=this.offset.left+e.left-this.container.offsetWidth+b()+4;this.container.style.left=t+"px"},selectFirstCell:function(){var e=this.hotMenu.getCell(0,0);L(e)||P(e)||W(e)?this.selectNextCell(0,0):this.hotMenu.selectCell(0,0)},selectLastCell:function(){var e=this.hotMenu.countRows()-1,t=this.hotMenu.getCell(e,0);L(t)||P(t)||W(t)?this.selectPrevCell(e,0):this.hotMenu.selectCell(e,0)},selectNextCell:function(e,t){var n=e+1,o=n<this.hotMenu.countRows()?this.hotMenu.getCell(n,t):null;o&&(L(o)||P(o)||W(o)?this.selectNextCell(n,t):this.hotMenu.selectCell(n,t))},selectPrevCell:function(e,t){var n=e-1,o=n>=0?this.hotMenu.getCell(n,t):null;o&&(L(o)||P(o)||W(o)?this.selectPrevCell(n,t):this.hotMenu.selectCell(n,t))},menuItemRenderer:function(e,t,n,o,r,i){var s=this,l=e.getSourceDataAtRow(n),a=document.createElement("div"),u=function(e){return e.hasOwnProperty("submenu")},c=function(e){return new RegExp(F,"i").test(e.name)},d=function(e){return e.disabled===!0||"function"==typeof e.disabled&&e.disabled.call(s.hot)===!0},h=function(e){return e.disableSelection};"function"==typeof i&&(i=i.call(this.hot)),v(t),w(a,"htItemWrapper"),t.appendChild(a),c(l)?w(t,"htSeparator"):"function"==typeof l.renderer?(w(t,"htCustomMenuRenderer"),t.appendChild(l.renderer(e,a,n,o,r,i))):y(a,i),d(l)?(w(t,"htDisabled"),this.eventManager.addEventListener(t,"mouseenter",function(){return e.deselectCell()})):h(l)?(w(t,"htSelectionDisabled"),this.eventManager.addEventListener(t,"mouseenter",function(){return e.deselectCell()})):u(l)?(w(t,"htSubmenu"),h(l)?this.eventManager.addEventListener(t,"mouseenter",function(){return e.deselectCell()}):this.eventManager.addEventListener(t,"mouseenter",function(){return e.selectCell(n,o,void 0,void 0,void 0,!1)})):(_(t,"htSubmenu"),_(t,"htDisabled"),h(l)?this.eventManager.addEventListener(t,"mouseenter",function(){return e.deselectCell()}):this.eventManager.addEventListener(t,"mouseenter",function(){return e.selectCell(n,o,void 0,void 0,void 0,!1)}))},createContainer:function(){var e=void 0!==arguments[0]?arguments[0]:null;e&&(e=e.replace(/ /g,"_"),e=this.options.className+"Sub_"+e);var t;return t=e?document.querySelector("."+this.options.className+"."+e):document.querySelector("."+this.options.className),t||(t=document.createElement("div"),w(t,"htMenu "+this.options.className),e&&w(t,e),document.getElementsByTagName("body")[0].appendChild(t)),t},blockMainTableCallbacks:function(){this._afterScrollCallback=function(){},this.hot.addHook("afterScrollVertically",this._afterScrollCallback),this.hot.addHook("afterScrollHorizontally",this._afterScrollCallback)},releaseMainTableCallbacks:function(){this._afterScrollCallback&&(this.hot.removeHook("afterScrollVertically",this._afterScrollCallback),this.hot.removeHook("afterScrollHorizontally",this._afterScrollCallback),this._afterScrollCallback=null)},onBeforeKeyDown:function(e){var t=this.hotMenu.getSelected(),n=!1;switch(e.keyCode){case j.ESCAPE:this.close(),n=!0;break;case j.ENTER:t&&(this.hotMenu.getSourceDataAtRow(t[0]).submenu?n=!0:(this.executeCommand(e),this.close(!0)));break;case j.ARROW_DOWN:t?this.selectNextCell(t[0],t[1]):this.selectFirstCell(),n=!0;break;case j.ARROW_UP:t?this.selectPrevCell(t[0],t[1]):this.selectLastCell(),n=!0;break;case j.ARROW_RIGHT:if(t){var o=this.openSubMenu(t[0]);o&&o.selectFirstCell()}n=!0;break;case j.ARROW_LEFT:t&&this.isSubMenu()&&(this.close(),this.parentMenu&&this.parentMenu.hotMenu.listen(),n=!0)}n&&(e.preventDefault(),B(e))},onAfterInit:function(){var e=this.hotMenu.getSettings().data,t=this.hotMenu.view.wt.wtTable.hider.style,n=this.hotMenu.view.wt.wtTable.holder.style,o=parseInt(t.width,10),r=M(e,function(e,t){return e+(t.name===F?1:26)},0);n.width=o+22+"px",n.height=r+4+"px"},onDocumentMouseDown:function(e){this.isOpened()&&(this.container&&C(e.target,this.container)&&this.executeCommand(e),this.options.standalone&&this.hotMenu&&!C(e.target,this.hotMenu.rootElement)?this.close(!0):(this.isAllSubMenusClosed()||this.isSubMenu())&&!C(e.target,".htMenu")&&C(e.target,document)&&this.close(!0))}},{}),k(z,V)},{browser:23,cursor:69,eventManager:41,"helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/function":49,"helpers/object":52,"helpers/unicode":55,"mixins/localHooks":56,predefinedItems:72,utils:73}],72:[function(e,t,n){"use strict";function o(){var e={};return c(A,function(t,n){return e[n]=d(t)}),e}function r(e,t){-1===D.indexOf(e)&&(A[e]=t)}var i;Object.defineProperties(n,{ROW_ABOVE:{get:function(){return v}},ROW_BELOW:{get:function(){return y}},COLUMN_LEFT:{get:function(){return b}},COLUMN_RIGHT:{get:function(){return C}},CLEAR_COLUMN:{get:function(){return _}},REMOVE_ROW:{get:function(){return R}},REMOVE_COLUMN:{get:function(){return S}},UNDO:{get:function(){return E}},REDO:{get:function(){return M}},READ_ONLY:{get:function(){return T}},ALIGNMENT:{get:function(){return O}},SEPARATOR:{get:function(){return k}},ITEMS:{get:function(){return D}},predefinedItems:{get:function(){return o}},addItem:{get:function(){return r}},__esModule:{value:!0}});var s,l,a,u=(s=e("helpers/object"),s&&s.__esModule&&s||{"default":s}),c=u.objectEach,d=u.clone,h=((l=e("helpers/number"),l&&l.__esModule&&l||{"default":l}).rangeEach,a=e("utils"),a&&a.__esModule&&a||{"default":a}),f=h.align,p=h.getAlignmentClasses,g=h.getValidSelection,m=h.checkSelectionConsistency,w=h.markLabelAsSelected,v="row_above",y="row_below",b="col_left",C="col_right",_="clear_column",R="remove_row",S="remove_col",E="undo",M="redo",T="make_read_only",O="alignment",k="---------",D=[v,y,b,C,_,R,S,E,M,T,O,k],A=(i={},Object.defineProperty(i,k,{value:{name:k},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,v,{value:{key:v,name:"Insert row above",callback:function(e,t){this.alter("insert_row",t.start.row)},disabled:function(){var e=g(this);if(!e||this.countRows()>=this.getSettings().maxRows)return!0;var t=this.countRows(),n=[0,e[1],t-1,e[1]];return n.join(",")===e.join(",")&&t>1},hidden:function(){return!this.getSettings().allowInsertRow}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,y,{value:{key:y,name:"Insert row below",callback:function(e,t){this.alter("insert_row",t.end.row+1)},disabled:function(){var e=g(this);if(!e||this.countRows()>=this.getSettings().maxRows)return!0;var t=this.countRows(),n=[0,e[1],t-1,e[1]];return n.join(",")===e.join(",")&&t>1},hidden:function(){return!this.getSettings().allowInsertRow}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,b,{value:{key:b,name:"Insert column on the left",callback:function(e,t){this.alter("insert_col",t.start.col)},disabled:function(){var e=g(this);if(!e)return!0;if(!this.isColumnModificationAllowed())return!0;var t=[e[0],0,e[0],this.countCols()-1],n=t.join(",")==e.join(","),o=1==this.countCols();return e[1]<0||this.countCols()>=this.getSettings().maxCols||!o&&n},hidden:function(){return!this.getSettings().allowInsertColumn}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,C,{value:{key:C,name:"Insert column on the right",callback:function(e,t){this.alter("insert_col",t.end.col+1)},disabled:function(){var e=g(this);if(!e)return!0;if(!this.isColumnModificationAllowed())return!0;var t=[e[0],0,e[0],this.countCols()-1],n=t.join(",")==e.join(","),o=1==this.countCols();return e[1]<0||this.countCols()>=this.getSettings().maxCols||!o&&n},hidden:function(){return!this.getSettings().allowInsertColumn}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,_,{value:{key:_,name:"Clear column",callback:function(e,t){var n=t.start.col;this.countRows()&&this.populateFromArray(0,n,[[null]],Math.max(t.start.row,t.end.row),n)},disabled:function(){var e=g(this);if(!e)return!0;var t=[e[0],0,e[0],this.countCols()-1],n=t.join(",")==e.join(",");return e[1]<0||this.countCols()>=this.getSettings().maxCols||n}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,R,{value:{key:R,name:"Remove row",callback:function(e,t){var n=t.end.row-t.start.row+1;this.alter("remove_row",t.start.row,n)},disabled:function(){var e=g(this);if(!e||this.selection.selectedHeader.cols)return!0;var t=[0,e[1],this.countRows()-1,e[1]];return t.join(",")===e.join(",")},hidden:function(){return!this.getSettings().allowRemoveRow}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,S,{value:{key:S,name:"Remove column",callback:function(e,t){var n=t.end.col-t.start.col+1;this.alter("remove_col",t.start.col,n)},disabled:function(){var e=g(this);if(!e||this.selection.selectedHeader.rows)return!0;if(!this.isColumnModificationAllowed())return!0;var t=[e[0],0,e[0],this.countCols()-1],n=t.join(",")==e.join(",");return e[1]<0||n},hidden:function(){return!this.getSettings().allowRemoveColumn}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,E,{value:{key:E,name:"Undo",callback:function(){this.undo()},disabled:function(){return this.undoRedo&&!this.undoRedo.isUndoAvailable()}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,M,{value:{key:M,name:"Redo",callback:function(){this.redo()},disabled:function(){return this.undoRedo&&!this.undoRedo.isRedoAvailable()}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,T,{value:{key:T,name:function(){var e=this,t="Read only",n=m(this.getSelectedRange(),function(t,n){return e.getCellMeta(t,n).readOnly});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=m(t,function(t,n){return e.getCellMeta(t,n).readOnly});t.forAll(function(t,o){e.getCellMeta(t,o).readOnly=!n}),this.render()},disabled:function(){return!this.getSelectedRange()}},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(i,O,{value:{key:O,name:"Alignment",disabled:function(){return!this.getSelectedRange()},submenu:{items:[{key:O+":left",name:function(){var e=this,t="Left",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htLeft")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){return e.getCellMeta(t,n).className}),o="horizontal",r="htLeft";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1},{key:O+":center",name:function(){var e=this,t="Center",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htCenter")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){
return e.getCellMeta(t,n).className}),o="horizontal",r="htCenter";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1},{key:O+":right",name:function(){var e=this,t="Right",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htRight")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){return e.getCellMeta(t,n).className}),o="horizontal",r="htRight";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1},{key:O+":justify",name:function(){var e=this,t="Justify",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htJustify")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){return e.getCellMeta(t,n).className}),o="horizontal",r="htJustify";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1},{name:k},{key:O+":top",name:function(){var e=this,t="Top",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htTop")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){return e.getCellMeta(t,n).className}),o="vertical",r="htTop";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1},{key:O+":middle",name:function(){var e=this,t="Middle",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htMiddle")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){return e.getCellMeta(t,n).className}),o="vertical",r="htMiddle";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1},{key:O+":bottom",name:function(){var e=this,t="Bottom",n=m(this.getSelectedRange(),function(t,n){var o=e.getCellMeta(t,n).className;return o&&-1!==o.indexOf("htBottom")?!0:void 0});return n&&(t=w(t)),t},callback:function(){var e=this,t=this.getSelectedRange(),n=p(t,function(t,n){return e.getCellMeta(t,n).className}),o="vertical",r="htBottom";this.runHooks("beforeCellAlignment",n,t,o,r),f(t,o,r,function(t,n){return e.getCellMeta(t,n)}),this.render()},disabled:!1}]}},configurable:!0,enumerable:!0,writable:!0}),i)},{"helpers/number":51,"helpers/object":52,utils:73}],73:[function(e,t,n){"use strict";function o(e){return{start:e.getTopLeftCorner(),end:e.getBottomRightCorner()}}function r(e){return E(e,"htSeparator")}function i(e){return E(e,"htSubmenu")}function s(e){return E(e,"htDisabled")}function l(e){return E(e,"htSelectionDisabled")}function a(e){var t=e.getSelected();return t?t[0]<0?null:t:null}function u(e,t){return-1!=e.indexOf(t)?e:(e=e.replace("htTop","").replace("htMiddle","").replace("htBottom","").replace("  ",""),e+=" "+t)}function c(e,t){return-1!=e.indexOf(t)?e:(e=e.replace("htLeft","").replace("htCenter","").replace("htRight","").replace("htJustify","").replace("  ",""),e+=" "+t)}function d(e,t){for(var n={},o=e.from.row;o<=e.to.row;o++)for(var r=e.from.col;r<=e.to.col;r++)n[o]||(n[o]=[]),n[o][r]=t(o,r);return n}function h(e,t,n,o){if(e.from.row==e.to.row&&e.from.col==e.to.col)f(e.from.row,e.from.col,t,n,o);else for(var r=e.from.row;r<=e.to.row;r++)for(var i=e.from.col;i<=e.to.col;i++)f(r,i,t,n,o)}function f(e,t,n,o,r){var i=r(e,t),s=o;i.className&&(s="vertical"===n?u(i.className,o):c(i.className,o)),i.className=s}function p(e,t){var n=!1;return e&&e.forAll(function(e,o){return t(e,o)?(n=!0,!1):void 0}),n}function g(e){return'<span class="selected">'+String.fromCharCode(10003)+"</span>"+e}function m(e,t){return!e.hidden||!("function"==typeof e.hidden&&e.hidden.call(t))}function w(e,t){for(var n=e.slice(0),o=0;o<n.length&&n[o].name===t;)n.shift();return n}function v(e,t){var n=e.slice(0);return n.reverse(),n=w(n,t),n.reverse(),n}function y(e){var t=[];return S(e,function(e,n){n>0?t[t.length-1].name!==e.name&&t.push(e):t.push(e)}),t}function b(e){var t=void 0!==arguments[1]?arguments[1]:M,n=e.slice(0);return n=w(n,t),n=v(n,t),n=y(n)}Object.defineProperties(n,{normalizeSelection:{get:function(){return o}},isSeparator:{get:function(){return r}},hasSubMenu:{get:function(){return i}},isDisabled:{get:function(){return s}},isSelectionDisabled:{get:function(){return l}},getValidSelection:{get:function(){return a}},prepareVerticalAlignClass:{get:function(){return u}},prepareHorizontalAlignClass:{get:function(){return c}},getAlignmentClasses:{get:function(){return d}},align:{get:function(){return h}},checkSelectionConsistency:{get:function(){return p}},markLabelAsSelected:{get:function(){return g}},isItemHidden:{get:function(){return m}},filterSeparators:{get:function(){return b}},__esModule:{value:!0}});var C,_,R,S=(C=e("helpers/array"),C&&C.__esModule&&C||{"default":C}).arrayEach,E=(_=e("helpers/dom/element"),_&&_.__esModule&&_||{"default":_}).hasClass,M=(R=e("predefinedItems"),R&&R.__esModule&&R||{"default":R}).SEPARATOR},{"helpers/array":42,"helpers/dom/element":46,predefinedItems:72}],74:[function(e,t,n){"use strict";Object.defineProperties(n,{ContextMenuCopyPaste:{get:function(){return w}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],d=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}).removeClass,h=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}).arrayEach,f=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).EventManager,p=(l=e("plugins"),l&&l.__esModule&&l||{"default":l}).registerPlugin,g=(a=e("_base"),a&&a.__esModule&&a||{"default":a})["default"],m=(u=e("zeroclipboard"),u&&u.__esModule&&u||{"default":u})["default"],w=function(e){$traceurRuntime.superConstructor(v).call(this,e),this.eventManager=new f(this),this.swfPath=null,this.outsideClickDeselectsCache=null},v=w;$traceurRuntime.createClass(w,{isEnabled:function(){return this.hot.getSettings().contextMenuCopyPaste},enablePlugin:function(){var e=this;if(!this.enabled){"object"==typeof this.hot.getSettings().contextMenuCopyPaste&&(this.swfPath=this.hot.getSettings().contextMenuCopyPaste.swfPath),"undefined"==typeof m&&console.error("To be able to use the Copy/Paste feature from the context menu, you need to manually include ZeroClipboard.js file to your website.");try{new ActiveXObject("ShockwaveFlash.ShockwaveFlash")}catch(t){"undefined"==typeof navigator.mimeTypes["application/x-shockwave-flash"]&&console.error("To be able to use the Copy/Paste feature from the context menu, your browser needs to have Flash Plugin installed.")}this.swfPath&&m.config({swfPath:this.swfPath}),this.hot.addHook("afterContextMenuShow",function(){return e.onAfterContextMenuShow()}),this.hot.addHook("afterContextMenuDefaultOptions",function(t){return e.onAfterContextMenuDefaultOptions(t)}),this.registerEvents(),$traceurRuntime.superGet(this,v.prototype,"enablePlugin").call(this)}},disablePlugin:function(){$traceurRuntime.superGet(this,v.prototype,"disablePlugin").call(this)},registerEvents:function(){var e=this;this.eventManager.addEventListener(document,"mouseenter",function(){return e.removeCurrentClass()}),this.eventManager.addEventListener(document,"mouseleave",function(){return e.removeZeroClipboardClass()})},getCopyValue:function(){return this.hot.copyPaste.setCopyableText(),this.hot.copyPaste.copyPasteInstance.elTextarea.value},onAfterContextMenuDefaultOptions:function(e){e.items.unshift({key:"copy",name:"Copy"},{key:"paste",name:"Paste",callback:function(){this.copyPaste.triggerPaste()}},c.plugins.ContextMenu.SEPARATOR)},onAfterContextMenuShow:function(){var e=this,t=this.hot.getPlugin("contextMenu"),n=t.menu.hotMenu.getSourceData();h(n,function(n,o){if("copy"===n.key){var r=new m(t.menu.hotMenu.getCell(o,0));return r.off(),r.on("copy",function(t){var n=t.clipboardData;n.setData("text/plain",e.getCopyValue()),e.hot.getSettings().outsideClickDeselects=e.outsideClickDeselectsCache}),!1}})},removeCurrentClass:function(){var e=this.hot.getPlugin("contextMenu");if(e.menu.isOpened()){var t=e.menu.hotMenu.rootElement.querySelector("td.current");t&&d(t,"current")}this.outsideClickDeselectsCache=this.hot.getSettings().outsideClickDeselects,this.hot.getSettings().outsideClickDeselects=!1},removeZeroClipboardClass:function(){var e=this.hot.getPlugin("contextMenu");if(e.menu.isOpened()){var t=e.menu.hotMenu.rootElement.querySelector("td.zeroclipboard-is-hover");t&&d(t,"zeroclipboard-is-hover")}this.hot.getSettings().outsideClickDeselects=this.outsideClickDeselectsCache}},{},g),p("contextMenuCopyPaste",w)},{_base:60,browser:23,eventManager:41,"helpers/array":42,"helpers/dom/element":46,plugins:59,zeroclipboard:"zeroclipboard"}],75:[function(e,t,n){"use strict";function o(e){function t(){e.isListening()&&e.selection.empty()}function n(t){var n,o,r,i,s,l,a,u,c,d;if(e.isListening()&&e.selection.isSelected()){n=t,o=y.parse(n),r=e.getSelected(),i=new D(r[0],r[1]),s=new D(r[2],r[3]),l=new A(i,i,s),a=l.getTopLeftCorner(),u=l.getBottomRightCorner(),c=a,d=new D(Math.max(u.row,o.length-1+a.row),Math.max(u.col,o[0].length-1+a.col));var h=s.row-i.row>=o.length-1,f=s.col-i.col>=o[0].length-1;e.addHookOnce("afterChange",function(t,n){var o=t?t.length:0;if(o){var r={row:0,col:0},i=-1;R(t,function(e,n){var s=o>n+1?t[n+1]:null;s&&(h||(r.row=r.row+Math.max(s[0]-e[0]-1,0)),!f&&e[1]>i&&(i=e[1],r.col=r.col+Math.max(s[1]-e[1]-1,0)))}),e.selectCell(c.row,c.col,d.row+r.row,d.col+r.col)}}),e.populateFromArray(c.row,c.col,o,d.row,d.col,"paste",e.getSettings().pasteMode)}}function o(t){if(e.getSelected()&&!(e.getActiveEditor()&&e.getActiveEditor().isOpened()||T(t))){if(_(t.keyCode)){if(e.getSettings().fragmentSelection&&O())return;return r.setCopyableText(),void M(t)}var n=(t.ctrlKey||t.metaKey)&&!t.altKey;t.keyCode==C.A&&n&&e._registerTimeout(setTimeout(k(r.setCopyableText,r),0))}}var r=this;this.copyPasteInstance=v(),this.copyPasteInstance.onCut(t),this.copyPasteInstance.onPaste(n),this.onPaste=n,e.addHook("beforeKeyDown",o),this.destroy=function(){this.copyPasteInstance&&(this.copyPasteInstance.removeCallback(t),this.copyPasteInstance.removeCallback(n),this.copyPasteInstance.destroy(),this.copyPasteInstance=null),e.removeHook("beforeKeyDown",o)},e.addHook("afterDestroy",k(this.destroy,this)),this.triggerPaste=k(this.copyPasteInstance.triggerPaste,this.copyPasteInstance),this.triggerCut=k(this.copyPasteInstance.triggerCut,this.copyPasteInstance),this.setCopyableText=function(){var t=e.getSettings(),n=t.copyRowsLimit,o=t.copyColsLimit,r=e.getSelectedRange(),i=r.getTopLeftCorner(),s=r.getBottomRightCorner(),l=i.row,a=i.col,u=s.row,c=s.col,d=Math.min(u,l+n-1),h=Math.min(c,a+o-1),f=[];f.push({startRow:l,startCol:a,endRow:d,endCol:h}),f=w.hooks.run(e,"modifyCopyableRange",f);var p=this.getRangedCopyableData(f);e.copyPaste.copyPasteInstance.copyable(p),u===d&&c===h||w.hooks.run(e,"afterCopyLimit",u-l+1,c-a+1,n,o)},this.getRangedCopyableData=function(t){var n=[],o=[],r=[];return R(t,function(e){S(e.startRow,e.endRow,function(e){-1===o.indexOf(e)&&o.push(e)}),S(e.startCol,e.endCol,function(e){-1===r.indexOf(e)&&r.push(e)})}),R(o,function(t){var o=[];R(r,function(n){o.push(e.getCopyableData(t,n))}),n.push(o)}),y.stringify(n)}}function r(){var e=this,t=e.getSettings().copyPaste!==!1;t&&!e.copyPaste?e.copyPaste=new o(e):!t&&e.copyPaste&&(e.copyPaste.destroy(),e.copyPaste=null)}Object.defineProperties(n,{CopyPastePlugin:{get:function(){return o}},__esModule:{value:!0}});var i,s,l,a,u,c,d,h,f,p,g,m,w=(i=e("browser"),i&&i.__esModule&&i||{"default":i})["default"],v=(s=e("copyPaste"),s&&s.__esModule&&s||{"default":s})["default"],y=(l=e("SheetClip"),l&&l.__esModule&&l||{"default":l})["default"],b=(a=e("helpers/unicode"),a&&a.__esModule&&a||{"default":a}),C=b.KEY_CODES,_=b.isCtrlKey,R=(u=e("helpers/array"),u&&u.__esModule&&u||{"default":u}).arrayEach,S=(c=e("helpers/number"),c&&c.__esModule&&c||{"default":c}).rangeEach,E=(d=e("helpers/dom/event"),d&&d.__esModule&&d||{"default":d}),M=E.stopImmediatePropagation,T=E.isImmediatePropagationStopped,O=(h=e("helpers/dom/element"),h&&h.__esModule&&h||{"default":h}).getSelectionText,k=(f=e("helpers/function"),f&&f.__esModule&&f||{"default":f}).proxy,D=((p=e("plugins"),p&&p.__esModule&&p||{"default":p}).registerPlugin,(g=e("3rdparty/walkontable/src/cell/coords"),g&&g.__esModule&&g||{"default":g}).WalkontableCellCoords),A=(m=e("3rdparty/walkontable/src/cell/range"),m&&m.__esModule&&m||{"default":m}).WalkontableCellRange;w.hooks.add("afterInit",r),w.hooks.add("afterUpdateSettings",r),w.hooks.register("afterCopyLimit"),w.hooks.register("modifyCopyableRange")},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,SheetClip:"SheetClip",browser:23,copyPaste:"copyPaste","helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/function":49,"helpers/number":51,"helpers/unicode":55,plugins:59}],76:[function(e,t,n){"use strict";function o(){}var r,i,s,l,a,u=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],c=((i=e("plugins"),i&&i.__esModule&&i||{"default":i}).registerPlugin,(s=e("3rdparty/walkontable/src/cell/range"),s&&s.__esModule&&s||{"default":s}).WalkontableCellRange),d=(l=e("3rdparty/walkontable/src/selection"),l&&l.__esModule&&l||{"default":l}).WalkontableSelection,h=function(e){return"boolean"==typeof e&&e===!0?!0:"object"==typeof e&&e.length>0},f=function(){h(this.getSettings().customBorders)&&(this.customBorders||(a=this,this.customBorders=new o))},p=function(e){for(var t=0;t<a.view.wt.selections.length;t++)if(a.view.wt.selections[t].settings.className==e)return t;return-1},g=function(e){var t={row:e.row,col:e.col},n=new d(e,new c(t,t,t)),o=p(e.className);o>=0?a.view.wt.selections[o]=n:a.view.wt.selections.push(n)},m=function(e,t,n){var o=_(e,t);o=R(o,n),this.setCellMeta(e,t,"borders",o),g(o)},w=function(e){for(var t=e.range,n=t.from.row;n<=t.to.row;n++)for(var o=t.from.col;o<=t.to.col;o++){var r=_(n,o),i=0;n==t.from.row&&(i++,e.hasOwnProperty("top")&&(r.top=e.top)),n==t.to.row&&(i++,e.hasOwnProperty("bottom")&&(r.bottom=e.bottom)),o==t.from.col&&(i++,e.hasOwnProperty("left")&&(r.left=e.left)),o==t.to.col&&(i++,e.hasOwnProperty("right")&&(r.right=e.right)),i>0&&(this.setCellMeta(n,o,"borders",r),g(r))}},v=function(e,t){return"border_row"+e+"col"+t},y=function(){return{width:1,color:"#000"}},b=function(){return{hide:!0}},C=function(){return{width:1,color:"#000",cornerVisible:!1}},_=function(e,t){return{className:v(e,t),border:C(),row:e,col:t,top:b(),right:b(),bottom:b(),left:b()}},R=function(e,t){return t.hasOwnProperty("border")&&(e.border=t.border),t.hasOwnProperty("top")&&(e.top=t.top),t.hasOwnProperty("right")&&(e.right=t.right),t.hasOwnProperty("bottom")&&(e.bottom=t.bottom),t.hasOwnProperty("left")&&(e.left=t.left),e},S=function(e){for(var t=document.querySelectorAll("."+e),n=0;n<t.length;n++)if(t[n]&&"TD"!=t[n].nodeName){var o=t[n].parentNode;o.parentNode&&o.parentNode.removeChild(o)}},E=function(e,t){var n=v(e,t);S(n),this.removeCellMeta(e,t,"borders")},M=function(e,t,n,o){var r=this.getCellMeta(e,t).borders;r&&void 0!=r.border||(r=_(e,t)),o?r[n]=b():r[n]=y(),this.setCellMeta(e,t,"borders",r);var i=v(e,t);S(i),g(r),this.render()},T=function(e,t,n){if(e.from.row==e.to.row&&e.from.col==e.to.col)"noBorders"==t?E.call(this,e.from.row,e.from.col):M.call(this,e.from.row,e.from.col,t,n);else switch(t){case"noBorders":for(var o=e.from.col;o<=e.to.col;o++)for(var r=e.from.row;r<=e.to.row;r++)E.call(this,r,o);break;case"top":for(var i=e.from.col;i<=e.to.col;i++)M.call(this,e.from.row,i,t,n);break;case"right":for(var s=e.from.row;s<=e.to.row;s++)M.call(this,s,e.to.col,t);break;case"bottom":for(var l=e.from.col;l<=e.to.col;l++)M.call(this,e.to.row,l,t);break;case"left":for(var a=e.from.row;a<=e.to.row;a++)M.call(this,a,e.from.col,t)}},O=function(e,t){var n=!1;return e.getSelectedRange().forAll(function(o,r){var i=e.getCellMeta(o,r).borders;if(i){if(!t)return n=!0,!1;if(!i[t].hasOwnProperty("hide"))return n=!0,!1}}),n},k=function(e){return'<span class="selected">'+String.fromCharCode(10003)+"</span>"+e},D=function(e){this.getSettings().customBorders&&(e.items.push(u.plugins.ContextMenu.SEPARATOR),e.items.push({key:"borders",name:"Borders",submenu:{items:[{key:"borders:top",name:function(){var e="Top",t=O(this,"top");return t&&(e=k(e)),e},callback:function(){var e=O(this,"top");T.call(this,this.getSelectedRange(),"top",e)},disabled:!1},{key:"borders:right",name:function(){var e="Right",t=O(this,"right");return t&&(e=k(e)),e},callback:function(){var e=O(this,"right");T.call(this,this.getSelectedRange(),"right",e)},disabled:!1},{key:"borders:bottom",name:function(){var e="Bottom",t=O(this,"bottom");return t&&(e=k(e)),e},callback:function(){var e=O(this,"bottom");T.call(this,this.getSelectedRange(),"bottom",e)},disabled:!1},{key:"borders:left",name:function(){var e="Left",t=O(this,"left");return t&&(e=k(e)),e},callback:function(){var e=O(this,"left");T.call(this,this.getSelectedRange(),"left",e)},disabled:!1},{key:"borders:no_borders",name:"Remove border(s)",callback:function(){T.call(this,this.getSelectedRange(),"noBorders")},disabled:function(){return!O(this)}}]}}))};u.hooks.add("beforeInit",f),u.hooks.add("afterContextMenuDefaultOptions",D),u.hooks.add("afterInit",function(){var e=this.getSettings().customBorders;if(e){for(var t=0;t<e.length;t++)e[t].range?w.call(this,e[t]):m.call(this,e[t].row,e[t].col,e[t]);this.render(),this.view.wt.draw(!0)}}),u.CustomBorders=o},{"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/selection":18,browser:23,plugins:59}],77:[function(e,t,n){"use strict";function o(){this.boundaries=null,this.callback=null}Object.defineProperties(n,{DragToScroll:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],a=(i=e("eventManager"),i&&i.__esModule&&i||{"default":i}).eventManager;(s=e("plugins"),s&&s.__esModule&&s||{"default":s}).registerPlugin;l.plugins.DragToScroll=o,o.prototype.setBoundaries=function(e){this.boundaries=e},o.prototype.setCallback=function(e){this.callback=e},o.prototype.check=function(e,t){var n=0,o=0;t<this.boundaries.top?o=t-this.boundaries.top:t>this.boundaries.bottom&&(o=t-this.boundaries.bottom),e<this.boundaries.left?n=e-this.boundaries.left:e>this.boundaries.right&&(n=e-this.boundaries.right),this.callback(n,o)};var u,c=function(e){e.dragToScrollListening=!1;var t=e.view.wt.wtTable.holder;u=new o,t!==window&&(u.setBoundaries(t.getBoundingClientRect()),u.setCallback(function(e,n){0>e?t.scrollLeft-=50:e>0&&(t.scrollLeft+=50),0>n?t.scrollTop-=20:n>0&&(t.scrollTop+=20)}),e.dragToScrollListening=!0)};l.hooks.add("afterInit",function(){var e=this,t=a(this);t.addEventListener(document,"mouseup",function(){e.dragToScrollListening=!1}),t.addEventListener(document,"mousemove",function(t){e.dragToScrollListening&&u.check(t.clientX,t.clientY)})}),l.hooks.add("afterDestroy",function(){a(this).clear()}),l.hooks.add("afterOnCellMouseDown",function(){c(this)}),l.hooks.add("afterOnCellCornerMouseDown",function(){c(this)}),l.plugins.DragToScroll=o},{browser:23,eventManager:41,plugins:59}],78:[function(e,t,n){"use strict";Object.defineProperties(n,{ManualColumnFreeze:{get:function(){return u}},__esModule:{value:!0}});var o,r,i,s=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],l=(r=e("_base"),r&&r.__esModule&&r||{"default":r})["default"],a=(i=e("plugins"),i&&i.__esModule&&i||{"default":i}).registerPlugin,u=function(e){$traceurRuntime.superConstructor(c).call(this,e),this.manualColumnMovePlugin=null,this.frozenColumnsBasePositions=[]},c=u;$traceurRuntime.createClass(u,{isEnabled:function(){return!!this.hot.getSettings().manualColumnFreeze},enablePlugin:function(){var e=this;this.enabled||(this.addHook("modifyCol",function(t){return e.onModifyCol(t)}),this.addHook("afterContextMenuDefaultOptions",function(t){return e.addContextMenuEntry(t)}),$traceurRuntime.superGet(this,c.prototype,"enablePlugin").call(this))},init:function(){$traceurRuntime.superGet(this,c.prototype,"init").call(this),this.fixedColumnsCount=this.hot.getSettings().fixedColumnsLeft},getManualColumnMovePlugin:function(){return this.manualColumnMovePlugin||(this.manualColumnMovePlugin=this.hot.getPlugin("manualColumnMove")),this.manualColumnMovePlugin},onModifyCol:function(e){return this.getManualColumnMovePlugin().isEnabled()?e:this.getLogicalColumnIndex(e)},addContextMenuEntry:function(e){var t=this;e.items.push(s.plugins.ContextMenu.SEPARATOR,{key:"freeze_column",name:function(){var e=t.hot.getSelected()[1];return e>t.fixedColumnsCount-1?"Freeze this column":"Unfreeze this column"},disabled:function(){var e=t.hot.getSelected();return e[1]!==e[3]},callback:function(){var e=t.hot.getSelected()[1];e>t.fixedColumnsCount-1?t.freezeColumn(e):t.unfreezeColumn(e)}})},freezeColumn:function(e){e<=this.fixedColumnsCount-1||(e!==this.getLogicalColumnIndex(e)&&(this.frozenColumnsBasePositions[this.fixedColumnsCount]=e),this.changeColumnPositions(e,this.fixedColumnsCount),this.addFixedColumn(),this.hot.view.wt.wtOverlays.leftOverlay.refresh(),this.hot.view.wt.wtOverlays.adjustElementsSize())},unfreezeColumn:function(e){if(!(e>this.fixedColumnsCount-1)){var t=this.getBestColumnReturnPosition(e);this.changeColumnPositions(e,t),this.removeFixedColumn(),this.hot.view.wt.wtOverlays.leftOverlay.refresh(),this.hot.view.wt.wtOverlays.adjustElementsSize()}},addFixedColumn:function(){this.hot.updateSettings({fixedColumnsLeft:this.fixedColumnsCount+1}),this.fixedColumnsCount++},removeFixedColumn:function(){this.hot.updateSettings({fixedColumnsLeft:this.fixedColumnsCount-1}),this.fixedColumnsCount--},getBestColumnReturnPosition:function(e){var t,n=this.fixedColumnsCount,o=this.getLogicalColumnIndex(n);if(null==this.frozenColumnsBasePositions[e])for(t=this.getLogicalColumnIndex(e);t>o;)n++,o=this.getLogicalColumnIndex(n);else{for(t=this.frozenColumnsBasePositions[e],this.frozenColumnsBasePositions[e]=void 0;t>=o;)n++,o=this.getLogicalColumnIndex(n);n=o}return n-1},getVisibleColumnIndex:function(e){return this.getManualColumnMovePlugin().getVisibleColumnIndex(e)},getLogicalColumnIndex:function(e){return this.getManualColumnMovePlugin().getLogicalColumnIndex(e)},changeColumnPositions:function(e,t){this.getManualColumnMovePlugin().changeColumnPositions(e,t)}},{},l),a("manualColumnFreeze",u)},{_base:60,browser:23,plugins:59}],79:[function(e,t,n){"use strict";Object.defineProperties(n,{ManualColumnMove:{get:function(){return M}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d=(o=e("_base.js"),o&&o.__esModule&&o||{"default":o})["default"],h=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],f=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),p=f.addClass,g=f.hasClass,m=f.removeClass,w=(s=e("helpers/array"),s&&s.__esModule&&s||{"default":s}),v=w.arrayEach,y=w.arrayMap,b=(l=e("helpers/number"),l&&l.__esModule&&l||{"default":l}).rangeEach,C=(a=e("eventManager"),a&&a.__esModule&&a||{"default":a}).eventManager,_=(u=e("helpers/dom/event"),u&&u.__esModule&&u||{"default":u}),R=_.pageX,S=(_.pageY,(c=e("plugins"),c&&c.__esModule&&c||{"default":c}).registerPlugin),E=new WeakMap,M=function(e){var t=this;$traceurRuntime.superConstructor(T).call(this,e),E.set(this,{guideClassName:"manualColumnMoverGuide",handleClassName:"manualColumnMover",startOffset:null,pressed:null,startCol:null,endCol:null,currentCol:null,startX:null,startY:null}),this.guideElement=null,this.handleElement=null,this.currentTH=null,this.columnPositions=[],this.eventManager=C(this),this.addHook("init",function(){return t.onInit()})},T=M;$traceurRuntime.createClass(M,{isEnabled:function(){return!!this.hot.getSettings().manualColumnMove},enablePlugin:function(){var e=this,t=E.get(this),n=this.hot.getSettings().manualColumnMove,o=this.loadManualColumnPositions();this.handleElement=document.createElement("DIV"),this.handleElement.className=t.handleClassName,this.guideElement=document.createElement("DIV"),this.guideElement.className=t.guideClassName,this.addHook("modifyCol",function(t){return e.onModifyCol(t)}),this.addHook("unmodifyCol",function(t){return e.onUnmodifyCol(t)}),this.addHook("afterRemoveCol",function(t,n){return e.onAfterRemoveCol(t,n)}),this.addHook("afterCreateCol",function(t,n){return e.onAfterCreateCol(t,n)}),this.registerEvents(),"undefined"!=typeof o?this.columnPositions=o:Array.isArray(n)?this.columnPositions=n:n&&void 0!==this.columnPositions||(this.columnPositions=[]),$traceurRuntime.superGet(this,T.prototype,"enablePlugin").call(this)},updatePlugin:function(){this.disablePlugin(),this.enablePlugin(),$traceurRuntime.superGet(this,T.prototype,"updatePlugin").call(this)},disablePlugin:function(){var e=this.hot.getSettings().manualColumnMove;Array.isArray(e)&&(this.unregisterEvents(),this.columnPositions=[]),$traceurRuntime.superGet(this,T.prototype,"disablePlugin").call(this)},registerEvents:function(){var e=this;this.eventManager.addEventListener(this.hot.rootElement,"mouseover",function(t){return e.onMouseOver(t)}),this.eventManager.addEventListener(this.hot.rootElement,"mousedown",function(t){return e.onMouseDown(t)}),this.eventManager.addEventListener(window,"mousemove",function(t){return e.onMouseMove(t)}),this.eventManager.addEventListener(window,"mouseup",function(t){return e.onMouseUp(t)})},unregisterEvents:function(){this.eventManager.clear()},saveManualColumnPositions:function(){h.hooks.run(this.hot,"persistentStateSave","manualColumnPositions",this.columnPositions)},loadManualColumnPositions:function(){var e={};return h.hooks.run(this.hot,"persistentStateLoad","manualColumnPositions",e),e.value},completeSettingsArray:function(){var e=this,t=this.hot.countCols();this.columnPositions.length!==t&&b(0,t-1,function(t){-1===e.columnPositions.indexOf(t)&&e.columnPositions.push(t)})},setupHandlePosition:function(e){var t=E.get(this),n=this.hot.view.wt.wtTable.getCoords(e).col;if(this.currentTH=e,n>=0){var o=this.currentTH.getBoundingClientRect();t.currentCol=n,t.startOffset=o.left,this.handleElement.style.top=o.top+"px",this.handleElement.style.left=t.startOffset+"px",this.hot.rootElement.appendChild(this.handleElement)}},refreshHandlePosition:function(e,t){var n=e.getBoundingClientRect(),o=6;t>0?this.handleElement.style.left=n.left+n.width-o+"px":this.handleElement.style.left=n.left+"px"},setupGuidePosition:function(){var e=this.currentTH.getBoundingClientRect(),t=E.get(this);p(this.handleElement,"active"),p(this.guideElement,"active"),this.guideElement.style.width=e.width+"px",this.guideElement.style.height=this.hot.view.maximumVisibleElementHeight(0)+"px",this.guideElement.style.top=this.handleElement.style.top,this.guideElement.style.left=t.startOffset+"px",this.hot.rootElement.appendChild(this.guideElement)},refreshGuidePosition:function(e){var t=E.get(this);this.guideElement.style.left=t.startOffset+e+"px"},hideHandleAndGuide:function(){m(this.handleElement,"active"),m(this.guideElement,"active")},checkColumnHeader:function(e){if(e!=this.hot.rootElement){var t=e.parentNode;return"THEAD"===t.tagName?!0:this.checkColumnHeader(t)}return!1},createPositionData:function(e){var t=this.columnPositions;t.length<e&&b(t.length,e-1,function(e){t[e]=e})},getTHFromTargetElement:function(e){return"TABLE"!=e.tagName?"TH"==e.tagName?e:this.getTHFromTargetElement(e.parentNode):null},changeColumnPositions:function(e,t){var n=Math.max(e,t);n>this.columnPositions.length-1&&this.createPositionData(n+1),this.columnPositions.splice(t,0,this.columnPositions.splice(e,1)[0])},getVisibleColumnIndex:function(e){return e>this.columnPositions.length-1&&this.createPositionData(e),this.columnPositions.indexOf(e)},getLogicalColumnIndex:function(e){return this.columnPositions[e]},onMouseOver:function(e){var t=E.get(this);if(this.checkColumnHeader(e.target)){var n=this.getTHFromTargetElement(e.target);if(n)if(t.pressed){var o=this.hot.view.wt.wtTable.getCoords(n).col;o>=0&&(t.endCol=o,this.refreshHandlePosition(n,t.endCol-t.startCol))}else this.setupHandlePosition(n)}},onMouseDown:function(e){var t=E.get(this);g(e.target,t.handleClassName)&&(t.startX=R(e),this.setupGuidePosition(),t.pressed=this.hot,t.startCol=t.currentCol,t.endCol=t.currentCol)},onMouseMove:function(e){var t=E.get(this);t.pressed&&this.refreshGuidePosition(R(e)-t.startX)},onMouseUp:function(e){var t=E.get(this);t.pressed&&(this.hideHandleAndGuide(),t.pressed=!1,this.createPositionData(this.hot.countCols()),this.changeColumnPositions(t.startCol,t.endCol),h.hooks.run(this.hot,"beforeColumnMove",t.startCol,t.endCol),this.hot.forceFullRender=!0,this.hot.view.render(),this.saveManualColumnPositions(),h.hooks.run(this.hot,"afterColumnMove",t.startCol,t.endCol),this.setupHandlePosition(this.currentTH))},onModifyCol:function(e){return-1==typeof this.getVisibleColumnIndex(e)&&this.createPositionData(e+1),this.getLogicalColumnIndex(e)},onUnmodifyCol:function(e){return-1==typeof this.getVisibleColumnIndex(e)&&this.createPositionData(e+1),this.getVisibleColumnIndex(e)},onAfterRemoveCol:function(e,t){if(this.isEnabled()){var n,o=this.columnPositions;n=o.splice(e,t),o=y(o,function(e,t){var o=e;return v(n,function(t,n){e>t&&o--}),o}),this.columnPositions=o}},onAfterCreateCol:function(e,t){if(this.isEnabled()){var n=this.columnPositions;if(n.length){var o=[];b(0,t-1,function(t){o.push(e+t)}),e>=n.length?n.concat(o):(n=y(n,function(n,o){return n>=e?n+t:n}),n.splice.apply(n,[e,0].concat(o))),this.columnPositions=n}}},onInit:function(){this.completeSettingsArray()}},{},d),S("manualColumnMove",M),h.hooks.register("beforeColumnMove"),h.hooks.register("afterColumnMove"),h.hooks.register("unmodifyCol")},{"_base.js":60,browser:23,eventManager:41,"helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/number":51,plugins:59}],80:[function(e,t,n){"use strict";Object.defineProperties(n,{ManualColumnResize:{get:function(){return R}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],h=(r=e("_base.js"),r&&r.__esModule&&r||{"default":r})["default"],f=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),p=f.addClass,g=f.hasClass,m=f.removeClass,w=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).eventManager,v=(l=e("helpers/dom/event"),l&&l.__esModule&&l||{"default":l}),y=v.pageX,b=(v.pageY,(a=e("helpers/array"),a&&a.__esModule&&a||{"default":a}).arrayEach),C=(u=e("helpers/number"),u&&u.__esModule&&u||{"default":u}).rangeEach,_=(c=e("plugins"),c&&c.__esModule&&c||{"default":c}).registerPlugin,R=function(e){$traceurRuntime.superConstructor(S).call(this,e),this.currentTH=null,this.currentCol=null,this.selectedCols=[],this.currentWidth=null,this.newSize=null,this.startY=null,this.startWidth=null,this.startOffset=null,this.handle=document.createElement("DIV"),this.guide=document.createElement("DIV"),this.eventManager=w(this),this.pressed=null,this.dblclick=0,this.autoresizeTimeout=null,this.manualColumnWidths=[],p(this.handle,"manualColumnResizer"),p(this.guide,"manualColumnResizerGuide")},S=R;$traceurRuntime.createClass(R,{isEnabled:function(){return this.hot.getSettings().manualColumnResize},enablePlugin:function(){var e=this;if(!this.enabled){this.manualColumnWidths=[];var t=this.hot.getSettings().manualColumnResize,n=this.loadManualColumnWidths();this.addHook("modifyColWidth",function(t,n){return e.onModifyColWidth(t,n)}),this.addHook("beforeStretchingColumnWidth",function(t,n){return e.onBeforeStretchingColumnWidth(t,n)}),"undefined"!=typeof n?this.manualColumnWidths=n:Array.isArray(t)?this.manualColumnWidths=t:this.manualColumnWidths=[],d.hooks.register("beforeColumnResize"),d.hooks.register("afterColumnResize"),this.bindEvents(),$traceurRuntime.superGet(this,S.prototype,"enablePlugin").call(this)}},updatePlugin:function(){var e=this.hot.getSettings().manualColumnResize;
Array.isArray(e)?this.manualColumnWidths=e:e||(this.manualColumnWidths=[])},disablePlugin:function(){$traceurRuntime.superGet(this,S.prototype,"disablePlugin").call(this)},saveManualColumnWidths:function(){this.hot.runHooks("persistentStateSave","manualColumnWidths",this.manualColumnWidths)},loadManualColumnWidths:function(){var e={};return this.hot.runHooks("persistentStateLoad","manualColumnWidths",e),e.value},setupHandlePosition:function(e){var t=this;if(!e.parentNode)return!1;this.currentTH=e;var n=this.hot.view.wt.wtTable.getCoords(e).col;if(n>=0){var o=this.currentTH.getBoundingClientRect();if(this.currentCol=n,this.selectedCols=[],this.hot.selection.isSelected()&&this.hot.selection.selectedHeader.cols){var r=this.hot.getSelectedRange(),i=r.from,s=r.to,l=i.col,a=s.col;l>=a&&(l=s.col,a=i.col),this.currentCol>=l&&this.currentCol<=a?C(l,a,function(e){return t.selectedCols.push(e)}):this.selectedCols.push(this.currentCol)}else this.selectedCols.push(this.currentCol);this.startOffset=o.left-6,this.startWidth=parseInt(o.width,10),this.handle.style.top=o.top+"px",this.handle.style.left=this.startOffset+this.startWidth+"px",this.hot.rootElement.appendChild(this.handle)}},refreshHandlePosition:function(){this.handle.style.left=this.startOffset+this.currentWidth+"px"},setupGuidePosition:function(){p(this.handle,"active"),p(this.guide,"active"),this.guide.style.top=this.handle.style.top,this.guide.style.left=this.handle.style.left,this.guide.style.height=this.hot.view.maximumVisibleElementHeight(0)+"px",this.hot.rootElement.appendChild(this.guide)},refreshGuidePosition:function(){this.guide.style.left=this.handle.style.left},hideHandleAndGuide:function(){m(this.handle,"active"),m(this.guide,"active")},checkIfColumnHeader:function(e){if(e!=this.hot.rootElement){var t=e.parentNode;return"THEAD"===t.tagName?!0:this.checkIfColumnHeader(t)}return!1},getTHFromTargetElement:function(e){return"TABLE"!=e.tagName?"TH"==e.tagName?e:this.getTHFromTargetElement(e.parentNode):null},onMouseOver:function(e){if(this.checkIfColumnHeader(e.target)){var t=this.getTHFromTargetElement(e.target);if(!t)return;var n=t.getAttribute("colspan");!t||null!==n&&1!==n||this.pressed||this.setupHandlePosition(t)}},afterMouseDownTimeout:function(){var e=this,t=function(){e.hot.forceFullRender=!0,e.hot.view.render(),e.hot.view.wt.wtOverlays.adjustElementsSize(!0)},n=function(n,o){var r=e.hot.runHooks("beforeColumnResize",n,e.newSize,!0);void 0!==r&&(e.newSize=r),"all"===e.hot.getSettings().stretchH?e.clearManualSize(n):e.setManualSize(n,e.newSize),o&&t(),e.saveManualColumnWidths(),e.hot.runHooks("afterColumnResize",n,e.newSize,!0)};if(this.dblclick>=2){var o=this.selectedCols.length;o>1?(b(this.selectedCols,function(e){n(e)}),t()):b(this.selectedCols,function(e){n(e,!0)})}this.dblclick=0,this.autoresizeTimeout=null},onMouseDown:function(e){var t=this;g(e.target,"manualColumnResizer")&&(this.setupGuidePosition(),this.pressed=this.hot,null===this.autoresizeTimeout&&(this.autoresizeTimeout=setTimeout(function(){return t.afterMouseDownTimeout()},500),this.hot._registerTimeout(this.autoresizeTimeout)),this.dblclick++,this.startX=y(e),this.newSize=this.startWidth)},onMouseMove:function(e){var t=this;this.pressed&&(this.currentWidth=this.startWidth+(y(e)-this.startX),b(this.selectedCols,function(e){t.newSize=t.setManualSize(e,t.currentWidth)}),this.refreshHandlePosition(),this.refreshGuidePosition())},onMouseUp:function(e){var t=this,n=function(){t.hot.forceFullRender=!0,t.hot.view.render(),t.hot.view.wt.wtOverlays.adjustElementsSize(!0)},o=function(e,o){t.hot.runHooks("beforeColumnResize",e,t.newSize),o&&n(),t.saveManualColumnWidths(),t.hot.runHooks("afterColumnResize",e,t.newSize)};if(this.pressed){if(this.hideHandleAndGuide(),this.pressed=!1,this.newSize!=this.startWidth){var r=this.selectedCols.length;r>1?(b(this.selectedCols,function(e){o(e)}),n()):b(this.selectedCols,function(e){o(e,!0)})}this.setupHandlePosition(this.currentTH)}},bindEvents:function(){var e=this;this.eventManager.addEventListener(this.hot.rootElement,"mouseover",function(t){return e.onMouseOver(t)}),this.eventManager.addEventListener(this.hot.rootElement,"mousedown",function(t){return e.onMouseDown(t)}),this.eventManager.addEventListener(window,"mousemove",function(t){return e.onMouseMove(t)}),this.eventManager.addEventListener(window,"mouseup",function(t){return e.onMouseUp(t)})},setManualSize:function(e,t){return t=Math.max(t,20),e=this.hot.runHooks("modifyCol",e),this.manualColumnWidths[e]=t,t},clearManualSize:function(e){e=this.hot.runHooks("modifyCol",e),this.manualColumnWidths[e]=void 0},onModifyColWidth:function(e,t){return this.enabled&&(t=this.hot.runHooks("modifyCol",t),this.hot.getSettings().manualColumnResize&&this.manualColumnWidths[t])?this.manualColumnWidths[t]:e},onBeforeStretchingColumnWidth:function(e,t){var n=this.manualColumnWidths[t];return void 0===n&&(n=e),n}},{},h),_("manualColumnResize",R)},{"_base.js":60,browser:23,eventManager:41,"helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/number":51,plugins:59}],81:[function(e,t,n){"use strict";Object.defineProperties(n,{ManualRowMove:{get:function(){return M}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d=(o=e("_base.js"),o&&o.__esModule&&o||{"default":o})["default"],h=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],f=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),p=f.addClass,g=f.hasClass,m=f.removeClass,w=(s=e("helpers/array"),s&&s.__esModule&&s||{"default":s}),v=w.arrayEach,y=w.arrayMap,b=(l=e("helpers/number"),l&&l.__esModule&&l||{"default":l}).rangeEach,C=(a=e("eventManager"),a&&a.__esModule&&a||{"default":a}).eventManager,_=(u=e("helpers/dom/event"),u&&u.__esModule&&u||{"default":u}),R=(_.pageX,_.pageY),S=(c=e("plugins"),c&&c.__esModule&&c||{"default":c}).registerPlugin,E=new WeakMap,M=function(e){$traceurRuntime.superConstructor(T).call(this,e),E.set(this,{guideClassName:"manualRowMoverGuide",handleClassName:"manualRowMover",startOffset:null,pressed:null,startRow:null,endRow:null,currentRow:null,startX:null,startY:null}),this.guideElement=null,this.handleElement=null,this.currentTH=null,this.rowPositions=[],this.eventManager=C(this)},T=M;$traceurRuntime.createClass(M,{isEnabled:function(){return!!this.hot.getSettings().manualRowMove},enablePlugin:function(){var e=this,t=E.get(this),n=this.hot.getSettings().manualRowMove,o=this.loadManualRowPositions();this.handleElement=document.createElement("DIV"),this.handleElement.className=t.handleClassName,this.guideElement=document.createElement("DIV"),this.guideElement.className=t.guideClassName,this.addHook("modifyRow",function(t){return e.onModifyRow(t)}),this.addHook("afterRemoveRow",function(t,n){return e.onAfterRemoveRow(t,n)}),this.addHook("afterCreateRow",function(t,n){return e.onAfterCreateRow(t,n)}),this.addHook("init",function(){return e.onInit()}),this.registerEvents(),"undefined"!=typeof o?this.rowPositions=o:Array.isArray(n)?this.rowPositions=n:n&&void 0!==this.rowPositions||(this.rowPositions=[]),$traceurRuntime.superGet(this,T.prototype,"enablePlugin").call(this)},updatePlugin:function(){this.disablePlugin(),this.enablePlugin(),$traceurRuntime.superGet(this,T.prototype,"updatePlugin").call(this)},disablePlugin:function(){var e=this.hot.getSettings().manualRowMove;Array.isArray(e)&&(this.unregisterEvents(),this.rowPositions=[]),$traceurRuntime.superGet(this,T.prototype,"disablePlugin").call(this)},registerEvents:function(){var e=this;this.eventManager.addEventListener(this.hot.rootElement,"mouseover",function(t){return e.onMouseOver(t)}),this.eventManager.addEventListener(this.hot.rootElement,"mousedown",function(t){return e.onMouseDown(t)}),this.eventManager.addEventListener(window,"mousemove",function(t){return e.onMouseMove(t)}),this.eventManager.addEventListener(window,"mouseup",function(t){return e.onMouseUp(t)})},unregisterEvents:function(){this.eventManager.clear()},saveManualRowPositions:function(){h.hooks.run(this.hot,"persistentStateSave","manualRowPositions",this.rowPositions)},loadManualRowPositions:function(){var e={};return h.hooks.run(this.hot,"persistentStateLoad","manualRowPositions",e),e.value},completeSettingsArray:function(){var e=this,t=this.hot.countRows();this.rowPositions.length!==t&&b(0,t-1,function(t){-1===e.rowPositions.indexOf(t)&&e.rowPositions.push(t)})},setupHandlePosition:function(e){var t=E.get(this),n=this.hot.view.wt.wtTable.getCoords(e).row;if(this.currentTH=e,n>=0){var o=this.currentTH.getBoundingClientRect();t.currentRow=n,t.startOffset=o.top,this.handleElement.style.top=t.startOffset+"px",this.handleElement.style.left=o.left+"px",this.hot.rootElement.appendChild(this.handleElement)}},refreshHandlePosition:function(e,t){var n=e.getBoundingClientRect(),o=6;t>0?this.handleElement.style.top=n.top+n.height-o+"px":this.handleElement.style.top=n.top+"px"},setupGuidePosition:function(){var e=this.currentTH.getBoundingClientRect(),t=E.get(this);p(this.handleElement,"active"),p(this.guideElement,"active"),this.guideElement.style.height=e.height+"px",this.guideElement.style.width=this.hot.view.maximumVisibleElementWidth(0)+"px",this.guideElement.style.top=t.startOffset+"px",this.guideElement.style.left=this.handleElement.style.left,this.hot.rootElement.appendChild(this.guideElement)},refreshGuidePosition:function(e){var t=E.get(this);this.guideElement.style.top=t.startOffset+e+"px"},hideHandleAndGuide:function(){m(this.handleElement,"active"),m(this.guideElement,"active")},checkRowHeader:function(e){if(e!=this.hot.rootElement){var t=e.parentNode;return"TBODY"===t.tagName?!0:this.checkRowHeader(t)}return!1},createPositionData:function(e){var t=this.rowPositions;t.length<e&&b(t.length,e-1,function(e){t[e]=e})},getTHFromTargetElement:function(e){return"TABLE"!=e.tagName?"TH"==e.tagName?e:this.getTHFromTargetElement(e.parentNode):null},changeRowPositions:function(e,t){var n=Math.max(e,t);n>this.rowPositions.length-1&&this.createPositionData(n+1),this.rowPositions.splice(t,0,this.rowPositions.splice(e,1)[0])},getVisibleRowIndex:function(e){return e>this.rowPositions.length-1&&this.createPositionData(e),this.rowPositions.indexOf(e)},getLogicalRowIndex:function(e){return this.rowPositions[e]},onMouseOver:function(e){var t=E.get(this);if(this.checkRowHeader(e.target)){var n=this.getTHFromTargetElement(e.target);n&&(t.pressed?(t.endRow=this.hot.view.wt.wtTable.getCoords(n).row,this.refreshHandlePosition(n,t.endRow-t.startRow)):this.setupHandlePosition(n))}},onMouseDown:function(e){var t=E.get(this);g(e.target,t.handleClassName)&&(t.startY=R(e),this.setupGuidePosition(),t.pressed=this.hot,t.startRow=t.currentRow,t.endRow=t.currentRow)},onMouseMove:function(e){var t=E.get(this);t.pressed&&this.refreshGuidePosition(R(e)-t.startY)},onMouseUp:function(e){var t=E.get(this);t.pressed&&(this.hideHandleAndGuide(),t.pressed=!1,this.createPositionData(this.hot.countRows()),this.changeRowPositions(t.startRow,t.endRow),h.hooks.run(this.hot,"beforeRowMove",t.startRow,t.endRow),this.hot.forceFullRender=!0,this.hot.view.render(),this.saveManualRowPositions(),h.hooks.run(this.hot,"afterRowMove",t.startRow,t.endRow),this.setupHandlePosition(this.currentTH))},onModifyRow:function(e){return"undefined"==typeof this.getVisibleRowIndex(e)&&this.createPositionData(e+1),this.getLogicalRowIndex(e)},onAfterRemoveRow:function(e,t){if(this.isEnabled()){var n,o=this.rowPositions;n=o.splice(e,t),o=y(o,function(e,t){var o=e;return v(n,function(t,n){e>t&&o--}),o}),this.rowPositions=o}},onAfterCreateRow:function(e,t){if(this.isEnabled()){var n=this.rowPositions;if(n.length){for(var o=[],r=0;t>r;r++)o.push(e+r);e>=n.length?n.concat(o):(n=y(n,function(n,o){return n>=e?n+t:n}),n.splice.apply(n,[e,0].concat(o))),this.rowPositions=n}}},onInit:function(){this.completeSettingsArray()}},{},d),S("ManualRowMove",M),h.hooks.register("beforeRowMove"),h.hooks.register("afterRowMove")},{"_base.js":60,browser:23,eventManager:41,"helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/number":51,plugins:59}],82:[function(e,t,n){"use strict";Object.defineProperties(n,{ManualRowResize:{get:function(){return R}},__esModule:{value:!0}});var o,r,i,s,l,a,u,c,d=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],h=(r=e("_base.js"),r&&r.__esModule&&r||{"default":r})["default"],f=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),p=f.addClass,g=f.hasClass,m=f.removeClass,w=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).eventManager,v=(l=e("helpers/dom/event"),l&&l.__esModule&&l||{"default":l}),y=(v.pageX,v.pageY),b=(a=e("helpers/array"),a&&a.__esModule&&a||{"default":a}).arrayEach,C=(u=e("helpers/number"),u&&u.__esModule&&u||{"default":u}).rangeEach,_=(c=e("plugins"),c&&c.__esModule&&c||{"default":c}).registerPlugin,R=function(e){$traceurRuntime.superConstructor(S).call(this,e),this.currentTH=null,this.currentRow=null,this.selectedRows=[],this.currentHeight=null,this.newSize=null,this.startY=null,this.startHeight=null,this.startOffset=null,this.handle=document.createElement("DIV"),this.guide=document.createElement("DIV"),this.eventManager=w(this),this.pressed=null,this.dblclick=0,this.autoresizeTimeout=null,this.manualRowHeights=[],p(this.handle,"manualRowResizer"),p(this.guide,"manualRowResizerGuide")},S=R;$traceurRuntime.createClass(R,{isEnabled:function(){return this.hot.getSettings().manualRowResize},enablePlugin:function(){var e=this;if(!this.enabled){this.manualRowHeights=[];var t=this.hot.getSettings().manualRowResize,n=this.loadManualRowHeights();"undefined"!=typeof n?this.manualRowHeights=n:Array.isArray(t)?this.manualRowHeights=t:this.manualRowHeights=[],this.addHook("modifyRowHeight",function(t,n){return e.onModifyRowHeight(t,n)}),d.hooks.register("beforeRowResize"),d.hooks.register("afterRowResize"),this.bindEvents(),$traceurRuntime.superGet(this,S.prototype,"enablePlugin").call(this)}},updatePlugin:function(){var e=this.hot.getSettings().manualRowResize;Array.isArray(e)?this.manualRowHeights=e:e||(this.manualRowHeights=[])},disablePlugin:function(){$traceurRuntime.superGet(this,S.prototype,"disablePlugin").call(this)},saveManualRowHeights:function(){this.hot.runHooks("persistentStateSave","manualRowHeights",this.manualRowHeights)},loadManualRowHeights:function(){var e={};return this.hot.runHooks("persistentStateLoad","manualRowHeights",e),e.value},setupHandlePosition:function(e){var t=this;this.currentTH=e;var n=this.hot.view.wt.wtTable.getCoords(e).row;if(n>=0){var o=this.currentTH.getBoundingClientRect();if(this.currentRow=n,this.selectedRows=[],this.hot.selection.isSelected()&&this.hot.selection.selectedHeader.rows){var r=this.hot.getSelectedRange(),i=r.from,s=r.to,l=i.row,a=s.row;l>=a&&(l=s.row,a=i.row),this.currentRow>=l&&this.currentRow<=a?C(l,a,function(e){return t.selectedRows.push(e)}):this.selectedRows.push(this.currentRow)}else this.selectedRows.push(this.currentRow);this.startOffset=o.top-6,this.startHeight=parseInt(o.height,10),this.handle.style.left=o.left+"px",this.handle.style.top=this.startOffset+this.startHeight+"px",this.hot.rootElement.appendChild(this.handle)}},refreshHandlePosition:function(){this.handle.style.top=this.startOffset+this.currentHeight+"px"},setupGuidePosition:function(){p(this.handle,"active"),p(this.guide,"active"),this.guide.style.top=this.handle.style.top,this.guide.style.left=this.handle.style.left,this.guide.style.width=this.hot.view.maximumVisibleElementWidth(0)+"px",this.hot.rootElement.appendChild(this.guide)},refreshGuidePosition:function(){this.guide.style.top=this.handle.style.top},hideHandleAndGuide:function(){m(this.handle,"active"),m(this.guide,"active")},checkIfRowHeader:function(e){if(e!=this.hot.rootElement){var t=e.parentNode;return"TBODY"===t.tagName?!0:this.checkIfRowHeader(t)}return!1},getTHFromTargetElement:function(e){return"TABLE"!=e.tagName?"TH"==e.tagName?e:this.getTHFromTargetElement(e.parentNode):null},onMouseOver:function(e){if(this.checkIfRowHeader(e.target)){var t=this.getTHFromTargetElement(e.target);t&&(this.pressed||this.setupHandlePosition(t))}},afterMouseDownTimeout:function(){var e=this,t=function(){e.hot.forceFullRender=!0,e.hot.view.render(),e.hot.view.wt.wtOverlays.adjustElementsSize(!0)},n=function(n,o){var r=e.hot.runHooks("beforeRowResize",n,e.newSize,!0);void 0!==r&&(e.newSize=r),e.setManualSize(n,e.newSize),o&&t(),e.hot.runHooks("afterRowResize",n,e.newSize,!0)};if(this.dblclick>=2){var o=this.selectedRows.length;o>1?(b(this.selectedRows,function(e){n(e)}),t()):b(this.selectedRows,function(e){n(e,!0)})}this.dblclick=0,this.autoresizeTimeout=null},onMouseDown:function(e){var t=this;g(e.target,"manualRowResizer")&&(this.setupGuidePosition(),this.pressed=this.hot,null==this.autoresizeTimeout&&(this.autoresizeTimeout=setTimeout(function(){return t.afterMouseDownTimeout()},500),this.hot._registerTimeout(this.autoresizeTimeout)),this.dblclick++,this.startY=y(e),this.newSize=this.startHeight)},onMouseMove:function(e){var t=this;this.pressed&&(this.currentHeight=this.startHeight+(y(e)-this.startY),b(this.selectedRows,function(e){t.newSize=t.setManualSize(e,t.currentHeight)}),this.refreshHandlePosition(),this.refreshGuidePosition())},onMouseUp:function(e){var t=this,n=function(){t.hot.forceFullRender=!0,t.hot.view.render(),t.hot.view.wt.wtOverlays.adjustElementsSize(!0)},o=function(e,o){t.hot.runHooks("beforeRowResize",e,t.newSize),o&&n(),t.saveManualRowHeights(),t.hot.runHooks("afterRowResize",e,t.newSize)};if(this.pressed){if(this.hideHandleAndGuide(),this.pressed=!1,this.newSize!=this.startHeight){var r=this.selectedRows.length;r>1?(b(this.selectedRows,function(e){o(e)}),n()):b(this.selectedRows,function(e){o(e,!0)})}this.setupHandlePosition(this.currentTH)}},bindEvents:function(){var e=this;this.eventManager.addEventListener(this.hot.rootElement,"mouseover",function(t){return e.onMouseOver(t)}),this.eventManager.addEventListener(this.hot.rootElement,"mousedown",function(t){return e.onMouseDown(t)}),this.eventManager.addEventListener(window,"mousemove",function(t){return e.onMouseMove(t)}),this.eventManager.addEventListener(window,"mouseup",function(t){return e.onMouseUp(t)})},setManualSize:function(e,t){return e=this.hot.runHooks("modifyRow",e),this.manualRowHeights[e]=t,t},onModifyRowHeight:function(e,t){if(this.enabled){var n=this.hot.getPlugin("autoRowSize"),o=n?n.heights[t]:null;t=this.hot.runHooks("modifyRow",t);var r=this.manualRowHeights[t];if(void 0!==r&&(r===o||r>(e||0)))return r}return e}},{},h),_("manualRowResize",R)},{"_base.js":60,browser:23,eventManager:41,"helpers/array":42,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/number":51,plugins:59}],83:[function(e,t,n){"use strict";function o(){var e=[];return e.getInfo=function(e,t){for(var n=0,o=this.length;o>n;n++)if(this[n].row<=e&&this[n].row+this[n].rowspan-1>=e&&this[n].col<=t&&this[n].col+this[n].colspan-1>=t)return this[n]},e.setInfo=function(e){for(var t=0,n=this.length;n>t;t++)if(this[t].row===e.row&&this[t].col===e.col)return void(this[t]=e);this.push(e)},e.removeInfo=function(e,t){for(var n=0,o=this.length;o>n;n++)if(this[n].row===e&&this[n].col===t){this.splice(n,1);break}},e}function r(e){if(this.mergedCellInfoCollection=new o,Array.isArray(e))for(var t=0,n=e.length;n>t;t++)this.mergedCellInfoCollection.setInfo(e[t])}function i(e,t){var n=this.getSettings().mergeCells;if(n&&!this.selection.isMultiple()){var o=this.mergeCells.mergedCellInfoCollection.getInfo(e[0],e[1]);o&&(e[0]=o.row,e[1]=o.col,e[2]=o.row+o.rowspan-1,e[3]=o.col+o.colspan-1)}}function s(e,t){this.mergeCells&&this.mergeCells.shiftCollection("right",e,t)}function l(e,t){this.mergeCells&&this.mergeCells.shiftCollection("left",e,t)}function a(e,t){this.mergeCells&&this.mergeCells.shiftCollection("down",e,t)}function u(e,t){this.mergeCells&&this.mergeCells.shiftCollection("up",e,t)}Object.defineProperties(n,{MergeCells:{get:function(){return r}},__esModule:{value:!0}});var c,d,h,f,p,g,m=(c=e("browser"),c&&c.__esModule&&c||{"default":c})["default"],w=((d=e("plugins"),d&&d.__esModule&&d||{"default":d}).registerPlugin,(h=e("helpers/dom/event"),h&&h.__esModule&&h||{"default":h}).stopImmediatePropagation),v=(f=e("3rdparty/walkontable/src/cell/coords"),f&&f.__esModule&&f||{"default":f}).WalkontableCellCoords,y=(p=e("3rdparty/walkontable/src/cell/range"),p&&p.__esModule&&p||{"default":p}).WalkontableCellRange,b=(g=e("3rdparty/walkontable/src/table"),g&&g.__esModule&&g||{"default":g}).WalkontableTable;r.prototype.canMergeRange=function(e){return!e.isSingle()},r.prototype.mergeRange=function(e){if(this.canMergeRange(e)){var t=e.getTopLeftCorner(),n=e.getBottomRightCorner(),o={};o.row=t.row,o.col=t.col,o.rowspan=n.row-t.row+1,o.colspan=n.col-t.col+1,this.mergedCellInfoCollection.setInfo(o)}},r.prototype.mergeOrUnmergeSelection=function(e){var t=this.mergedCellInfoCollection.getInfo(e.from.row,e.from.col);t?this.unmergeSelection(e.from):this.mergeSelection(e)},r.prototype.mergeSelection=function(e){this.mergeRange(e)},r.prototype.unmergeSelection=function(e){var t=this.mergedCellInfoCollection.getInfo(e.row,e.col);this.mergedCellInfoCollection.removeInfo(t.row,t.col)},r.prototype.applySpanProperties=function(e,t,n){var o=this.mergedCellInfoCollection.getInfo(t,n);o?o.row===t&&o.col===n?(e.setAttribute("rowspan",o.rowspan),e.setAttribute("colspan",o.colspan)):(e.removeAttribute("rowspan"),e.removeAttribute("colspan"),e.style.display="none"):(e.removeAttribute("rowspan"),e.removeAttribute("colspan"))},r.prototype.modifyTransform=function(e,t,n){var o=function(e,t){return t.row>=e.row&&t.row<=e.row+e.rowspan-1},r=function(e,t){return t.col>=e.col&&t.col<=e.col+e.colspan-1},i=function(e){return new v(t.to.row+e.row,t.to.col+e.col)},s={row:n.row,col:n.col};if("modifyTransformStart"==e){this.lastDesiredCoords||(this.lastDesiredCoords=new v(null,null));for(var l,a=new v(t.highlight.row,t.highlight.col),u=this.mergedCellInfoCollection.getInfo(a.row,a.col),c=0,d=this.mergedCellInfoCollection.length;d>c;c++){var h=this.mergedCellInfoCollection[c];if(h=new v(h.row+h.rowspan-1,h.col+h.colspan-1),t.includes(h)){l=!0;break}}if(u){var f=new v(u.row,u.col),p=new v(u.row+u.rowspan-1,u.col+u.colspan-1),g=new y(f,f,p);g.includes(this.lastDesiredCoords)||(this.lastDesiredCoords=new v(null,null)),s.row=this.lastDesiredCoords.row?this.lastDesiredCoords.row-a.row:s.row,s.col=this.lastDesiredCoords.col?this.lastDesiredCoords.col-a.col:s.col,n.row>0?s.row=u.row+u.rowspan-1-a.row+n.row:n.row<0&&(s.row=a.row-u.row+n.row),n.col>0?s.col=u.col+u.colspan-1-a.col+n.col:n.col<0&&(s.col=a.col-u.col+n.col)}var m=new v(t.highlight.row+s.row,t.highlight.col+s.col),w=this.mergedCellInfoCollection.getInfo(m.row,m.col);w&&(this.lastDesiredCoords=m,s={row:w.row-a.row,col:w.col-a.col})}else if("modifyTransformEnd"==e)for(var c=0,d=this.mergedCellInfoCollection.length;d>c;c++){var b=this.mergedCellInfoCollection[c],f=new v(b.row,b.col),p=new v(b.row+b.rowspan-1,b.col+b.colspan-1),C=new y(f,f,p),_=t.getBordersSharedWith(C);if(C.isEqual(t))t.setDirection("NW-SE");else if(_.length>0){var R=t.highlight.isEqual(C.from);_.indexOf("top")>-1?t.to.isSouthEastOf(C.from)&&R?t.setDirection("NW-SE"):t.to.isSouthWestOf(C.from)&&R&&t.setDirection("NE-SW"):_.indexOf("bottom")>-1&&(t.to.isNorthEastOf(C.from)&&R?t.setDirection("SW-NE"):t.to.isNorthWestOf(C.from)&&R&&t.setDirection("SE-NW"))}var m=i(s),S=o(b,m),E=r(b,m);t.includesRange(C)&&(C.includes(m)||S||E)&&(S&&(s.row<0?s.row-=b.rowspan-1:s.row>0&&(s.row+=b.rowspan-1)),E&&(s.col<0?s.col-=b.colspan-1:s.col>0&&(s.col+=b.colspan-1)))}0!==s.row&&(n.row=s.row),0!==s.col&&(n.col=s.col)},r.prototype.shiftCollection=function(e,t,n){var o=[0,0];switch(e){case"right":o[0]+=1;break;case"left":o[0]-=1;break;case"down":o[1]+=1;break;case"up":o[1]-=1}for(var r=0;r<this.mergedCellInfoCollection.length;r++){var i=this.mergedCellInfoCollection[r];"right"===e||"left"===e?t<=i.col&&(i.col+=o[0]):t<=i.row&&(i.row+=o[1])}};var C=function(){var e=this,t=e.getSettings().mergeCells;t&&(e.mergeCells||(e.mergeCells=new r(t)))},_=function(){var e=this;e.mergeCells&&(e.view.wt.wtTable.getCell=function(t){if(e.getSettings().mergeCells){var n=e.mergeCells.mergedCellInfoCollection.getInfo(t.row,t.col);n&&(t=n)}return b.prototype.getCell.call(this,t)})},R=function(){var e=this,t=e.getSettings().mergeCells;if(t)if(e.mergeCells){if(e.mergeCells.mergedCellInfoCollection=new o,Array.isArray(t))for(var n=0,i=t.length;i>n;n++)e.mergeCells.mergedCellInfoCollection.setInfo(t[n])}else e.mergeCells=new r(t);else e.mergeCells&&(e.mergeCells.mergedCellInfoCollection=new o)},S=function(e){if(this.mergeCells){var t=(e.ctrlKey||e.metaKey)&&!e.altKey;t&&77===e.keyCode&&(this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange()),this.render(),w(e))}},E=function(e){this.getSettings().mergeCells&&(e.items.push(m.plugins.ContextMenu.SEPARATOR),e.items.push({key:"mergeCells",name:function(){var e=this.getSelected(),t=this.mergeCells.mergedCellInfoCollection.getInfo(e[0],e[1]);return t?"Unmerge cells":"Merge cells"},callback:function(){this.mergeCells.mergeOrUnmergeSelection(this.getSelectedRange()),this.render()},disabled:function(){return!1}}))},M=function(e,t,n,o,r,i){this.mergeCells&&this.mergeCells.applySpanProperties(e,t,n)},T=function(e){return function(t){var n=this.getSettings().mergeCells;if(n){var o=this.getSelectedRange();if(this.mergeCells.modifyTransform(e,o,t),"modifyTransformEnd"===e){var r=this.countRows(),i=this.countCols();o.from.row<0?o.from.row=0:o.from.row>0&&o.from.row>=r&&(o.from.row=o.from-1),o.from.col<0?o.from.col=0:o.from.col>0&&o.from.col>=i&&(o.from.col=i-1)}}}},O=function(e){this.lastDesiredCoords=null;var t=this.getSettings().mergeCells;if(t){var n=this.getSelectedRange();n.highlight=new v(n.highlight.row,n.highlight.col),n.to=e;var o=!1;do{o=!1;for(var r=0,i=this.mergeCells.mergedCellInfoCollection.length;i>r;r++){var s=this.mergeCells.mergedCellInfoCollection[r],l=new v(s.row,s.col),a=new v(s.row+s.rowspan-1,s.col+s.colspan-1),u=new y(l,l,a);n.expandByRange(u)&&(e.row=n.to.row,e.col=n.to.col,o=!0)}}while(o)}},k=function(e,t){if(t&&"area"==t){var n=this.getSettings().mergeCells;if(n)for(var o=this.getSelectedRange(),r=new y(o.from,o.from,o.from),i=new y(o.to,o.to,o.to),s=0,l=this.mergeCells.mergedCellInfoCollection.length;l>s;s++){var a=this.mergeCells.mergedCellInfoCollection[s],u=new v(a.row,a.col),c=new v(a.row+a.rowspan-1,a.col+a.colspan-1),d=new y(u,u,c);r.expandByRange(d)&&(e[0]=r.from.row,e[1]=r.from.col),i.expandByRange(d)&&(e[2]=i.from.row,e[3]=i.from.col)}}},D=function(e,t,n){var o=this.getSettings().mergeCells;if(o){var r=this.mergeCells.mergedCellInfoCollection.getInfo(e,t);!r||r.row==e&&r.col==t||(n.copyable=!1)}},A=function(e){var t=this.getSettings().mergeCells;if(t)for(var n,o=this.countCols(),r=0;o>r;r++){if(n=this.mergeCells.mergedCellInfoCollection.getInfo(e.startRow,r),n&&n.row<e.startRow)return e.startRow=n.row,A.call(this,e);if(n=this.mergeCells.mergedCellInfoCollection.getInfo(e.endRow,r)){var i=n.row+n.rowspan-1;if(i>e.endRow)return e.endRow=i,A.call(this,e)}}},x=function(e){var t=this.getSettings().mergeCells;if(t)for(var n,o=this.countRows(),r=0;o>r;r++){if(n=this.mergeCells.mergedCellInfoCollection.getInfo(r,e.startColumn),n&&n.col<e.startColumn)return e.startColumn=n.col,x.call(this,e);if(n=this.mergeCells.mergedCellInfoCollection.getInfo(r,e.endColumn)){var i=n.col+n.colspan-1;if(i>e.endColumn)return e.endColumn=i,x.call(this,e)}}},H=function(e){if(e&&this.mergeCells){var t=this.mergeCells.mergedCellInfoCollection,n=this.getSelectedRange();for(var o in t)if(n.highlight.row==t[o].row&&n.highlight.col==t[o].col&&n.to.row==t[o].row+t[o].rowspan-1&&n.to.col==t[o].col+t[o].colspan-1)return!1}return e};m.hooks.add("beforeInit",C),m.hooks.add("afterInit",_),m.hooks.add("afterUpdateSettings",R),m.hooks.add("beforeKeyDown",S),m.hooks.add("modifyTransformStart",T("modifyTransformStart")),m.hooks.add("modifyTransformEnd",T("modifyTransformEnd")),m.hooks.add("beforeSetRangeEnd",O),m.hooks.add("beforeDrawBorders",k),m.hooks.add("afterIsMultipleSelection",H),m.hooks.add("afterRenderer",M),m.hooks.add("afterContextMenuDefaultOptions",E),m.hooks.add("afterGetCellMeta",D),m.hooks.add("afterViewportRowCalculatorOverride",A),m.hooks.add("afterViewportColumnCalculatorOverride",x),m.hooks.add("afterAutofillApplyValues",i),m.hooks.add("afterCreateCol",s),m.hooks.add("afterRemoveCol",l),m.hooks.add("afterCreateRow",a),m.hooks.add("afterRemoveRow",u),m.MergeCells=r},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/cell/range":6,"3rdparty/walkontable/src/table":20,browser:23,"helpers/dom/event":47,plugins:59}],84:[function(e,t,n){"use strict";Object.defineProperties(n,{MultipleSelectionHandles:{get:function(){return w}},__esModule:{value:!0}});var o,r,i,s,l,a,u=((o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),c=u.getWindowScrollTop,d=u.hasClass,h=u.getWindowScrollLeft,f=(i=e("helpers/browser"),i&&i.__esModule&&i||{"default":i}).isMobileBrowser,p=(s=e("_base"),s&&s.__esModule&&s||{"default":s})["default"],g=(l=e("eventManager"),l&&l.__esModule&&l||{"default":l}).EventManager,m=(a=e("plugins"),a&&a.__esModule&&a||{"default":a}).registerPlugin,w=function(e){$traceurRuntime.superConstructor(v).call(this,e),this.dragged=[],this.eventManager=null,this.lastSetCell=null},v=w;$traceurRuntime.createClass(w,{isEnabled:function(){return f()},enablePlugin:function(){this.enabled||(this.eventManager||(this.eventManager=new g(this)),this.registerListeners(),$traceurRuntime.superGet(this,v.prototype,"enablePlugin").call(this))},registerListeners:function(){function e(e){if(1===t.dragged.length)return t.dragged.splice(0,t.dragged.length),!0;var n=t.dragged.indexOf(e);return-1==n?!1:void(0===n?t.dragged=t.dragged.slice(0,1):1==n&&(t.dragged=t.dragged.slice(-1)))}var t=this;this.eventManager.addEventListener(this.hot.rootElement,"touchstart",function(e){var n;return d(e.target,"topLeftSelectionHandle-HitArea")?(n=t.hot.getSelectedRange(),t.dragged.push("topLeft"),t.touchStartRange={width:n.getWidth(),height:n.getHeight(),direction:n.getDirection()},e.preventDefault(),!1):d(e.target,"bottomRightSelectionHandle-HitArea")?(n=t.hot.getSelectedRange(),t.dragged.push("bottomRight"),t.touchStartRange={width:n.getWidth(),height:n.getHeight(),direction:n.getDirection()},e.preventDefault(),!1):void 0}),this.eventManager.addEventListener(this.hot.rootElement,"touchend",function(n){return d(n.target,"topLeftSelectionHandle-HitArea")?(e.call(t,"topLeft"),t.touchStartRange=void 0,n.preventDefault(),!1):d(n.target,"bottomRightSelectionHandle-HitArea")?(e.call(t,"bottomRight"),t.touchStartRange=void 0,n.preventDefault(),!1):void 0}),this.eventManager.addEventListener(this.hot.rootElement,"touchmove",function(e){var n,o,r,i,s,l,a,u=c(),d=h();0!==t.dragged.length&&(n=document.elementFromPoint(e.touches[0].screenX-d,e.touches[0].screenY-u),n&&n!==t.lastSetCell&&("TD"!=n.nodeName&&"TH"!=n.nodeName||(o=t.hot.getCoords(n),-1==o.col&&(o.col=0),r=t.hot.getSelectedRange(),i=r.getWidth(),s=r.getHeight(),l=r.getDirection(),1==i&&1==s&&t.hot.selection.setRangeEnd(o),a=t.getCurrentRangeCoords(r,o,t.touchStartRange.direction,l,t.dragged[0]),null!==a.start&&t.hot.selection.setRangeStart(a.start),t.hot.selection.setRangeEnd(a.end),t.lastSetCell=n),e.preventDefault()))})},getCurrentRangeCoords:function(e,t,n,o,r){var i=e.getTopLeftCorner(),s=e.getBottomRightCorner(),l=e.getBottomLeftCorner(),a=e.getTopRightCorner(),u={start:null,end:null};switch(n){case"NE-SW":switch(o){case"NE-SW":case"NW-SE":u="topLeft"==r?{start:new WalkontableCellCoords(t.row,e.highlight.col),end:new WalkontableCellCoords(l.row,t.col)}:{start:new WalkontableCellCoords(e.highlight.row,t.col),end:new WalkontableCellCoords(t.row,i.col)};break;case"SE-NW":"bottomRight"==r&&(u={start:new WalkontableCellCoords(s.row,t.col),end:new WalkontableCellCoords(t.row,i.col)})}break;case"NW-SE":switch(o){case"NE-SW":"topLeft"==r?u={start:t,end:l}:u.end=t;break;
case"NW-SE":"topLeft"==r?u={start:t,end:s}:u.end=t;break;case"SE-NW":"topLeft"==r?u={start:t,end:i}:u.end=t;break;case"SW-NE":"topLeft"==r?u={start:t,end:a}:u.end=t}break;case"SW-NE":switch(o){case"NW-SE":u="bottomRight"==r?{start:new WalkontableCellCoords(t.row,i.col),end:new WalkontableCellCoords(l.row,t.col)}:{start:new WalkontableCellCoords(i.row,t.col),end:new WalkontableCellCoords(t.row,s.col)};break;case"SW-NE":u="topLeft"==r?{start:new WalkontableCellCoords(e.highlight.row,t.col),end:new WalkontableCellCoords(t.row,s.col)}:{start:new WalkontableCellCoords(t.row,i.col),end:new WalkontableCellCoords(i.row,t.col)};break;case"SE-NW":"bottomRight"==r?u={start:new WalkontableCellCoords(t.row,a.col),end:new WalkontableCellCoords(i.row,t.col)}:"topLeft"==r&&(u={start:l,end:t})}break;case"SE-NW":switch(o){case"NW-SE":case"NE-SW":case"SW-NE":"topLeft"==r&&(u.end=t);break;case"SE-NW":"topLeft"==r?u.end=t:u={start:t,end:i}}}return u},isDragged:function(){return this.dragged.length>0}},{},p),m("multipleSelectionHandles",w)},{_base:60,browser:23,eventManager:41,"helpers/browser":43,"helpers/dom/element":46,plugins:59}],85:[function(e,t,n){"use strict";Object.defineProperties(n,{DataObserver:{get:function(){return d}},__esModule:{value:!0}});var o,r,i,s,l=(o=e("jsonpatch"),o&&o.__esModule&&o||{"default":o})["default"],a=(r=e("../../mixins/localHooks"),r&&r.__esModule&&r||{"default":r}).localHooks,u=(i=e("../../helpers/object"),i&&i.__esModule&&i||{"default":i}).mixin,c=(s=e("utils"),s&&s.__esModule&&s||{"default":s}).cleanPatches,d=function(e){this.observedData=null,this.observer=null,this.paused=!1,this.setObservedData(e)};$traceurRuntime.createClass(d,{setObservedData:function(e){var t=this;this.observer&&l.unobserve(this.observedData,this.observer),this.observedData=e,this.observer=l.observe(this.observedData,function(e){return t.onChange(e)})},isPaused:function(){return this.paused},pause:function(){this.paused=!0},resume:function(){this.paused=!1},onChange:function(e){this.runLocalHooks("change",c(e))},destroy:function(){l.unobserve(this.observedData,this.observer),this.observedData=null,this.observer=null}},{}),u(d,a)},{"../../helpers/object":52,"../../mixins/localHooks":56,jsonpatch:"jsonpatch",utils:87}],86:[function(e,t,n){"use strict";Object.defineProperties(n,{ObserveChanges:{get:function(){return p}},__esModule:{value:!0}});var o,r,i,s,l,a,u=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],c=(r=e("_base"),r&&r.__esModule&&r||{"default":r})["default"],d=((i=e("jsonpatch"),i&&i.__esModule&&i||{"default":i})["default"],(s=e("dataObserver"),s&&s.__esModule&&s||{"default":s}).DataObserver),h=(l=e("helpers/array"),l&&l.__esModule&&l||{"default":l}).arrayEach,f=(a=e("plugins"),a&&a.__esModule&&a||{"default":a}).registerPlugin;u.hooks.register("afterChangesObserved");var p=function(e){$traceurRuntime.superConstructor(g).call(this,e),this.observer=null},g=p;$traceurRuntime.createClass(p,{isEnabled:function(){return this.hot.getSettings().observeChanges},enablePlugin:function(){var e=this;this.enabled||(this.observer||(this.observer=new d(this.hot.getSourceData()),this._exposePublicApi()),this.observer.addLocalHook("change",function(t){return e.onDataChange(t)}),this.addHook("afterCreateRow",function(){return e.onAfterTableAlter()}),this.addHook("afterRemoveRow",function(){return e.onAfterTableAlter()}),this.addHook("afterCreateCol",function(){return e.onAfterTableAlter()}),this.addHook("afterRemoveCol",function(){return e.onAfterTableAlter()}),this.addHook("afterChange",function(t,n){return e.onAfterTableAlter(n)}),this.addHook("afterLoadData",function(t){return e.onAfterLoadData(t)}),$traceurRuntime.superGet(this,g.prototype,"enablePlugin").call(this))},disablePlugin:function(){this.observer&&(this.observer.destroy(),this.observer=null,this._deletePublicApi()),$traceurRuntime.superGet(this,g.prototype,"disablePlugin").call(this)},onDataChange:function(e){var t=this;if(!this.observer.isPaused()){var n={add:function(e){isNaN(e.col)?t.hot.runHooks("afterCreateRow",e.row):t.hot.runHooks("afterCreateCol",e.col)},remove:function(e){isNaN(e.col)?t.hot.runHooks("afterRemoveRow",e.row,1):t.hot.runHooks("afterRemoveCol",e.col,1)},replace:function(e){t.hot.runHooks("afterChange",[e.row,e.col,null,e.value],"external")}};h(e,function(e){n[e.op]&&n[e.op](e)}),this.hot.render()}this.hot.runHooks("afterChangesObserved")},onAfterTableAlter:function(e){var t=this;"loadData"!==e&&(this.observer.pause(),this.hot.addHookOnce("afterChangesObserved",function(){return t.observer.resume()}))},onAfterLoadData:function(e){e||this.observer.setObservedData(this.hot.getSourceData())},destroy:function(){this.observer&&(this.observer.destroy(),this._deletePublicApi()),$traceurRuntime.superGet(this,g.prototype,"destroy").call(this)},_exposePublicApi:function(){var e=this,t=this.hot;t.pauseObservingChanges=function(){return e.observer.pause()},t.resumeObservingChanges=function(){return e.observer.resume()},t.isPausedObservingChanges=function(){return e.observer.isPaused()}},_deletePublicApi:function(){var e=this.hot;delete e.pauseObservingChanges,delete e.resumeObservingChanges,delete e.isPausedObservingChanges}},{},c),f("observeChanges",p)},{_base:60,browser:23,dataObserver:85,"helpers/array":42,jsonpatch:"jsonpatch",plugins:59}],87:[function(e,t,n){"use strict";function o(e){var t=[];return e=l(e,function(e){return/[\/]length/gi.test(e.path)?!1:!!r(e.path)}),e=a(e,function(e){var t=r(e.path);return e.row=t.row,e.col=t.col,e}),e=l(e,function(e){if(-1!==["add","remove"].indexOf(e.op)&&!isNaN(e.col)){if(-1!==t.indexOf(e.col))return!1;t.push(e.col)}return!0}),t.length=0,e}function r(e){var t=e.match(/^\/(\d+)\/?(.*)?$/);if(!t)return null;var n=t,o=n[1],r=n[2];return{row:parseInt(o,10),col:/^\d*$/.test(r)?parseInt(r,10):r}}Object.defineProperties(n,{cleanPatches:{get:function(){return o}},parsePath:{get:function(){return r}},__esModule:{value:!0}});var i,s=(i=e("../../helpers/array"),i&&i.__esModule&&i||{"default":i}),l=s.arrayFilter,a=s.arrayMap},{"../../helpers/array":42}],88:[function(e,t,n){"use strict";function o(e){var t,n=function(){window.localStorage[e+"__persistentStateKeys"]=JSON.stringify(t)},o=function(){var n=window.localStorage[e+"__persistentStateKeys"],o="string"==typeof n?JSON.parse(n):void 0;t=o?o:[]},r=function(){t=[],n()};o(),this.saveValue=function(o,r){window.localStorage[e+"_"+o]=JSON.stringify(r),-1==t.indexOf(o)&&(t.push(o),n())},this.loadValue=function(t,n){t="undefined"==typeof t?n:t;var o=window.localStorage[e+"_"+t];return"undefined"==typeof o?void 0:JSON.parse(o)},this.reset=function(t){window.localStorage.removeItem(e+"_"+t)},this.resetAll=function(){for(var n=0;n<t.length;n++)window.localStorage.removeItem(e+"_"+t[n]);r()}}function r(){function e(){var e=this;for(var t in r)r.hasOwnProperty(t)&&e.addHook(t,r[t])}function t(){var e=this;for(var t in r)r.hasOwnProperty(t)&&e.removeHook(t,r[t])}var n=this;this.init=function(){var r=this,i=r.getSettings().persistentState;return n.enabled=!!i,n.enabled?(r.storage||(r.storage=new o(r.rootElement.id)),r.resetState=n.resetValue,void e.call(r)):void t.call(r)},this.saveValue=function(e,t){var n=this;n.storage.saveValue(e,t)},this.loadValue=function(e,t){var n=this;t.value=n.storage.loadValue(e)},this.resetValue=function(e){var t=this;"undefined"==typeof e?t.storage.resetAll():t.storage.reset(e)};var r={persistentStateSave:n.saveValue,persistentStateLoad:n.loadValue,persistentStateReset:n.resetValue};for(var i in r)r.hasOwnProperty(i)&&l.hooks.register(i)}Object.defineProperties(n,{HandsontablePersistentState:{get:function(){return r}},__esModule:{value:!0}});var i,s,l=(i=e("browser"),i&&i.__esModule&&i||{"default":i})["default"],a=((s=e("plugins"),s&&s.__esModule&&s||{"default":s}).registerPlugin,new r);l.hooks.add("beforeInit",a.init),l.hooks.add("afterUpdateSettings",a.init)},{browser:23,plugins:59}],89:[function(e,t,n){"use strict";function o(){var e=this,t=!!e.getSettings().search;t?e.search=new l.Search(e):delete e.search}var r,i,s,l=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],a=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),u=a.addClass,c=a.removeClass,d=(s=e("renderers"),s&&s.__esModule&&s||{"default":s}),h=d.registerRenderer,f=d.getRenderer;l.Search=function(e){this.query=function(t,n,o){var r=e.countRows(),i=e.countCols(),s=[];n||(n=l.Search.global.getDefaultCallback()),o||(o=l.Search.global.getDefaultQueryMethod());for(var a=0;r>a;a++)for(var u=0;i>u;u++){var c=e.getDataAtCell(a,u),d=e.getCellMeta(a,u),h=d.search.callback||n,f=d.search.queryMethod||o,p=f(t,c);if(p){var g={row:a,col:u,data:c};s.push(g)}h&&h(e,a,u,c,p)}return s}},l.Search.DEFAULT_CALLBACK=function(e,t,n,o,r){e.getCellMeta(t,n).isSearchResult=r},l.Search.DEFAULT_QUERY_METHOD=function(e,t){return"undefined"!=typeof e&&null!=e&&e.toLowerCase&&0!==e.length?"undefined"==typeof t||null==t?!1:-1!=t.toString().toLowerCase().indexOf(e.toLowerCase()):!1},l.Search.DEFAULT_SEARCH_RESULT_CLASS="htSearchResult",l.Search.global=function(){var e=l.Search.DEFAULT_CALLBACK,t=l.Search.DEFAULT_QUERY_METHOD,n=l.Search.DEFAULT_SEARCH_RESULT_CLASS;return{getDefaultCallback:function(){return e},setDefaultCallback:function(t){e=t},getDefaultQueryMethod:function(){return t},setDefaultQueryMethod:function(e){t=e},getDefaultSearchResultClass:function(){return n},setDefaultSearchResultClass:function(e){n=e}}}(),l.SearchCellDecorator=function(e,t,n,o,r,i,s){var a=null!==s.search&&"object"==typeof s.search&&s.search.searchResultClass||l.Search.global.getDefaultSearchResultClass();s.isSearchResult?u(t,a):c(t,a)};var p=f("base");h("base",function(e,t,n,o,r,i,s){p.apply(this,arguments),l.SearchCellDecorator.apply(this,arguments)}),l.hooks.add("afterInit",o),l.hooks.add("afterUpdateSettings",o)},{browser:23,"helpers/dom/element":46,renderers:92}],90:[function(e,t,n){"use strict";Object.defineProperties(n,{TouchScroll:{get:function(){return f}},__esModule:{value:!0}});var o,r,i,s,l=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],a=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),u=a.addClass,c=a.removeClass,d=(i=e("_base"),i&&i.__esModule&&i||{"default":i})["default"],h=(s=e("plugins"),s&&s.__esModule&&s||{"default":s}).registerPlugin,f=function(e){var t=this;$traceurRuntime.superConstructor(p).call(this,e),this.hot.addHook("afterInit",function(){return t.afterInit()}),this.hot.addHook("afterUpdateSettings",function(){return t.onAfterUpdateSettings()}),this.scrollbars=[],this.clones=[]},p=f;$traceurRuntime.createClass(f,{afterInit:function(){this.registerEvents(),this.onAfterUpdateSettings()},onAfterUpdateSettings:function(){var e=this;this.hot.addHookOnce("afterRender",function(){var t=e.hot.view.wt.wtOverlays;e.scrollbars=[],e.scrollbars.push(t.topOverlay),t.bottomOverlay.clone&&e.scrollbars.push(t.bottomOverlay),e.scrollbars.push(t.leftOverlay),t.topLeftCornerOverlay&&e.scrollbars.push(t.topLeftCornerOverlay),t.bottomLeftCornerOverlay&&t.bottomLeftCornerOverlay.clone&&e.scrollbars.push(t.bottomLeftCornerOverlay),e.clones=[],t.topOverlay.needFullRender&&e.clones.push(t.topOverlay.clone.wtTable.holder.parentNode),t.bottomOverlay.needFullRender&&e.clones.push(t.bottomOverlay.clone.wtTable.holder.parentNode),t.leftOverlay.needFullRender&&e.clones.push(t.leftOverlay.clone.wtTable.holder.parentNode),t.topLeftCornerOverlay&&e.clones.push(t.topLeftCornerOverlay.clone.wtTable.holder.parentNode),t.bottomLeftCornerOverlay&&t.bottomLeftCornerOverlay.clone&&e.clones.push(t.bottomLeftCornerOverlay.clone.wtTable.holder.parentNode)})},registerEvents:function(){var e=this;this.hot.addHook("beforeTouchScroll",function(){return e.onBeforeTouchScroll()}),this.hot.addHook("afterMomentumScroll",function(){return e.onAfterMomentumScroll()})},onBeforeTouchScroll:function(){l.freezeOverlays=!0;for(var e=0,t=this.clones.length;t>e;e++)u(this.clones[e],"hide-tween")},onAfterMomentumScroll:function(){l.freezeOverlays=!1;for(var e=this,t=0,n=this.clones.length;n>t;t++)c(this.clones[t],"hide-tween");for(var o=0,r=this.clones.length;r>o;o++)u(this.clones[o],"show-tween");setTimeout(function(){for(var t=0,n=e.clones.length;n>t;t++)c(e.clones[t],"show-tween")},400);for(var i=0,s=this.scrollbars.length;s>i;i++)this.scrollbars[i].refresh(),this.scrollbars[i].resetFixedPosition();this.hot.view.wt.wtOverlays.syncScrollWithMaster()}},{},d),h("touchScroll",f)},{_base:60,browser:23,"helpers/dom/element":46,plugins:59}],91:[function(e,t,n){"use strict";function o(){var e=this,t="undefined"==typeof e.getSettings().undo||e.getSettings().undo;t?e.undoRedo||(e.undoRedo=new f.UndoRedo(e),s(e),e.addHook("beforeKeyDown",r),e.addHook("afterChange",i)):e.undoRedo&&(delete e.undoRedo,l(e),e.removeHook("beforeKeyDown",r),e.removeHook("afterChange",i))}function r(e){var t=this,n=(e.ctrlKey||e.metaKey)&&!e.altKey;n&&(89===e.keyCode||e.shiftKey&&90===e.keyCode?(t.undoRedo.redo(),y(e)):90===e.keyCode&&(t.undoRedo.undo(),y(e)))}function i(e,t){var n=this;return"loadData"==t?n.undoRedo.clear():void 0}function s(e){e.undo=function(){return e.undoRedo.undo()},e.redo=function(){return e.undoRedo.redo()},e.isUndoAvailable=function(){return e.undoRedo.isUndoAvailable()},e.isRedoAvailable=function(){return e.undoRedo.isRedoAvailable()},e.clearUndo=function(){return e.undoRedo.clear()}}function l(e){delete e.undo,delete e.redo,delete e.isUndoAvailable,delete e.isRedoAvailable,delete e.clearUndo}var a,u,c,d,h,f=(a=e("browser"),a&&a.__esModule&&a||{"default":a})["default"],p=(u=e("helpers/array"),u&&u.__esModule&&u||{"default":u}).arrayMap,g=(c=e("helpers/number"),c&&c.__esModule&&c||{"default":c}).rangeEach,m=(d=e("helpers/object"),d&&d.__esModule&&d||{"default":d}),w=m.inherit,v=m.deepClone,y=(h=e("helpers/dom/event"),h&&h.__esModule&&h||{"default":h}).stopImmediatePropagation;f.UndoRedo=function(e){var t=this;this.instance=e,this.doneActions=[],this.undoneActions=[],this.ignoreNewActions=!1,e.addHook("afterChange",function(e,n){if(e){var o=new f.UndoRedo.ChangeAction(e);t.done(o)}}),e.addHook("afterCreateRow",function(e,n,o){if(!o){var r=new f.UndoRedo.CreateRowAction(e,n);t.done(r)}}),e.addHook("beforeRemoveRow",function(e,n){var o=t.instance.getSourceData();e=(o.length+e)%o.length;var r=o.slice(e,e+n),i=new f.UndoRedo.RemoveRowAction(e,r);t.done(i)}),e.addHook("afterCreateCol",function(e,n,o){if(!o){var r=new f.UndoRedo.CreateColumnAction(e,n);t.done(r)}}),e.addHook("beforeRemoveCol",function(n,o){var r=t.instance.getData();n=(t.instance.countCols()+n)%t.instance.countCols();var i=[],s=[],l=[];g(0,r.length-1,function(e){i[e]=r[e].slice(n,n+o)}),g(0,o-1,function(t){l.push(e.runHooks("modifyCol",n+t))}),Array.isArray(e.getSettings().colHeaders)&&g(0,o-1,function(t){s.push(e.getSettings().colHeaders[e.runHooks("modifyCol",n+t)]||null)});var a=t.instance.getPlugin("manualColumnMove"),u=new f.UndoRedo.RemoveColumnAction(l,i,s,a?a.columnPositions:[]);t.done(u)}),e.addHook("beforeCellAlignment",function(e,n,o,r){var i=new f.UndoRedo.CellAlignmentAction(e,n,o,r);t.done(i)}),e.addHook("beforeFilter",function(e){t.done(new f.UndoRedo.FiltersAction(e))})},f.UndoRedo.prototype.done=function(e){this.ignoreNewActions||(this.doneActions.push(e),this.undoneActions.length=0)},f.UndoRedo.prototype.undo=function(){if(this.isUndoAvailable()){var e=this.doneActions.pop();this.ignoreNewActions=!0;var t=this;e.undo(this.instance,function(){t.ignoreNewActions=!1,t.undoneActions.push(e)})}},f.UndoRedo.prototype.redo=function(){if(this.isRedoAvailable()){var e=this.undoneActions.pop();this.ignoreNewActions=!0;var t=this;e.redo(this.instance,function(){t.ignoreNewActions=!1,t.doneActions.push(e)})}},f.UndoRedo.prototype.isUndoAvailable=function(){return this.doneActions.length>0},f.UndoRedo.prototype.isRedoAvailable=function(){return this.undoneActions.length>0},f.UndoRedo.prototype.clear=function(){this.doneActions.length=0,this.undoneActions.length=0},f.UndoRedo.Action=function(){},f.UndoRedo.Action.prototype.undo=function(){},f.UndoRedo.Action.prototype.redo=function(){},f.UndoRedo.ChangeAction=function(e){this.changes=e},w(f.UndoRedo.ChangeAction,f.UndoRedo.Action),f.UndoRedo.ChangeAction.prototype.undo=function(e,t){for(var n=v(this.changes),o=e.countEmptyRows(!0),r=e.countEmptyCols(!0),i=0,s=n.length;s>i;i++)n[i].splice(3,1);e.addHookOnce("afterChange",t),e.setDataAtRowProp(n,null,null,"undo");for(var i=0,s=n.length;s>i;i++)e.getSettings().minSpareRows&&n[i][0]+1+e.getSettings().minSpareRows===e.countRows()&&o==e.getSettings().minSpareRows&&(e.alter("remove_row",parseInt(n[i][0]+1,10),e.getSettings().minSpareRows),e.undoRedo.doneActions.pop()),e.getSettings().minSpareCols&&n[i][1]+1+e.getSettings().minSpareCols===e.countCols()&&r==e.getSettings().minSpareCols&&(e.alter("remove_col",parseInt(n[i][1]+1,10),e.getSettings().minSpareCols),e.undoRedo.doneActions.pop())},f.UndoRedo.ChangeAction.prototype.redo=function(e,t){for(var n=v(this.changes),o=0,r=n.length;r>o;o++)n[o].splice(2,1);e.addHookOnce("afterChange",t),e.setDataAtRowProp(n,null,null,"redo")},f.UndoRedo.CreateRowAction=function(e,t){this.index=e,this.amount=t},w(f.UndoRedo.CreateRowAction,f.UndoRedo.Action),f.UndoRedo.CreateRowAction.prototype.undo=function(e,t){var n=e.countRows(),o=e.getSettings().minSpareRows;this.index>=n&&this.index-o<n&&(this.index-=o),e.addHookOnce("afterRemoveRow",t),e.alter("remove_row",this.index,this.amount)},f.UndoRedo.CreateRowAction.prototype.redo=function(e,t){e.addHookOnce("afterCreateRow",t),e.alter("insert_row",this.index+1,this.amount)},f.UndoRedo.RemoveRowAction=function(e,t){this.index=e,this.data=t},w(f.UndoRedo.RemoveRowAction,f.UndoRedo.Action),f.UndoRedo.RemoveRowAction.prototype.undo=function(e,t){var n=[this.index,0];Array.prototype.push.apply(n,this.data),Array.prototype.splice.apply(e.getSourceData(),n),e.addHookOnce("afterRender",t),e.render()},f.UndoRedo.RemoveRowAction.prototype.redo=function(e,t){e.addHookOnce("afterRemoveRow",t),e.alter("remove_row",this.index,this.data.length)},f.UndoRedo.CreateColumnAction=function(e,t){this.index=e,this.amount=t},w(f.UndoRedo.CreateColumnAction,f.UndoRedo.Action),f.UndoRedo.CreateColumnAction.prototype.undo=function(e,t){e.addHookOnce("afterRemoveCol",t),e.alter("remove_col",this.index,this.amount)},f.UndoRedo.CreateColumnAction.prototype.redo=function(e,t){e.addHookOnce("afterCreateCol",t),e.alter("insert_col",this.index+1,this.amount)},f.UndoRedo.CellAlignmentAction=function(e,t,n,o){this.stateBefore=e,this.range=t,this.type=n,this.alignment=o},f.UndoRedo.CellAlignmentAction.prototype.undo=function(e,t){if(e.getPlugin("contextMenu").isEnabled()){for(var n=this.range.from.row;n<=this.range.to.row;n++)for(var o=this.range.from.col;o<=this.range.to.col;o++)e.setCellMeta(n,o,"className",this.stateBefore[n][o]||" htLeft");e.addHookOnce("afterRender",t),e.render()}},f.UndoRedo.CellAlignmentAction.prototype.redo=function(e,t){e.getPlugin("contextMenu").isEnabled()&&(e.selectCell(this.range.from.row,this.range.from.col,this.range.to.row,this.range.to.col),e.getPlugin("contextMenu").executeCommand("alignment:"+this.alignment.replace("ht","").toLowerCase()),e.addHookOnce("afterRender",t),e.render())},f.UndoRedo.RemoveColumnAction=function(e,t,n,o){this.indexes=e,this.data=t,this.amount=this.data[0].length,this.headers=n,this.columnPositions=o.slice(0)},w(f.UndoRedo.RemoveColumnAction,f.UndoRedo.Action),f.UndoRedo.RemoveColumnAction.prototype.undo=function(e,t){var n,o=this,r=this.indexes.slice(0).sort(),i=function(e,t,n){return n[o.indexes.indexOf(r[t])]},s=[];g(0,this.data.length-1,function(e){s[e]=p(o.data[e],i)});var l=[];l=p(this.headers,i),g(0,this.data.length-1,function(t){n=e.getSourceDataAtRow(t),g(0,r.length-1,function(e){n.splice(r[e],0,s[t][e])})}),"undefined"!=typeof this.headers&&g(0,l.length-1,function(t){e.getSettings().colHeaders.splice(r[t],0,l[t])}),e.getPlugin("manualColumnMove")&&(e.getPlugin("manualColumnMove").columnPositions=this.columnPositions),e.addHookOnce("afterRender",t),e.render()},f.UndoRedo.RemoveColumnAction.prototype.redo=function(e,t){e.addHookOnce("afterRemoveCol",t),e.alter("remove_col",e.runHooks("unmodifyCol",this.indexes[0]),this.amount)},f.UndoRedo.FiltersAction=function(e){this.formulaStacks=e},w(f.UndoRedo.FiltersAction,f.UndoRedo.Action),f.UndoRedo.FiltersAction.prototype.undo=function(e,t){var n=e.getPlugin("filters");e.addHookOnce("afterRender",t),n.formulaCollection.importAllFormulas(this.formulaStacks.slice(0,this.formulaStacks.length-1)),n.filter()},f.UndoRedo.FiltersAction.prototype.redo=function(e,t){var n=e.getPlugin("filters");e.addHookOnce("afterRender",t),n.formulaCollection.importAllFormulas(this.formulaStacks),n.filter()},f.hooks.add("afterInit",o),f.hooks.add("afterUpdateSettings",o)},{browser:23,"helpers/array":42,"helpers/dom/event":47,"helpers/number":51,"helpers/object":52}],92:[function(e,t,n){"use strict";function o(e,t){var n;c[e]=t,n=u(e)+"Renderer",a.renderers[n]=t,a[n]=t,"base"===e&&(a.renderers.cellDecorator=t)}function r(e){if("function"==typeof e)return e;if("string"!=typeof e)throw Error('Only strings and functions can be passed as "renderer" parameter');if(!(e in c))throw Error('No editor registered under name "'+e+'"');return c[e]}function i(e){return e in c}Object.defineProperties(n,{registerRenderer:{get:function(){return o}},getRenderer:{get:function(){return r}},hasRenderer:{get:function(){return i}},__esModule:{value:!0}});var s,l,a=(s=e("browser"),s&&s.__esModule&&s||{"default":s})["default"],u=(l=e("helpers/string"),l&&l.__esModule&&l||{"default":l}).toUpperCaseFirst,c={};a.renderers=a.renderers||{},a.renderers.registerRenderer=o,a.renderers.getRenderer=r},{browser:23,"helpers/string":54}],93:[function(e,t,n){"use strict";function o(e,t,n,o,r,i,s){s.className&&(t.className?t.className=t.className+" "+s.className:t.className=s.className),s.readOnly&&l(t,s.readOnlyCellClassName),s.valid===!1&&s.invalidCellClassName?l(t,s.invalidCellClassName):a(t,s.invalidCellClassName),s.wordWrap===!1&&s.noWordWrapClassName&&l(t,s.noWordWrapClassName),!i&&s.placeholder&&l(t,s.placeholderCellClassName)}Object.defineProperties(n,{cellDecorator:{get:function(){return o}},__esModule:{value:!0}});var r,i,s=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),l=s.addClass,a=s.removeClass,u=(i=e("renderers"),i&&i.__esModule&&i||{"default":i}).registerRenderer;u("base",o)},{"helpers/dom/element":46,renderers:92}],94:[function(e,t,n){"use strict";function o(e,t,n,o,r,i,s){var l=(m.cloneNode(!0),w.cloneNode(!0));if(f("text")(e,t,n,o,r,i,s),t.appendChild(l),u(t,"htAutocomplete"),t.firstChild||t.appendChild(document.createTextNode(String.fromCharCode(160))),!e.acArrowListener){var a=d(e);e.acArrowListener=function(r){c(r.target,"htAutocompleteArrow")&&e.view.wt.getSetting("onCellDblClick",null,new g(n,o),t)},a.addEventListener(e.rootElement,"mousedown",e.acArrowListener),e.addHookOnce("afterDestroy",function(){a.destroy()})}}Object.defineProperties(n,{autocompleteRenderer:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l,a=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),u=a.addClass,c=a.hasClass,d=(a.empty,(i=e("eventManager"),i&&i.__esModule&&i||{"default":i}).eventManager),h=(s=e("renderers"),s&&s.__esModule&&s||{"default":s}),f=h.getRenderer,p=h.registerRenderer,g=(l=e("3rdparty/walkontable/src/cell/coords"),l&&l.__esModule&&l||{"default":l}).WalkontableCellCoords,m=document.createElement("DIV");m.className="htAutocompleteWrapper";var w=document.createElement("DIV");w.className="htAutocompleteArrow",w.appendChild(document.createTextNode(String.fromCharCode(9660)));p("autocomplete",o)},{"3rdparty/walkontable/src/cell/coords":5,eventManager:41,"helpers/dom/element":46,renderers:92}],95:[function(e,t,n){"use strict";function o(e,t,n,o,u,c,d){function h(e){var t=[S.SPACE,S.ENTER,S.DELETE,S.BACKSPACE];-1===t.indexOf(e.keyCode)||T(e)||g(function(){M(e),e.preventDefault()}),e.keyCode!==S.SPACE&&e.keyCode!==S.ENTER||f(),e.keyCode!==S.DELETE&&e.keyCode!==S.BACKSPACE||f(!1)}function f(){var e=void 0!==arguments[0]?arguments[0]:null;g(function(t){for(var n=0,o=t.length;o>n;n++){if(y(t[n],D)&&null===e)return;p(t[n],e)}})}function p(e){var t=void 0!==arguments[1]?arguments[1]:null;null===t?e.checked=!e.checked:e.checked=t,m.fireEvent(e,"change")}function g(t){var n=e.getSelectedRange();if(n)for(var o=n.getTopLeftCorner(),r=n.getBottomRightCorner(),i=o.row;i<=r.row;i++)for(var s=o.col;s<=r.col;s++){var l=e.getCell(i,s),a=e.getCellMeta(i,s),u=l.querySelectorAll("input[type=checkbox]");u.length>0&&!a.readOnly&&t(u)}}var m=new C(e),_=r(),R=d.label,E=!1;if("undefined"==typeof d.checkedTemplate&&(d.checkedTemplate=!0),"undefined"==typeof d.uncheckedTemplate&&(d.uncheckedTemplate=!1),w(t),c===d.checkedTemplate||b(c,d.checkedTemplate)?_.checked=!0:c===d.uncheckedTemplate||b(c,d.uncheckedTemplate)?_.checked=!1:null===c?v(_,"noValue"):(_.style.display="none",v(_,D),E=!0),_.setAttribute("data-row",n),_.setAttribute("data-col",o),!E&&R){var A="";R.value?A="function"==typeof R.value?R.value.call(this,n,o,u,c):R.value:R.property&&(A=e.getDataAtRowProp(n,R.property));var x=i(A);"before"===R.position?x.appendChild(_):x.insertBefore(_,x.firstChild),_=x}t.appendChild(_),E&&t.appendChild(document.createTextNode("#bad-value#")),k.has(e)||(d.readOnly?m.addEventListener(e.rootElement,"click",s):(m.addEventListener(e.rootElement,"mouseup",function(t){return l(t,e)}),m.addEventListener(e.rootElement,"change",function(t){return a(t,e)})),k.set(e,!0)),O.has(e)||(O.set(e,!0),e.addHook("beforeKeyDown",h))}function r(){var e=document.createElement("input");return e.className="htCheckboxRendererInput",e.type="checkbox",e.setAttribute("autocomplete","off"),e.setAttribute("tabindex","-1"),e.cloneNode(!1)}function i(e){var t=document.createElement("label");return t.className="htCheckboxRendererLabel",t.appendChild(document.createTextNode(e)),t.cloneNode(!0)}function s(e){u(e.target)&&e.preventDefault()}function l(e,t){u(e.target)&&setTimeout(t.listen,10)}function a(e,t){if(!u(e.target))return!1;var n=parseInt(e.target.getAttribute("data-row"),10),o=parseInt(e.target.getAttribute("data-col"),10),r=t.getCellMeta(n,o);t.setDataAtCell(n,o,e.target.checked?r.checkedTemplate||!0:r.uncheckedTemplate||!1)}function u(e){return"INPUT"===e.tagName&&"checkbox"===e.getAttribute("type")}Object.defineProperties(n,{checkboxRenderer:{get:function(){return o}},__esModule:{value:!0}});var c,d,h,f,p,g,m=(c=e("helpers/dom/element"),c&&c.__esModule&&c||{"default":c}),w=m.empty,v=m.addClass,y=m.hasClass,b=(d=e("helpers/string"),d&&d.__esModule&&d||{"default":d}).equalsIgnoreCase,C=(h=e("eventManager"),h&&h.__esModule&&h||{"default":h}).EventManager,_=(f=e("renderers"),f&&f.__esModule&&f||{"default":f}),R=(_.getRenderer,_.registerRenderer),S=(p=e("helpers/unicode"),p&&p.__esModule&&p||{"default":p}).KEY_CODES,E=(g=e("helpers/dom/event"),g&&g.__esModule&&g||{"default":g}),M=(E.stopPropagation,E.stopImmediatePropagation),T=E.isImmediatePropagationStopped,O=new WeakMap,k=new WeakMap,D="htBadValue";R("checkbox",o)},{eventManager:41,"helpers/dom/element":46,"helpers/dom/event":47,"helpers/string":54,"helpers/unicode":55,renderers:92}],96:[function(e,t,n){"use strict";function o(e,t,n,o,r,i,l){a("base").apply(this,arguments),null!==i&&void 0!==i||(i=""),s(t,i)}Object.defineProperties(n,{htmlRenderer:{get:function(){return o}},__esModule:{value:!0}});var r,i,s=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}).fastInnerHTML,l=(i=e("renderers"),i&&i.__esModule&&i||{"default":i}),a=l.getRenderer,u=l.registerRenderer;u("html",o)},{"helpers/dom/element":46,renderers:92}],97:[function(e,t,n){"use strict";function o(e,t,n,o,r,i,s){f(i)&&("undefined"!=typeof s.language&&a.language(s.language),i=a(i).format(s.format||"0"),u(t,"htNumeric")),d("text")(e,t,n,o,r,i,s)}Object.defineProperties(n,{numericRenderer:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l,a=(r=e("numeral"),r&&r.__esModule&&r||{"default":r})["default"],u=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}).addClass,c=(s=e("renderers"),s&&s.__esModule&&s||{"default":s}),d=c.getRenderer,h=c.registerRenderer,f=(l=e("helpers/number"),l&&l.__esModule&&l||{"default":l}).isNumeric;h("numeric",o)},{"helpers/dom/element":46,"helpers/number":51,numeral:"numeral",renderers:92}],98:[function(e,t,n){"use strict";function o(e,t,n,o,r,i,l){a("text").apply(this,arguments),i=t.innerHTML;var u,c=l.hashLength||i.length,d=l.hashSymbol||"*";for(u="";u.split(d).length-1<c;u+=d);s(t,u)}Object.defineProperties(n,{passwordRenderer:{get:function(){return o}},__esModule:{value:!0}});var r,i,s=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}).fastInnerHTML,l=(i=e("renderers"),i&&i.__esModule&&i||{"default":i}),a=l.getRenderer,u=l.registerRenderer;u("password",o)},{"helpers/dom/element":46,renderers:92}],99:[function(e,t,n){"use strict";function o(e,t,n,o,r,i,s){h("base").apply(this,arguments),!i&&s.placeholder&&(i=s.placeholder);var l=c(i);if(e.getSettings().trimWhitespace||(l=l.replace(/ /g,String.fromCharCode(160))),s.rendererTemplate){a(t);var d=document.createElement("TEMPLATE");d.setAttribute("bind","{{}}"),d.innerHTML=s.rendererTemplate,HTMLTemplateElement.decorate(d),d.model=e.getSourceDataAtRow(n),t.appendChild(d)}else u(t,l)}Object.defineProperties(n,{textRenderer:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),a=l.empty,u=l.fastInnerText,c=(i=e("helpers/mixed"),i&&i.__esModule&&i||{"default":i}).stringify,d=(s=e("renderers"),s&&s.__esModule&&s||{"default":s}),h=d.getRenderer,f=d.registerRenderer;f("text",o)},{"helpers/dom/element":46,"helpers/mixed":50,renderers:92}],100:[function(e,t,n){!function(e){"use strict";function t(e){return{configurable:!0,enumerable:!1,value:e,writable:!0}}function n(){return"__$"+Math.floor(1e9*Math.random())+"$"+ ++Y+"$__"}function o(e){return K[e]}function r(){var e=n();return K[e]=!0,e}function i(e){return"object"==typeof e&&e instanceof a}function s(e){return i(e)?"symbol":typeof e}function l(e){var t=new a(e);if(!(this instanceof l))return t;throw new TypeError("Symbol cannot be new'ed")}function a(e){var t=n();P(this,$,{value:this}),P(this,U,{value:t}),P(this,G,{value:e}),c(this),X[t]=this}function u(e){var t=e[q];return t&&t.self===e?t:B(e)?(J.hash.value=Q++,J.self.value=e,Z.value=x(null,J),P(e,q,Z),Z.value):void 0}function c(e){return u(e),N.apply(this,arguments)}function d(e){return u(e),V.apply(this,arguments)}function h(e){return u(e),F.apply(this,arguments)}function f(e){return X[e]||K[e]}function p(e){return i(e)?e[U]:e}function g(e){for(var t=[],n=0;n<e.length;n++)f(e[n])||t.push(e[n]);return t}function m(e){return g(W(e))}function w(e){return g(I(e))}function v(e){for(var t=[],n=W(e),o=0;o<n.length;o++){var r=X[n[o]];r&&t.push(r)}return t}function y(e,t){return L(e,p(t))}function b(e){return j.call(this,p(e))}function C(t){return e.traceur&&e.traceur.options[t]}function _(e,t,n){return i(t)&&(t=t[U]),P(e,t,n),e}function R(e){P(e,"defineProperty",{value:_}),P(e,"getOwnPropertyNames",{value:m}),P(e,"getOwnPropertyDescriptor",{value:y}),P(e.prototype,"hasOwnProperty",{value:b}),P(e,"freeze",{value:c}),P(e,"preventExtensions",{value:d}),P(e,"seal",{value:h}),P(e,"keys",{value:w})}function S(e){for(var t=1;t<arguments.length;t++)for(var n=W(arguments[t]),o=0;o<n.length;o++){var r=n[o];f(r)||!function(t,n){P(e,n,{get:function(){return t[n]},enumerable:!0})}(arguments[t],n[o])}return e}function E(e){return null!=e&&("object"==typeof e||"function"==typeof e)}function M(e){if(null==e)throw A();return D(e)}function T(e){if(null==e)throw new TypeError("Value cannot be converted to an Object");return e}function O(e,t){e.Symbol||(e.Symbol=t,Object.getOwnPropertySymbols=v),e.Symbol.iterator||(e.Symbol.iterator=t("Symbol.iterator"))}function k(e){O(e,l),e.Reflect=e.Reflect||{},e.Reflect.global=e.Reflect.global||e,R(e.Object)}if(!e.$traceurRuntime){var D=Object,A=TypeError,x=D.create,H=D.defineProperties,P=D.defineProperty,N=D.freeze,L=D.getOwnPropertyDescriptor,W=D.getOwnPropertyNames,I=D.keys,j=D.prototype.hasOwnProperty,V=Object.preventExtensions,F=Object.seal,B=Object.isExtensible,z=t,Y=0,U=n(),G=n(),$=n(),X=x(null),K=x(null);
P(l.prototype,"constructor",t(l)),P(l.prototype,"toString",z(function(){var e=this[$];if(!C("symbols"))return e[U];if(!e)throw TypeError("Conversion from symbol to string");var t=e[G];return void 0===t&&(t=""),"Symbol("+t+")"})),P(l.prototype,"valueOf",z(function(){var e=this[$];if(!e)throw TypeError("Conversion from symbol to string");return C("symbols")?e:e[U]})),P(a.prototype,"constructor",t(l)),P(a.prototype,"toString",{value:l.prototype.toString,enumerable:!1}),P(a.prototype,"valueOf",{value:l.prototype.valueOf,enumerable:!1});var q=r(),Z={value:void 0},J={hash:{value:void 0},self:{value:void 0}},Q=0;c(a.prototype),k(e),e.$traceurRuntime={checkObjectCoercible:T,createPrivateName:r,defineProperties:H,defineProperty:P,exportStar:S,getOwnHashObject:u,getOwnPropertyDescriptor:L,getOwnPropertyNames:W,isObject:E,isPrivateName:o,isSymbolString:f,keys:I,setupGlobals:k,toObject:M,toProperty:p,"typeof":s}}}(window),function(){"use strict";function e(){for(var e,n=[],o=0,r=0;r<arguments.length;r++){var i=$traceurRuntime.checkObjectCoercible(arguments[r]);"function"!=typeof i[t(Symbol.iterator)]&&(i[t(Symbol.iterator)]=function(){var e=this,t=e.length,n=0;return{next:function(){var o={done:!0};return t>n&&(o.done=!1,o.value=e[n],++n),o}}});for(var s=i[t(Symbol.iterator)]();!(e=s.next()).done;)n[o++]=e.value}return n}var t=$traceurRuntime.toProperty;$traceurRuntime.spread=e}(),function(){"use strict";function e(e,t){var n=g(e);do{var o=p(n,t);if(o)return o;n=g(n)}while(n)}function t(e){return e.__proto__}function n(e,t,n,r){return o(e,t,n).apply(e,r)}function o(t,n,o){var r=e(n,o);return r?r.get?r.get.call(t):r.value:void 0}function r(t,n,o,r){var i=e(n,o);if(i&&i.set)return i.set.call(t,r),r;throw c("super has no setter '"+o+"'.")}function i(e){for(var t={},n=v(e),o=0;o<n.length;o++){var r=n[o];t[r]=p(e,r)}for(var i=y(e),o=0;o<i.length;o++){var s=i[o];t[m(s)]=p(e,m(s))}return t}function s(e,t,n,o){return f(t,"constructor",{value:e,configurable:!0,enumerable:!1,writable:!0}),arguments.length>3?("function"==typeof o&&(e.__proto__=o),e.prototype=d(l(o),i(t))):e.prototype=t,f(e,"prototype",{configurable:!1,writable:!1}),h(e,i(n))}function l(e){if("function"==typeof e){var t=e.prototype;if(u(t)===t||null===t)return e.prototype;throw new c("super prototype must be an Object or null")}if(null===e)return null;throw new c("Super expression must either be null or a function, not "+typeof e+".")}function a(e,t,o){null!==g(t)&&n(e,t,"constructor",o)}var u=Object,c=TypeError,d=u.create,h=$traceurRuntime.defineProperties,f=$traceurRuntime.defineProperty,p=$traceurRuntime.getOwnPropertyDescriptor,g=Object.getPrototypeOf,m=$traceurRuntime.toProperty,w=Object,v=w.getOwnPropertyNames,y=w.getOwnPropertySymbols;$traceurRuntime.createClass=s,$traceurRuntime.defaultSuperCall=a,$traceurRuntime.superCall=n,$traceurRuntime.superConstructor=t,$traceurRuntime.superGet=o,$traceurRuntime.superSet=r}()},{}],101:[function(e,t,n){"use strict";function o(e){var t=this,n=this;this.eventManager=_(e),this.instance=e,this.settings=e.getSettings(),this.selectionMouseDown=!1;var o=e.rootElement.getAttribute("style");o&&e.rootElement.setAttribute("data-originalstyle",o),f(e.rootElement,"handsontable");var r=document.createElement("TABLE");f(r,"htCore"),e.getSettings().tableClassName&&f(r,e.getSettings().tableClassName),this.THEAD=document.createElement("THEAD"),r.appendChild(this.THEAD),this.TBODY=document.createElement("TBODY"),r.appendChild(this.TBODY),e.table=r,e.container.insertBefore(r,e.container.firstChild),this.eventManager.addEventListener(e.rootElement,"mousedown",function(e){this.selectionMouseDown=!0,n.isTextSelectionAllowed(e.target)||(s(),e.preventDefault(),window.focus())}),this.eventManager.addEventListener(e.rootElement,"mouseup",function(e){this.selectionMouseDown=!1}),this.eventManager.addEventListener(e.rootElement,"mousemove",function(e){this.selectionMouseDown&&!n.isTextSelectionAllowed(e.target)&&(s(),e.preventDefault())}),this.eventManager.addEventListener(document.documentElement,"keyup",function(t){e.selection.isInProgress()&&!t.shiftKey&&e.selection.finish()});var i;this.isMouseDown=function(){return i},this.eventManager.addEventListener(document.documentElement,"mouseup",function(t){e.selection.isInProgress()&&1===t.which&&e.selection.finish(),i=!1,C(document.activeElement)&&e.unlisten()}),this.eventManager.addEventListener(document.documentElement,"mousedown",function(t){var o=t.target,r=t.x||t.clientX,s=t.y||t.clientY;if(!i&&e.rootElement){if(o===e.view.wt.wtTable.holder){var l=w();if(document.elementFromPoint(r+l,s)!==e.view.wt.wtTable.holder||document.elementFromPoint(r,s+l)!==e.view.wt.wtTable.holder)return}else for(;o!==document.documentElement;){if(null===o){if(t.isTargetWebComponent)break;return}if(o===e.rootElement)return;o=o.parentNode}n.settings.outsideClickDeselects?e.deselectCell():e.destroyEditor()}}),this.eventManager.addEventListener(r,"selectstart",function(e){n.settings.fragmentSelection||b(e.target)||e.preventDefault()});var s=function(){window.getSelection?window.getSelection().empty?window.getSelection().empty():window.getSelection().removeAllRanges&&window.getSelection().removeAllRanges():document.selection&&document.selection.empty()},l=[new T({className:"current",border:{width:2,color:"#5292F7",cornerVisible:function(){return n.settings.fillHandle&&!n.isCellEdited()&&!e.selection.isMultiple()},multipleSelectionHandlesVisible:function(){return!n.isCellEdited()&&!e.selection.isMultiple()}}}),new T({className:"area",border:{width:1,color:"#89AFF9",cornerVisible:function(){return n.settings.fillHandle&&!n.isCellEdited()&&e.selection.isMultiple()},multipleSelectionHandlesVisible:function(){return!n.isCellEdited()&&e.selection.isMultiple()}}}),new T({className:"highlight",highlightRowClassName:n.settings.currentRowClassName,highlightColumnClassName:n.settings.currentColClassName}),new T({className:"fill",border:{width:1,color:"red"}})];l.current=l[0],l.area=l[1],l.highlight=l[2],l.fill=l[3];var a={debug:function(){return n.settings.debug},externalRowCalculator:this.instance.getPlugin("autoRowSize")&&this.instance.getPlugin("autoRowSize").isEnabled(),table:r,preventOverflow:function(){return t.settings.preventOverflow},stretchH:function(){return n.settings.stretchH},data:e.getDataAtCell,totalRows:function(){return e.countRows()},totalColumns:function(){return e.countCols()},fixedColumnsLeft:function(){return n.settings.fixedColumnsLeft},fixedRowsTop:function(){return n.settings.fixedRowsTop},fixedRowsBottom:function(){return n.settings.fixedRowsBottom},minSpareRows:function(){return n.settings.minSpareRows},renderAllRows:n.settings.renderAllRows,rowHeaders:function(){var t=[];return e.hasRowHeaders()&&t.push(function(e,t){n.appendRowHeader(e,t)}),d.hooks.run(e,"afterGetRowHeaderRenderers",t),t},columnHeaders:function(){var t=[];return e.hasColHeaders()&&t.push(function(e,t){n.appendColHeader(e,t)}),d.hooks.run(e,"afterGetColumnHeaderRenderers",t),t},columnWidth:e.getColWidth,rowHeight:e.getRowHeight,cellRenderer:function(e,t,o){var r=n.instance.getCellMeta(e,t),i=n.instance.colToProp(t),s=n.instance.getDataAtRowProp(e,i);d.hooks.run(n.instance,"beforeRenderer",o,e,t,i,s,r),n.instance.getCellRenderer(r)(n.instance,o,e,t,i,s,r),d.hooks.run(n.instance,"afterRenderer",o,e,t,i,s,r)},selections:l,hideBorderOnMouseDownOver:function(){return n.settings.fragmentSelection},onCellMouseDown:function(t,o,r,s){var l,a,u=r.parentNode,c=u.parentNode;if(e.listen(),n.activeWt=s,i=!0,d.hooks.run(e,"beforeOnCellMouseDown",t,o,r),!E(t)){if(2===t.button&&e.selection.inInSelection(o));else t.shiftKey?o.row>=0&&o.col>=0&&e.selection.setRangeEnd(o):(o.row<0||o.col<0)&&(o.row>=0||o.col>=0)?(o.row<0&&(l=c.childNodes.length-Array.prototype.indexOf.call(c.childNodes,u)-1,a=e.getHeaderColspan(o.col,l),e.selection.setSelectedHeaders(!1,!0),e.selectCell(0,o.col,e.countRows()-1,o.col+Math.max(0,a-1))),o.col<0&&(e.selection.setSelectedHeaders(!0,!1),e.selectCell(o.row,0,o.row,e.countCols()-1))):(o.row=o.row<0?0:o.row,o.col=o.col<0?0:o.col,e.selection.setSelectedHeaders(!1,!1),e.selection.setRangeStart(o));d.hooks.run(e,"afterOnCellMouseDown",t,o,r),n.activeWt=n.wt}},onCellMouseOver:function(t,o,r,s){n.activeWt=s,o.row>=0&&o.col>=0?i&&e.selection.setRangeEnd(o):i&&(o.row<0&&(e.selection.selectedHeader.cols?(e.selection.setRangeEnd(new M(e.countRows()-1,o.col)),e.selection.setSelectedHeaders(!1,!0)):e.selection.setRangeEnd(new M(o.row,o.col))),o.col<0&&(e.selection.selectedHeader.rows?(e.selection.setRangeEnd(new M(o.row,e.countCols()-1)),e.selection.setSelectedHeaders(!0,!1)):e.selection.setRangeEnd(new M(o.row,o.col)))),d.hooks.run(e,"afterOnCellMouseOver",t,o,r),n.activeWt=n.wt},onCellCornerMouseDown:function(t){t.preventDefault(),d.hooks.run(e,"afterOnCellCornerMouseDown",t)},beforeDraw:function(e){n.beforeRender(e)},onDraw:function(e){n.onDraw(e)},onScrollVertically:function(){e.runHooks("afterScrollVertically")},onScrollHorizontally:function(){e.runHooks("afterScrollHorizontally")},onBeforeDrawBorders:function(t,n){e.runHooks("beforeDrawBorders",t,n)},onBeforeTouchScroll:function(){e.runHooks("beforeTouchScroll")},onAfterMomentumScroll:function(){e.runHooks("afterMomentumScroll")},onBeforeStretchingColumnWidth:function(t,n){return e.runHooks("beforeStretchingColumnWidth",t,n)},viewportRowCalculatorOverride:function(t){var o=e.countRows(),r=n.settings.viewportRowRenderingOffset;if("auto"===r&&n.settings.fixedRowsTop&&(r=10),"number"==typeof r&&(t.startRow=Math.max(t.startRow-r,0),t.endRow=Math.min(t.endRow+r,o-1)),"auto"===r){var i=t.startRow+t.endRow-t.startRow,s=Math.ceil(i/o*12);t.startRow=Math.max(t.startRow-s,0),t.endRow=Math.min(t.endRow+s,o-1)}e.runHooks("afterViewportRowCalculatorOverride",t)},viewportColumnCalculatorOverride:function(t){var o=e.countCols(),r=n.settings.viewportColumnRenderingOffset;if("auto"===r&&n.settings.fixedColumnsLeft&&(r=10),"number"==typeof r&&(t.startColumn=Math.max(t.startColumn-r,0),t.endColumn=Math.min(t.endColumn+r,o-1)),"auto"===r){var i=t.startColumn+t.endColumn-t.startColumn,s=Math.ceil(i/o*12);t.startRow=Math.max(t.startColumn-s,0),t.endColumn=Math.min(t.endColumn+s,o-1)}e.runHooks("afterViewportColumnCalculatorOverride",t)},rowHeaderWidth:function(){return n.settings.rowHeaderWidth},columnHeaderHeight:function(){return n.settings.columnHeaderHeight}};d.hooks.run(e,"beforeInitWalkontable",a),this.wt=new O(a),this.activeWt=this.wt,this.eventManager.addEventListener(n.wt.wtTable.spreader,"mousedown",function(e){e.target===n.wt.wtTable.spreader&&3===e.which&&S(e)}),this.eventManager.addEventListener(n.wt.wtTable.spreader,"contextmenu",function(e){e.target===n.wt.wtTable.spreader&&3===e.which&&S(e)}),this.eventManager.addEventListener(document.documentElement,"click",function(){n.settings.observeDOMVisibility&&n.wt.drawInterrupted&&(n.instance.forceFullRender=!0,n.render())})}Object.defineProperties(n,{TableView:{get:function(){return o}},__esModule:{value:!0}});var r,i,s,l,a,u,c,d=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],h=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),f=h.addClass,p=h.empty,g=h.fastInnerHTML,m=h.fastInnerText,w=h.getScrollbarWidth,v=h.hasClass,y=h.isChildOf,b=h.isInput,C=h.isOutsideInput,_=(s=e("eventManager"),s&&s.__esModule&&s||{"default":s}).eventManager,R=(l=e("helpers/dom/event"),l&&l.__esModule&&l||{"default":l}),S=R.stopPropagation,E=R.isImmediatePropagationStopped,M=(a=e("3rdparty/walkontable/src/cell/coords"),a&&a.__esModule&&a||{"default":a}).WalkontableCellCoords,T=(u=e("3rdparty/walkontable/src/selection"),u&&u.__esModule&&u||{"default":u}).WalkontableSelection,O=(c=e("3rdparty/walkontable/src/core"),c&&c.__esModule&&c||{"default":c}).Walkontable;d.TableView=o,o.prototype.isTextSelectionAllowed=function(e){if(b(e))return!0;var t=y(e,this.instance.view.wt.wtTable.spreader);return this.settings.fragmentSelection===!0&&t?!0:!("cell"!==this.settings.fragmentSelection||!this.isSelectedOnlyCell()||!t)},o.prototype.isSelectedOnlyCell=function(){var e=this.instance.getSelected()||[],t=e[0],n=e[1],o=e[2],r=e[3];return void 0!==t&&t===o&&n===r},o.prototype.isCellEdited=function(){var e=this.instance.getActiveEditor();return e&&e.isOpened()},o.prototype.beforeRender=function(e){e&&d.hooks.run(this.instance,"beforeRender",this.instance.forceFullRender)},o.prototype.onDraw=function(e){e&&d.hooks.run(this.instance,"afterRender",this.instance.forceFullRender)},o.prototype.render=function(){this.wt.draw(!this.instance.forceFullRender),this.instance.forceFullRender=!1,this.instance.renderCall=!1},o.prototype.getCellAtCoords=function(e,t){var n=this.wt.getCell(e,t);return 0>n?null:n},o.prototype.scrollViewport=function(e){this.wt.scrollViewport(e)},o.prototype.appendRowHeader=function(e,t){if(t.firstChild){var n=t.firstChild;if(!v(n,"relative"))return p(t),void this.appendRowHeader(e,t);this.updateCellHeader(n.querySelector(".rowHeader"),e,this.instance.getRowHeader)}else{var o=document.createElement("div"),r=document.createElement("span");o.className="relative",r.className="rowHeader",this.updateCellHeader(r,e,this.instance.getRowHeader),o.appendChild(r),t.appendChild(o)}d.hooks.run(this.instance,"afterGetRowHeader",e,t)},o.prototype.appendColHeader=function(e,t){if(t.firstChild){var n=t.firstChild;v(n,"relative")?this.updateCellHeader(n.querySelector(".colHeader"),e,this.instance.getColHeader):(p(t),this.appendColHeader(e,t))}else{var o=document.createElement("div"),r=document.createElement("span");o.className="relative",r.className="colHeader",this.updateCellHeader(r,e,this.instance.getColHeader),o.appendChild(r),t.appendChild(o)}d.hooks.run(this.instance,"afterGetColHeader",e,t)},o.prototype.updateCellHeader=function(e,t,n){t>-1?g(e,n(t)):(m(e,String.fromCharCode(160)),f(e,"cornerHeader"))},o.prototype.maximumVisibleElementWidth=function(e){var t=this.wt.wtViewport.getWorkspaceWidth(),n=t-e;return n>0?n:0},o.prototype.maximumVisibleElementHeight=function(e){var t=this.wt.wtViewport.getWorkspaceHeight(),n=t-e;return n>0?n:0},o.prototype.mainViewIsActive=function(){return this.wt===this.activeWt},o.prototype.destroy=function(){this.wt.destroy(),this.eventManager.destroy()}},{"3rdparty/walkontable/src/cell/coords":5,"3rdparty/walkontable/src/core":7,"3rdparty/walkontable/src/selection":18,browser:23,eventManager:41,"helpers/dom/element":46,"helpers/dom/event":47}],102:[function(e,t,n){"use strict";Object.defineProperties(n,{GhostTable:{get:function(){return g}},__esModule:{value:!0}});var o,r,i,s,l,a,u=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],c=(r=e("helpers/dom/element"),r&&r.__esModule&&r||{"default":r}),d=c.addClass,h=c.outerHeight,f=c.outerWidth,p=(i=e("helpers/array"),i&&i.__esModule&&i||{"default":i}).arrayEach,g=((s=e("helpers/object"),s&&s.__esModule&&s||{"default":s}).objectEach,(l=e("helpers/number"),l&&l.__esModule&&l||{"default":l}).rangeEach,(a=e("helpers/mixed"),a&&a.__esModule&&a||{"default":a}).stringify,function(e){this.hot=e,this.container=null,this.injected=!1,this.rows=[],this.columns=[],this.samples=null});$traceurRuntime.createClass(g,{addRow:function(e,t){if(this.columns.length)throw new Error("Doesn't support multi-dimensional table");this.rows.length||(this.container=this.createContainer(this.hot.rootElement.className));var n={row:e};this.rows.push(n),this.samples=t,this.table=this.createTable(this.hot.table.className),this.table.colGroup.appendChild(this.createColGroupsCol()),this.table.tr.appendChild(this.createRow(e)),this.container.container.appendChild(this.table.fragment),n.table=this.table.table},addColumn:function(e,t){if(this.rows.length)throw new Error("Doesn't support multi-dimensional table");this.columns.length||(this.container=this.createContainer(this.hot.rootElement.className));var n={col:e};this.columns.push(n),this.samples=t,this.table=this.createTable(this.hot.table.className),null!==this.hot.getColHeader(e)&&this.hot.view.appendColHeader(e,this.table.th),this.table.tBody.appendChild(this.createCol(e)),this.container.container.appendChild(this.table.fragment),n.table=this.table.table},getHeights:function(e){this.injected||this.injectTable(),p(this.rows,function(t){e(t.row,h(t.table)-1)})},getWidths:function(e){this.injected||this.injectTable(),p(this.columns,function(t){e(t.col,f(t.table))})},createColGroupsCol:function(){var e=this,t=document,n=t.createDocumentFragment();return n.appendChild(this.createColElement(-1)),this.samples.forEach(function(t){p(t.strings,function(t){n.appendChild(e.createColElement(t.col))})}),n},createRow:function(e){var t=this,n=document,o=n.createDocumentFragment(),r=n.createElement("th");return null!==this.hot.getRowHeader(e)&&this.hot.view.appendRowHeader(e,r),o.appendChild(r),this.samples.forEach(function(r){p(r.strings,function(r){var i=r.col,s=t.hot.getCellMeta(e,i);s.col=i,s.row=e;var l=t.hot.getCellRenderer(s),a=n.createElement("td");l(t.hot,a,e,i,t.hot.colToProp(i),r.value,s),o.appendChild(a)})}),o},createCol:function(e){var t=this,n=document,o=n.createDocumentFragment();return this.samples.forEach(function(r){p(r.strings,function(r){var i=r.row,s=t.hot.getCellMeta(i,e);s.col=e,s.row=i;var l=t.hot.getCellRenderer(s),a=n.createElement("td"),u=n.createElement("tr");l(t.hot,a,i,e,t.hot.colToProp(e),r.value,s),u.appendChild(a),o.appendChild(u)})}),o},clean:function(){this.rows.length=0,this.columns.length=0,this.samples&&this.samples.clear(),this.samples=null,this.removeTable()},injectTable:function(){var e=void 0!==arguments[0]?arguments[0]:null;this.injected||((e||this.hot.rootElement).appendChild(this.container.fragment),this.injected=!0)},removeTable:function(){this.injected&&this.container.container.parentNode&&(this.container.container.parentNode.removeChild(this.container.container),this.container=null,this.injected=!1)},createColElement:function(e){var t=document,n=t.createElement("col");return n.style.width=this.hot.view.wt.wtTable.getStretchedColumnWidth(e)+"px",n},createTable:function(){var e=void 0!==arguments[0]?arguments[0]:"",t=document,n=t.createDocumentFragment(),o=t.createElement("table"),r=t.createElement("thead"),i=t.createElement("tbody"),s=t.createElement("colgroup"),l=t.createElement("tr"),a=t.createElement("th");return this.isVertical()&&o.appendChild(s),this.isHorizontal()&&(l.appendChild(a),r.appendChild(l),o.style.tableLayout="auto",o.style.width="auto"),o.appendChild(r),this.isVertical()&&i.appendChild(l),o.appendChild(i),d(o,e),n.appendChild(o),{fragment:n,table:o,tHead:r,tBody:i,colGroup:s,tr:l,th:a}},createContainer:function(){var e=void 0!==arguments[0]?arguments[0]:"",t=document,n=t.createDocumentFragment(),o=t.createElement("div");return e="htGhostTable htAutoSize "+e.trim(),d(o,e),n.appendChild(o),{fragment:n,container:o}},isVertical:function(){return!(!this.rows.length||this.columns.length)},isHorizontal:function(){return!(!this.columns.length||this.rows.length)}},{}),u.utils.GhostTable=g},{browser:23,"helpers/array":42,"helpers/dom/element":46,"helpers/mixed":50,"helpers/number":51,"helpers/object":52}],103:[function(e,t,n){"use strict";function o(e){return"string"==typeof e&&/fps$/.test(e)&&(e=1e3/parseInt(e.replace("fps","")||0,10)),e}Object.defineProperties(n,{Interval:{get:function(){return p}},__esModule:{value:!0}});var r,i,s,l,a,u,c=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],d=(i=e("helpers/feature"),i&&i.__esModule&&i||{"default":i}),h=d.requestAnimationFrame,f=d.cancelAnimationFrame,p=((s=e("helpers/array"),s&&s.__esModule&&s||{"default":s}).arrayEach,(l=e("helpers/object"),l&&l.__esModule&&l||{"default":l}).objectEach,(a=e("helpers/number"),a&&a.__esModule&&a||{"default":a}).rangeEach,(u=e("helpers/mixed"),u&&u.__esModule&&u||{"default":u}).stringify,function(e,t){var n=this;this.timer=null,this.func=e,this.delay=o(t),this.stopped=!0,this._then=null,this._callback=function(){return n.__callback()}}),g=p;$traceurRuntime.createClass(p,{start:function(){return this.stopped&&(this._then=Date.now(),this.stopped=!1,this.timer=h(this._callback)),this},stop:function(){return this.stopped||(this.stopped=!0,f(this.timer),this.timer=null),this},__callback:function(){if(this.timer=h(this._callback),this.delay){var e=Date.now(),t=e-this._then;t>this.delay&&(this._then=e-t%this.delay,this.func())}else this.func()}},{create:function(e,t){return new g(e,t)}}),c.utils.Interval=p},{browser:23,"helpers/array":42,"helpers/feature":48,"helpers/mixed":50,"helpers/number":51,"helpers/object":52}],104:[function(e,t,n){"use strict";var o;Object.defineProperties(n,{SamplesGenerator:{get:function(){return m}},__esModule:{value:!0}});var r,i,s,l,a,u,c=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],d=(i=e("helpers/dom/element"),i&&i.__esModule&&i||{"default":i}),h=(d.addClass,d.outerHeight,d.outerWidth,(s=e("helpers/array"),s&&s.__esModule&&s||{"default":s}).arrayEach,l=e("helpers/object"),l&&l.__esModule&&l||{"default":l}),f=(h.objectEach,h.isObject),p=(a=e("helpers/number"),a&&a.__esModule&&a||{"default":a}).rangeEach,g=(u=e("helpers/mixed"),u&&u.__esModule&&u||{"default":u}).stringify,m=function(e){this.samples=null,this.dataFactory=e,this.customSampleCount=null},w=m;$traceurRuntime.createClass(m,(o={},Object.defineProperty(o,"getSampleCount",{value:function(){return this.customSampleCount?this.customSampleCount:w.SAMPLE_COUNT},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(o,"generateRowSamples",{value:function(e,t){return this.generateSamples("row",t,e)},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(o,"generateColumnSamples",{value:function(e,t){return this.generateSamples("col",t,e)},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(o,"generateSamples",{value:function(e,t,n){var o=this,r=new Map;return"number"==typeof n&&(n={from:n,to:n}),p(n.from,n.to,function(n){var i=o.generateSample(e,t,n);r.set(n,i)}),r},configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(o,"generateSample",{value:function(e,t,n){var o,r=this,i=new Map,s=[];return p(t.from,t.to,function(t){var l,a;if("row"===e)a=r.dataFactory(n,t);else{if("col"!==e)throw new Error("Unsupported sample type");a=r.dataFactory(t,n)}o=f(a)?Object.keys(a).length:Array.isArray(a)?a.length:g(a).length,i.has(o)||i.set(o,{needed:r.getSampleCount(),strings:[]});var u=i.get(o);if(u.needed){var c=s.indexOf(a)>-1;if(!c){var d="row"===e?"col":"row";u.strings.push((l={},Object.defineProperty(l,"value",{value:a,configurable:!0,enumerable:!0,writable:!0}),Object.defineProperty(l,d,{value:t,configurable:!0,enumerable:!0,writable:!0}),l)),s.push(a),u.needed--}}}),i},configurable:!0,enumerable:!0,writable:!0}),o),{get SAMPLE_COUNT(){return 3}}),c.utils.SamplesGenerator=m},{browser:23,"helpers/array":42,"helpers/dom/element":46,"helpers/mixed":50,"helpers/number":51,"helpers/object":52}],105:[function(e,t,n){"use strict";function o(e,t){var n=e,o="string"==typeof n?n.toLowerCase():null;return function(e){for(var r=!1,i=0,s=e.length;s>i;i++){if(n===e[i]){r=!0;break}if(o===l(e[i]).toLowerCase()){r=!0;break}}t(r)}}var r,i,s=(r=e("browser"),r&&r.__esModule&&r||{"default":r})["default"],l=(i=e("helpers/mixed"),i&&i.__esModule&&i||{"default":i}).stringify;s.AutocompleteValidator=function(e,t){this.strict&&this.source?"function"==typeof this.source?this.source(e,o(e,t)):o(e,t)(this.source):t(!0)}},{browser:23,"helpers/mixed":50}],106:[function(e,t,n){"use strict";var o,r,i,s,l=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],a=(r=e("moment"),r&&r.__esModule&&r||{"default":r})["default"],u=(i=e("../helpers/date"),i&&i.__esModule&&i||{"default":i}).getNormalizedDate,c=(s=e("editors"),s&&s.__esModule&&s||{"default":s}).getEditor;l.DateValidator=function(e,t){var n=!0,o=c("date",this.instance);null==e&&(e="");var r=a(new Date(e)).isValid(),i=a(e,this.dateFormat||o.defaultDateFormat,!0).isValid();if(this.allowEmpty&&""===e&&(r=!0,i=!0),r||(n=!1),!r&&i&&(n=!0),r&&!i)if(this.correctFormat===!0){var s=d(e,this.dateFormat);this.instance.setDataAtCell(this.row,this.col,s,"dateValidator"),n=!0}else n=!1;t(n)};var d=function(e,t){var n=a(u(e)),o=n.format("YYYY"),r=a().format("YYYY");return o.substr(0,2)!==r.substr(0,2)?e.match(new RegExp(o))||n.year(o.replace(o.substr(0,2),r.substr(0,2))):o.length>4&&n.year((n.year()+"").substr(0,4)),n.format(t)}},{"../helpers/date":45,browser:23,editors:29,moment:"moment"}],107:[function(e,t,n){"use strict";var o,r=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"];r.NumericValidator=function(e,t){null==e&&(e=""),t(this.allowEmpty&&""===e?!0:""===e?!1:/^-?\d*(\.|\,)?\d*$/.test(e))}},{browser:23}],108:[function(e,t,n){"use strict";var o,r,i=(o=e("browser"),o&&o.__esModule&&o||{"default":o})["default"],s=(r=e("moment"),r&&r.__esModule&&r||{"default":r})["default"],l=["YYYY-MM-DDTHH:mm:ss.SSSZ","X","x"];i.TimeValidator=function(e,t){var n=!0,o=this.timeFormat||"h:mm:ss a";null===e&&(e=""),e=/^\d{3,}$/.test(e)?parseInt(e,10):e;var r=/^\d{1,2}$/.test(e);r&&(e+=":00");var i=s(e,l,!0).isValid()?s(e):s(e,o),a=i.isValid(),u=s(e,o,!0).isValid()&&!r;if(this.allowEmpty&&""===e&&(a=!0,u=!0),a||(n=!1),!a&&u&&(n=!0),a&&!u)if(this.correctFormat===!0){var c=i.format(o);this.instance.setDataAtCell(this.row,this.col,c,"timeValidator"),n=!0}else n=!1;t(n)}},{browser:23,moment:"moment"}],SheetClip:[function(e,t,n){!function(e){"use strict";function t(e){return e.split('"').length-1}var o={parse:function(e){var n,o,r,i,s,l,a,u=[],c=0;for(r=e.split("\n"),r.length>1&&""===r[r.length-1]&&r.pop(),n=0,o=r.length;o>n;n+=1){for(r[n]=r[n].split("	"),i=0,s=r[n].length;s>i;i+=1)u[c]||(u[c]=[]),l&&0===i?(a=u[c].length-1,u[c][a]=u[c][a]+"\n"+r[n][0],l&&1&t(r[n][0])&&(l=!1,u[c][a]=u[c][a].substring(0,u[c][a].length-1).replace(/""/g,'"'))):i===s-1&&0===r[n][i].indexOf('"')&&1&t(r[n][i])?(u[c].push(r[n][i].substring(1).replace(/""/g,'"')),l=!0):(u[c].push(r[n][i].replace(/""/g,'"')),l=!1);l||(c+=1)}return u},stringify:function(e){var t,n,o,r,i,s="";for(t=0,n=e.length;n>t;t+=1){for(r=e[t].length,o=0;r>o;o+=1)o>0&&(s+="	"),i=e[t][o],s+="string"==typeof i?i.indexOf("\n")>-1?'"'+i.replace(/"/g,'""')+'"':i:null===i||void 0===i?"":i;s+="\n"}return s}};"undefined"!=typeof n?(n.parse=o.parse,n.stringify=o.stringify):e.SheetClip=o}(window)},{}],autoResize:[function(e,t,n){function o(){function e(e){return e.currentStyle||document.defaultView.getComputedStyle(e)}var t,n={minHeight:200,maxHeight:300,minWidth:100,maxWidth:300},o=document.body,r=document.createTextNode(""),i=document.createElement("SPAN"),s=function(e,t,n){window.attachEvent?e.attachEvent("on"+t,n):e.addEventListener(t,n,!1)},l=function(e,t,n){window.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},a=function(s){var l,a;s?/^[a-zA-Z \.,\\\/\|0-9]$/.test(s)||(s="."):s="",void 0!==r.textContent?r.textContent=t.value+s:r.data=t.value+s,i.style.fontSize=e(t).fontSize,i.style.fontFamily=e(t).fontFamily,i.style.whiteSpace="pre",o.appendChild(i),l=i.clientWidth+2,o.removeChild(i),t.style.height=n.minHeight+"px",n.minWidth>l?t.style.width=n.minWidth+"px":l>n.maxWidth?t.style.width=n.maxWidth+"px":t.style.width=l+"px",a=t.scrollHeight?t.scrollHeight-1:0,n.minHeight>a?t.style.height=n.minHeight+"px":n.maxHeight<a?(t.style.height=n.maxHeight+"px",t.style.overflowY="visible"):t.style.height=a+"px"},u=function(){window.setTimeout(a,0)},c=function(e){if(e&&e.minHeight)if("inherit"==e.minHeight)n.minHeight=t.clientHeight;else{var o=parseInt(e.minHeight);isNaN(o)||(n.minHeight=o)}if(e&&e.maxHeight)if("inherit"==e.maxHeight)n.maxHeight=t.clientHeight;else{var s=parseInt(e.maxHeight);isNaN(s)||(n.maxHeight=s)}if(e&&e.minWidth)if("inherit"==e.minWidth)n.minWidth=t.clientWidth;else{var l=parseInt(e.minWidth);isNaN(l)||(n.minWidth=l)}if(e&&e.maxWidth)if("inherit"==e.maxWidth)n.maxWidth=t.clientWidth;else{var a=parseInt(e.maxWidth);isNaN(a)||(n.maxWidth=a)}i.firstChild||(i.className="autoResize",i.style.display="inline-block",i.appendChild(r))},d=function(e,o,r){t=e,c(o),"TEXTAREA"==t.nodeName&&(t.style.resize="none",t.style.overflowY="",t.style.height=n.minHeight+"px",t.style.minWidth=n.minWidth+"px",t.style.maxWidth=n.maxWidth+"px",t.style.overflowY="hidden"),r&&(s(t,"change",a),s(t,"cut",u),s(t,"paste",u),s(t,"drop",u),s(t,"keydown",u)),a()};return{init:function(e,t,n){d(e,t,n)},unObserve:function(){l(t,"change",a),l(t,"cut",u),l(t,"paste",u),l(t,"drop",u),l(t,"keydown",u)},resize:a}}"undefined"!=typeof n&&(t.exports=o)},{}],copyPaste:[function(e,t,n){function o(){return i?i.hasBeenDestroyed()&&i.init():i=new r,i.refCounter++,i}function r(){this.refCounter=0,this.init()}var i;"undefined"!=typeof n&&(t.exports=o),r.prototype.init=function(){var e,t;this.copyCallbacks=[],this.cutCallbacks=[],this.pasteCallbacks=[],t=document.body,document.getElementById("CopyPasteDiv")?(this.elDiv=document.getElementById("CopyPasteDiv"),this.elTextarea=this.elDiv.firstChild):(this.elDiv=document.createElement("div"),this.elDiv.id="CopyPasteDiv",e=this.elDiv.style,e.position="fixed",e.top="-10000px",e.left="-10000px",t.appendChild(this.elDiv),this.elTextarea=document.createElement("textarea"),this.elTextarea.className="copyPaste",this.elTextarea.onpaste=function(e){var t,n;"WebkitAppearance"in document.documentElement.style&&(t=e.clipboardData.getData("Text"),-1!==navigator.userAgent.indexOf("Safari")&&-1===navigator.userAgent.indexOf("Chrome")&&(n=t.split("\n"),""===n[n.length-1]&&n.pop(),t=n.join("\n")),this.value=t,e.preventDefault())},e=this.elTextarea.style,e.width="10000px",e.height="10000px",e.overflow="hidden",this.elDiv.appendChild(this.elTextarea),"undefined"!=typeof e.opacity&&(e.opacity=0)),this.onKeyDownRef=this.onKeyDown.bind(this),document.documentElement.addEventListener("keydown",this.onKeyDownRef,!1)},r.prototype.onKeyDown=function(e){function t(){var e=document.activeElement;return e.shadowRoot&&e.shadowRoot.activeElement&&(e=e.shadowRoot.activeElement),["INPUT","SELECT","TEXTAREA"].indexOf(e.nodeName)>-1||"true"===e.contentEditable}var n=this,o=!1;if(e.metaKey?o=!0:e.ctrlKey&&-1===navigator.userAgent.indexOf("Mac")&&(o=!0),o){if(document.activeElement!==this.elTextarea&&(""!==this.getSelectionText()||t()))return;this.selectNodeText(this.elTextarea),setTimeout(function(){document.activeElement!==n.elTextarea&&n.selectNodeText(n.elTextarea)},0)}e.isImmediatePropagationEnabled===!1||!o||67!==e.keyCode&&86!==e.keyCode&&88!==e.keyCode||(88===e.keyCode?setTimeout(function(){n.triggerCut(e)},0):86===e.keyCode&&setTimeout(function(){n.triggerPaste(e)},0))},r.prototype.selectNodeText=function(e){e&&e.select()},r.prototype.getSelectionText=function(){var e="";return window.getSelection?e=window.getSelection().toString():document.selection&&"Control"!==document.selection.type&&(e=document.selection.createRange().text),e},r.prototype.copyable=function(e){if("string"!=typeof e&&void 0===e.toString)throw new Error("copyable requires string parameter");this.elTextarea.value=e,this.selectNodeText(this.elTextarea)},r.prototype.onCut=function(e){this.cutCallbacks.push(e)},r.prototype.onPaste=function(e){this.pasteCallbacks.push(e)},r.prototype.removeCallback=function(e){var t,n;for(t=0,n=this.copyCallbacks.length;n>t;t++)if(this.copyCallbacks[t]===e)return this.copyCallbacks.splice(t,1),!0;for(t=0,n=this.cutCallbacks.length;n>t;t++)if(this.cutCallbacks[t]===e)return this.cutCallbacks.splice(t,1),!0;for(t=0,n=this.pasteCallbacks.length;n>t;t++)if(this.pasteCallbacks[t]===e)return this.pasteCallbacks.splice(t,1),!0;return!1},r.prototype.triggerCut=function(e){var t=this;t.cutCallbacks&&setTimeout(function(){for(var n=0,o=t.cutCallbacks.length;o>n;n++)t.cutCallbacks[n](e)},50)},r.prototype.triggerPaste=function(e,t){var n=this;n.pasteCallbacks&&setTimeout(function(){for(var o=t||n.elTextarea.value,r=0,i=n.pasteCallbacks.length;i>r;r++)n.pasteCallbacks[r](o,e)},50)},r.prototype.destroy=function(){this.hasBeenDestroyed()||0!==--this.refCounter||(this.elDiv&&this.elDiv.parentNode&&(this.elDiv.parentNode.removeChild(this.elDiv),this.elDiv=null,
this.elTextarea=null),document.documentElement.removeEventListener("keydown",this.onKeyDownRef),this.onKeyDownRef=null)},r.prototype.hasBeenDestroyed=function(){return!this.refCounter}},{}],es6collections:[function(e,t,n){/*!
 * Copyright (C) 2011 by Andrea Giammarchi, @WebReflection
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
!function(e){"use strict";function t(e,t){function o(e){return this&&this.constructor===o?(this._keys=[],this._values=[],this._itp=[],this.objectOnly=t,void(e&&n.call(this,e))):new o(e)}return t||y(e,"size",{get:m}),e.constructor=o,o.prototype=e,o}function n(e){this.add?e.forEach(this.add,this):e.forEach(function(e){this.set(e[0],e[1])},this)}function o(e){return this.has(e)&&(this._keys.splice(v,1),this._values.splice(v,1),this._itp.forEach(function(e){v<e[0]&&e[0]--})),v>-1}function r(e){return this.has(e)?this._values[v]:void 0}function i(e,t){if(this.objectOnly&&t!==Object(t))throw new TypeError("Invalid value used as weak collection key");if(t!=t||0===t)for(v=e.length;v--&&!b(e[v],t););else v=e.indexOf(t);return v>-1}function s(e){return i.call(this,this._values,e)}function l(e){return i.call(this,this._keys,e)}function a(e,t){return this.has(e)?this._values[v]=t:this._values[this._keys.push(e)-1]=t,this}function u(e){return this.has(e)||this._values.push(e),this}function c(){this._values.length=0}function d(){return g(this._itp,this._keys)}function h(){return g(this._itp,this._values)}function f(){return g(this._itp,this._keys,this._values)}function p(){return g(this._itp,this._values,this._values)}function g(e,t,n){var o=[0],r=!1;return e.push(o),{next:function(){var i,s=o[0];return!r&&s<t.length?(i=n?[t[s],n[s]]:t[s],o[0]++):(r=!0,e.splice(e.indexOf(o),1)),{done:r,value:i}}}}function m(){return this._values.length}function w(e,t){for(var n=this.entries();;){var o=n.next();if(o.done)break;e.call(t,o.value[1],o.value[0],this)}}var v,y=Object.defineProperty,b=function(e,t){return isNaN(e)?isNaN(t):e===t};"undefined"==typeof WeakMap&&(e.WeakMap=t({"delete":o,clear:c,get:r,has:l,set:a},!0)),"undefined"==typeof Map&&(e.Map=t({"delete":o,has:l,get:r,set:a,keys:d,values:h,entries:f,forEach:w,clear:c})),"undefined"==typeof Set&&(e.Set=t({has:s,add:u,"delete":o,clear:c,keys:h,values:h,entries:p,forEach:w})),"undefined"==typeof WeakSet&&(e.WeakSet=t({"delete":o,add:u,clear:c,has:s},!0))}("undefined"!=typeof n&&"undefined"!=typeof global?global:window)},{}],jsonpatch:[function(e,t,n){var o;!function(e){function t(e){return-1===e.indexOf("/")&&-1===e.indexOf("~")?e:e.replace(/~/g,"~0").replace(/\//g,"~1")}function n(e,o){var r;for(var i in e)if(e.hasOwnProperty(i)){if(e[i]===o)return t(i)+"/";if("object"==typeof e[i]&&(r=n(e[i],o),""!=r))return t(i)+"/"+r}return""}function o(e,t){if(e===t)return"/";var o=n(e,t);if(""===o)throw new Error("Object not found in root");return"/"+o}function r(e){for(var t=0,n=v.length;n>t;t++)if(v[t].obj===e)return v[t]}function i(e){for(var t=0,n=v.length;n>t;t++)v[t]===e&&v.splice(t,1)}function s(e,t){for(var n=0,o=e.observers.length;o>n;n++)if(e.observers[n].callback===t)return e.observers[n].observer}function l(e,t){for(var n=0,o=e.observers.length;o>n;n++)if(e.observers[n].observer===t)return e.observers.splice(n,1),void(e.observers.length||i(e))}function a(e,t){h(t),Object.observe?d(t,e):clearTimeout(t.next);var n=r(e);l(n,t)}function u(e,t){var n,i=[],l=e,a=r(e);if(a?n=s(a,t):(a=new y(e),v.push(a)),n)return n;if(Object.observe)n=function(r){d(n,e),c(n,e);for(var s=0,a=r.length;a>s;){if(("length"!==r[s].name||!_(r[s].object))&&"__Jasmine_been_here_before__"!==r[s].name){var u=r[s].type;switch(u){case"new":u="add";break;case"deleted":u="delete";break;case"updated":u="update"}w[u].call(r[s],i,o(l,r[s].object))}s++}i&&t&&t(i),n.patches=i,i=[]};else if(n={},a.value=JSON.parse(JSON.stringify(e)),t){n.callback=t,n.next=null;var u=this.intervals||[100,1e3,1e4,6e4],f=0,p=function(){h(n)},g=function(){clearTimeout(n.next),n.next=setTimeout(function(){p(),f=0,n.next=setTimeout(m,u[f++])},0)},m=function(){p(),f==u.length&&(f=u.length-1),n.next=setTimeout(m,u[f++])};"undefined"!=typeof window&&(window.addEventListener?(window.addEventListener("mousedown",g),window.addEventListener("mouseup",g),window.addEventListener("keydown",g)):(window.attachEvent("onmousedown",g),window.attachEvent("onmouseup",g),window.attachEvent("onkeydown",g))),n.next=setTimeout(m,u[f++])}return n.patches=i,n.object=e,a.observers.push(new b(t,n)),c(n,e)}function c(e,t){if(Object.observe){Object.observe(t,e);for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];o&&"object"==typeof o&&c(e,o)}}return e}function d(e,t){if(Object.observe){Object.unobserve(t,e);for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];o&&"object"==typeof o&&d(e,o)}}return e}function h(e){if(Object.observe)Object.deliverChangeRecords(e);else{for(var t,n=0,o=v.length;o>n;n++)if(v[n].obj===e.object){t=v[n];break}t&&f(t.value,e.object,e.patches,"")}var r=e.patches;return r.length>0&&(e.patches=[],e.callback&&e.callback(r)),r}function f(e,n,o,r){for(var i=C(n),s=C(e),l=!1,a=!1,u=s.length-1;u>=0;u--){var c=s[u],d=e[c];if(n.hasOwnProperty(c)){var h=n[c];d instanceof Object?f(d,h,o,r+"/"+t(c)):d!=h&&(l=!0,o.push({op:"replace",path:r+"/"+t(c),value:h}),e[c]=h)}else o.push({op:"remove",path:r+"/"+t(c)}),delete e[c],a=!0}if(a||i.length!=s.length)for(var u=0;u<i.length;u++){var c=i[u];e.hasOwnProperty(c)||(o.push({op:"add",path:r+"/"+t(c),value:n[c]}),e[c]=JSON.parse(JSON.stringify(n[c])))}}function p(e,t){for(var n,o=!1,r=0,i=t.length;i>r;){n=t[r];for(var s=n.path.split("/"),l=e,a=1,u=s.length;;)if(_(l)){var c=parseInt(s[a],10);if(a++,a>=u){o=m[n.op].call(n,l,c,e);break}l=l[c]}else{var d=s[a];if(-1!=d.indexOf("~")&&(d=d.replace(/~1/g,"/").replace(/~0/g,"~")),a++,a>=u){o=g[n.op].call(n,l,d,e);break}l=l[d]}r++}return o}var g={add:function(e,t){return e[t]=this.value,!0},remove:function(e,t){return delete e[t],!0},replace:function(e,t){return e[t]=this.value,!0},move:function(e,t,n){var o={op:"_get",path:this.from};return p(n,[o]),p(n,[{op:"remove",path:this.from}]),p(n,[{op:"add",path:this.path,value:o.value}]),!0},copy:function(e,t,n){var o={op:"_get",path:this.from};return p(n,[o]),p(n,[{op:"add",path:this.path,value:o.value}]),!0},test:function(e,t){return JSON.stringify(e[t])===JSON.stringify(this.value)},_get:function(e,t){this.value=e[t]}},m={add:function(e,t){return e.splice(t,0,this.value),!0},remove:function(e,t){return e.splice(t,1),!0},replace:function(e,t){return e[t]=this.value,!0},move:g.move,copy:g.copy,test:g.test,_get:g._get},w={add:function(e,n){var o={op:"add",path:n+t(this.name),value:this.object[this.name]};e.push(o)},"delete":function(e,n){var o={op:"remove",path:n+t(this.name)};e.push(o)},update:function(e,n){var o={op:"replace",path:n+t(this.name),value:this.object[this.name]};e.push(o)}},v=[];e.intervals;var y=function(){function e(e){this.observers=[],this.obj=e}return e}(),b=function(){function e(e,t){this.callback=e,this.observer=t}return e}();e.unobserve=a,e.observe=u,e.generate=h;var C;C=Object.keys?Object.keys:function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t};var _;_=Array.isArray?Array.isArray:function(e){return e.push&&"number"==typeof e.length},e.apply=p}(o||(o={})),"undefined"!=typeof n&&(n.apply=o.apply,n.observe=o.observe,n.unobserve=o.unobserve,n.generate=o.generate)},{}],moment:[function(t,n,o){!function(t,r){"object"==typeof o&&"undefined"!=typeof n?n.exports=r():"function"==typeof e&&e.amd?e(r):t.moment=r()}(this,function(){"use strict";function e(){return eo.apply(null,arguments)}function o(e){eo=e}function r(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function s(e,t){var n,o=[];for(n=0;n<e.length;++n)o.push(t(e[n],n));return o}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function a(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function u(e,t,n,o){return Le(e,t,n,o,!0).utc()}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(e){return null==e._pf&&(e._pf=c()),e._pf}function h(e){if(null==e._isValid){var t=d(e);e._isValid=!(isNaN(e._d.getTime())||!(t.overflow<0)||t.empty||t.invalidMonth||t.invalidWeekday||t.nullInput||t.invalidFormat||t.userInvalidated),e._strict&&(e._isValid=e._isValid&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour)}return e._isValid}function f(e){var t=u(NaN);return null!=e?a(d(t),e):d(t).userInvalidated=!0,t}function p(e){return void 0===e}function g(e,t){var n,o,r;if(p(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),p(t._i)||(e._i=t._i),p(t._f)||(e._f=t._f),p(t._l)||(e._l=t._l),p(t._strict)||(e._strict=t._strict),p(t._tzm)||(e._tzm=t._tzm),p(t._isUTC)||(e._isUTC=t._isUTC),p(t._offset)||(e._offset=t._offset),p(t._pf)||(e._pf=d(t)),p(t._locale)||(e._locale=t._locale),to.length>0)for(n in to)o=to[n],r=t[o],p(r)||(e[o]=r);return e}function m(t){g(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),no===!1&&(no=!0,e.updateOffset(this),no=!1)}function w(e){return e instanceof m||null!=e&&null!=e._isAMomentObject}function v(e){return 0>e?Math.ceil(e):Math.floor(e)}function y(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=v(t)),n}function b(e,t,n){var o,r=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(o=0;r>o;o++)(n&&e[o]!==t[o]||!n&&y(e[o])!==y(t[o]))&&s++;return s+i}function C(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function _(e,t){var n=!0;return a(function(){return n&&(C(e+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),n=!1),t.apply(this,arguments)},t)}function R(e,t){oo[e]||(C(t),oo[e]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function E(e){return"[object Object]"===Object.prototype.toString.call(e)}function M(e){var t,n;for(n in e)t=e[n],S(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function T(e,t){var n,o=a({},e);for(n in t)l(t,n)&&(E(e[n])&&E(t[n])?(o[n]={},a(o[n],e[n]),a(o[n],t[n])):null!=t[n]?o[n]=t[n]:delete o[n]);return o}function O(e){null!=e&&this.set(e)}function k(e){return e?e.toLowerCase().replace("_","-"):e}function D(e){for(var t,n,o,r,i=0;i<e.length;){for(r=k(e[i]).split("-"),t=r.length,n=k(e[i+1]),n=n?n.split("-"):null;t>0;){if(o=A(r.slice(0,t).join("-")))return o;if(n&&n.length>=t&&b(r,n,!0)>=t-1)break;t--}i++}return null}function A(e){var o=null;if(!io[e]&&"undefined"!=typeof n&&n&&n.exports)try{o=ro._abbr,t("./locale/"+e),x(o)}catch(r){}return io[e]}function x(e,t){var n;return e&&(n=p(t)?N(e):H(e,t),n&&(ro=n)),ro._abbr}function H(e,t){return null!==t?(t.abbr=e,null!=io[e]?(R("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),t=T(io[e]._config,t)):null!=t.parentLocale&&(null!=io[t.parentLocale]?t=T(io[t.parentLocale]._config,t):R("parentLocaleUndefined","specified parentLocale is not defined yet")),io[e]=new O(t),x(e),io[e]):(delete io[e],null)}function P(e,t){if(null!=t){var n;null!=io[e]&&(t=T(io[e]._config,t)),n=new O(t),n.parentLocale=io[e],io[e]=n,x(e)}else null!=io[e]&&(null!=io[e].parentLocale?io[e]=io[e].parentLocale:null!=io[e]&&delete io[e]);return io[e]}function N(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ro;if(!r(e)){if(t=A(e))return t;e=[e]}return D(e)}function L(){return Object.keys(io)}function W(e,t){var n=e.toLowerCase();so[n]=so[n+"s"]=so[t]=e}function I(e){return"string"==typeof e?so[e]||so[e.toLowerCase()]:void 0}function j(e){var t,n,o={};for(n in e)l(e,n)&&(t=I(n),t&&(o[t]=e[n]));return o}function V(t,n){return function(o){return null!=o?(B(this,t,o),e.updateOffset(this,n),this):F(this,t)}}function F(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function B(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function z(e,t){var n;if("object"==typeof e)for(n in e)this.set(n,e[n]);else if(e=I(e),S(this[e]))return this[e](t);return this}function Y(e,t,n){var o=""+Math.abs(e),r=t-o.length,i=e>=0;return(i?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+o}function U(e,t,n,o){var r=o;"string"==typeof o&&(r=function(){return this[o]()}),e&&(co[e]=r),t&&(co[t[0]]=function(){return Y(r.apply(this,arguments),t[1],t[2])}),n&&(co[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function G(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function $(e){var t,n,o=e.match(lo);for(t=0,n=o.length;n>t;t++)co[o[t]]?o[t]=co[o[t]]:o[t]=G(o[t]);return function(r){var i="";for(t=0;n>t;t++)i+=o[t]instanceof Function?o[t].call(r,e):o[t];return i}}function X(e,t){return e.isValid()?(t=K(t,e.localeData()),uo[t]=uo[t]||$(t),uo[t](e)):e.localeData().invalidDate()}function K(e,t){function n(e){return t.longDateFormat(e)||e}var o=5;for(ao.lastIndex=0;o>=0&&ao.test(e);)e=e.replace(ao,n),ao.lastIndex=0,o-=1;return e}function q(e,t,n){ko[e]=S(t)?t:function(e,o){return e&&n?n:t}}function Z(e,t){return l(ko,e)?ko[e](t._strict,t._locale):new RegExp(J(e))}function J(e){return Q(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,o,r){return t||n||o||r}))}function Q(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ee(e,t){var n,o=t;for("string"==typeof e&&(e=[e]),"number"==typeof t&&(o=function(e,n){n[t]=y(e)}),n=0;n<e.length;n++)Do[e[n]]=o}function te(e,t){ee(e,function(e,n,o,r){o._w=o._w||{},t(e,o._w,o,r)})}function ne(e,t,n){null!=t&&l(Do,e)&&Do[e](t,n._a,n,e)}function oe(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function re(e,t){return r(this._months)?this._months[e.month()]:this._months[Vo.test(t)?"format":"standalone"][e.month()]}function ie(e,t){return r(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Vo.test(t)?"format":"standalone"][e.month()]}function se(e,t,n){var o,r,i;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),o=0;12>o;o++){if(r=u([2e3,o]),n&&!this._longMonthsParse[o]&&(this._longMonthsParse[o]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[o]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[o]||(i="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[o]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[o].test(e))return o;if(n&&"MMM"===t&&this._shortMonthsParse[o].test(e))return o;if(!n&&this._monthsParse[o].test(e))return o}}function le(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=y(t);else if(t=e.localeData().monthsParse(t),"number"!=typeof t)return e;return n=Math.min(e.date(),oe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function ae(t){return null!=t?(le(this,t),e.updateOffset(this,!0),this):F(this,"Month")}function ue(){return oe(this.year(),this.month())}function ce(e){return this._monthsParseExact?(l(this,"_monthsRegex")||he.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}function de(e){return this._monthsParseExact?(l(this,"_monthsRegex")||he.call(this),e?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}function he(){function e(e,t){return t.length-e.length}var t,n,o=[],r=[],i=[];for(t=0;12>t;t++)n=u([2e3,t]),o.push(this.monthsShort(n,"")),r.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(o.sort(e),r.sort(e),i.sort(e),t=0;12>t;t++)o[t]=Q(o[t]),r[t]=Q(r[t]),i[t]=Q(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+o.join("|")+")$","i")}function fe(e){var t,n=e._a;return n&&-2===d(e).overflow&&(t=n[xo]<0||n[xo]>11?xo:n[Ho]<1||n[Ho]>oe(n[Ao],n[xo])?Ho:n[Po]<0||n[Po]>24||24===n[Po]&&(0!==n[No]||0!==n[Lo]||0!==n[Wo])?Po:n[No]<0||n[No]>59?No:n[Lo]<0||n[Lo]>59?Lo:n[Wo]<0||n[Wo]>999?Wo:-1,d(e)._overflowDayOfYear&&(Ao>t||t>Ho)&&(t=Ho),d(e)._overflowWeeks&&-1===t&&(t=Io),d(e)._overflowWeekday&&-1===t&&(t=jo),d(e).overflow=t),e}function pe(e){var t,n,o,r,i,s,l=e._i,a=Uo.exec(l)||Go.exec(l);if(a){for(d(e).iso=!0,t=0,n=Xo.length;n>t;t++)if(Xo[t][1].exec(a[1])){r=Xo[t][0],o=Xo[t][2]!==!1;break}if(null==r)return void(e._isValid=!1);if(a[3]){for(t=0,n=Ko.length;n>t;t++)if(Ko[t][1].exec(a[3])){i=(a[2]||" ")+Ko[t][0];break}if(null==i)return void(e._isValid=!1)}if(!o&&null!=i)return void(e._isValid=!1);if(a[4]){if(!$o.exec(a[4]))return void(e._isValid=!1);s="Z"}e._f=r+(i||"")+(s||""),ke(e)}else e._isValid=!1}function ge(t){var n=qo.exec(t._i);return null!==n?void(t._d=new Date(+n[1])):(pe(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function me(e,t,n,o,r,i,s){var l=new Date(e,t,n,o,r,i,s);return 100>e&&e>=0&&isFinite(l.getFullYear())&&l.setFullYear(e),l}function we(e){var t=new Date(Date.UTC.apply(null,arguments));return 100>e&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ve(e){return ye(e)?366:365}function ye(e){return e%4===0&&e%100!==0||e%400===0}function be(){return ye(this.year())}function Ce(e,t,n){var o=7+t-n,r=(7+we(e,0,o).getUTCDay()-t)%7;return-r+o-1}function _e(e,t,n,o,r){var i,s,l=(7+n-o)%7,a=Ce(e,o,r),u=1+7*(t-1)+l+a;return 0>=u?(i=e-1,s=ve(i)+u):u>ve(e)?(i=e+1,s=u-ve(e)):(i=e,s=u),{year:i,dayOfYear:s}}function Re(e,t,n){var o,r,i=Ce(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return 1>s?(r=e.year()-1,o=s+Se(r,t,n)):s>Se(e.year(),t,n)?(o=s-Se(e.year(),t,n),r=e.year()+1):(r=e.year(),o=s),{week:o,year:r}}function Se(e,t,n){var o=Ce(e,t,n),r=Ce(e+1,t,n);return(ve(e)-o+r)/7}function Ee(e,t,n){return null!=e?e:null!=t?t:n}function Me(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function Te(e){var t,n,o,r,i=[];if(!e._d){for(o=Me(e),e._w&&null==e._a[Ho]&&null==e._a[xo]&&Oe(e),e._dayOfYear&&(r=Ee(e._a[Ao],o[Ao]),e._dayOfYear>ve(r)&&(d(e)._overflowDayOfYear=!0),n=we(r,0,e._dayOfYear),e._a[xo]=n.getUTCMonth(),e._a[Ho]=n.getUTCDate()),t=0;3>t&&null==e._a[t];++t)e._a[t]=i[t]=o[t];for(;7>t;t++)e._a[t]=i[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Po]&&0===e._a[No]&&0===e._a[Lo]&&0===e._a[Wo]&&(e._nextDay=!0,e._a[Po]=0),e._d=(e._useUTC?we:me).apply(null,i),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Po]=24)}}function Oe(e){var t,n,o,r,i,s,l,a;t=e._w,null!=t.GG||null!=t.W||null!=t.E?(i=1,s=4,n=Ee(t.GG,e._a[Ao],Re(We(),1,4).year),o=Ee(t.W,1),r=Ee(t.E,1),(1>r||r>7)&&(a=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,n=Ee(t.gg,e._a[Ao],Re(We(),i,s).year),o=Ee(t.w,1),null!=t.d?(r=t.d,(0>r||r>6)&&(a=!0)):null!=t.e?(r=t.e+i,(t.e<0||t.e>6)&&(a=!0)):r=i),1>o||o>Se(n,i,s)?d(e)._overflowWeeks=!0:null!=a?d(e)._overflowWeekday=!0:(l=_e(n,o,r,i,s),e._a[Ao]=l.year,e._dayOfYear=l.dayOfYear)}function ke(t){if(t._f===e.ISO_8601)return void pe(t);t._a=[],d(t).empty=!0;var n,o,r,i,s,l=""+t._i,a=l.length,u=0;for(r=K(t._f,t._locale).match(lo)||[],n=0;n<r.length;n++)i=r[n],o=(l.match(Z(i,t))||[])[0],o&&(s=l.substr(0,l.indexOf(o)),s.length>0&&d(t).unusedInput.push(s),l=l.slice(l.indexOf(o)+o.length),u+=o.length),co[i]?(o?d(t).empty=!1:d(t).unusedTokens.push(i),ne(i,o,t)):t._strict&&!o&&d(t).unusedTokens.push(i);d(t).charsLeftOver=a-u,l.length>0&&d(t).unusedInput.push(l),d(t).bigHour===!0&&t._a[Po]<=12&&t._a[Po]>0&&(d(t).bigHour=void 0),t._a[Po]=De(t._locale,t._a[Po],t._meridiem),Te(t),fe(t)}function De(e,t,n){var o;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(o=e.isPM(n),o&&12>t&&(t+=12),o||12!==t||(t=0),t):t}function Ae(e){var t,n,o,r,i;if(0===e._f.length)return d(e).invalidFormat=!0,void(e._d=new Date(NaN));for(r=0;r<e._f.length;r++)i=0,t=g({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],ke(t),h(t)&&(i+=d(t).charsLeftOver,i+=10*d(t).unusedTokens.length,d(t).score=i,(null==o||o>i)&&(o=i,n=t));a(e,n||t)}function xe(e){if(!e._d){var t=j(e._i);e._a=s([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),Te(e)}}function He(e){var t=new m(fe(Pe(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function Pe(e){var t=e._i,n=e._f;return e._locale=e._locale||N(e._l),null===t||void 0===n&&""===t?f({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),w(t)?new m(fe(t)):(r(n)?Ae(e):n?ke(e):i(t)?e._d=t:Ne(e),h(e)||(e._d=null),e))}function Ne(t){var n=t._i;void 0===n?t._d=new Date(e.now()):i(n)?t._d=new Date(+n):"string"==typeof n?ge(t):r(n)?(t._a=s(n.slice(0),function(e){return parseInt(e,10)}),Te(t)):"object"==typeof n?xe(t):"number"==typeof n?t._d=new Date(n):e.createFromInputFallback(t)}function Le(e,t,n,o,r){var i={};return"boolean"==typeof n&&(o=n,n=void 0),i._isAMomentObject=!0,i._useUTC=i._isUTC=r,i._l=n,i._i=e,i._f=t,i._strict=o,He(i)}function We(e,t,n,o){return Le(e,t,n,o,!1)}function Ie(e,t){var n,o;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return We();for(n=t[0],o=1;o<t.length;++o)t[o].isValid()&&!t[o][e](n)||(n=t[o]);return n}function je(){var e=[].slice.call(arguments,0);return Ie("isBefore",e)}function Ve(){var e=[].slice.call(arguments,0);return Ie("isAfter",e)}function Fe(e){var t=j(e),n=t.year||0,o=t.quarter||0,r=t.month||0,i=t.week||0,s=t.day||0,l=t.hour||0,a=t.minute||0,u=t.second||0,c=t.millisecond||0;this._milliseconds=+c+1e3*u+6e4*a+36e5*l,this._days=+s+7*i,this._months=+r+3*o+12*n,this._data={},this._locale=N(),this._bubble()}function Be(e){return e instanceof Fe}function ze(e,t){U(e,0,0,function(){var e=this.utcOffset(),n="+";return 0>e&&(e=-e,n="-"),n+Y(~~(e/60),2)+t+Y(~~e%60,2)})}function Ye(e,t){var n=(t||"").match(e)||[],o=n[n.length-1]||[],r=(o+"").match(tr)||["-",0,0],i=+(60*r[1])+y(r[2]);return"+"===r[0]?i:-i}function Ue(t,n){var o,r;return n._isUTC?(o=n.clone(),r=(w(t)||i(t)?+t:+We(t))-+o,o._d.setTime(+o._d+r),e.updateOffset(o,!1),o):We(t).local()}function Ge(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function $e(t,n){var o,r=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Ye(Mo,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&n&&(o=Ge(this)),this._offset=t,this._isUTC=!0,null!=o&&this.add(o,"m"),r!==t&&(!n||this._changeInProgress?ct(this,rt(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:Ge(this):null!=t?this:NaN}function Xe(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Ke(e){return this.utcOffset(0,e)}function qe(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ge(this),"m")),this}function Ze(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Ye(Eo,this._i)),this}function Je(e){return this.isValid()?(e=e?We(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Qe(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function et(){if(!p(this._isDSTShifted))return this._isDSTShifted;var e={};if(g(e,this),e=Pe(e),e._a){var t=e._isUTC?u(e._a):We(e._a);this._isDSTShifted=this.isValid()&&b(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function tt(){return this.isValid()?!this._isUTC:!1}function nt(){return this.isValid()?this._isUTC:!1}function ot(){return this.isValid()?this._isUTC&&0===this._offset:!1}function rt(e,t){var n,o,r,i=e,s=null;return Be(e)?i={ms:e._milliseconds,d:e._days,M:e._months}:"number"==typeof e?(i={},t?i[t]=e:i.milliseconds=e):(s=nr.exec(e))?(n="-"===s[1]?-1:1,i={y:0,d:y(s[Ho])*n,h:y(s[Po])*n,m:y(s[No])*n,s:y(s[Lo])*n,ms:y(s[Wo])*n}):(s=or.exec(e))?(n="-"===s[1]?-1:1,i={y:it(s[2],n),M:it(s[3],n),w:it(s[4],n),d:it(s[5],n),h:it(s[6],n),m:it(s[7],n),s:it(s[8],n)}):null==i?i={}:"object"==typeof i&&("from"in i||"to"in i)&&(r=lt(We(i.from),We(i.to)),i={},i.ms=r.milliseconds,i.M=r.months),o=new Fe(i),Be(e)&&l(e,"_locale")&&(o._locale=e._locale),o}function it(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function st(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function lt(e,t){var n;return e.isValid()&&t.isValid()?(t=Ue(t,e),e.isBefore(t)?n=st(e,t):(n=st(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function at(e){return 0>e?-1*Math.round(-1*e):Math.round(e)}function ut(e,t){return function(n,o){var r,i;return null===o||isNaN(+o)||(R(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period)."),i=n,n=o,o=i),n="string"==typeof n?+n:n,r=rt(n,o),ct(this,r,e),this}}function ct(t,n,o,r){var i=n._milliseconds,s=at(n._days),l=at(n._months);t.isValid()&&(r=null==r?!0:r,i&&t._d.setTime(+t._d+i*o),s&&B(t,"Date",F(t,"Date")+s*o),l&&le(t,F(t,"Month")+l*o),r&&e.updateOffset(t,s||l))}function dt(e,t){var n=e||We(),o=Ue(n,this).startOf("day"),r=this.diff(o,"days",!0),i=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse",s=t&&(S(t[i])?t[i]():t[i]);return this.format(s||this.localeData().calendar(i,this,We(n)))}function ht(){return new m(this)}function ft(e,t){var n=w(e)?e:We(e);return this.isValid()&&n.isValid()?(t=I(p(t)?"millisecond":t),"millisecond"===t?+this>+n:+n<+this.clone().startOf(t)):!1}function pt(e,t){var n=w(e)?e:We(e);return this.isValid()&&n.isValid()?(t=I(p(t)?"millisecond":t),"millisecond"===t?+n>+this:+this.clone().endOf(t)<+n):!1}function gt(e,t,n){return this.isAfter(e,n)&&this.isBefore(t,n)}function mt(e,t){var n,o=w(e)?e:We(e);return this.isValid()&&o.isValid()?(t=I(t||"millisecond"),"millisecond"===t?+this===+o:(n=+o,+this.clone().startOf(t)<=n&&n<=+this.clone().endOf(t))):!1}function wt(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function vt(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function yt(e,t,n){var o,r,i,s;return this.isValid()?(o=Ue(e,this),o.isValid()?(r=6e4*(o.utcOffset()-this.utcOffset()),t=I(t),"year"===t||"month"===t||"quarter"===t?(s=bt(this,o),"quarter"===t?s/=3:"year"===t&&(s/=12)):(i=this-o,s="second"===t?i/1e3:"minute"===t?i/6e4:"hour"===t?i/36e5:"day"===t?(i-r)/864e5:"week"===t?(i-r)/6048e5:i),n?s:v(s)):NaN):NaN}function bt(e,t){var n,o,r=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(r,"months");return 0>t-i?(n=e.clone().add(r-1,"months"),o=(t-i)/(i-n)):(n=e.clone().add(r+1,"months"),o=(t-i)/(n-i)),-(r+o)}function Ct(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function _t(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?S(Date.prototype.toISOString)?this.toDate().toISOString():X(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):X(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function Rt(t){var n=X(this,t||e.defaultFormat);return this.localeData().postformat(n)}function St(e,t){return this.isValid()&&(w(e)&&e.isValid()||We(e).isValid())?rt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function Et(e){return this.from(We(),e)}function Mt(e,t){return this.isValid()&&(w(e)&&e.isValid()||We(e).isValid())?rt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function Tt(e){return this.to(We(),e)}function Ot(e){var t;return void 0===e?this._locale._abbr:(t=N(e),null!=t&&(this._locale=t),this)}function kt(){return this._locale}function Dt(e){switch(e=I(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function At(e){return e=I(e),void 0===e||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")}function xt(){return+this._d-6e4*(this._offset||0)}function Ht(){return Math.floor(+this/1e3)}function Pt(){return this._offset?new Date(+this):this._d}function Nt(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Lt(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Wt(){return this.isValid()?this.toISOString():null}function It(){return h(this)}function jt(){return a({},d(this))}function Vt(){return d(this).overflow}function Ft(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Bt(e,t){U(0,[e,e.length],0,t)}function zt(e){return $t.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Yt(e){return $t.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Ut(){return Se(this.year(),1,4)}function Gt(){var e=this.localeData()._week;return Se(this.year(),e.dow,e.doy)}function $t(e,t,n,o,r){var i;return null==e?Re(this,o,r).year:(i=Se(e,o,r),t>i&&(t=i),Xt.call(this,e,t,n,o,r))}function Xt(e,t,n,o,r){var i=_e(e,t,n,o,r),s=we(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}function Kt(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function qt(e){return Re(e,this._week.dow,this._week.doy).week}function Zt(){return this._week.dow}function Jt(){return this._week.doy}function Qt(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function en(e){var t=Re(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function tn(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function nn(e,t){return r(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]}function on(e){return this._weekdaysShort[e.day()]}function rn(e){return this._weekdaysMin[e.day()]}function sn(e,t,n){var o,r,i;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),o=0;7>o;o++){if(r=We([2e3,1]).day(o),n&&!this._fullWeekdaysParse[o]&&(this._fullWeekdaysParse[o]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[o]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[o]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[o]||(i="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[o]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[o].test(e))return o;if(n&&"ddd"===t&&this._shortWeekdaysParse[o].test(e))return o;if(n&&"dd"===t&&this._minWeekdaysParse[o].test(e))return o;if(!n&&this._weekdaysParse[o].test(e))return o}}function ln(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=tn(e,this.localeData()),this.add(e-t,"d")):t}function an(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function un(e){return this.isValid()?null==e?this.day()||7:this.day(this.day()%7?e:e-7):null!=e?this:NaN}function cn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function dn(){return this.hours()%12||12}function hn(e,t){U(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function fn(e,t){return t._meridiemParse}function pn(e){return"p"===(e+"").toLowerCase().charAt(0)}function gn(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM";
}function mn(e,t){t[Wo]=y(1e3*("0."+e))}function wn(){return this._isUTC?"UTC":""}function vn(){return this._isUTC?"Coordinated Universal Time":""}function yn(e){return We(1e3*e)}function bn(){return We.apply(null,arguments).parseZone()}function Cn(e,t,n){var o=this._calendar[e];return S(o)?o.call(t,n):o}function _n(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function Rn(){return this._invalidDate}function Sn(e){return this._ordinal.replace("%d",e)}function En(e){return e}function Mn(e,t,n,o){var r=this._relativeTime[n];return S(r)?r(e,t,n,o):r.replace(/%d/i,e)}function Tn(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)}function On(e,t,n,o){var r=N(),i=u().set(o,t);return r[n](i,e)}function kn(e,t,n,o,r){if("number"==typeof e&&(t=e,e=void 0),e=e||"",null!=t)return On(e,t,n,r);var i,s=[];for(i=0;o>i;i++)s[i]=On(e,i,n,r);return s}function Dn(e,t){return kn(e,t,"months",12,"month")}function An(e,t){return kn(e,t,"monthsShort",12,"month")}function xn(e,t){return kn(e,t,"weekdays",7,"day")}function Hn(e,t){return kn(e,t,"weekdaysShort",7,"day")}function Pn(e,t){return kn(e,t,"weekdaysMin",7,"day")}function Nn(){var e=this._data;return this._milliseconds=Tr(this._milliseconds),this._days=Tr(this._days),this._months=Tr(this._months),e.milliseconds=Tr(e.milliseconds),e.seconds=Tr(e.seconds),e.minutes=Tr(e.minutes),e.hours=Tr(e.hours),e.months=Tr(e.months),e.years=Tr(e.years),this}function Ln(e,t,n,o){var r=rt(t,n);return e._milliseconds+=o*r._milliseconds,e._days+=o*r._days,e._months+=o*r._months,e._bubble()}function Wn(e,t){return Ln(this,e,t,1)}function In(e,t){return Ln(this,e,t,-1)}function jn(e){return 0>e?Math.floor(e):Math.ceil(e)}function Vn(){var e,t,n,o,r,i=this._milliseconds,s=this._days,l=this._months,a=this._data;return i>=0&&s>=0&&l>=0||0>=i&&0>=s&&0>=l||(i+=864e5*jn(Bn(l)+s),s=0,l=0),a.milliseconds=i%1e3,e=v(i/1e3),a.seconds=e%60,t=v(e/60),a.minutes=t%60,n=v(t/60),a.hours=n%24,s+=v(n/24),r=v(Fn(s)),l+=r,s-=jn(Bn(r)),o=v(l/12),l%=12,a.days=s,a.months=l,a.years=o,this}function Fn(e){return 4800*e/146097}function Bn(e){return 146097*e/4800}function zn(e){var t,n,o=this._milliseconds;if(e=I(e),"month"===e||"year"===e)return t=this._days+o/864e5,n=this._months+Fn(t),"month"===e?n:n/12;switch(t=this._days+Math.round(Bn(this._months)),e){case"week":return t/7+o/6048e5;case"day":return t+o/864e5;case"hour":return 24*t+o/36e5;case"minute":return 1440*t+o/6e4;case"second":return 86400*t+o/1e3;case"millisecond":return Math.floor(864e5*t)+o;default:throw new Error("Unknown unit "+e)}}function Yn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function Un(e){return function(){return this.as(e)}}function Gn(e){return e=I(e),this[e+"s"]()}function $n(e){return function(){return this._data[e]}}function Xn(){return v(this.days()/7)}function Kn(e,t,n,o,r){return r.relativeTime(t||1,!!n,e,o)}function qn(e,t,n){var o=rt(e).abs(),r=zr(o.as("s")),i=zr(o.as("m")),s=zr(o.as("h")),l=zr(o.as("d")),a=zr(o.as("M")),u=zr(o.as("y")),c=r<Yr.s&&["s",r]||1>=i&&["m"]||i<Yr.m&&["mm",i]||1>=s&&["h"]||s<Yr.h&&["hh",s]||1>=l&&["d"]||l<Yr.d&&["dd",l]||1>=a&&["M"]||a<Yr.M&&["MM",a]||1>=u&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=n,Kn.apply(null,c)}function Zn(e,t){return void 0===Yr[e]?!1:void 0===t?Yr[e]:(Yr[e]=t,!0)}function Jn(e){var t=this.localeData(),n=qn(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function Qn(){var e,t,n,o=Ur(this._milliseconds)/1e3,r=Ur(this._days),i=Ur(this._months);e=v(o/60),t=v(e/60),o%=60,e%=60,n=v(i/12),i%=12;var s=n,l=i,a=r,u=t,c=e,d=o,h=this.asSeconds();return h?(0>h?"-":"")+"P"+(s?s+"Y":"")+(l?l+"M":"")+(a?a+"D":"")+(u||c||d?"T":"")+(u?u+"H":"")+(c?c+"M":"")+(d?d+"S":""):"P0D"}var eo,to=e.momentProperties=[],no=!1,oo={};e.suppressDeprecationWarnings=!1;var ro,io={},so={},lo=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ao=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,uo={},co={},ho=/\d/,fo=/\d\d/,po=/\d{3}/,go=/\d{4}/,mo=/[+-]?\d{6}/,wo=/\d\d?/,vo=/\d\d\d\d?/,yo=/\d\d\d\d\d\d?/,bo=/\d{1,3}/,Co=/\d{1,4}/,_o=/[+-]?\d{1,6}/,Ro=/\d+/,So=/[+-]?\d+/,Eo=/Z|[+-]\d\d:?\d\d/gi,Mo=/Z|[+-]\d\d(?::?\d\d)?/gi,To=/[+-]?\d+(\.\d{1,3})?/,Oo=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ko={},Do={},Ao=0,xo=1,Ho=2,Po=3,No=4,Lo=5,Wo=6,Io=7,jo=8;U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),U("MMMM",0,0,function(e){return this.localeData().months(this,e)}),W("month","M"),q("M",wo),q("MM",wo,fo),q("MMM",function(e,t){return t.monthsShortRegex(e)}),q("MMMM",function(e,t){return t.monthsRegex(e)}),ee(["M","MM"],function(e,t){t[xo]=y(e)-1}),ee(["MMM","MMMM"],function(e,t,n,o){var r=n._locale.monthsParse(e,o,n._strict);null!=r?t[xo]=r:d(n).invalidMonth=e});var Vo=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Fo="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Bo="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),zo=Oo,Yo=Oo,Uo=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Go=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,$o=/Z|[+-]\d\d(?::?\d\d)?/,Xo=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ko=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],qo=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=_("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),U("Y",0,0,function(){var e=this.year();return 9999>=e?""+e:"+"+e}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),W("year","y"),q("Y",So),q("YY",wo,fo),q("YYYY",Co,go),q("YYYYY",_o,mo),q("YYYYYY",_o,mo),ee(["YYYYY","YYYYYY"],Ao),ee("YYYY",function(t,n){n[Ao]=2===t.length?e.parseTwoDigitYear(t):y(t)}),ee("YY",function(t,n){n[Ao]=e.parseTwoDigitYear(t)}),ee("Y",function(e,t){t[Ao]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return y(e)+(y(e)>68?1900:2e3)};var Zo=V("FullYear",!1);e.ISO_8601=function(){};var Jo=_("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var e=We.apply(null,arguments);return this.isValid()&&e.isValid()?this>e?this:e:f()}),Qo=_("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var e=We.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:f()}),er=function(){return Date.now?Date.now():+new Date};ze("Z",":"),ze("ZZ",""),q("Z",Mo),q("ZZ",Mo),ee(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Ye(Mo,e)});var tr=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var nr=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,or=/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;rt.fn=Fe.prototype;var rr=ut(1,"add"),ir=ut(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var sr=_("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Bt("gggg","weekYear"),Bt("ggggg","weekYear"),Bt("GGGG","isoWeekYear"),Bt("GGGGG","isoWeekYear"),W("weekYear","gg"),W("isoWeekYear","GG"),q("G",So),q("g",So),q("GG",wo,fo),q("gg",wo,fo),q("GGGG",Co,go),q("gggg",Co,go),q("GGGGG",_o,mo),q("ggggg",_o,mo),te(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,o){t[o.substr(0,2)]=y(e)}),te(["gg","GG"],function(t,n,o,r){n[r]=e.parseTwoDigitYear(t)}),U("Q",0,"Qo","quarter"),W("quarter","Q"),q("Q",ho),ee("Q",function(e,t){t[xo]=3*(y(e)-1)}),U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),W("week","w"),W("isoWeek","W"),q("w",wo),q("ww",wo,fo),q("W",wo),q("WW",wo,fo),te(["w","ww","W","WW"],function(e,t,n,o){t[o.substr(0,1)]=y(e)});var lr={dow:0,doy:6};U("D",["DD",2],"Do","date"),W("date","D"),q("D",wo),q("DD",wo,fo),q("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),ee(["D","DD"],Ho),ee("Do",function(e,t){t[Ho]=y(e.match(wo)[0],10)});var ar=V("Date",!0);U("d",0,"do","day"),U("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),U("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),U("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),W("day","d"),W("weekday","e"),W("isoWeekday","E"),q("d",wo),q("e",wo),q("E",wo),q("dd",Oo),q("ddd",Oo),q("dddd",Oo),te(["dd","ddd","dddd"],function(e,t,n,o){var r=n._locale.weekdaysParse(e,o,n._strict);null!=r?t.d=r:d(n).invalidWeekday=e}),te(["d","e","E"],function(e,t,n,o){t[o]=y(e)});var ur="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),cr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),dr="Su_Mo_Tu_We_Th_Fr_Sa".split("_");U("DDD",["DDDD",3],"DDDo","dayOfYear"),W("dayOfYear","DDD"),q("DDD",bo),q("DDDD",po),ee(["DDD","DDDD"],function(e,t,n){n._dayOfYear=y(e)}),U("H",["HH",2],0,"hour"),U("h",["hh",2],0,dn),U("hmm",0,0,function(){return""+dn.apply(this)+Y(this.minutes(),2)}),U("hmmss",0,0,function(){return""+dn.apply(this)+Y(this.minutes(),2)+Y(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+Y(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+Y(this.minutes(),2)+Y(this.seconds(),2)}),hn("a",!0),hn("A",!1),W("hour","h"),q("a",fn),q("A",fn),q("H",wo),q("h",wo),q("HH",wo,fo),q("hh",wo,fo),q("hmm",vo),q("hmmss",yo),q("Hmm",vo),q("Hmmss",yo),ee(["H","HH"],Po),ee(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ee(["h","hh"],function(e,t,n){t[Po]=y(e),d(n).bigHour=!0}),ee("hmm",function(e,t,n){var o=e.length-2;t[Po]=y(e.substr(0,o)),t[No]=y(e.substr(o)),d(n).bigHour=!0}),ee("hmmss",function(e,t,n){var o=e.length-4,r=e.length-2;t[Po]=y(e.substr(0,o)),t[No]=y(e.substr(o,2)),t[Lo]=y(e.substr(r)),d(n).bigHour=!0}),ee("Hmm",function(e,t,n){var o=e.length-2;t[Po]=y(e.substr(0,o)),t[No]=y(e.substr(o))}),ee("Hmmss",function(e,t,n){var o=e.length-4,r=e.length-2;t[Po]=y(e.substr(0,o)),t[No]=y(e.substr(o,2)),t[Lo]=y(e.substr(r))});var hr=/[ap]\.?m?\.?/i,fr=V("Hours",!0);U("m",["mm",2],0,"minute"),W("minute","m"),q("m",wo),q("mm",wo,fo),ee(["m","mm"],No);var pr=V("Minutes",!1);U("s",["ss",2],0,"second"),W("second","s"),q("s",wo),q("ss",wo,fo),ee(["s","ss"],Lo);var gr=V("Seconds",!1);U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),W("millisecond","ms"),q("S",bo,ho),q("SS",bo,fo),q("SSS",bo,po);var mr;for(mr="SSSS";mr.length<=9;mr+="S")q(mr,Ro);for(mr="S";mr.length<=9;mr+="S")ee(mr,mn);var wr=V("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var vr=m.prototype;vr.add=rr,vr.calendar=dt,vr.clone=ht,vr.diff=yt,vr.endOf=At,vr.format=Rt,vr.from=St,vr.fromNow=Et,vr.to=Mt,vr.toNow=Tt,vr.get=z,vr.invalidAt=Vt,vr.isAfter=ft,vr.isBefore=pt,vr.isBetween=gt,vr.isSame=mt,vr.isSameOrAfter=wt,vr.isSameOrBefore=vt,vr.isValid=It,vr.lang=sr,vr.locale=Ot,vr.localeData=kt,vr.max=Qo,vr.min=Jo,vr.parsingFlags=jt,vr.set=z,vr.startOf=Dt,vr.subtract=ir,vr.toArray=Nt,vr.toObject=Lt,vr.toDate=Pt,vr.toISOString=_t,vr.toJSON=Wt,vr.toString=Ct,vr.unix=Ht,vr.valueOf=xt,vr.creationData=Ft,vr.year=Zo,vr.isLeapYear=be,vr.weekYear=zt,vr.isoWeekYear=Yt,vr.quarter=vr.quarters=Kt,vr.month=ae,vr.daysInMonth=ue,vr.week=vr.weeks=Qt,vr.isoWeek=vr.isoWeeks=en,vr.weeksInYear=Gt,vr.isoWeeksInYear=Ut,vr.date=ar,vr.day=vr.days=ln,vr.weekday=an,vr.isoWeekday=un,vr.dayOfYear=cn,vr.hour=vr.hours=fr,vr.minute=vr.minutes=pr,vr.second=vr.seconds=gr,vr.millisecond=vr.milliseconds=wr,vr.utcOffset=$e,vr.utc=Ke,vr.local=qe,vr.parseZone=Ze,vr.hasAlignedHourOffset=Je,vr.isDST=Qe,vr.isDSTShifted=et,vr.isLocal=tt,vr.isUtcOffset=nt,vr.isUtc=ot,vr.isUTC=ot,vr.zoneAbbr=wn,vr.zoneName=vn,vr.dates=_("dates accessor is deprecated. Use date instead.",ar),vr.months=_("months accessor is deprecated. Use month instead",ae),vr.years=_("years accessor is deprecated. Use year instead",Zo),vr.zone=_("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Xe);var yr=vr,br={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Cr={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},_r="Invalid date",Rr="%d",Sr=/\d{1,2}/,Er={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Mr=O.prototype;Mr._calendar=br,Mr.calendar=Cn,Mr._longDateFormat=Cr,Mr.longDateFormat=_n,Mr._invalidDate=_r,Mr.invalidDate=Rn,Mr._ordinal=Rr,Mr.ordinal=Sn,Mr._ordinalParse=Sr,Mr.preparse=En,Mr.postformat=En,Mr._relativeTime=Er,Mr.relativeTime=Mn,Mr.pastFuture=Tn,Mr.set=M,Mr.months=re,Mr._months=Fo,Mr.monthsShort=ie,Mr._monthsShort=Bo,Mr.monthsParse=se,Mr._monthsRegex=Yo,Mr.monthsRegex=de,Mr._monthsShortRegex=zo,Mr.monthsShortRegex=ce,Mr.week=qt,Mr._week=lr,Mr.firstDayOfYear=Jt,Mr.firstDayOfWeek=Zt,Mr.weekdays=nn,Mr._weekdays=ur,Mr.weekdaysMin=rn,Mr._weekdaysMin=dr,Mr.weekdaysShort=on,Mr._weekdaysShort=cr,Mr.weekdaysParse=sn,Mr.isPM=pn,Mr._meridiemParse=hr,Mr.meridiem=gn,x("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===y(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),e.lang=_("moment.lang is deprecated. Use moment.locale instead.",x),e.langData=_("moment.langData is deprecated. Use moment.localeData instead.",N);var Tr=Math.abs,Or=Un("ms"),kr=Un("s"),Dr=Un("m"),Ar=Un("h"),xr=Un("d"),Hr=Un("w"),Pr=Un("M"),Nr=Un("y"),Lr=$n("milliseconds"),Wr=$n("seconds"),Ir=$n("minutes"),jr=$n("hours"),Vr=$n("days"),Fr=$n("months"),Br=$n("years"),zr=Math.round,Yr={s:45,m:45,h:22,d:26,M:11},Ur=Math.abs,Gr=Fe.prototype;Gr.abs=Nn,Gr.add=Wn,Gr.subtract=In,Gr.as=zn,Gr.asMilliseconds=Or,Gr.asSeconds=kr,Gr.asMinutes=Dr,Gr.asHours=Ar,Gr.asDays=xr,Gr.asWeeks=Hr,Gr.asMonths=Pr,Gr.asYears=Nr,Gr.valueOf=Yn,Gr._bubble=Vn,Gr.get=Gn,Gr.milliseconds=Lr,Gr.seconds=Wr,Gr.minutes=Ir,Gr.hours=jr,Gr.days=Vr,Gr.weeks=Xn,Gr.months=Fr,Gr.years=Br,Gr.humanize=Jn,Gr.toISOString=Qn,Gr.toString=Qn,Gr.toJSON=Qn,Gr.locale=Ot,Gr.localeData=kt,Gr.toIsoString=_("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Qn),Gr.lang=sr,U("X",0,0,"unix"),U("x",0,0,"valueOf"),q("x",So),q("X",To),ee("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ee("x",function(e,t,n){n._d=new Date(y(e))}),e.version="2.12.0",o(We),e.fn=yr,e.min=je,e.max=Ve,e.now=er,e.utc=u,e.unix=yn,e.months=Dn,e.isDate=i,e.locale=x,e.invalid=f,e.duration=rt,e.isMoment=w,e.weekdays=xn,e.parseZone=bn,e.localeData=N,e.isDuration=Be,e.monthsShort=An,e.weekdaysMin=Pn,e.defineLocale=H,e.updateLocale=P,e.locales=L,e.weekdaysShort=Hn,e.normalizeUnits=I,e.relativeTimeThreshold=Zn,e.prototype=yr;var $r=e;return $r})},{}],numeral:[function(t,n,o){/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */
(function(){function t(e){this._value=e}function o(e,t,n,o){var r,i,s=Math.pow(10,t);return i=(n(e*s)/s).toFixed(t),o&&(r=new RegExp("0{1,"+o+"}$"),i=i.replace(r,"")),i}function r(e,t,n){var o;return o=t.indexOf("$")>-1?s(e,t,n):t.indexOf("%")>-1?l(e,t,n):t.indexOf(":")>-1?a(e,t):c(e._value,t,n)}function i(e,t){var n,o,r,i,s,l=t,a=["KB","MB","GB","TB","PB","EB","ZB","YB"],c=!1;if(t.indexOf(":")>-1)e._value=u(t);else if(t===v)e._value=0;else{for("."!==m[w].delimiters.decimal&&(t=t.replace(/\./g,"").replace(m[w].delimiters.decimal,".")),n=new RegExp("[^a-zA-Z]"+m[w].abbreviations.thousand+"(?:\\)|(\\"+m[w].currency.symbol+")?(?:\\))?)?$"),o=new RegExp("[^a-zA-Z]"+m[w].abbreviations.million+"(?:\\)|(\\"+m[w].currency.symbol+")?(?:\\))?)?$"),r=new RegExp("[^a-zA-Z]"+m[w].abbreviations.billion+"(?:\\)|(\\"+m[w].currency.symbol+")?(?:\\))?)?$"),i=new RegExp("[^a-zA-Z]"+m[w].abbreviations.trillion+"(?:\\)|(\\"+m[w].currency.symbol+")?(?:\\))?)?$"),s=0;s<=a.length&&!(c=t.indexOf(a[s])>-1?Math.pow(1024,s+1):!1);s++);e._value=(c?c:1)*(l.match(n)?Math.pow(10,3):1)*(l.match(o)?Math.pow(10,6):1)*(l.match(r)?Math.pow(10,9):1)*(l.match(i)?Math.pow(10,12):1)*(t.indexOf("%")>-1?.01:1)*((t.split("-").length+Math.min(t.split("(").length-1,t.split(")").length-1))%2?1:-1)*Number(t.replace(/[^0-9\.]+/g,"")),e._value=c?Math.ceil(e._value):e._value}return e._value}function s(e,t,n){var o,r,i=t.indexOf("$"),s=t.indexOf("("),l=t.indexOf("-"),a="";return t.indexOf(" $")>-1?(a=" ",t=t.replace(" $","")):t.indexOf("$ ")>-1?(a=" ",t=t.replace("$ ","")):t=t.replace("$",""),r=c(e._value,t,n),1>=i?r.indexOf("(")>-1||r.indexOf("-")>-1?(r=r.split(""),o=1,(s>i||l>i)&&(o=0),r.splice(o,0,m[w].currency.symbol+a),r=r.join("")):r=m[w].currency.symbol+a+r:r.indexOf(")")>-1?(r=r.split(""),r.splice(-1,0,a+m[w].currency.symbol),r=r.join("")):r=r+a+m[w].currency.symbol,r}function l(e,t,n){var o,r="",i=100*e._value;return t.indexOf(" %")>-1?(r=" ",t=t.replace(" %","")):t=t.replace("%",""),o=c(i,t,n),o.indexOf(")")>-1?(o=o.split(""),o.splice(-1,0,r+"%"),o=o.join("")):o=o+r+"%",o}function a(e){var t=Math.floor(e._value/60/60),n=Math.floor((e._value-60*t*60)/60),o=Math.round(e._value-60*t*60-60*n);return t+":"+(10>n?"0"+n:n)+":"+(10>o?"0"+o:o)}function u(e){var t=e.split(":"),n=0;return 3===t.length?(n+=60*Number(t[0])*60,n+=60*Number(t[1]),n+=Number(t[2])):2===t.length&&(n+=60*Number(t[0]),n+=Number(t[1])),Number(n)}function c(e,t,n){var r,i,s,l,a,u,c=!1,d=!1,h=!1,f="",p=!1,g=!1,y=!1,b=!1,C=!1,_="",R="",S=Math.abs(e),E=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],M="",T=!1;if(0===e&&null!==v)return v;if(t.indexOf("(")>-1?(c=!0,t=t.slice(1,-1)):t.indexOf("+")>-1&&(d=!0,t=t.replace(/\+/g,"")),t.indexOf("a")>-1&&(p=t.indexOf("aK")>=0,g=t.indexOf("aM")>=0,y=t.indexOf("aB")>=0,b=t.indexOf("aT")>=0,C=p||g||y||b,t.indexOf(" a")>-1?(f=" ",t=t.replace(" a","")):t=t.replace("a",""),S>=Math.pow(10,12)&&!C||b?(f+=m[w].abbreviations.trillion,e/=Math.pow(10,12)):S<Math.pow(10,12)&&S>=Math.pow(10,9)&&!C||y?(f+=m[w].abbreviations.billion,e/=Math.pow(10,9)):S<Math.pow(10,9)&&S>=Math.pow(10,6)&&!C||g?(f+=m[w].abbreviations.million,e/=Math.pow(10,6)):(S<Math.pow(10,6)&&S>=Math.pow(10,3)&&!C||p)&&(f+=m[w].abbreviations.thousand,e/=Math.pow(10,3))),t.indexOf("b")>-1)for(t.indexOf(" b")>-1?(_=" ",t=t.replace(" b","")):t=t.replace("b",""),s=0;s<=E.length;s++)if(r=Math.pow(1024,s),i=Math.pow(1024,s+1),e>=r&&i>e){_+=E[s],r>0&&(e/=r);break}return t.indexOf("o")>-1&&(t.indexOf(" o")>-1?(R=" ",t=t.replace(" o","")):t=t.replace("o",""),R+=m[w].ordinal(e)),t.indexOf("[.]")>-1&&(h=!0,t=t.replace("[.]",".")),l=e.toString().split(".")[0],a=t.split(".")[1],u=t.indexOf(","),a?(a.indexOf("[")>-1?(a=a.replace("]",""),a=a.split("["),M=o(e,a[0].length+a[1].length,n,a[1].length)):M=o(e,a.length,n),l=M.split(".")[0],M=M.split(".")[1].length?m[w].delimiters.decimal+M.split(".")[1]:"",h&&0===Number(M.slice(1))&&(M="")):l=o(e,null,n),l.indexOf("-")>-1&&(l=l.slice(1),T=!0),u>-1&&(l=l.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+m[w].delimiters.thousands)),0===t.indexOf(".")&&(l=""),(c&&T?"(":"")+(!c&&T?"-":"")+(!T&&d?"+":"")+l+M+(R?R:"")+(f?f:"")+(_?_:"")+(c&&T?")":"")}function d(e,t){m[e]=t}function h(e){var t=e.toString().split(".");return t.length<2?1:Math.pow(10,t[1].length)}function f(){var e=Array.prototype.slice.call(arguments);return e.reduce(function(e,t){var n=h(e),o=h(t);return n>o?n:o},-(1/0))}var p,g="1.5.3",m={},w="en",v=null,y="0,0",b="undefined"!=typeof n&&n.exports;p=function(e){return p.isNumeral(e)?e=e.value():0===e||"undefined"==typeof e?e=0:Number(e)||(e=p.fn.unformat(e)),new t(Number(e))},p.version=g,p.isNumeral=function(e){return e instanceof t},p.language=function(e,t){if(!e)return w;if(e&&!t){if(!m[e])throw new Error("Unknown language : "+e);w=e}return!t&&m[e]||d(e,t),p},p.languageData=function(e){if(!e)return m[w];if(!m[e])throw new Error("Unknown language : "+e);return m[e]},p.language("en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(e){var t=e%10;return 1===~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th"},currency:{symbol:"$"}}),p.zeroFormat=function(e){v="string"==typeof e?e:null},p.defaultFormat=function(e){y="string"==typeof e?e:"0.0"},p.validate=function(e,t){var n,o,r,i,s,l,a,u;if("string"!=typeof e&&(e+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",e)),e=e.trim(),""===e)return!1;e=e.replace(/^[+-]?/,"");try{a=p.languageData(t)}catch(c){a=p.languageData(p.language())}return r=a.currency.symbol,s=a.abbreviations,n=a.delimiters.decimal,o="."===a.delimiters.thousands?"\\.":a.delimiters.thousands,u=e.match(/^[^\d\.\,]+/),null!==u&&(e=e.substr(1),u[0]!==r)?!1:(u=e.match(/[^\d]+$/),null!==u&&(e=e.slice(0,-1),u[0]!==s.thousand&&u[0]!==s.million&&u[0]!==s.billion&&u[0]!==s.trillion)?!1:e.match(/^\d+$/)?!0:(l=new RegExp(o+"{2}"),e.match(/[^\d.,]/g)?!1:(i=e.split(n),i.length>2?!1:i.length<2?!!i[0].match(/^\d+.*\d$/)&&!i[0].match(l):""===i[0]?!i[0].match(l)&&!!i[1].match(/^\d+$/):1===i[0].length?!!i[0].match(/^\d+$/)&&!i[0].match(l)&&!!i[1].match(/^\d+$/):!!i[0].match(/^\d+.*\d$/)&&!i[0].match(l)&&!!i[1].match(/^\d+$/))))},"function"!=typeof Array.prototype.reduce&&(Array.prototype.reduce=function(e,t){"use strict";if(null===this||"undefined"==typeof this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof e)throw new TypeError(e+" is not a function");var n,o,r=this.length>>>0,i=!1;for(1<arguments.length&&(o=t,i=!0),n=0;r>n;++n)this.hasOwnProperty(n)&&(i?o=e(o,this[n],n,this):(o=this[n],i=!0));if(!i)throw new TypeError("Reduce of empty array with no initial value");return o}),p.fn=t.prototype={clone:function(){return p(this)},format:function(e,t){return r(this,e?e:y,void 0!==t?t:Math.round)},unformat:function(e){return"[object Number]"===Object.prototype.toString.call(e)?e:i(this,e?e:y)},value:function(){return this._value},valueOf:function(){return this._value},set:function(e){return this._value=Number(e),this},add:function(e){function t(e,t,o,r){return e+n*t}var n=f.call(null,this._value,e);return this._value=[this._value,e].reduce(t,0)/n,this},subtract:function(e){function t(e,t,o,r){return e-n*t}var n=f.call(null,this._value,e);return this._value=[e].reduce(t,this._value*n)/n,this},multiply:function(e){function t(e,t,n,o){var r=f(e,t);return e*r*(t*r)/(r*r)}return this._value=[this._value,e].reduce(t,1),this},divide:function(e){function t(e,t,n,o){var r=f(e,t);return e*r/(t*r)}return this._value=[this._value,e].reduce(t),this},difference:function(e){return Math.abs(p(this._value).subtract(e).value())}},b&&(n.exports=p),"undefined"==typeof ender&&(this.numeral=p),"function"==typeof e&&e.amd&&e([],function(){return p})}).call(window)},{}],pikaday:[function(t,n,o){/*!
 * Pikaday
 *
 * Copyright © 2014 David Bushell | BSD & MIT license | https://github.com/dbushell/Pikaday
 */
!function(r,i){"use strict";var s;if("object"==typeof o){try{s=t("moment")}catch(l){}n.exports=i(s)}else"function"==typeof e&&e.amd?e(function(e){var t="moment";try{s=e(t)}catch(n){}return i(s)}):r.Pikaday=i(r.moment)}(this,function(e){"use strict";var t="function"==typeof e,n=!!window.addEventListener,o=window.document,r=window.setTimeout,i=function(e,t,o,r){n?e.addEventListener(t,o,!!r):e.attachEvent("on"+t,o)},s=function(e,t,o,r){n?e.removeEventListener(t,o,!!r):e.detachEvent("on"+t,o)},l=function(e,t,n){var r;o.createEvent?(r=o.createEvent("HTMLEvents"),r.initEvent(t,!0,!1),r=y(r,n),e.dispatchEvent(r)):o.createEventObject&&(r=o.createEventObject(),r=y(r,n),e.fireEvent("on"+t,r))},a=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},u=function(e,t){return-1!==(" "+e.className+" ").indexOf(" "+t+" ")},c=function(e,t){u(e,t)||(e.className=""===e.className?t:e.className+" "+t)},d=function(e,t){e.className=a((" "+e.className+" ").replace(" "+t+" "," "))},h=function(e){return/Array/.test(Object.prototype.toString.call(e))},f=function(e){return/Date/.test(Object.prototype.toString.call(e))&&!isNaN(e.getTime())},p=function(e){var t=e.getDay();return 0===t||6===t},g=function(e){return e%4===0&&e%100!==0||e%400===0},m=function(e,t){return[31,g(e)?29:28,31,30,31,30,31,31,30,31,30,31][t]},w=function(e){f(e)&&e.setHours(0,0,0,0)},v=function(e,t){return e.getTime()===t.getTime()},y=function(e,t,n){var o,r;for(o in t)r=void 0!==e[o],r&&"object"==typeof t[o]&&null!==t[o]&&void 0===t[o].nodeName?f(t[o])?n&&(e[o]=new Date(t[o].getTime())):h(t[o])?n&&(e[o]=t[o].slice(0)):e[o]=y({},t[o],n):!n&&r||(e[o]=t[o]);return e},b=function(e){return e.month<0&&(e.year-=Math.ceil(Math.abs(e.month)/12),e.month+=12),e.month>11&&(e.year+=Math.floor(Math.abs(e.month)/12),e.month-=12),e},C={field:null,bound:void 0,position:"bottom left",reposition:!0,format:"YYYY-MM-DD",defaultDate:null,setDefaultDate:!1,firstDay:0,minDate:null,maxDate:null,yearRange:10,showWeekNumber:!1,minYear:0,maxYear:9999,minMonth:void 0,maxMonth:void 0,startRange:null,endRange:null,isRTL:!1,yearSuffix:"",showMonthAfterYear:!1,numberOfMonths:1,mainCalendar:"left",container:void 0,i18n:{previousMonth:"Previous Month",nextMonth:"Next Month",months:["January","February","March","April","May","June","July","August","September","October","November","December"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]},theme:null,onSelect:null,onOpen:null,onClose:null,onDraw:null},_=function(e,t,n){for(t+=e.firstDay;t>=7;)t-=7;return n?e.i18n.weekdaysShort[t]:e.i18n.weekdays[t]},R=function(e){if(e.isEmpty)return'<td class="is-empty"></td>';var t=[];return e.isDisabled&&t.push("is-disabled"),e.isToday&&t.push("is-today"),e.isSelected&&t.push("is-selected"),e.isInRange&&t.push("is-inrange"),e.isStartRange&&t.push("is-startrange"),e.isEndRange&&t.push("is-endrange"),'<td data-day="'+e.day+'" class="'+t.join(" ")+'"><button class="pika-button pika-day" type="button" data-pika-year="'+e.year+'" data-pika-month="'+e.month+'" data-pika-day="'+e.day+'">'+e.day+"</button></td>"},S=function(e,t,n){var o=new Date(n,0,1),r=Math.ceil(((new Date(n,t,e)-o)/864e5+o.getDay()+1)/7);return'<td class="pika-week">'+r+"</td>"},E=function(e,t){return"<tr>"+(t?e.reverse():e).join("")+"</tr>"},M=function(e){return"<tbody>"+e.join("")+"</tbody>"},T=function(e){var t,n=[];for(e.showWeekNumber&&n.push("<th></th>"),t=0;7>t;t++)n.push('<th scope="col"><abbr title="'+_(e,t)+'">'+_(e,t,!0)+"</abbr></th>");return"<thead>"+(e.isRTL?n.reverse():n).join("")+"</thead>"},O=function(e,t,n,o,r){var i,s,l,a,u,c=e._o,d=n===c.minYear,f=n===c.maxYear,p='<div class="pika-title">',g=!0,m=!0;for(l=[],i=0;12>i;i++)l.push('<option value="'+(n===r?i-t:12+i-t)+'"'+(i===o?" selected":"")+(d&&i<c.minMonth||f&&i>c.maxMonth?"disabled":"")+">"+c.i18n.months[i]+"</option>");for(a='<div class="pika-label">'+c.i18n.months[o]+'<select class="pika-select pika-select-month" tabindex="-1">'+l.join("")+"</select></div>",h(c.yearRange)?(i=c.yearRange[0],s=c.yearRange[1]+1):(i=n-c.yearRange,s=1+n+c.yearRange),l=[];s>i&&i<=c.maxYear;i++)i>=c.minYear&&l.push('<option value="'+i+'"'+(i===n?" selected":"")+">"+i+"</option>");return u='<div class="pika-label">'+n+c.yearSuffix+'<select class="pika-select pika-select-year" tabindex="-1">'+l.join("")+"</select></div>",p+=c.showMonthAfterYear?u+a:a+u,d&&(0===o||c.minMonth>=o)&&(g=!1),f&&(11===o||c.maxMonth<=o)&&(m=!1),0===t&&(p+='<button class="pika-prev'+(g?"":" is-disabled")+'" type="button">'+c.i18n.previousMonth+"</button>"),t===e._o.numberOfMonths-1&&(p+='<button class="pika-next'+(m?"":" is-disabled")+'" type="button">'+c.i18n.nextMonth+"</button>"),p+="</div>"},k=function(e,t){return'<table cellpadding="0" cellspacing="0" class="pika-table">'+T(e)+M(t)+"</table>"},D=function(s){var l=this,a=l.config(s);l._onMouseDown=function(e){if(l._v){e=e||window.event;var t=e.target||e.srcElement;if(t)if(u(t,"is-disabled")||(u(t,"pika-button")&&!u(t,"is-empty")?(l.setDate(new Date(t.getAttribute("data-pika-year"),t.getAttribute("data-pika-month"),t.getAttribute("data-pika-day"))),a.bound&&r(function(){l.hide(),a.field&&a.field.blur()},100)):u(t,"pika-prev")?l.prevMonth():u(t,"pika-next")&&l.nextMonth()),u(t,"pika-select"))l._c=!0;else{if(!e.preventDefault)return e.returnValue=!1,!1;e.preventDefault()}}},l._onChange=function(e){e=e||window.event;var t=e.target||e.srcElement;t&&(u(t,"pika-select-month")?l.gotoMonth(t.value):u(t,"pika-select-year")&&l.gotoYear(t.value))},l._onInputChange=function(n){var o;n.firedBy!==l&&(t?(o=e(a.field.value,a.format),o=o&&o.isValid()?o.toDate():null):o=new Date(Date.parse(a.field.value)),f(o)&&l.setDate(o),l._v||l.show())},l._onInputFocus=function(){l.show()},l._onInputClick=function(){l.show()},l._onInputBlur=function(){var e=o.activeElement;do if(u(e,"pika-single"))return;while(e=e.parentNode);l._c||(l._b=r(function(){l.hide()},50)),l._c=!1},l._onClick=function(e){e=e||window.event;var t=e.target||e.srcElement,o=t;if(t){!n&&u(t,"pika-select")&&(t.onchange||(t.setAttribute("onchange","return;"),i(t,"change",l._onChange)));do if(u(o,"pika-single")||o===a.trigger)return;while(o=o.parentNode);l._v&&t!==a.trigger&&o!==a.trigger&&l.hide()}},l.el=o.createElement("div"),l.el.className="pika-single"+(a.isRTL?" is-rtl":"")+(a.theme?" "+a.theme:""),i(l.el,"mousedown",l._onMouseDown,!0),i(l.el,"touchend",l._onMouseDown,!0),i(l.el,"change",l._onChange),a.field&&(a.container?a.container.appendChild(l.el):a.bound?o.body.appendChild(l.el):a.field.parentNode.insertBefore(l.el,a.field.nextSibling),i(a.field,"change",l._onInputChange),a.defaultDate||(t&&a.field.value?a.defaultDate=e(a.field.value,a.format).toDate():a.defaultDate=new Date(Date.parse(a.field.value)),a.setDefaultDate=!0));var c=a.defaultDate;f(c)?a.setDefaultDate?l.setDate(c,!0):l.gotoDate(c):l.gotoDate(new Date),a.bound?(this.hide(),l.el.className+=" is-bound",i(a.trigger,"click",l._onInputClick),i(a.trigger,"focus",l._onInputFocus),i(a.trigger,"blur",l._onInputBlur)):this.show()};return D.prototype={config:function(e){this._o||(this._o=y({},C,!0));var t=y(this._o,e,!0);t.isRTL=!!t.isRTL,t.field=t.field&&t.field.nodeName?t.field:null,t.theme="string"==typeof t.theme&&t.theme?t.theme:null,t.bound=!!(void 0!==t.bound?t.field&&t.bound:t.field),t.trigger=t.trigger&&t.trigger.nodeName?t.trigger:t.field,t.disableWeekends=!!t.disableWeekends,t.disableDayFn="function"==typeof t.disableDayFn?t.disableDayFn:null;var n=parseInt(t.numberOfMonths,10)||1;if(t.numberOfMonths=n>4?4:n,f(t.minDate)||(t.minDate=!1),f(t.maxDate)||(t.maxDate=!1),t.minDate&&t.maxDate&&t.maxDate<t.minDate&&(t.maxDate=t.minDate=!1),t.minDate&&this.setMinDate(t.minDate),t.maxDate&&this.setMaxDate(t.maxDate),h(t.yearRange)){var o=(new Date).getFullYear()-10;t.yearRange[0]=parseInt(t.yearRange[0],10)||o,t.yearRange[1]=parseInt(t.yearRange[1],10)||o}else t.yearRange=Math.abs(parseInt(t.yearRange,10))||C.yearRange,t.yearRange>100&&(t.yearRange=100);return t},toString:function(n){return f(this._d)?t?e(this._d).format(n||this._o.format):this._d.toDateString():""},getMoment:function(){return t?e(this._d):null},setMoment:function(n,o){t&&e.isMoment(n)&&this.setDate(n.toDate(),o)},getDate:function(){return f(this._d)?new Date(this._d.getTime()):null},setDate:function(e,t){if(!e)return this._d=null,this._o.field&&(this._o.field.value="",l(this._o.field,"change",{firedBy:this})),this.draw();if("string"==typeof e&&(e=new Date(Date.parse(e))),f(e)){var n=this._o.minDate,o=this._o.maxDate;f(n)&&n>e?e=n:f(o)&&e>o&&(e=o),this._d=new Date(e.getTime()),w(this._d),this.gotoDate(this._d),this._o.field&&(this._o.field.value=this.toString(),l(this._o.field,"change",{firedBy:this})),t||"function"!=typeof this._o.onSelect||this._o.onSelect.call(this,this.getDate())}},gotoDate:function(e){var t=!0;if(f(e)){if(this.calendars){var n=new Date(this.calendars[0].year,this.calendars[0].month,1),o=new Date(this.calendars[this.calendars.length-1].year,this.calendars[this.calendars.length-1].month,1),r=e.getTime();o.setMonth(o.getMonth()+1),o.setDate(o.getDate()-1),t=r<n.getTime()||o.getTime()<r}t&&(this.calendars=[{month:e.getMonth(),year:e.getFullYear()}],"right"===this._o.mainCalendar&&(this.calendars[0].month+=1-this._o.numberOfMonths)),this.adjustCalendars()}},adjustCalendars:function(){this.calendars[0]=b(this.calendars[0]);for(var e=1;e<this._o.numberOfMonths;e++)this.calendars[e]=b({month:this.calendars[0].month+e,year:this.calendars[0].year});this.draw()},gotoToday:function(){this.gotoDate(new Date)},gotoMonth:function(e){isNaN(e)||(this.calendars[0].month=parseInt(e,10),this.adjustCalendars())},nextMonth:function(){this.calendars[0].month++,this.adjustCalendars()},prevMonth:function(){this.calendars[0].month--,this.adjustCalendars()},gotoYear:function(e){isNaN(e)||(this.calendars[0].year=parseInt(e,10),this.adjustCalendars())},setMinDate:function(e){w(e),this._o.minDate=e,this._o.minYear=e.getFullYear(),this._o.minMonth=e.getMonth(),this.draw()},setMaxDate:function(e){w(e),this._o.maxDate=e,this._o.maxYear=e.getFullYear(),this._o.maxMonth=e.getMonth(),this.draw()},setStartRange:function(e){this._o.startRange=e},setEndRange:function(e){this._o.endRange=e},draw:function(e){if(this._v||e){var t=this._o,n=t.minYear,o=t.maxYear,i=t.minMonth,s=t.maxMonth,l="";this._y<=n&&(this._y=n,!isNaN(i)&&this._m<i&&(this._m=i)),this._y>=o&&(this._y=o,!isNaN(s)&&this._m>s&&(this._m=s));for(var a=0;a<t.numberOfMonths;a++)l+='<div class="pika-lendar">'+O(this,a,this.calendars[a].year,this.calendars[a].month,this.calendars[0].year)+this.render(this.calendars[a].year,this.calendars[a].month)+"</div>";if(this.el.innerHTML=l,t.bound&&"hidden"!==t.field.type&&r(function(){t.trigger.focus()},1),"function"==typeof this._o.onDraw){var u=this;r(function(){u._o.onDraw.call(u)},0)}}},adjustPosition:function(){var e,t,n,r,i,s,l,a,u,c;if(!this._o.container){if(this.el.style.position="absolute",e=this._o.trigger,t=e,n=this.el.offsetWidth,r=this.el.offsetHeight,i=window.innerWidth||o.documentElement.clientWidth,s=window.innerHeight||o.documentElement.clientHeight,l=window.pageYOffset||o.body.scrollTop||o.documentElement.scrollTop,"function"==typeof e.getBoundingClientRect)c=e.getBoundingClientRect(),a=c.left+window.pageXOffset,u=c.bottom+window.pageYOffset;else for(a=t.offsetLeft,u=t.offsetTop+t.offsetHeight;t=t.offsetParent;)a+=t.offsetLeft,u+=t.offsetTop;(this._o.reposition&&a+n>i||this._o.position.indexOf("right")>-1&&a-n+e.offsetWidth>0)&&(a=a-n+e.offsetWidth),(this._o.reposition&&u+r>s+l||this._o.position.indexOf("top")>-1&&u-r-e.offsetHeight>0)&&(u=u-r-e.offsetHeight),this.el.style.left=a+"px",this.el.style.top=u+"px"}},render:function(e,t){var n=this._o,o=new Date,r=m(e,t),i=new Date(e,t,1).getDay(),s=[],l=[];w(o),n.firstDay>0&&(i-=n.firstDay,0>i&&(i+=7));for(var a=r+i,u=a;u>7;)u-=7;a+=7-u;for(var c=0,d=0;a>c;c++){var h=new Date(e,t,1+(c-i)),g=f(this._d)?v(h,this._d):!1,y=v(h,o),b=i>c||c>=r+i,C=n.startRange&&v(n.startRange,h),_=n.endRange&&v(n.endRange,h),M=n.startRange&&n.endRange&&n.startRange<h&&h<n.endRange,T=n.minDate&&h<n.minDate||n.maxDate&&h>n.maxDate||n.disableWeekends&&p(h)||n.disableDayFn&&n.disableDayFn(h),O={day:1+(c-i),month:t,year:e,isSelected:g,isToday:y,isDisabled:T,isEmpty:b,isStartRange:C,isEndRange:_,isInRange:M};l.push(R(O)),7===++d&&(n.showWeekNumber&&l.unshift(S(c-i,t,e)),s.push(E(l,n.isRTL)),l=[],d=0)}return k(n,s)},isVisible:function(){return this._v},show:function(){this._v||(d(this.el,"is-hidden"),this._v=!0,this.draw(),this._o.bound&&(i(o,"click",this._onClick),this.adjustPosition()),"function"==typeof this._o.onOpen&&this._o.onOpen.call(this))},hide:function(){var e=this._v;e!==!1&&(this._o.bound&&s(o,"click",this._onClick),this.el.style.position="static",this.el.style.left="auto",this.el.style.top="auto",c(this.el,"is-hidden"),this._v=!1,void 0!==e&&"function"==typeof this._o.onClose&&this._o.onClose.call(this))},destroy:function(){this.hide(),s(this.el,"mousedown",this._onMouseDown,!0),s(this.el,"touchend",this._onMouseDown,!0),s(this.el,"change",this._onChange),this._o.field&&(s(this._o.field,"change",this._onInputChange),this._o.bound&&(s(this._o.trigger,"click",this._onInputClick),s(this._o.trigger,"focus",this._onInputFocus),s(this._o.trigger,"blur",this._onInputBlur))),this.el.parentNode&&this.el.parentNode.removeChild(this.el)}},D})},{moment:"moment"}],zeroclipboard:[function(t,n,o){/*!
 * ZeroClipboard
 * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.
 * Copyright (c) 2009-2014 Jon Rohan, James M. Greene
 * Licensed MIT
 * http://zeroclipboard.org/
 * v2.2.0
 */
!function(t,o){"use strict";var r,i,s,l=t,a=l.document,u=l.navigator,c=l.setTimeout,d=l.clearTimeout,h=l.setInterval,f=l.clearInterval,p=l.getComputedStyle,g=l.encodeURIComponent,m=l.ActiveXObject,w=l.Error,v=l.Number.parseInt||l.parseInt,y=l.Number.parseFloat||l.parseFloat,b=l.Number.isNaN||l.isNaN,C=l.Date.now,_=l.Object.keys,R=l.Object.defineProperty,S=l.Object.prototype.hasOwnProperty,E=l.Array.prototype.slice,M=function(){var e=function(e){return e};if("function"==typeof l.wrap&&"function"==typeof l.unwrap)try{var t=a.createElement("div"),n=l.unwrap(t);1===t.nodeType&&n&&1===n.nodeType&&(e=l.unwrap)}catch(o){}return e}(),T=function(e){return E.call(e,0)},O=function(){var e,t,n,r,i,s,l=T(arguments),a=l[0]||{};for(e=1,t=l.length;t>e;e++)if(null!=(n=l[e]))for(r in n)S.call(n,r)&&(i=a[r],s=n[r],a!==s&&s!==o&&(a[r]=s));return a},k=function(e){var t,n,o,r;if("object"!=typeof e||null==e||"number"==typeof e.nodeType)t=e;else if("number"==typeof e.length)for(t=[],n=0,o=e.length;o>n;n++)S.call(e,n)&&(t[n]=k(e[n]));else{t={};for(r in e)S.call(e,r)&&(t[r]=k(e[r]))}return t},D=function(e,t){for(var n={},o=0,r=t.length;r>o;o++)t[o]in e&&(n[t[o]]=e[t[o]]);return n},A=function(e,t){var n={};for(var o in e)-1===t.indexOf(o)&&(n[o]=e[o]);return n},x=function(e){if(e)for(var t in e)S.call(e,t)&&delete e[t];return e},H=function(e,t){if(e&&1===e.nodeType&&e.ownerDocument&&t&&(1===t.nodeType&&t.ownerDocument&&t.ownerDocument===e.ownerDocument||9===t.nodeType&&!t.ownerDocument&&t===e.ownerDocument))do{if(e===t)return!0;e=e.parentNode}while(e);return!1},P=function(e){var t;return"string"==typeof e&&e&&(t=e.split("#")[0].split("?")[0],t=e.slice(0,e.lastIndexOf("/")+1)),t},N=function(e){var t,n;return"string"==typeof e&&e&&(n=e.match(/^(?:|[^:@]*@|.+\)@(?=http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/),n&&n[1]?t=n[1]:(n=e.match(/\)@((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/),n&&n[1]&&(t=n[1]))),t},L=function(){var e,t;try{throw new w}catch(n){t=n}return t&&(e=t.sourceURL||t.fileName||N(t.stack)),e},W=function(){var e,t,n;if(a.currentScript&&(e=a.currentScript.src))return e;if(t=a.getElementsByTagName("script"),1===t.length)return t[0].src||o;if("readyState"in t[0])for(n=t.length;n--;)if("interactive"===t[n].readyState&&(e=t[n].src))return e;return"loading"===a.readyState&&(e=t[t.length-1].src)?e:(e=L())?e:o},I=function(){var e,t,n,r=a.getElementsByTagName("script");for(e=r.length;e--;){if(!(n=r[e].src)){t=null;break}if(n=P(n),null==t)t=n;else if(t!==n){t=null;break}}return t||o},j=function(){var e=P(W())||I()||"";return e+"ZeroClipboard.swf"},V=function(){return null==t.opener&&(!!t.top&&t!=t.top||!!t.parent&&t!=t.parent)}(),F={bridge:null,version:"0.0.0",pluginType:"unknown",disabled:null,outdated:null,sandboxed:null,unavailable:null,degraded:null,deactivated:null,overdue:null,ready:null},B="11.0.0",z={},Y={},U=null,G=0,$=0,X={ready:"Flash communication is established",error:{"flash-disabled":"Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.","flash-outdated":"Flash is too outdated to support ZeroClipboard","flash-sandboxed":"Attempting to run Flash in a sandboxed iframe, which is impossible","flash-unavailable":"Flash is unable to communicate bidirectionally with JavaScript","flash-degraded":"Flash is unable to preserve data fidelity when communicating with JavaScript","flash-deactivated":"Flash is too outdated for your browser and/or is configured as click-to-activate.\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.","flash-overdue":"Flash communication was established but NOT within the acceptable time limit","version-mismatch":"ZeroClipboard JS version number does not match ZeroClipboard SWF version number","clipboard-error":"At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard","config-mismatch":"ZeroClipboard configuration does not match Flash's reality","swf-not-found":"The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity"}},K=["flash-unavailable","flash-degraded","flash-overdue","version-mismatch","config-mismatch","clipboard-error"],q=["flash-disabled","flash-outdated","flash-sandboxed","flash-unavailable","flash-degraded","flash-deactivated","flash-overdue"],Z=new RegExp("^flash-("+q.map(function(e){return e.replace(/^flash-/,"")}).join("|")+")$"),J=new RegExp("^flash-("+q.slice(1).map(function(e){return e.replace(/^flash-/,"")}).join("|")+")$"),Q={swfPath:j(),trustedDomains:t.location.host?[t.location.host]:[],cacheBust:!0,forceEnhancedClipboard:!1,flashLoadTimeout:3e4,autoActivate:!0,bubbleEvents:!0,containerId:"global-zeroclipboard-html-bridge",containerClass:"global-zeroclipboard-container",swfObjectId:"global-zeroclipboard-flash-bridge",hoverClass:"zeroclipboard-is-hover",activeClass:"zeroclipboard-is-active",forceHandCursor:!1,title:null,zIndex:999999999},ee=function(e){if("object"==typeof e&&null!==e)for(var t in e)if(S.call(e,t))if(/^(?:forceHandCursor|title|zIndex|bubbleEvents)$/.test(t))Q[t]=e[t];else if(null==F.bridge)if("containerId"===t||"swfObjectId"===t){if(!ge(e[t]))throw new Error("The specified `"+t+"` value is not valid as an HTML4 Element ID");Q[t]=e[t]}else Q[t]=e[t];{if("string"!=typeof e||!e)return k(Q);if(S.call(Q,e))return Q[e]}},te=function(){return $e(),{browser:D(u,["userAgent","platform","appName"]),flash:A(F,["bridge"]),zeroclipboard:{version:Ke.version,config:Ke.config()}}},ne=function(){return!!(F.disabled||F.outdated||F.sandboxed||F.unavailable||F.degraded||F.deactivated)},oe=function(e,t){var n,i,s,l={};if("string"==typeof e&&e)s=e.toLowerCase().split(/\s+/);else if("object"==typeof e&&e&&"undefined"==typeof t)for(n in e)S.call(e,n)&&"string"==typeof n&&n&&"function"==typeof e[n]&&Ke.on(n,e[n]);if(s&&s.length){for(n=0,i=s.length;i>n;n++)e=s[n].replace(/^on/,""),l[e]=!0,z[e]||(z[e]=[]),z[e].push(t);if(l.ready&&F.ready&&Ke.emit({type:"ready"}),l.error){for(n=0,i=q.length;i>n;n++)if(F[q[n].replace(/^flash-/,"")]===!0){Ke.emit({type:"error",name:q[n]});break}r!==o&&Ke.version!==r&&Ke.emit({type:"error",name:"version-mismatch",jsVersion:Ke.version,swfVersion:r})}}return Ke},re=function(e,t){var n,o,r,i,s;if(0===arguments.length)i=_(z);else if("string"==typeof e&&e)i=e.split(/\s+/);else if("object"==typeof e&&e&&"undefined"==typeof t)for(n in e)S.call(e,n)&&"string"==typeof n&&n&&"function"==typeof e[n]&&Ke.off(n,e[n]);if(i&&i.length)for(n=0,o=i.length;o>n;n++)if(e=i[n].toLowerCase().replace(/^on/,""),s=z[e],s&&s.length)if(t)for(r=s.indexOf(t);-1!==r;)s.splice(r,1),r=s.indexOf(t,r);else s.length=0;return Ke},ie=function(e){var t;return t="string"==typeof e&&e?k(z[e])||null:k(z)},se=function(e){var t,n,o;return e=me(e),e&&!Re(e)?"ready"===e.type&&F.overdue===!0?Ke.emit({type:"error",name:"flash-overdue"}):(t=O({},e),Ce.call(this,t),"copy"===e.type&&(o=Ae(Y),n=o.data,U=o.formatMap),n):void 0},le=function(){var e=F.sandboxed;if($e(),"boolean"!=typeof F.ready&&(F.ready=!1),F.sandboxed!==e&&F.sandboxed===!0)F.ready=!1,Ke.emit({type:"error",name:"flash-sandboxed"});else if(!Ke.isFlashUnusable()&&null===F.bridge){var t=Q.flashLoadTimeout;"number"==typeof t&&t>=0&&(G=c(function(){"boolean"!=typeof F.deactivated&&(F.deactivated=!0),F.deactivated===!0&&Ke.emit({type:"error",name:"flash-deactivated"})},t)),F.overdue=!1,ke()}},ae=function(){Ke.clearData(),Ke.blur(),Ke.emit("destroy"),De(),Ke.off()},ue=function(e,t){var n;if("object"==typeof e&&e&&"undefined"==typeof t)n=e,Ke.clearData();else{if("string"!=typeof e||!e)return;n={},n[e]=t}for(var o in n)"string"==typeof o&&o&&S.call(n,o)&&"string"==typeof n[o]&&n[o]&&(Y[o]=n[o])},ce=function(e){"undefined"==typeof e?(x(Y),U=null):"string"==typeof e&&S.call(Y,e)&&delete Y[e]},de=function(e){return"undefined"==typeof e?k(Y):"string"==typeof e&&S.call(Y,e)?Y[e]:void 0},he=function(e){if(e&&1===e.nodeType){i&&(je(i,Q.activeClass),i!==e&&je(i,Q.hoverClass)),i=e,Ie(e,Q.hoverClass);var t=e.getAttribute("title")||Q.title;if("string"==typeof t&&t){var n=Oe(F.bridge);n&&n.setAttribute("title",t)}var o=Q.forceHandCursor===!0||"pointer"===Ve(e,"cursor");Ue(o),Ye()}},fe=function(){var e=Oe(F.bridge);e&&(e.removeAttribute("title"),e.style.left="0px",e.style.top="-9999px",e.style.width="1px",e.style.height="1px"),i&&(je(i,Q.hoverClass),je(i,Q.activeClass),i=null)},pe=function(){return i||null},ge=function(e){return"string"==typeof e&&e&&/^[A-Za-z][A-Za-z0-9_:\-\.]*$/.test(e)},me=function(e){var t;if("string"==typeof e&&e?(t=e,e={}):"object"==typeof e&&e&&"string"==typeof e.type&&e.type&&(t=e.type),t){t=t.toLowerCase(),!e.target&&(/^(copy|aftercopy|_click)$/.test(t)||"error"===t&&"clipboard-error"===e.name)&&(e.target=s),O(e,{type:t,target:e.target||i||null,relatedTarget:e.relatedTarget||null,currentTarget:F&&F.bridge||null,timeStamp:e.timeStamp||C()||null});var n=X[e.type];return"error"===e.type&&e.name&&n&&(n=n[e.name]),n&&(e.message=n),"ready"===e.type&&O(e,{target:null,version:F.version}),"error"===e.type&&(Z.test(e.name)&&O(e,{target:null,minimumVersion:B}),J.test(e.name)&&O(e,{version:F.version})),"copy"===e.type&&(e.clipboardData={setData:Ke.setData,clearData:Ke.clearData}),"aftercopy"===e.type&&(e=xe(e,U)),e.target&&!e.relatedTarget&&(e.relatedTarget=we(e.target)),ve(e)}},we=function(e){var t=e&&e.getAttribute&&e.getAttribute("data-clipboard-target");return t?a.getElementById(t):null},ve=function(e){if(e&&/^_(?:click|mouse(?:over|out|down|up|move))$/.test(e.type)){var t=e.target,n="_mouseover"===e.type&&e.relatedTarget?e.relatedTarget:o,r="_mouseout"===e.type&&e.relatedTarget?e.relatedTarget:o,i=Fe(t),s=l.screenLeft||l.screenX||0,u=l.screenTop||l.screenY||0,c=a.body.scrollLeft+a.documentElement.scrollLeft,d=a.body.scrollTop+a.documentElement.scrollTop,h=i.left+("number"==typeof e._stageX?e._stageX:0),f=i.top+("number"==typeof e._stageY?e._stageY:0),p=h-c,g=f-d,m=s+p,w=u+g,v="number"==typeof e.movementX?e.movementX:0,y="number"==typeof e.movementY?e.movementY:0;delete e._stageX,delete e._stageY,O(e,{srcElement:t,fromElement:n,toElement:r,screenX:m,screenY:w,pageX:h,pageY:f,clientX:p,clientY:g,x:p,y:g,movementX:v,movementY:y,offsetX:0,offsetY:0,layerX:0,layerY:0})}return e},ye=function(e){var t=e&&"string"==typeof e.type&&e.type||"";return!/^(?:(?:before)?copy|destroy)$/.test(t)},be=function(e,t,n,o){o?c(function(){e.apply(t,n)},0):e.apply(t,n)},Ce=function(e){if("object"==typeof e&&e&&e.type){var t=ye(e),n=z["*"]||[],o=z[e.type]||[],r=n.concat(o);if(r&&r.length){var i,s,a,u,c,d=this;for(i=0,s=r.length;s>i;i++)a=r[i],u=d,"string"==typeof a&&"function"==typeof l[a]&&(a=l[a]),"object"==typeof a&&a&&"function"==typeof a.handleEvent&&(u=a,a=a.handleEvent),"function"==typeof a&&(c=O({},e),be(a,u,[c],t))}return this}},_e=function(e){var t=null;return(V===!1||e&&"error"===e.type&&e.name&&-1!==K.indexOf(e.name))&&(t=!1),t},Re=function(e){var t=e.target||i||null,n="swf"===e._source;switch(delete e._source,e.type){case"error":var o="flash-sandboxed"===e.name||_e(e);"boolean"==typeof o&&(F.sandboxed=o),-1!==q.indexOf(e.name)?O(F,{disabled:"flash-disabled"===e.name,outdated:"flash-outdated"===e.name,unavailable:"flash-unavailable"===e.name,degraded:"flash-degraded"===e.name,deactivated:"flash-deactivated"===e.name,overdue:"flash-overdue"===e.name,ready:!1}):"version-mismatch"===e.name&&(r=e.swfVersion,O(F,{disabled:!1,outdated:!1,unavailable:!1,degraded:!1,deactivated:!1,overdue:!1,ready:!1})),ze();break;case"ready":r=e.swfVersion;var l=F.deactivated===!0;O(F,{disabled:!1,outdated:!1,sandboxed:!1,unavailable:!1,degraded:!1,deactivated:!1,overdue:l,ready:!l}),ze();break;case"beforecopy":s=t;break;case"copy":var a,u,c=e.relatedTarget;!Y["text/html"]&&!Y["text/plain"]&&c&&(u=c.value||c.outerHTML||c.innerHTML)&&(a=c.value||c.textContent||c.innerText)?(e.clipboardData.clearData(),e.clipboardData.setData("text/plain",a),u!==a&&e.clipboardData.setData("text/html",u)):!Y["text/plain"]&&e.target&&(a=e.target.getAttribute("data-clipboard-text"))&&(e.clipboardData.clearData(),e.clipboardData.setData("text/plain",a));break;case"aftercopy":Se(e),Ke.clearData(),t&&t!==We()&&t.focus&&t.focus();break;case"_mouseover":Ke.focus(t),Q.bubbleEvents===!0&&n&&(t&&t!==e.relatedTarget&&!H(e.relatedTarget,t)&&Ee(O({},e,{type:"mouseenter",bubbles:!1,cancelable:!1})),Ee(O({},e,{type:"mouseover"})));break;case"_mouseout":Ke.blur(),Q.bubbleEvents===!0&&n&&(t&&t!==e.relatedTarget&&!H(e.relatedTarget,t)&&Ee(O({},e,{type:"mouseleave",bubbles:!1,cancelable:!1})),Ee(O({},e,{type:"mouseout"})));break;case"_mousedown":Ie(t,Q.activeClass),Q.bubbleEvents===!0&&n&&Ee(O({},e,{type:e.type.slice(1)}));break;case"_mouseup":je(t,Q.activeClass),Q.bubbleEvents===!0&&n&&Ee(O({},e,{type:e.type.slice(1)}));break;case"_click":s=null,Q.bubbleEvents===!0&&n&&Ee(O({},e,{type:e.type.slice(1)}));break;case"_mousemove":Q.bubbleEvents===!0&&n&&Ee(O({},e,{type:e.type.slice(1)}))}return/^_(?:click|mouse(?:over|out|down|up|move))$/.test(e.type)?!0:void 0},Se=function(e){if(e.errors&&e.errors.length>0){var t=k(e);O(t,{type:"error",name:"clipboard-error"}),delete t.success,c(function(){Ke.emit(t)},0)}},Ee=function(e){if(e&&"string"==typeof e.type&&e){var t,n=e.target||null,o=n&&n.ownerDocument||a,r={view:o.defaultView||l,canBubble:!0,cancelable:!0,detail:"click"===e.type?1:0,button:"number"==typeof e.which?e.which-1:"number"==typeof e.button?e.button:o.createEvent?0:1},i=O(r,e);n&&o.createEvent&&n.dispatchEvent&&(i=[i.type,i.canBubble,i.cancelable,i.view,i.detail,i.screenX,i.screenY,i.clientX,i.clientY,i.ctrlKey,i.altKey,i.shiftKey,i.metaKey,i.button,i.relatedTarget],t=o.createEvent("MouseEvents"),t.initMouseEvent&&(t.initMouseEvent.apply(t,i),t._source="js",n.dispatchEvent(t)))}},Me=function(){var e=Q.flashLoadTimeout;if("number"==typeof e&&e>=0){var t=Math.min(1e3,e/10),n=Q.swfObjectId+"_fallbackContent";$=h(function(){var e=a.getElementById(n);Be(e)&&(ze(),F.deactivated=null,Ke.emit({type:"error",name:"swf-not-found"}))},t)}},Te=function(){var e=a.createElement("div");return e.id=Q.containerId,e.className=Q.containerClass,e.style.position="absolute",e.style.left="0px",e.style.top="-9999px",e.style.width="1px",e.style.height="1px",e.style.zIndex=""+Ge(Q.zIndex),e},Oe=function(e){for(var t=e&&e.parentNode;t&&"OBJECT"===t.nodeName&&t.parentNode;)t=t.parentNode;return t||null},ke=function(){var e,t=F.bridge,n=Oe(t);if(!t){var o=Le(l.location.host,Q),r="never"===o?"none":"all",i=Pe(O({jsVersion:Ke.version},Q)),s=Q.swfPath+He(Q.swfPath,Q);n=Te();var u=a.createElement("div");n.appendChild(u),a.body.appendChild(n);var c=a.createElement("div"),d="activex"===F.pluginType;c.innerHTML='<object id="'+Q.swfObjectId+'" name="'+Q.swfObjectId+'" width="100%" height="100%" '+(d?'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"':'type="application/x-shockwave-flash" data="'+s+'"')+">"+(d?'<param name="movie" value="'+s+'"/>':"")+'<param name="allowScriptAccess" value="'+o+'"/><param name="allowNetworking" value="'+r+'"/><param name="menu" value="false"/><param name="wmode" value="transparent"/><param name="flashvars" value="'+i+'"/><div id="'+Q.swfObjectId+'_fallbackContent">&nbsp;</div></object>',t=c.firstChild,c=null,M(t).ZeroClipboard=Ke,n.replaceChild(t,u),Me()}return t||(t=a[Q.swfObjectId],t&&(e=t.length)&&(t=t[e-1]),!t&&n&&(t=n.firstChild)),F.bridge=t||null,t},De=function(){var e=F.bridge;if(e){var t=Oe(e);t&&("activex"===F.pluginType&&"readyState"in e?(e.style.display="none",function n(){if(4===e.readyState){for(var o in e)"function"==typeof e[o]&&(e[o]=null);e.parentNode&&e.parentNode.removeChild(e),t.parentNode&&t.parentNode.removeChild(t)}else c(n,10)}()):(e.parentNode&&e.parentNode.removeChild(e),t.parentNode&&t.parentNode.removeChild(t))),ze(),F.ready=null,F.bridge=null,F.deactivated=null,r=o}},Ae=function(e){var t={},n={};if("object"==typeof e&&e){for(var o in e)if(o&&S.call(e,o)&&"string"==typeof e[o]&&e[o])switch(o.toLowerCase()){case"text/plain":case"text":case"air:text":case"flash:text":t.text=e[o],n.text=o;break;case"text/html":case"html":case"air:html":case"flash:html":t.html=e[o],n.html=o;break;case"application/rtf":case"text/rtf":case"rtf":case"richtext":case"air:rtf":case"flash:rtf":t.rtf=e[o],n.rtf=o}return{data:t,formatMap:n}}},xe=function(e,t){if("object"!=typeof e||!e||"object"!=typeof t||!t)return e;var n={};for(var o in e)if(S.call(e,o))if("errors"===o){n[o]=e[o]?e[o].slice():[];for(var r=0,i=n[o].length;i>r;r++)n[o][r].format=t[n[o][r].format]}else if("success"!==o&&"data"!==o)n[o]=e[o];else{n[o]={};var s=e[o];for(var l in s)l&&S.call(s,l)&&S.call(t,l)&&(n[o][t[l]]=s[l])}return n},He=function(e,t){var n=null==t||t&&t.cacheBust===!0;return n?(-1===e.indexOf("?")?"?":"&")+"noCache="+C():""},Pe=function(e){var t,n,o,r,i="",s=[];if(e.trustedDomains&&("string"==typeof e.trustedDomains?r=[e.trustedDomains]:"object"==typeof e.trustedDomains&&"length"in e.trustedDomains&&(r=e.trustedDomains)),r&&r.length)for(t=0,n=r.length;n>t;t++)if(S.call(r,t)&&r[t]&&"string"==typeof r[t]){if(o=Ne(r[t]),!o)continue;if("*"===o){s.length=0,s.push(o);break}s.push.apply(s,[o,"//"+o,l.location.protocol+"//"+o])}return s.length&&(i+="trustedOrigins="+g(s.join(","))),e.forceEnhancedClipboard===!0&&(i+=(i?"&":"")+"forceEnhancedClipboard=true"),"string"==typeof e.swfObjectId&&e.swfObjectId&&(i+=(i?"&":"")+"swfObjectId="+g(e.swfObjectId)),"string"==typeof e.jsVersion&&e.jsVersion&&(i+=(i?"&":"")+"jsVersion="+g(e.jsVersion)),i},Ne=function(e){if(null==e||""===e)return null;if(e=e.replace(/^\s+|\s+$/g,""),""===e)return null;var t=e.indexOf("//");e=-1===t?e:e.slice(t+2);var n=e.indexOf("/");return e=-1===n?e:-1===t||0===n?null:e.slice(0,n),e&&".swf"===e.slice(-4).toLowerCase()?null:e||null},Le=function(){var e=function(e){var t,n,o,r=[];if("string"==typeof e&&(e=[e]),"object"!=typeof e||!e||"number"!=typeof e.length)return r;for(t=0,n=e.length;n>t;t++)if(S.call(e,t)&&(o=Ne(e[t]))){if("*"===o){r.length=0,r.push("*");break}-1===r.indexOf(o)&&r.push(o)}return r};return function(t,n){var o=Ne(n.swfPath);null===o&&(o=t);var r=e(n.trustedDomains),i=r.length;if(i>0){if(1===i&&"*"===r[0])return"always";if(-1!==r.indexOf(t))return 1===i&&t===o?"sameDomain":"always"}return"never"}}(),We=function(){try{return a.activeElement}catch(e){return null}},Ie=function(e,t){var n,o,r,i=[];if("string"==typeof t&&t&&(i=t.split(/\s+/)),e&&1===e.nodeType&&i.length>0)if(e.classList)for(n=0,o=i.length;o>n;n++)e.classList.add(i[n]);else if(e.hasOwnProperty("className")){for(r=" "+e.className+" ",n=0,o=i.length;o>n;n++)-1===r.indexOf(" "+i[n]+" ")&&(r+=i[n]+" ");e.className=r.replace(/^\s+|\s+$/g,"")}return e},je=function(e,t){var n,o,r,i=[];if("string"==typeof t&&t&&(i=t.split(/\s+/)),e&&1===e.nodeType&&i.length>0)if(e.classList&&e.classList.length>0)for(n=0,o=i.length;o>n;n++)e.classList.remove(i[n]);else if(e.className){for(r=(" "+e.className+" ").replace(/[\r\n\t]/g," "),n=0,o=i.length;o>n;n++)r=r.replace(" "+i[n]+" "," ");e.className=r.replace(/^\s+|\s+$/g,"")}return e},Ve=function(e,t){var n=p(e,null).getPropertyValue(t);return"cursor"!==t||n&&"auto"!==n||"A"!==e.nodeName?n:"pointer"},Fe=function(e){var t={left:0,top:0,width:0,height:0};if(e.getBoundingClientRect){var n=e.getBoundingClientRect(),o=l.pageXOffset,r=l.pageYOffset,i=a.documentElement.clientLeft||0,s=a.documentElement.clientTop||0,u=0,c=0;if("relative"===Ve(a.body,"position")){var d=a.body.getBoundingClientRect(),h=a.documentElement.getBoundingClientRect();u=d.left-h.left||0,c=d.top-h.top||0}t.left=n.left+o-i-u,t.top=n.top+r-s-c,t.width="width"in n?n.width:n.right-n.left,t.height="height"in n?n.height:n.bottom-n.top}return t},Be=function(e){if(!e)return!1;var t=p(e,null),n=y(t.height)>0,o=y(t.width)>0,r=y(t.top)>=0,i=y(t.left)>=0,s=n&&o&&r&&i,l=s?null:Fe(e),a="none"!==t.display&&"collapse"!==t.visibility&&(s||!!l&&(n||l.height>0)&&(o||l.width>0)&&(r||l.top>=0)&&(i||l.left>=0));return a},ze=function(){d(G),G=0,f($),$=0},Ye=function(){var e;if(i&&(e=Oe(F.bridge))){var t=Fe(i);O(e.style,{width:t.width+"px",height:t.height+"px",top:t.top+"px",left:t.left+"px",zIndex:""+Ge(Q.zIndex)})}},Ue=function(e){F.ready===!0&&(F.bridge&&"function"==typeof F.bridge.setHandCursor?F.bridge.setHandCursor(e):F.ready=!1)},Ge=function(e){if(/^(?:auto|inherit)$/.test(e))return e;var t;return"number"!=typeof e||b(e)?"string"==typeof e&&(t=Ge(v(e,10))):t=e,"number"==typeof t?t:"auto"},$e=function(e){var n,o,r,i=F.sandboxed,s=null;if(e=e===!0,V===!1)s=!1;else{try{o=t.frameElement||null}catch(l){r={name:l.name,message:l.message}}if(o&&1===o.nodeType&&"IFRAME"===o.nodeName)try{s=o.hasAttribute("sandbox")}catch(l){s=null}else{try{n=document.domain||null}catch(l){n=null}(null===n||r&&"SecurityError"===r.name&&/(^|[\s\(\[@])sandbox(es|ed|ing|[\s\.,!\)\]@]|$)/.test(r.message.toLowerCase()))&&(s=!0)}}return F.sandboxed=s,i===s||e||Xe(m),s},Xe=function(e){function t(e){var t=e.match(/[\d]+/g);return t.length=3,t.join(".")}function n(e){return!!e&&(e=e.toLowerCase())&&(/^(pepflashplayer\.dll|libpepflashplayer\.so|pepperflashplayer\.plugin)$/.test(e)||"chrome.plugin"===e.slice(-13))}function o(e){e&&(l=!0,e.version&&(d=t(e.version)),!d&&e.description&&(d=t(e.description)),e.filename&&(c=n(e.filename)))}var r,i,s,l=!1,a=!1,c=!1,d="";if(u.plugins&&u.plugins.length)r=u.plugins["Shockwave Flash"],o(r),u.plugins["Shockwave Flash 2.0"]&&(l=!0,d="2.0.0.11");else if(u.mimeTypes&&u.mimeTypes.length)s=u.mimeTypes["application/x-shockwave-flash"],r=s&&s.enabledPlugin,o(r);else if("undefined"!=typeof e){a=!0;try{i=new e("ShockwaveFlash.ShockwaveFlash.7"),l=!0,d=t(i.GetVariable("$version"))}catch(h){try{i=new e("ShockwaveFlash.ShockwaveFlash.6"),l=!0,d="6.0.21"}catch(f){try{i=new e("ShockwaveFlash.ShockwaveFlash"),l=!0,d=t(i.GetVariable("$version"))}catch(p){a=!1}}}}F.disabled=l!==!0,F.outdated=d&&y(d)<y(B),F.version=d||"0.0.0",F.pluginType=c?"pepper":a?"activex":l?"netscape":"unknown"};Xe(m),$e(!0);var Ke=function(){return this instanceof Ke?void("function"==typeof Ke._createClient&&Ke._createClient.apply(this,T(arguments))):new Ke};R(Ke,"version",{value:"2.2.0",writable:!1,configurable:!0,enumerable:!0}),Ke.config=function(){return ee.apply(this,T(arguments))},Ke.state=function(){return te.apply(this,T(arguments))},Ke.isFlashUnusable=function(){return ne.apply(this,T(arguments))},Ke.on=function(){return oe.apply(this,T(arguments))},Ke.off=function(){return re.apply(this,T(arguments))},Ke.handlers=function(){return ie.apply(this,T(arguments))},Ke.emit=function(){return se.apply(this,T(arguments))},Ke.create=function(){return le.apply(this,T(arguments))},Ke.destroy=function(){return ae.apply(this,T(arguments))},Ke.setData=function(){return ue.apply(this,T(arguments))},Ke.clearData=function(){return ce.apply(this,T(arguments))},Ke.getData=function(){return de.apply(this,T(arguments))},Ke.focus=Ke.activate=function(){return he.apply(this,T(arguments))},Ke.blur=Ke.deactivate=function(){return fe.apply(this,T(arguments))},Ke.activeElement=function(){return pe.apply(this,T(arguments))};var qe=0,Ze={},Je=0,Qe={},et={};O(Q,{autoActivate:!0});var tt=function(e){var t=this;t.id=""+qe++,Ze[t.id]={instance:t,elements:[],handlers:{}},e&&t.clip(e),Ke.on("*",function(e){return t.emit(e)}),Ke.on("destroy",function(){t.destroy()}),Ke.create()},nt=function(e,t){var n,i,s,l={},a=Ze[this.id],u=a&&a.handlers;if(!a)throw new Error("Attempted to add new listener(s) to a destroyed ZeroClipboard client instance");if("string"==typeof e&&e)s=e.toLowerCase().split(/\s+/);else if("object"==typeof e&&e&&"undefined"==typeof t)for(n in e)S.call(e,n)&&"string"==typeof n&&n&&"function"==typeof e[n]&&this.on(n,e[n]);if(s&&s.length){for(n=0,i=s.length;i>n;n++)e=s[n].replace(/^on/,""),l[e]=!0,u[e]||(u[e]=[]),u[e].push(t);if(l.ready&&F.ready&&this.emit({type:"ready",client:this}),l.error){for(n=0,i=q.length;i>n;n++)if(F[q[n].replace(/^flash-/,"")]){this.emit({type:"error",name:q[n],client:this});break}r!==o&&Ke.version!==r&&this.emit({type:"error",name:"version-mismatch",jsVersion:Ke.version,swfVersion:r})}}return this},ot=function(e,t){var n,o,r,i,s,l=Ze[this.id],a=l&&l.handlers;if(!a)return this;if(0===arguments.length)i=_(a);else if("string"==typeof e&&e)i=e.split(/\s+/);else if("object"==typeof e&&e&&"undefined"==typeof t)for(n in e)S.call(e,n)&&"string"==typeof n&&n&&"function"==typeof e[n]&&this.off(n,e[n]);if(i&&i.length)for(n=0,o=i.length;o>n;n++)if(e=i[n].toLowerCase().replace(/^on/,""),s=a[e],s&&s.length)if(t)for(r=s.indexOf(t);-1!==r;)s.splice(r,1),r=s.indexOf(t,r);else s.length=0;return this},rt=function(e){var t=null,n=Ze[this.id]&&Ze[this.id].handlers;return n&&(t="string"==typeof e&&e?n[e]?n[e].slice(0):[]:k(n)),t},it=function(e){if(ct.call(this,e)){"object"==typeof e&&e&&"string"==typeof e.type&&e.type&&(e=O({},e));var t=O({},me(e),{client:this});dt.call(this,t)}return this},st=function(e){if(!Ze[this.id])throw new Error("Attempted to clip element(s) to a destroyed ZeroClipboard client instance");e=ht(e);for(var t=0;t<e.length;t++)if(S.call(e,t)&&e[t]&&1===e[t].nodeType){e[t].zcClippingId?-1===Qe[e[t].zcClippingId].indexOf(this.id)&&Qe[e[t].zcClippingId].push(this.id):(e[t].zcClippingId="zcClippingId_"+Je++,Qe[e[t].zcClippingId]=[this.id],Q.autoActivate===!0&&ft(e[t]));var n=Ze[this.id]&&Ze[this.id].elements;-1===n.indexOf(e[t])&&n.push(e[t])}return this},lt=function(e){var t=Ze[this.id];if(!t)return this;var n,o=t.elements;e="undefined"==typeof e?o.slice(0):ht(e);for(var r=e.length;r--;)if(S.call(e,r)&&e[r]&&1===e[r].nodeType){for(n=0;-1!==(n=o.indexOf(e[r],n));)o.splice(n,1);var i=Qe[e[r].zcClippingId];if(i){for(n=0;-1!==(n=i.indexOf(this.id,n));)i.splice(n,1);0===i.length&&(Q.autoActivate===!0&&pt(e[r]),delete e[r].zcClippingId)}}return this},at=function(){var e=Ze[this.id];return e&&e.elements?e.elements.slice(0):[]},ut=function(){Ze[this.id]&&(this.unclip(),this.off(),delete Ze[this.id])},ct=function(e){if(!e||!e.type)return!1;if(e.client&&e.client!==this)return!1;var t=Ze[this.id],n=t&&t.elements,o=!!n&&n.length>0,r=!e.target||o&&-1!==n.indexOf(e.target),i=e.relatedTarget&&o&&-1!==n.indexOf(e.relatedTarget),s=e.client&&e.client===this;return!(!t||!(r||i||s))},dt=function(e){var t=Ze[this.id];if("object"==typeof e&&e&&e.type&&t){var n=ye(e),o=t&&t.handlers["*"]||[],r=t&&t.handlers[e.type]||[],i=o.concat(r);if(i&&i.length){var s,a,u,c,d,h=this;for(s=0,a=i.length;a>s;s++)u=i[s],c=h,"string"==typeof u&&"function"==typeof l[u]&&(u=l[u]),"object"==typeof u&&u&&"function"==typeof u.handleEvent&&(c=u,u=u.handleEvent),"function"==typeof u&&(d=O({},e),be(u,c,[d],n))}}},ht=function(e){return"string"==typeof e&&(e=[]),"number"!=typeof e.length?[e]:e},ft=function(e){if(e&&1===e.nodeType){var t=function(e){(e||(e=l.event))&&("js"!==e._source&&(e.stopImmediatePropagation(),e.preventDefault()),delete e._source)},n=function(n){(n||(n=l.event))&&(t(n),Ke.focus(e))};e.addEventListener("mouseover",n,!1),e.addEventListener("mouseout",t,!1),e.addEventListener("mouseenter",t,!1),e.addEventListener("mouseleave",t,!1),e.addEventListener("mousemove",t,!1),et[e.zcClippingId]={mouseover:n,mouseout:t,mouseenter:t,mouseleave:t,mousemove:t}}},pt=function(e){if(e&&1===e.nodeType){var t=et[e.zcClippingId];if("object"==typeof t&&t){for(var n,o,r=["move","leave","enter","out","over"],i=0,s=r.length;s>i;i++)n="mouse"+r[i],o=t[n],"function"==typeof o&&e.removeEventListener(n,o,!1);delete et[e.zcClippingId]}}};Ke._createClient=function(){tt.apply(this,T(arguments))},Ke.prototype.on=function(){return nt.apply(this,T(arguments))},Ke.prototype.off=function(){return ot.apply(this,T(arguments))},Ke.prototype.handlers=function(){return rt.apply(this,T(arguments))},Ke.prototype.emit=function(){return it.apply(this,T(arguments))},Ke.prototype.clip=function(){return st.apply(this,T(arguments))},Ke.prototype.unclip=function(){return lt.apply(this,T(arguments))},Ke.prototype.elements=function(){return at.apply(this,T(arguments))},Ke.prototype.destroy=function(){return ut.apply(this,T(arguments))},Ke.prototype.setText=function(e){if(!Ze[this.id])throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");return Ke.setData("text/plain",e),this},Ke.prototype.setHtml=function(e){if(!Ze[this.id])throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");return Ke.setData("text/html",e),this},Ke.prototype.setRichText=function(e){if(!Ze[this.id])throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");return Ke.setData("application/rtf",e),this},Ke.prototype.setData=function(){if(!Ze[this.id])throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");return Ke.setData.apply(this,T(arguments)),this},Ke.prototype.clearData=function(){if(!Ze[this.id])throw new Error("Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance");return Ke.clearData.apply(this,T(arguments)),this},Ke.prototype.getData=function(){if(!Ze[this.id])throw new Error("Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance");return Ke.getData.apply(this,T(arguments))},"function"==typeof e&&e.amd?e(function(){return Ke}):"object"==typeof n&&n&&"object"==typeof n.exports&&n.exports?n.exports=Ke:t.ZeroClipboard=Ke}(function(){return this||window}())},{}]},{},[23,61,63,62,64,85,86,87,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,88,89,90,91,105,106,107,108,94,95,96,97,98,99,31,35,32,33,40,34,36,37,38,39])(23)});
/**
 *  backbone.associate.js v0.0.9
 *  (c) 2013, RJ Zaworski
 *
 *  Presumptionless model relations for Backbone.js
 *  Released under the MIT License
 */
(function(root, factory) {

    // CommonJS compatibilty
    if (typeof exports !== 'undefined') {
        factory(_, Backbone);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['underscore', 'backbone'], function(_, Backbone) {
            // Use global variables if the locals are undefined.
            return factory(_ || root._, Backbone || root.Backbone);
        });
    } else {
        factory(root._, root.Backbone);
    }

})(this, function(_, Backbone) {

    var
    // Sift through a map of attributes and initialize any
    // known associations
        _filterAssociates = function(context, attributes, options) {

            var attrs, current = context.attributes,
                action, key, association, associations = context._associations,
                omit = [];

            for (key in associations) {
                association = associations[key];
                attrs = attributes[key];
                if (_isAssociatedType(association, current[key])) {
                    if (_isAssociatedType(association, attrs)) {
                        // Reassign associated resource
                        current[key] = attrs;
                        omit.push(key);
                    } else if (attrs && attrs !== null) {
                        // Update attributes of associated resource
                        current[key].set(attrs, options);
                        omit.push(key);
                    }
                } else {
                    attributes[key] = _buildAssociation(context, association, attrs, options);
                }
            }

            // Skip any attributes that have were handled by associations
            return _.omit(attributes, omit);
        },

        // Check whether the supplied object matches the association type
        _isAssociatedType = function(association, obj) {
            return (obj instanceof association.type);
        },

        // Builds an association
        _buildAssociation = function(context, association, attributes, options) {
            var result = new(association.type)(attributes, options);
            if (association.url) {
                // Assign a sensible default URL by appending the url parameter
                // to the url of the parent model.
                result.url = function() {
                    return _.result(context, 'url') + _.result(association, 'url');
                };
            }
            return result;
        },

        // Wraps a method, exposing an "unwrap" method for reverting it later
        _wrapMethod = function(context, wrapper, key) {

            var original = context[key],
                wrapped = _.wrap(original, wrapper);

            wrapped.unwrap = function() {
                context[key] = original;
            };

            context[key] = wrapped;
        },

        // Extensions to Backbone.Model for filtering associate data, etc, etc
        _extensions = {

            // Updates `set` to handle supplied attributes
            set: function(original, key, val, options) {

                var self = this,
                    attributes = {};

                if (_.isObject(key)) {
                    _.extend(attributes, key);
                } else {
                    attributes[key] = val;
                }
                if (_.isObject(val) && (typeof options === "undefined" || options === null)) {
                    options = val;
                }

                return original.call(self, _filterAssociates(self, attributes, options), options);
            },

            // Updates `toJSON` to serialize associated objects
            toJSON: function(original, options) {

                var self = this,
                    key, associations = self._associations,
                    attributes = original.call(self, options);

                for (key in associations) {
                    if (_isAssociatedType(associations[key], attributes[key])) {
                        attributes[key] = attributes[key].toJSON();
                    }
                }
                return attributes;
            }
        },

        // Patch initialize method to setup associations and filter initial attributes
        _initialize = function(original, attrs, options) {

            var self = this,
                key, extensions = _.clone(_extensions);

            // Provide associate accessors
            for (key in self._associations) {
                extensions[key] = _.partial(self.get, key);
            }

            // Wrap extensions around existing class methods
            _.each(extensions, _.partial(_wrapMethod, self));

            // Filter any attributes that slipped by without parsing
            _filterAssociates(self, self.attributes, options);

            // Pass control back to the original initialize method
            return original.call(self, attrs, options);
        };

    // Define associations for a model
    Backbone.associate = function(klass, associations) {

        var proto = klass.prototype;

        if (!proto._associations) {
            // Patch initialize method in prototype
            _wrapMethod(proto, _initialize, 'initialize');

            // Add namespace for associations
            proto._associations = {};
        }

        _.extend(proto._associations, associations);
    };

    // Remove model associations
    Backbone.dissociate = function(klass) {
        var proto = klass.prototype;
        proto.initialize.unwrap();
        proto._associations = null;
    };

    return Backbone;
});

/*!
 * @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2015
 * @version 4.1.7
 *
 * File input styled for Bootstrap 3.0 that utilizes HTML5 File Input's advanced
 * features including the FileReader API.
 *
 * The plugin drastically enhances the HTML file input to preview multiple files on the client before
 * upload. In addition it provides the ability to preview content of images, text, videos, audio, html,
 * flash and other objects. It also offers the ability to upload and delete files using AJAX, and add
 * files in batches (i.e. preview, append, or remove before upload).
 *
 * Author: Kartik Visweswaran
 * Copyright: 2015, Kartik Visweswaran, Krajee.com
 * For more JQuery plugins visit http://plugins.krajee.com
 * For more Yii related demos visit http://demos.krajee.com
 */
(function($) {
    "use strict";
    String.prototype.repl = function(from, to) {
        return this.split(from).join(to);
    };
    var isIE = function(ver) {
            var div = document.createElement("div"),
                status;
            div.innerHTML = "<!--[if IE " + ver + "]><i></i><![endif]-->";
            status = (div.getElementsByTagName("i").length === 1);
            document.body.appendChild(div);
            div.parentNode.removeChild(div);
            return status;
        },
        hasFileAPISupport = function() {
            return window.File && window.FileReader;
        },
        hasDragDropSupport = function() {
            var $div = document.createElement('div');
            return !isIE(9) && ($div.draggable !== undefined || ($div.ondragstart !== undefined && $div.ondrop !== undefined));
        },
        hasFileUploadSupport = function() {
            return hasFileAPISupport && window.FormData;
        },
        addCss = function($el, css) {
            $el.removeClass(css).addClass(css);
        },
        STYLE_SETTING = 'style="width:{width};height:{height};"',
        OBJECT_PARAMS = '      <param name="controller" value="true" />\n' +
        '      <param name="allowFullScreen" value="true" />\n' +
        '      <param name="allowScriptAccess" value="always" />\n' +
        '      <param name="autoPlay" value="false" />\n' +
        '      <param name="autoStart" value="false" />\n' +
        '      <param name="quality" value="high" />\n',
        DEFAULT_PREVIEW = '<div class="file-preview-other">\n' +
        '       <i class="w2ui-icon-file"></i>\n' +
        '   </div>',
        defaultFileActionSettings = {
            removeIcon: '<i class="w2ui-icon-trash text-danger"></i>',
            removeClass: 'btn btn-icon-only btn-red',
            removeTitle: 'Remove file',
            uploadIcon: '<i class="w2ui-icon-upload text-info"></i>',
            uploadClass: 'btn btn-icon-only btn-orange',
            uploadTitle: 'Upload file',
            indicatorNew: '<i class="glyphicon glyphicon-hand-down text-warning"></i>',
            indicatorSuccess: '<i class="glyphicon glyphicon-ok-sign file-icon-large text-success"></i>',
            indicatorError: '<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',
            indicatorLoading: '<i class="glyphicon glyphicon-hand-up text-muted"></i>',
            indicatorNewTitle: 'Not uploaded yet',
            indicatorSuccessTitle: 'Uploaded',
            indicatorErrorTitle: 'Upload Error',
            indicatorLoadingTitle: 'Uploading ...'
        },
        tMain1 = '{preview}\n' +
        '<div class="kv-upload-progress hide"></div>\n' +
        '<div class="input-group {class}">\n' +
        '   {caption}\n' +
        '   <div class="input-group-btn">\n' +
        '       {remove}\n' +
        '       {cancel}\n' +
        '       {upload}\n' +
        '       {browse}\n' +
        '   </div>\n' +
        '</div>',
        tMain2 = '{preview}\n<div class="kv-upload-progress hide"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n',
        tPreview = '<div class="file-preview {class}">\n' +
        '    <div class="closebtn fileinput-remove">&times;</div>\n' +
        '    <div class="{dropClass}">\n' +
        '    <div class="file-preview-thumbnails">\n' +
        '    </div>\n' +
        '    <div class="clearfix"></div>' +
        '    <div class="file-preview-status text-center text-success"></div>\n' +
        '    <div class="kv-fileinput-error"></div>\n' +
        '    </div>\n' +
        '</div>',
        tIcon = '<span class="w2ui-icon-file kv-caption-icon"></span>',
        tCaption = '<div tabindex="-1" class="form-control file-caption {class}">\n' +
        '   <span class="file-caption-ellipsis">&hellip;</span>\n' +
        '   <div class="file-caption-name"></div>\n' +
        '</div>',
        tModal = '<div id="{id}" class="modal fade">\n' +
        '  <div class="modal-dialog modal-lg">\n' +
        '    <div class="modal-content">\n' +
        '      <div class="modal-header">\n' +
        '        <button type="button" class="closebtn" data-dismiss="modal" aria-hidden="true">&times;</button>\n' +
        '        <h3 class="modal-title">Detailed Preview <small>{title}</small></h3>\n' +
        '      </div>\n' +
        '      <div class="modal-body">\n' +
        '        <textarea class="form-control" style="font-family:Monaco,Consolas,monospace; height: {height}px;" readonly>{body}</textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>',
        tProgress = '<div class="progress">\n' +
        '    <div class="{class}" role="progressbar"' +
        ' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n' +
        '        {percent}%\n' +
        '     </div>\n' +
        '</div>',
        tFooter = '<div class="file-thumbnail-footer">\n' +
        '    <div class="file-caption-name">{caption}</div>\n' +
        '    {actions}\n' +
        '</div>',
        tActions = '<div class="file-actions">\n' +
        '    <div class="file-footer-buttons">\n' +
        '        {upload}{delete}{other}' +
        '    </div>\n' +
        '    <div class="file-upload-indicator" tabindex="-1" title="{indicatorTitle}">{indicator}</div>\n' +
        '    <div class="clearfix"></div>\n' +
        '</div>',
        tActionDelete = '<button type="button" class="kv-file-remove {removeClass}" ' +
        'title="{removeTitle}"{dataUrl}{dataKey}>{removeIcon}</button>\n',
        tActionUpload = '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">' +
        '   {uploadIcon}\n</button>\n',
        tGeneric = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '   {content}\n' +
        '   {footer}\n' +
        '</div>\n',
        tHtml = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '    <object data="{data}" type="{type}" width="{width}" height="{height}">\n' +
        '       ' + DEFAULT_PREVIEW + '\n' +
        '    </object>\n' +
        '   {footer}\n' +
        '</div>',
        tImage = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '   <img src="{data}" class="file-preview-image" title="{caption}" alt="{caption}" ' + STYLE_SETTING + '>\n' +
        '   {footer}\n' +
        '</div>\n',
        tText = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '   <div class="file-preview-text" title="{caption}" ' + STYLE_SETTING + '>\n' +
        '       {data}\n' +
        '   </div>\n' +
        '   {footer}\n' +
        '</div>',
        tVideo = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <video width="{width}" height="{height}" controls>\n' +
        '       <source src="{data}" type="{type}">\n' +
        '       ' + DEFAULT_PREVIEW + '\n' +
        '   </video>\n' +
        '   {footer}\n' +
        '</div>\n',
        tAudio = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <audio controls>\n' +
        '       <source src="' + '{data}' + '" type="{type}">\n' +
        '       ' + DEFAULT_PREVIEW + '\n' +
        '   </audio>\n' +
        '   {footer}\n' +
        '</div>',
        tFlash = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <object type="application/x-shockwave-flash" width="{width}" height="{height}" data="{data}">\n' +
        OBJECT_PARAMS + '       ' + DEFAULT_PREVIEW + '\n' +
        '   </object>\n' +
        '   {footer}\n' +
        '</div>\n',
        tObject = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <object data="{data}" type="{type}" width="{width}" height="{height}">\n' +
        '       <param name="movie" value="{caption}" />\n' +
        OBJECT_PARAMS + '         ' + DEFAULT_PREVIEW + '\n' +
        '   </object>\n' +
        '   {footer}\n' +
        '</div>',
        tOther = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   ' + DEFAULT_PREVIEW + '\n' +
        '   {footer}\n' +
        '</div>',
        defaultLayoutTemplates = {
            main1: tMain1,
            main2: tMain2,
            preview: tPreview,
            icon: tIcon,
            caption: tCaption,
            modal: tModal,
            progress: tProgress,
            footer: tFooter,
            actions: tActions,
            actionDelete: tActionDelete,
            actionUpload: tActionUpload
        },
        defaultPreviewTemplates = {
            generic: tGeneric,
            html: tHtml,
            image: tImage,
            text: tText,
            video: tVideo,
            audio: tAudio,
            flash: tFlash,
            object: tObject,
            other: tOther
        },
        defaultPreviewTypes = ['image', 'html', 'text', 'video', 'audio', 'flash', 'object'],
        defaultPreviewSettings = {
            image: {
                width: "auto",
                height: "160px"
            },
            html: {
                width: "213px",
                height: "160px"
            },
            text: {
                width: "160px",
                height: "160px"
            },
            video: {
                width: "213px",
                height: "160px"
            },
            audio: {
                width: "213px",
                height: "80px"
            },
            flash: {
                width: "213px",
                height: "160px"
            },
            object: {
                width: "160px",
                height: "160px"
            },
            other: {
                width: "160px",
                height: "160px"
            }
        },
        defaultFileTypeSettings = {
            image: function(vType, vName) {
                return (vType !== undefined) ? vType.match('image.*') : vName.match(/\.(gif|png|jpe?g)$/i);
            },
            html: function(vType, vName) {
                return (vType !== undefined) ? vType === 'text/html' : vName.match(/\.(htm|html)$/i);
            },
            text: function(vType, vName) {
                return (vType !== undefined && vType.match('text.*')) || vName.match(/\.(txt|md|csv|nfo|php|ini)$/i);
            },
            video: function(vType, vName) {
                return (vType !== undefined && vType.match(/\.video\/(ogg|mp4|webm)$/i)) || vName.match(/\.(og?|mp4|webm)$/i);
            },
            audio: function(vType, vName) {
                return (vType !== undefined && vType.match(/\.audio\/(ogg|mp3|wav)$/i)) || vName.match(/\.(ogg|mp3|wav)$/i);
            },
            flash: function(vType, vName) {
                return (vType !== undefined && vType === 'application/x-shockwave-flash') || vName.match(/\.(swf)$/i);
            },
            object: function() {
                return true;
            },
            other: function() {
                return true;
            }
        },
        isEmpty = function(value, trim) {
            return value === null || value === undefined || value.length === 0 || (trim && $.trim(value) === '');
        },
        isArray = function(a) {
            return Array.isArray(a) || Object.prototype.toString.call(a) === '[object Array]';
        },
        isSet = function(needle, haystack) {
            return (typeof haystack === 'object' && needle in haystack);
        },
        getElement = function(options, param, value) {
            return (isEmpty(options) || isEmpty(options[param])) ? value : $(options[param]);
        },
        uniqId = function() {
            return Math.round(new Date().getTime() + (Math.random() * 100));
        },
        htmlEncode = function(str) {
            return String(str).repl('&', '&amp;')
                .repl('"', '&quot;')
                .repl("'", '&#39;')
                .repl('<', '&lt;')
                .repl('>', '&gt;');
        },
        replaceTags = function(str, tags) {
            var out = str;
            $.each(tags, function(key, value) {
                if (typeof value === "function") {
                    value = value();
                }
                out = out.repl(key, value);
            });
            return out;
        },
        objUrl = window.URL || window.webkitURL,
        FileInput = function(element, options) {
            this.$element = $(element);
            if (hasFileAPISupport() || isIE(9)) {
                this.init(options);
                this.listen();
            } else {
                this.$element.removeClass('file-loading');
            }
        };

    FileInput.prototype = {
        constructor: FileInput,
        init: function(options) {
            var self = this,
                $el = self.$element,
                content, t;
            $.each(options, function(key, value) {
                self[key] = value;
            });
            if (isEmpty(self.allowedPreviewTypes)) {
                self.allowedPreviewTypes = defaultPreviewTypes;
            }
            self.uploadFileAttr = !isEmpty($el.attr('name')) ? $el.attr('name') : 'file_data';
            self.reader = null;
            self.formdata = {};
            self.isIE9 = isIE(9);
            self.isIE10 = isIE(10);
            self.filestack = [];
            self.ajaxRequests = [];
            self.isError = false;
            self.dropZoneEnabled = hasDragDropSupport() && self.dropZoneEnabled;
            self.isDisabled = self.$element.attr('disabled') || self.$element.attr('readonly');
            self.isUploadable = hasFileUploadSupport && !isEmpty(self.uploadUrl);
            self.slug = typeof options.slugCallback === "function" ? options.slugCallback : self.slugDefault;
            self.mainTemplate = self.showCaption ? self.getLayoutTemplate('main1') : self.getLayoutTemplate('main2');
            self.captionTemplate = self.getLayoutTemplate('caption');
            self.previewGenericTemplate = self.getPreviewTemplate('generic');
            if (isEmpty(self.$element.attr('id'))) {
                self.$element.attr('id', uniqId());
            }
            if (self.$container === undefined) {
                self.$container = self.createContainer();
            } else {
                self.refreshContainer();
            }
            self.$progress = self.$container.find('.kv-upload-progress');
            self.$btnUpload = self.$container.find('.kv-fileinput-upload');
            self.$captionContainer = getElement(options, 'elCaptionContainer', self.$container.find('.file-caption'));
            self.$caption = getElement(options, 'elCaptionText', self.$container.find('.file-caption-name'));
            self.$previewContainer = getElement(options, 'elPreviewContainer', self.$container.find('.file-preview'));
            self.$preview = getElement(options, 'elPreviewImage', self.$container.find('.file-preview-thumbnails'));
            self.$previewStatus = getElement(options, 'elPreviewStatus', self.$container.find('.file-preview-status'));
            self.$errorContainer = getElement(options, 'elErrorContainer',
                self.$previewContainer.find('.kv-fileinput-error'));
            if (!isEmpty(self.msgErrorClass)) {
                addCss(self.$errorContainer, self.msgErrorClass);
            }
            self.$errorContainer.hide();
            self.initialPreviewContent = '';
            content = self.initialPreview;
            self.initialPreviewCount = isArray(content) ? content.length : (content.length > 0 ? content.split(self.initialPreviewDelimiter).length : 0);
            self.fileActionSettings = $.extend(defaultFileActionSettings, options.fileActionSettings);
            self.previewInitId = "preview-" + uniqId();
            self.initPreview();
            self.initPreviewDeletes();
            self.original = {
                preview: self.$preview.html(),
                caption: self.$caption.html()
            };
            self.options = options;
            self.setFileDropZoneTitle();
            self.uploadCount = 0;
            self.uploadPercent = 0;
            self.$element.removeClass('file-loading');
            t = self.getLayoutTemplate('progress');
            self.progressTemplate = t.replace('{class}', self.progressClass);
            self.progressCompleteTemplate = t.replace('{class}', self.progressCompleteClass);
            self.setEllipsis();
        },
        raise: function(event, params) {
            var self = this;
            if (params !== undefined) {
                self.$element.trigger(event, params);
            } else {
                self.$element.trigger(event);
            }
        },
        getLayoutTemplate: function(t) {
            var self = this,
                template = isSet(t, self.layoutTemplates) ? self.layoutTemplates[t] : defaultLayoutTemplates[t];
            if (isEmpty(self.customLayoutTags)) {
                return template;
            }
            return replaceTags(template, self.customLayoutTags);
        },
        getPreviewTemplate: function(t) {
            var self = this,
                template = isSet(t, self.previewTemplates) ? self.previewTemplates[t] : defaultPreviewTemplates[t];
            if (isEmpty(self.customPreviewTags)) {
                return template;
            }
            return replaceTags(template, self.customPreviewTags);
        },
        getOutData: function(jqXHR, responseData, filesData) {
            var self = this;
            jqXHR = jqXHR || {};
            responseData = responseData || {};
            filesData = filesData || self.filestack.slice(0);
            return {
                form: self.formdata,
                files: filesData,
                extra: self.getExtraData(),
                response: responseData,
                reader: self.reader,
                jqXHR: jqXHR
            };
        },
        setEllipsis: function() {
            var self = this,
                $capCont = self.$captionContainer,
                $cap = self.$caption,
                $div = $cap.clone().css('height', 'auto').hide();
            $capCont.parent().before($div);
            $capCont.removeClass('kv-has-ellipsis');
            if ($div.outerWidth() > $cap.outerWidth()) {
                $capCont.addClass('kv-has-ellipsis');
            }
            $div.remove();
        },
        listen: function() {
            var self = this,
                $el = self.$element,
                $cap = self.$captionContainer,
                $btnFile = self.$btnFile;
            $el.on('change', $.proxy(self.change, self));
            $(window).on('resize', function() {
                self.setEllipsis();
            });
            $btnFile.off('click').on('click', function() {
                self.raise('filebrowse');
                if (self.isError && !self.isUploadable) {
                    self.clear(true);
                }
                $cap.focus();
            });
            $el.closest('form').off('reset').on('reset', $.proxy(self.reset, self));
            self.$container.off('click')
                .on('click', '.fileinput-remove:not([disabled])', $.proxy(self.clear, self))
                .on('click', '.fileinput-cancel', $.proxy(self.cancel, self));
            if (self.isUploadable && self.dropZoneEnabled && self.showPreview) {
                self.initDragDrop();
            }
            if (!self.isUploadable) {
                return;
            }
            self.$container.find('.kv-fileinput-upload').off('click').on('click', function(e) {
                if (!self.isUploadable) {
                    return;
                }
                e.preventDefault();
                if (!$(this).hasClass('disabled') && isEmpty($(this).attr('disabled'))) {
                    self.upload();
                }
            });
        },
        setProgress: function(p) {
            var self = this,
                pct = Math.min(p, 100),
                template = pct < 100 ? self.progressTemplate : self.progressCompleteTemplate;
            self.$progress.html(template.repl('{percent}', pct));
        },
        upload: function() {
            var self = this,
                totLen = self.getFileStack().length,
                i, outData, len;
            if (!self.isUploadable || self.isDisabled || totLen === 0) {
                return;
            }
            self.resetUpload();
            self.$progress.removeClass('hide');
            self.uploadCount = 0;
            self.uploadPercent = 0;
            self.lock();
            self.setProgress(0);
            len = self.filestack.length;
            if ((self.uploadAsync || totLen === 1) && self.showPreview) {
                outData = self.getOutData();
                self.raise('filebatchpreupload', [outData]);
                for (i = 0; i < len; i += 1) {
                    if (self.filestack[i] !== undefined) {
                        self.uploadSingle(i, self.filestack, true);
                    }
                }
                return;
            }
            self.uploadBatch();
        },
        lock: function() {
            var self = this;
            self.resetErrors();
            self.disable();
            if (self.showRemove) {
                addCss(self.$container.find('.fileinput-remove'), 'hide');
            }
            if (self.showCancel) {
                self.$container.find('.fileinput-cancel').removeClass('hide');
            }
            self.raise('filelock', [self.filestack, self.getExtraData()]);
        },
        unlock: function(reset) {
            var self = this;
            if (reset === undefined) {
                reset = true;
            }
            self.enable();
            if (self.showCancel) {
                addCss(self.$container.find('.fileinput-cancel'), 'hide');
            }
            if (self.showRemove) {
                self.$container.find('.fileinput-remove').removeClass('hide');
            }
            if (reset) {
                self.resetFileStack();
            }
            self.raise('fileunlock', [self.filestack, self.getExtraData()]);
        },
        resetFileStack: function() {
            var self = this,
                i = 0,
                newstack = [];
            self.$preview.find('.file-preview-frame').each(function() {
                var $thumb = $(this),
                    ind = $thumb.attr('data-fileindex'),
                    file = self.filestack[ind];
                if (ind == -1) {
                    return;
                }
                if (file !== undefined) {
                    newstack[i] = file;
                    $thumb.attr({
                        'id': self.previewInitId + '-' + i,
                        'data-fileindex': i
                    });
                    i += 1;
                } else {
                    $thumb.attr({
                        'id': 'uploaded-' + uniqId(),
                        'data-fileindex': '-1'
                    });
                }
            });
            self.filestack = newstack;
        },
        refresh: function(options) {
            var self = this,
                $el = self.$element,
                $zone,
                params = (arguments.length) ? $.extend(self.options, options) : self.options;
            $el.off();
            self.init(params);
            $zone = self.$container.find('.file-drop-zone');
            $zone.off('dragenter dragover drop');
            $(document).off('dragenter dragover drop');
            self.listen();
            self.setFileDropZoneTitle();
        },
        initDragDrop: function() {
            var self = this,
                $zone = self.$container.find('.file-drop-zone');
            $zone.off('dragenter dragover drop');
            $(document).off('dragenter dragover drop');
            $zone.on('dragenter dragover', function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (self.isDisabled) {
                    return;
                }
                addCss($(this), 'highlighted');
            });
            $zone.on('dragleave', function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (self.isDisabled) {
                    return;
                }
                $(this).removeClass('highlighted');
            });
            $zone.on('drop', function(e) {
                e.preventDefault();
                if (self.isDisabled) {
                    return;
                }
                self.change(e, 'dragdrop');
                $(this).removeClass('highlighted');
            });
            $(document).on('dragenter dragover drop', function(e) {
                e.stopPropagation();
                e.preventDefault();
            });
        },
        setFileDropZoneTitle: function() {
            var self = this,
                $zone = self.$container.find('.file-drop-zone');
            $zone.find('.' + self.dropZoneTitleClass).remove();
            if (!self.isUploadable || !self.showPreview || $zone.length === 0 || self.getFileStack().length > 0 || !self.dropZoneEnabled) {
                return;
            }
            if ($zone.find('.file-preview-frame').length === 0) {
                $zone.prepend('<div class="' + self.dropZoneTitleClass + '">' + self.dropZoneTitle + '</div>');
            }
            self.$container.removeClass('file-input-new');
            addCss(self.$container, 'file-input-ajax-new');
        },
        initFileActions: function() {
            var self = this;
            self.$preview.find('.kv-file-remove').each(function() {
                var $el = $(this),
                    $frame = $el.closest('.file-preview-frame'),
                    ind = $frame.attr('data-fileindex'),
                    n, cap;
                $el.off('click').on('click', function() {
                    $frame.fadeOut('slow', function() {
                        self.filestack[ind] = undefined;
                        self.clearObjects($frame);
                        $frame.remove();
                        var filestack = self.getFileStack(),
                            len = filestack.length,
                            chk = self.$container.find('.file-preview-initial').length;
                        if (len === 0 && chk === 0) {
                            self.original.preview = '';
                            self.reset();
                        } else {
                            n = self.initialPreviewCount + len;
                            cap = n > 1 ? self.msgSelected.repl('{n}', n) : filestack[0].name;
                            self.setCaption(cap);
                        }
                    });
                });
            });
            self.$preview.find('.kv-file-upload').each(function() {
                var $el = $(this);
                $el.off('click').on('click', function() {
                    var $frame = $el.closest('.file-preview-frame'),
                        ind = $frame.attr('data-fileindex');
                    self.uploadSingle(ind, self.filestack, false);
                });
            });
        },
        renderInitFileFooter: function(i) {
            if (this.initialPreviewConfig.length === 0 || isEmpty(this.initialPreviewConfig[i])) {
                return '';
            }
            var self = this,
                template = self.getLayoutTemplate('footer'),
                config = self.initialPreviewConfig[i],
                caption = isSet('caption', config) ? config.caption : '',
                width = isSet('width', config) ? config.width : 'auto',
                url = isSet('url', config) ? config.url : false,
                key = isSet('key', config) ? config.key : null,
                disabled = (url === false),
                actions = self.initialPreviewShowDelete ? self.renderFileActions(false, true, disabled, url, key) : '',
                footer = template.repl('{actions}', actions);
            return footer.repl('{caption}', caption).repl('{width}', width)
                .repl('{indicator}', '').repl('{indicatorTitle}', '');
        },
        renderFileFooter: function(caption, width) {
            var self = this,
                config = self.fileActionSettings,
                footer,
                template = self.getLayoutTemplate('footer');
            if (self.isUploadable) {
                footer = template.repl('{actions}', self.renderFileActions(true, true, false, false, false));
                return footer.repl('{caption}', caption)
                    .repl('{width}', width)
                    .repl('{indicator}', config.indicatorNew)
                    .repl('{indicatorTitle}', config.indicatorNewTitle);
            }
            return template.repl('{actions}', '')
                .repl('{caption}', caption)
                .repl('{width}', width)
                .repl('{indicator}', '')
                .repl('{indicatorTitle}', '');
        },
        renderFileActions: function(showUpload, showDelete, disabled, url, key) {
            if (!showUpload && !showDelete) {
                return '';
            }
            var self = this,
                vUrl = url === false ? '' : ' data-url="' + url + '"',
                vKey = key === false ? '' : ' data-key="' + key + '"',
                btnDelete = self.getLayoutTemplate('actionDelete'),
                btnUpload = '',
                template = self.getLayoutTemplate('actions'),
                otherActionButtons = self.otherActionButtons.repl('{dataKey}', vKey),
                config = self.fileActionSettings,
                removeClass = disabled ? config.removeClass + ' disabled' : config.removeClass;
            btnDelete = btnDelete
                .repl('{removeClass}', removeClass)
                .repl('{removeIcon}', config.removeIcon)
                .repl('{removeTitle}', config.removeTitle)
                .repl('{dataUrl}', vUrl)
                .repl('{dataKey}', vKey);
            if (showUpload) {
                btnUpload = self.getLayoutTemplate('actionUpload')
                    .repl('{uploadClass}', config.uploadClass)
                    .repl('{uploadIcon}', config.uploadIcon)
                    .repl('{uploadTitle}', config.uploadTitle);
            }
            return template
                .repl('{delete}', btnDelete)
                .repl('{upload}', btnUpload)
                .repl('{other}', otherActionButtons);
        },
        getInitialPreview: function(template, content, i) {
            var self = this,
                ind = 'init_' + i,
                previewId = self.previewInitId + '-' + ind,
                footer = self.renderInitFileFooter(i, false);
            return template
                .repl('{previewId}', previewId)
                .repl('{frameClass}', ' file-preview-initial')
                .repl('{fileindex}', ind)
                .repl('{content}', content)
                .repl('{footer}', footer);
        },
        initPreview: function() {
            var self = this,
                html = '',
                content = self.initialPreview,
                len = self.initialPreviewCount,
                cap = self.initialCaption.length,
                i, fileList,
                caption = (cap > 0) ? self.initialCaption : self.msgSelected.repl('{n}', len);
            if (isArray(content) && len > 0) {
                for (i = 0; i < len; i += 1) {
                    html += self.getInitialPreview(self.previewGenericTemplate, content[i], i);
                }
                if (len > 1 && cap === 0) {
                    caption = self.msgSelected.repl('{n}', len);
                }
            } else {
                if (len > 0) {
                    fileList = content.split(self.initialPreviewDelimiter);
                    for (i = 0; i < len; i += 1) {
                        html += self.getInitialPreview(self.previewGenericTemplate, fileList[i], i);
                    }
                    if (len > 1 && cap === 0) {
                        caption = self.msgSelected.repl('{n}', len);
                    }
                } else {
                    if (cap > 0) {
                        self.setCaption(caption);
                    }
                    return;
                }
            }
            self.initialPreviewContent = html;
            self.$preview.html(html);
            self.setCaption(caption);
            self.$container.removeClass('file-input-new');
        },
        initPreviewDeletes: function() {
            var self = this,
                resetProgress = function() {
                    if (self.$preview.find('.kv-file-remove').length === 0) {
                        self.reset();
                    }
                };
            self.$preview.find('.kv-file-remove').each(function() {
                var $el = $(this),
                    $frame = $el.closest('.file-preview-frame'),
                    vUrl = $el.attr('data-url'),
                    vKey = $el.attr('data-key'),
                    $content;
                if (vUrl === undefined || vKey === undefined) {
                    return;
                }
                $el.off('click').on('click', function() {
                    $.ajax({
                        url: vUrl,
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            key: vKey
                        },
                        beforeSend: function(jqXHR) {
                            addCss($frame, 'file-uploading');
                            addCss($el, 'disabled');
                            self.raise('filepredelete', [vKey, jqXHR]);
                        },
                        success: function(data, textStatus, jqXHR) {
                            if (data.error === undefined) {
                                self.raise('filedeleted', [vKey, jqXHR]);
                            } else {
                                self.showError(data.error, null, $el.attr('id'), vKey, 'filedeleteerror', jqXHR);
                                resetProgress();
                            }
                            $frame.removeClass('file-uploading').addClass('file-deleted');
                            $frame.fadeOut('slow', function() {
                                self.clearObjects($frame);
                                $frame.remove();
                                $content = $(document.createElement('div')).html(self.original.preview);
                                $content.find('.file-preview-frame').each(function() {
                                    var $that = $(this);
                                    /*jshint eqeqeq: false*/
                                    if ($that.find('.kv-file-remove').attr('data-key') == vKey) {
                                        $that.remove();
                                    }
                                    /*jshint eqeqeq: true*/
                                });
                                self.initialPreviewContent = $content.html();
                                if (self.initialPreviewCount > 0) {
                                    self.initialPreviewCount -= 1;
                                }
                                var caption = self.initialCaption;
                                if (self.initialCaption.length === 0) {
                                    caption = self.msgSelected.repl('{n}', self.initialPreviewCount);
                                }
                                self.original.preview = $content.html();
                                self.setCaption(caption);
                                self.original.caption = self.$caption.html();
                                $content.remove();
                                resetProgress();
                            });
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            self.showError(errorThrown, null, $el.attr('id'), vKey, 'filedeleteerror', jqXHR);
                            $frame.removeClass('file-uploading');
                            resetProgress();
                        }
                    });
                });
            });
        },
        clearObjects: function($el) {
            $el.find('video audio').each(function() {
                this.pause();
                $(this).remove();
            });
            $el.find('img object div').each(function() {
                $(this).remove();
            });
        },
        clearFileInput: function() {
            var self = this,
                $el = self.$element,
                $srcFrm, $tmpFrm, $tmpEl;
            if (isEmpty($el.val())) {
                return;
            }
            // Fix for IE ver < 11, that does not clear file inputs
            // Requires a sequence of steps to prevent IE crashing but
            // still allow clearing of the file input.
            if (self.isIE9 || self.isIE10) {
                $srcFrm = $el.closest('form');
                $tmpFrm = $(document.createElement('form'));
                $tmpEl = $(document.createElement('div'));
                $el.before($tmpEl);
                if ($srcFrm.length) {
                    $srcFrm.after($tmpFrm);
                } else {
                    $tmpEl.after($tmpFrm);
                }
                $tmpFrm.append($el).trigger('reset');
                $tmpEl.before($el).remove();
                $tmpFrm.remove();
            } else { // normal input clear behavior for other sane browsers
                $el.val('');
            }
        },
        resetUpload: function() {
            var self = this;
            self.uploadCount = 0;
            self.uploadPercent = 0;
            self.$btnUpload.removeAttr('disabled');
            self.setProgress(0);
            addCss(self.$progress, 'hide');
            self.resetErrors(false);
            self.ajaxRequests = [];
        },
        cancel: function() {
            var self = this,
                xhr = self.ajaxRequests,
                len = xhr.length,
                i;
            if (len > 0) {
                for (i = 0; i < len; i += 1) {
                    xhr[i].abort();
                }
            }
            self.$preview.find('.file-preview-frame').each(function() {
                var $thumb = $(this),
                    ind = $thumb.attr('data-fileindex');
                $thumb.removeClass('file-uploading');
                if (self.filestack[ind] !== undefined) {
                    $thumb.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled');
                    $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');
                }
                self.unlock();
            });
        },
        clear: function(trig) {
            var self = this,
                cap;
            if (!self.isIE9 && self.reader instanceof FileReader) {
                self.reader.abort();
            }
            self.$btnUpload.removeAttr('disabled');
            self.resetUpload();
            self.filestack = [];
            self.clearFileInput();
            self.resetErrors(true);

            if (trig !== true) {
                self.raise('change');
                self.raise('fileclear');
            }
            if (self.overwriteInitial) {
                self.initialPreviewCount = 0;
                self.initialPreviewContent = '';
            }
            if (!self.overwriteInitial && self.initialPreviewContent.length > 0) {
                self.showFileIcon();
                self.$preview.html(self.original.preview);
                self.$caption.html(self.original.caption);
                self.setEllipsis();
                self.initPreviewDeletes();
                self.$container.removeClass('file-input-new');
            } else {
                self.$preview.find('.file-preview-frame').each(function() {
                    self.clearObjects($(this));
                });
                self.$preview.html('');
                cap = (!self.overwriteInitial && self.initialCaption.length > 0) ? self.original.caption : '';
                self.$caption.html(cap);
                self.setEllipsis();
                self.$caption.attr('title', '');
                addCss(self.$container, 'file-input-new');
            }
            if (self.$container.find('.file-preview-frame').length === 0) {
                self.initialCaption = '';
                self.original.caption = '';
                self.$caption.html('');
                self.setEllipsis();
                self.$captionContainer.find('.kv-caption-icon').hide();
            }
            self.hideFileIcon();
            self.raise('filecleared');
            self.$captionContainer.focus();
            self.setFileDropZoneTitle();
        },
        reset: function() {
            var self = this;
            self.clear(true);
            self.$preview.html(self.original.preview);
            self.$caption.html(self.original.caption);
            self.setEllipsis();
            self.$container.find('.fileinput-filename').text('');
            self.raise('filereset');
            if (self.initialPreview.length > 0) {
                self.$container.removeClass('file-input-new');
            }
            self.setFileDropZoneTitle();
            if (self.isUploadable) {
                self.resetUpload();
            }
            self.filestack = [];
            self.formdata = {};
        },
        disable: function() {
            var self = this;
            self.isDisabled = true;
            self.raise('filedisabled');
            self.$element.attr('disabled', 'disabled');
            self.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled");
            self.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").attr("disabled", true);
            self.initDragDrop();
        },
        enable: function() {
            var self = this;
            self.isDisabled = false;
            self.raise('fileenabled');
            self.$element.removeAttr('disabled');
            self.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled");
            self.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").removeAttr("disabled");
            self.initDragDrop();
        },
        getExtraData: function() {
            var self = this,
                data = self.uploadExtraData;
            if (typeof self.uploadExtraData === "function") {
                data = self.uploadExtraData();
            }
            return data;
        },
        uploadExtra: function() {
            var self = this,
                data = self.getExtraData();
            if (data.length === 0) {
                return;
            }
            $.each(data, function(key, value) {
                self.formdata.append(key, value);
            });
        },
        initXhr: function(xhrobj, factor) {
            var self = this;
            if (xhrobj.upload) {
                xhrobj.upload.addEventListener('progress', function(event) {
                    var pct = 0,
                        position = event.loaded || event.position,
                        total = event.total;
                    if (event.lengthComputable) {
                        pct = Math.ceil(position / total * factor);
                    }
                    self.uploadPercent = Math.max(pct, self.uploadPercent);
                    self.setProgress(self.uploadPercent);
                }, false);
            }
            return xhrobj;
        },
        ajaxSubmit: function(fnBefore, fnSuccess, fnComplete, fnError) {
            var self = this,
                settings;
            self.uploadExtra();
            settings = $.extend(self.ajaxSettings, {
                xhr: function() {
                    var xhrobj = $.ajaxSettings.xhr();
                    return self.initXhr(xhrobj, 98);
                },
                url: self.uploadUrl,
                type: 'POST',
                dataType: 'json',
                data: self.formdata,
                cache: false,
                processData: false,
                contentType: false,
                beforeSend: fnBefore,
                success: fnSuccess,
                complete: fnComplete,
                error: fnError
            });
            self.ajaxRequests.push($.ajax(settings));
        },
        uploadSingle: function(i, files, allFiles) {
            var self = this,
                total = self.getFileStack().length,
                formdata = new FormData(),
                outData,
                previewId = self.previewInitId + "-" + i,
                $thumb = $('#' + previewId),
                cap, pct, chkComplete,
                $btnUpload = $thumb.find('.kv-file-upload'),
                $btnDelete = $thumb.find('.kv-file-remove'),
                $indicator = $thumb.find('.file-upload-indicator'),
                config = self.fileActionSettings,
                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
                setIndicator, updateProgress, resetActions, fnBefore, fnSuccess, fnComplete, fnError;
            self.formdata = formdata;
            if (total === 0 || !hasPostData || $btnUpload.hasClass('disabled')) {
                return;
            }
            chkComplete = function() {
                var $thumbs = self.$preview.find('.file-preview-frame.file-uploading'),
                    chk = $thumbs.length;
                if (chk > 0) {
                    return;
                }
                self.setProgress(100);
                self.unlock();
                self.clearFileInput();
                self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);
            };
            setIndicator = function(icon, msg) {
                $indicator.html(config[icon]);
                $indicator.attr('title', config[msg]);
            };
            updateProgress = function() {
                if (!allFiles || total === 0 || self.uploadPercent >= 100) {
                    return;
                }
                self.uploadCount += 1;
                pct = 80 + Math.ceil(self.uploadCount * 20 / total);
                self.uploadPercent = Math.max(pct, self.uploadPercent);
                self.setProgress(self.uploadPercent);
                self.initPreviewDeletes();
            };
            resetActions = function() {
                $btnUpload.removeAttr('disabled');
                $btnDelete.removeAttr('disabled');
                $thumb.removeClass('file-uploading');
            };
            fnBefore = function(jqXHR) {
                outData = self.getOutData(jqXHR);
                setIndicator('indicatorLoading', 'indicatorLoadingTitle');
                addCss($thumb, 'file-uploading');
                $btnUpload.attr('disabled', true);
                $btnDelete.attr('disabled', true);
                if (!allFiles) {
                    self.lock();
                }
                self.raise('filepreupload', [outData, previewId, i]);
            };
            fnSuccess = function(data, textStatus, jqXHR) {
                outData = self.getOutData(jqXHR, data);
                setTimeout(function() {
                    if (data.error === undefined) {
                        setIndicator('indicatorSuccess', 'indicatorSuccessTitle');
                        $btnUpload.hide();
                        $btnDelete.hide();
                        self.filestack[i] = undefined;
                        if (!allFiles) {
                            self.resetFileStack();
                        }
                        self.raise('fileuploaded', [outData, previewId, i]);
                    } else {
                        setIndicator('indicatorError', 'indicatorErrorTitle');
                        self.showUploadError(data.error, outData, previewId, i);
                    }
                }, 100);
            };
            fnComplete = function() {
                setTimeout(function() {
                    updateProgress();
                    resetActions();
                    if (!allFiles) {
                        self.unlock(false);
                    } else {
                        chkComplete();
                    }
                }, 100);
            };
            fnError = function(jqXHR, textStatus, errorThrown) {
                setIndicator('indicatorError', 'indicatorErrorTitle');
                outData = self.getOutData(jqXHR);
                if (allFiles) {
                    cap = files[i].name;
                    self.showUploadError('<b>' + cap + '</b>: ' + errorThrown, outData, previewId, i);
                } else {
                    self.showUploadError(errorThrown, outData, previewId, i);
                }
            };
            formdata.append(self.uploadFileAttr, files[i]);
            formdata.append('file_id', i);
            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
        },
        uploadBatch: function() {
            var self = this,
                files = self.filestack,
                total = files.length,
                config,
                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
                setIndicator, setAllUploaded, enableActions, fnBefore, fnSuccess, fnComplete, fnError;
            self.formdata = new FormData();
            if (total === 0 || !hasPostData) {
                return;
            }
            config = self.fileActionSettings;
            setIndicator = function(i, icon, msg) {
                var $indicator = $('#' + self.previewInitId + "-" + i).find('.file-upload-indicator');
                $indicator.html(config[icon]);
                $indicator.attr('title', config[msg]);
            };
            enableActions = function(i) {
                var $thumb = $('#' + self.previewInitId + "-" + i),
                    $btnUpload = $thumb.find('.kv-file-upload'),
                    $btnDelete = $thumb.find('.kv-file-delete');
                $thumb.removeClass('file-uploading');
                $btnUpload.removeAttr('disabled');
                $btnDelete.removeAttr('disabled');
            };
            setAllUploaded = function() {
                $.each(files, function(key, data) {
                    self.filestack[key] = undefined;
                });
                self.clearFileInput();
            };
            fnBefore = function(jqXHR) {
                self.lock();
                var outData = self.getOutData(jqXHR);
                if (!self.showPreview) {
                    return;
                }
                self.$preview.find('.file-preview-frame').each(function() {
                    var $thumb = $(this),
                        $btnUpload = $thumb.find('.kv-file-upload'),
                        $btnDelete = $thumb.find('.kv-file-remove');
                    addCss($thumb, 'file-uploading');
                    $btnUpload.attr('disabled', true);
                    $btnDelete.attr('disabled', true);
                });
                self.raise('filebatchpreupload', [outData]);
            };
            fnSuccess = function(data, textStatus, jqXHR) {
                var outData = self.getOutData(jqXHR, data),
                    keys = isEmpty(data.errorkeys) ? [] : data.errorkeys;
                if (data.error === undefined || isEmpty(data.error)) {
                    self.raise('filebatchuploadsuccess', [outData]);
                    setAllUploaded();
                    if (self.showPreview) {
                        self.$preview.find('.kv-file-upload').hide();
                        self.$preview.find('.kv-file-remove').hide();
                        self.$preview.find('.file-preview-frame').each(function() {
                            var $thumb = $(this),
                                key = $thumb.attr('data-fileindex');
                            setIndicator(key, 'indicatorSuccess', 'indicatorSuccessTitle');
                            enableActions(key);
                        });
                    } else {
                        self.reset();
                    }
                } else {
                    self.$preview.find('.file-preview-frame').each(function() {
                        var $thumb = $(this),
                            key = parseInt($thumb.attr('data-fileindex'), 10);
                        enableActions(key);
                        if (keys.length === 0) {
                            setIndicator(key, 'indicatorError', 'indicatorErrorTitle');
                            return;
                        }
                        if ($.inArray(key, keys) !== -1) {
                            setIndicator(key, 'indicatorError', 'indicatorErrorTitle');
                        } else {
                            $thumb.find('.kv-file-upload').hide();
                            $thumb.find('.kv-file-remove').hide();
                            setIndicator(key, 'indicatorSuccess', 'indicatorSuccessTitle');
                            self.filestack[key] = undefined;
                        }
                    });
                    self.showUploadError(data.error, outData, null, null, 'filebatchuploaderror');
                }
            };
            fnComplete = function() {
                self.setProgress(100);
                self.unlock();
                self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);
                self.clearFileInput();
            };
            fnError = function(jqXHR, textStatus, errorThrown) {
                var outData = self.getOutData(jqXHR);
                self.showUploadError(errorThrown, outData, null, null, 'filebatchuploaderror');
                self.uploadFileCount = total - 1;
                self.$preview.find('.file-preview-frame').each(function() {
                    var $thumb = $(this),
                        key = $thumb.attr('data-fileindex');
                    $thumb.removeClass('file-uploading');
                    if (self.filestack[key] !== undefined) {
                        setIndicator(key, 'indicatorError', 'indicatorErrorTitle');
                    }
                });
                self.$preview.find('.file-preview-frame').removeClass('file-uploading');
                self.$preview.find('.file-preview-frame kv-file-upload').removeAttr('disabled');
                self.$preview.find('.file-preview-frame kv-file-delete').removeAttr('disabled');
            };
            $.each(files, function(key, data) {
                if (!isEmpty(files[key])) {
                    self.formdata.append(self.uploadFileAttr, data);
                }
            });
            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
        },
        hideFileIcon: function() {
            if (this.overwriteInitial) {
                this.$captionContainer.find('.kv-caption-icon').hide();
            }
        },
        showFileIcon: function() {
            this.$captionContainer.find('.kv-caption-icon').show();
        },
        resetErrors: function(fade) {
            var self = this,
                $error = self.$errorContainer;
            self.isError = false;
            self.$container.removeClass('has-error');
            $error.html('');
            if (fade) {
                $error.fadeOut('slow');
            } else {
                $error.hide();
            }
        },
        showUploadError: function(msg, data, previewId, index, ev) {
            var self = this,
                $error = self.$errorContainer;
            ev = ev || 'fileuploaderror';
            if ($error.find('ul').length === 0) {
                $error.html('<ul class="text-left"><li>' + msg + '</li></ul>');
            } else {
                $error.find('ul').append('<li>' + msg + '</li>');
            }
            $error.fadeIn(800);
            self.raise(ev, [data, previewId, index, self.reader]);
            addCss(self.$container, 'has-error');
            return true;
        },
        showError: function(msg, file, previewId, index, ev, jqXHR) {
            var self = this,
                $error = self.$errorContainer;
            ev = ev || 'fileerror';
            jqXHR = jqXHR || {};
            $error.html(msg);
            $error.fadeIn(800);
            self.raise(ev, [file, previewId, index, self.reader, jqXHR]);
            if (!self.isUploadable) {
                self.clearFileInput();
            }
            addCss(self.$container, 'has-error');
            self.$btnUpload.attr('disabled', true);
            return true;
        },
        errorHandler: function(evt, caption) {
            var self = this,
                err = evt.target.error;
            switch (err.code) {
                case err.NOT_FOUND_ERR:
                    self.addError(self.msgFileNotFound.repl('{name}', caption));
                    break;
                case err.SECURITY_ERR:
                    self.addError(self.msgFileSecured.repl('{name}', caption));
                    break;
                case err.NOT_READABLE_ERR:
                    self.addError(self.msgFileNotReadable.repl('{name}', caption));
                    break;
                case err.ABORT_ERR:
                    self.addError(self.msgFilePreviewAborted.repl('{name}', caption));
                    break;
                default:
                    self.addError(self.msgFilePreviewError.repl('{name}', caption));
            }
        },
        parseFileType: function(file) {
            var self = this,
                isValid, vType, cat, i;
            for (i = 0; i < defaultPreviewTypes.length; i += 1) {
                cat = defaultPreviewTypes[i];
                isValid = isSet(cat, self.fileTypeSettings) ? self.fileTypeSettings[cat] : defaultFileTypeSettings[cat];
                vType = isValid(file.type, file.name) ? cat : '';
                if (!isEmpty(vType)) {
                    return vType;
                }
            }
            return 'other';
        },
        previewDefault: function(file, previewId, isDisabled) {
            if (!this.showPreview) {
                return;
            }
            var self = this,
                data = objUrl.createObjectURL(file),
                $obj = $('#' + previewId),
                config = self.previewSettings.other,
                footer = self.renderFileFooter(file.name, config.width),
                previewOtherTemplate = self.getPreviewTemplate('other'),
                ind = previewId.slice(previewId.lastIndexOf('-') + 1),
                frameClass = '';
            if (isDisabled === true) {
                frameClass = ' btn disabled';
                footer += '<div class="file-other-error text-danger"><i class="glyphicon glyphicon-exclamation-sign"></i></div>';
            }
            self.$preview.append("\n" + previewOtherTemplate
                .repl('{previewId}', previewId)
                .repl('{frameClass}', frameClass)
                .repl('{fileindex}', ind)
                .repl('{caption}', self.slug(file.name))
                .repl('{width}', config.width)
                .repl('{height}', config.height)
                .repl('{type}', file.type)
                .repl('{data}', data)
                .repl('{footer}', footer));
            $obj.on('load', function() {
                objUrl.revokeObjectURL($obj.attr('data'));
            });
        },
        previewFile: function(file, theFile, previewId, data) {
            if (!this.showPreview) {
                return;
            }
            var self = this,
                cat = self.parseFileType(file),
                caption = self.slug(file.name),
                content, strText,
                types = self.allowedPreviewTypes,
                mimes = self.allowedPreviewMimeTypes,
                tmplt = isSet(cat, self.previewTemplates) ? self.previewTemplates[cat] : defaultPreviewTemplates[cat],
                config = isSet(cat, self.previewSettings) ? self.previewSettings[cat] : defaultPreviewSettings[cat],
                wrapLen = parseInt(self.wrapTextLength, 10),
                wrapInd = self.wrapIndicator,
                chkTypes = types.indexOf(cat) >= 0,
                id, height,
                chkMimes = isEmpty(mimes) || (!isEmpty(mimes) && isSet(file.type, mimes)),
                footer = self.renderFileFooter(caption, config.width),
                modal = '',
                ind = previewId.slice(previewId.lastIndexOf('-') + 1);
            if (chkTypes && chkMimes) {
                if (cat === 'text') {
                    strText = htmlEncode(theFile.target.result);
                    objUrl.revokeObjectURL(data);
                    if (strText.length > wrapLen) {
                        id = 'text-' + uniqId();
                        height = window.innerHeight * 0.75;
                        modal = self.getLayoutTemplate('modal').repl('{id}', id)
                            .repl('{title}', caption)
                            .repl('{height}', height)
                            .repl('{body}', strText);
                        wrapInd = wrapInd
                            .repl('{title}', caption)
                            .repl('{dialog}', "$('#" + id + "').modal('show')");
                        strText = strText.substring(0, (wrapLen - 1)) + wrapInd;
                    }
                    content = tmplt.repl('{previewId}', previewId).repl('{caption}', caption)
                        .repl('{frameClass}', '')
                        .repl('{type}', file.type).repl('{width}', config.width)
                        .repl('{height}', config.height).repl('{data}', strText)
                        .repl('{footer}', footer).repl('{fileindex}', ind) + modal;
                } else {
                    content = tmplt.repl('{previewId}', previewId).repl('{caption}', caption)
                        .repl('{frameClass}', '')
                        .repl('{type}', file.type).repl('{data}', data)
                        .repl('{width}', config.width).repl('{height}', config.height)
                        .repl('{footer}', footer).repl('{fileindex}', ind);
                }
                self.$preview.append("\n" + content);
                self.autoSizeImage(previewId);
            } else {
                self.previewDefault(file, previewId);
            }
        },
        slugDefault: function(text) {
            return isEmpty(text) ? '' : text.split(/(\\|\/)/g).pop().replace(/[^\w\-.\\\/ ]+/g, '');
        },
        getFileStack: function() {
            var self = this;
            return self.filestack.filter(function(n) {
                return n !== undefined;
            });
        },
        readFiles: function(files) {
            this.reader = new FileReader();
            var self = this,
                $el = self.$element,
                $preview = self.$preview,
                reader = self.reader,
                $container = self.$previewContainer,
                $status = self.$previewStatus,
                msgLoading = self.msgLoading,
                msgProgress = self.msgProgress,
                previewInitId = self.previewInitId,
                numFiles = files.length,
                settings = self.fileTypeSettings,
                ctr = self.filestack.length,
                throwError = function(msg, file, previewId, index) {
                    self.previewDefault(file, previewId, true);
                    var outData = self.getOutData({}, {}, files);
                    return self.isUploadable ? self.showUploadError(msg, outData, previewId,
                        index) : self.showError(msg, file, previewId, index);
                };

            function readFile(i) {
                if (isEmpty($el.attr('multiple'))) {
                    numFiles = 1;
                }
                if (i >= numFiles) {
                    $container.removeClass('loading');
                    $status.html('');
                    return;
                }
                var node = ctr + i,
                    previewId = previewInitId + "-" + node,
                    isText,
                    file = files[i],
                    caption = self.slug(file.name),
                    fileSize = (file.size || 0) / 1000,
                    checkFile, fileExtExpr = '',
                    previewData = objUrl.createObjectURL(file),
                    fileCount = 0,
                    j, msg, typ, chk,
                    fileTypes = self.allowedFileTypes,
                    strTypes = isEmpty(fileTypes) ? '' : fileTypes.join(', '),
                    fileExt = self.allowedFileExtensions,
                    strExt = isEmpty(fileExt) ? '' : fileExt.join(', ');
                if (!isEmpty(fileExt)) {
                    fileExtExpr = new RegExp('\\.(' + fileExt.join('|') + ')$', 'i');
                }
                fileSize = fileSize.toFixed(2);
                if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {
                    msg = self.msgSizeTooLarge.repl('{name}', caption)
                        .repl('{size}', fileSize)
                        .repl('{maxSize}', self.maxFileSize);
                    self.isError = throwError(msg, file, previewId, i);
                    return;
                }
                if (!isEmpty(fileTypes) && isArray(fileTypes)) {
                    for (j = 0; j < fileTypes.length; j += 1) {
                        typ = fileTypes[j];
                        checkFile = settings[typ];
                        chk = (checkFile !== undefined && checkFile(file.type, caption));
                        fileCount += isEmpty(chk) ? 0 : chk.length;
                    }
                    if (fileCount === 0) {
                        msg = self.msgInvalidFileType.repl('{name}', caption).repl('{types}', strTypes);
                        self.isError = throwError(msg, file, previewId, i);
                        return;
                    }
                }
                if (fileCount === 0 && !isEmpty(fileExt) && isArray(fileExt) && !isEmpty(fileExtExpr)) {
                    chk = caption.match(fileExtExpr);
                    fileCount += isEmpty(chk) ? 0 : chk.length;
                    if (fileCount === 0) {
                        msg = self.msgInvalidFileExtension.repl('{name}', caption).repl('{extensions}',
                            strExt);
                        self.isError = throwError(msg, file, previewId, i);
                        return;
                    }
                }
                if (!self.showPreview) {
                    self.filestack.push(file);
                    setTimeout(readFile(i + 1), 100);
                    self.raise('fileloaded', [file, previewId, i, reader]);
                    return;
                }
                if ($preview.length > 0 && FileReader !== undefined) {
                    $status.html(msgLoading.repl('{index}', i + 1).repl('{files}', numFiles));
                    $container.addClass('loading');
                    reader.onerror = function(evt) {
                        self.errorHandler(evt, caption);
                    };
                    reader.onload = function(theFile) {
                        self.previewFile(file, theFile, previewId, previewData);
                        self.initFileActions();
                    };
                    reader.onloadend = function() {
                        msg = msgProgress
                            .repl('{index}', i + 1).repl('{files}', numFiles)
                            .repl('{percent}', 50).repl('{name}', caption);
                        setTimeout(function() {
                            $status.html(msg);
                            objUrl.revokeObjectURL(previewData);
                        }, 100);
                        setTimeout(function() {
                            readFile(i + 1);
                            self.updateFileDetails(numFiles);
                        }, 100);
                        self.raise('fileloaded', [file, previewId, i, reader]);
                    };
                    reader.onprogress = function(data) {
                        if (data.lengthComputable) {
                            var fact = (data.loaded / data.total) * 100,
                                progress = Math.ceil(fact);
                            msg = msgProgress.repl('{index}', i + 1).repl('{files}', numFiles)
                                .repl('{percent}', progress).repl('{name}', caption);
                            setTimeout(function() {
                                $status.html(msg);
                            }, 100);
                        }
                    };
                    isText = isSet('text', settings) ? settings.text : defaultFileTypeSettings.text;
                    if (isText(file.type, caption)) {
                        reader.readAsText(file, self.textEncoding);
                    } else {
                        reader.readAsArrayBuffer(file);
                    }
                } else {
                    self.previewDefault(file, previewId);
                    setTimeout(function() {
                        readFile(i + 1);
                        self.updateFileDetails(numFiles);
                    }, 100);
                    self.raise('fileloaded', [file, previewId, i, reader]);
                }
                self.filestack.push(file);
            }

            readFile(0);
            self.updateFileDetails(numFiles, false);
        },
        updateFileDetails: function(numFiles) {
            var self = this,
                msgSelected = self.msgSelected,
                $el = self.$element,
                fileStack = self.getFileStack(),
                name = $el.val() || (fileStack.length && fileStack[0].name) || '',
                label = self.slug(name),
                n = self.isUploadable ? fileStack.length : numFiles,
                nFiles = self.initialPreviewCount + n,
                log = n > 1 ? msgSelected.repl('{n}', nFiles) : label;
            if (self.isError) {
                self.$previewContainer.removeClass('loading');
                self.$previewStatus.html('');
                self.$captionContainer.find('.kv-caption-icon').hide();
                log = self.msgValidationError;
            } else {
                self.showFileIcon();
            }
            self.setCaption(log);
            self.$container.removeClass('file-input-new file-input-ajax-new');
            if (arguments.length === 1) {
                self.raise('fileselect', [numFiles, label]);
            }
        },
        change: function(e) {
            var self = this,
                $el = self.$element,
                tfiles, msg,
                total, $preview = self.$preview,
                isDragDrop = arguments.length > 1,
                files = isDragDrop ? e.originalEvent.dataTransfer.files : $el.get(0).files,
                isSingleUpload = isEmpty($el.attr('multiple')),
                ctr = self.filestack.length,
                isAjaxUpload = (self.isUploadable && ctr !== 0),
                throwError = function(mesg, file, previewId, index) {
                    var outData = self.getOutData({}, {}, files);
                    return self.isUploadable ? self.showUploadError(mesg, outData, previewId,
                        index) : self.showError(mesg, file, previewId, index);
                };
            self.resetUpload();
            self.hideFileIcon();
            self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();
            if (isDragDrop) {
                tfiles = files;
            } else {
                if (e.target.files === undefined) {
                    tfiles = e.target && e.target.value ? [{
                        name: e.target.value.replace(/^.+\\/, '')
                    }] : [];
                } else {
                    tfiles = e.target.files;
                }
            }
            if (isEmpty(tfiles) || tfiles.length === 0) {
                if (!isAjaxUpload) {
                    self.clear(true);
                }
                self.raise('fileselectnone');
                return;
            }
            self.resetErrors();
            if (!isAjaxUpload || (isSingleUpload && ctr > 0)) {
                if (!self.overwriteInitial) {
                    $preview.html(self.initialPreviewContent);
                } else {
                    $preview.html('');
                }
                if (isSingleUpload && ctr > 0) {
                    self.filestack = [];
                }
            }
            total = self.isUploadable ? self.getFileStack().length + tfiles.length : tfiles.length;
            if (self.maxFileCount > 0 && total > self.maxFileCount) {
                msg = self.msgFilesTooMany.repl('{m}', self.maxFileCount).repl('{n}', total);
                self.isError = throwError(msg, null, null, null);
                self.$captionContainer.find('.kv-caption-icon').hide();
                self.$caption.html(self.msgValidationError);
                self.setEllipsis();
                self.$container.removeClass('file-input-new file-input-ajax-new');
                return;
            }
            if (!self.isIE9) {
                self.readFiles(files);
            } else {
                self.updateFileDetails(1);
            }
            if (isAjaxUpload) {
                self.raise('filebatchselected', [self.getFileStack()]);
            } else {
                self.raise('filebatchselected', [tfiles]);
            }
            self.reader = null;
        },
        autoSizeImage: function(previewId) {
            var self = this,
                $preview = self.$preview,
                $thumb = $preview.find("#" + previewId),
                $img = $thumb.find('img'),
                w1, w2, $cap;
            if (!$img.length) {
                return;
            }
            $img.on('load', function() {
                w1 = $thumb.width();
                w2 = $preview.width();
                if (w1 > w2) {
                    $img.css('width', '100%');
                    $thumb.css('width', '97%');
                }
                $cap = $img.closest('.file-preview-frame').find('.file-caption-name');
                if ($cap.length) {
                    $cap.width($img.width());
                    $cap.attr('title', $cap.text());
                }
                self.raise('fileimageloaded', previewId);
            });
        },
        setCaption: function(content) {
            var self = this,
                title = $('<div>' + content + '</div>').text(),
                icon = self.getLayoutTemplate('icon'),
                out = icon + title;
            if (self.$caption.length === 0) {
                return;
            }
            self.$caption.html(out);
            self.$caption.attr('title', title);
            self.$captionContainer.find('.file-caption-ellipsis').attr('title', title);
            self.setEllipsis();
        },
        initBrowse: function($container) {
            var self = this;
            self.$btnFile = $container.find('.btn-file');
            self.$btnFile.append(self.$element);
        },
        createContainer: function() {
            var self = this,
                $container = $(document.createElement("span"))
                .attr({
                    "class": 'file-input file-input-new'
                })
                .html(self.renderMain());
            self.$element.before($container);
            self.initBrowse($container);
            return $container;
        },
        refreshContainer: function() {
            var self = this,
                $container = self.$container;
            $container.before(self.$element);
            $container.html(self.renderMain());
            self.initBrowse($container);
        },
        renderMain: function() {
            var self = this,
                dropCss = (self.isUploadable && self.dropZoneEnabled) ? ' file-drop-zone' : '',
                preview = self.showPreview ? self.getLayoutTemplate('preview').repl('{class}', self.previewClass)
                .repl('{dropClass}', dropCss) : '',
                css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass,
                caption = self.captionTemplate.repl('{class}', css + ' kv-fileinput-caption');
            return self.mainTemplate.repl('{class}', self.mainClass)
                .repl('{preview}', preview)
                .repl('{caption}', caption)
                .repl('{upload}', self.renderUpload())
                .repl('{remove}', self.renderRemove())
                .repl('{cancel}', self.renderCancel())
                .repl('{browse}', self.renderBrowse());
        },
        renderBrowse: function() {
            var self = this,
                css = self.browseClass + ' btn-file',
                status = '';
            if (self.isDisabled) {
                status = ' disabled ';
            }
            return '<div class="' + css + '"' + status + '> ' + self.browseIcon + self.browseLabel + ' </div>';
        },
        renderRemove: function() {
            var self = this,
                css = self.removeClass + ' fileinput-remove fileinput-remove-button',
                status = '';
            if (!self.showRemove) {
                return '';
            }
            if (self.isDisabled) {
                status = ' disabled ';
            }
            return '<button type="button" title="' + self.removeTitle + '" class="' + css + '"' + status + '>' + self.removeIcon + self.removeLabel + '</button>';
        },
        renderCancel: function() {
            var self = this,
                css = self.cancelClass + ' fileinput-cancel fileinput-cancel-button';
            if (!self.showCancel) {
                return '';
            }
            return '<button type="button" title="' + self.cancelTitle + '" class="hide ' + css + '">' + self.cancelIcon + self.cancelLabel + '</button>';
        },
        renderUpload: function() {
            var self = this,
                css = self.uploadClass + ' kv-fileinput-upload fileinput-upload-button',
                content = '',
                status = '';
            if (!self.showUpload) {
                return '';
            }
            if (self.isDisabled) {
                status = ' disabled ';
            }
            if (!self.isUploadable || self.isDisabled) {
                content = '<button type="submit" title="' + self.uploadTitle + '"class="' + css + '"' + status + '>' + self.uploadIcon + self.uploadLabel + '</button>';
            } else {
                content = '<a href="' + self.uploadUrl + '" title="' + self.uploadTitle + '" class="' + css + '"' + status + '>' + self.uploadIcon + self.uploadLabel + '</a>';
            }
            return content;
        }
    };

    //FileInput plugin definition
    $.fn.fileinput = function(option) {
        if (!hasFileAPISupport() && !isIE(9)) {
            return;
        }

        var args = Array.apply(null, arguments);
        args.shift();
        return this.each(function() {
            var $this = $(this),
                data = $this.data('fileinput'),
                options = typeof option === 'object' && option;

            if (!data) {
                data = new FileInput(this, $.extend({}, $.fn.fileinput.defaults, options, $(this).data()));
                $this.data('fileinput', data);
            }

            if (typeof option === 'string') {
                data[option].apply(data, args);
            }
        });
    };

    $.fn.fileinput.defaults = {
        showCaption: true,
        showPreview: true,
        showRemove: true,
        showUpload: true,
        showCancel: true,
        mainClass: '',
        previewClass: '',
        captionClass: '',
        mainTemplate: null,
        initialCaption: '',
        initialPreview: '',
        initialPreviewCount: 0,
        initialPreviewDelimiter: '*$$*',
        initialPreviewConfig: [],
        initialPreviewShowDelete: true,
        overwriteInitial: true,
        layoutTemplates: defaultLayoutTemplates,
        previewTemplates: defaultPreviewTemplates,
        allowedPreviewTypes: defaultPreviewTypes,
        allowedPreviewMimeTypes: null,
        allowedFileTypes: null,
        allowedFileExtensions: null,
        customLayoutTags: {},
        customPreviewTags: {},
        previewSettings: defaultPreviewSettings,
        fileTypeSettings: defaultFileTypeSettings,
        browseLabel: 'Browse &hellip;',
        browseIcon: '<i class="w2ui-icon-folder"></i> &nbsp;',
        browseClass: 'btn btn-blue',
        removeLabel: 'Remove',
        removeTitle: 'Clear selected files',
        removeIcon: '<i class="w2ui-icon-trash"></i> ',
        removeClass: 'btn btn-red',
        cancelLabel: 'Cancel',
        cancelTitle: 'Abort ongoing upload',
        cancelIcon: '<i class="w2ui-icon-ban"></i> ',
        cancelClass: 'btn btn-red',
        uploadLabel: 'Upload',
        uploadTitle: 'Upload selected files',
        uploadIcon: '<i class="w2ui-icon-upload"></i> ',
        uploadClass: 'btn btn-orange',
        uploadUrl: null,
        uploadExtraData: [],
        uploadAsync: true,
        maxFileSize: 0,
        maxFileCount: 0,
        msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>. Please retry your upload!',
        msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>. Please retry your upload!',
        msgFileNotFound: 'File "{name}" not found!',
        msgFileSecured: 'Security restrictions prevent reading the file "{name}".',
        msgFileNotReadable: 'File "{name}" is not readable.',
        msgFilePreviewAborted: 'File preview aborted for "{name}".',
        msgFilePreviewError: 'An error occurred while reading the file "{name}".',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.',
        msgValidationError: '<span class="text-danger"><i class="glyphicon glyphicon-exclamation-sign"></i> File Upload Error</span>',
        msgErrorClass: 'file-error-message',
        msgLoading: 'Loading  file {index} of {files} &hellip;',
        msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.',
        msgSelected: '{n} files selected',
        progressClass: "progress-bar progress-bar-success progress-bar-striped active",
        progressCompleteClass: "progress-bar progress-bar-success",
        previewFileType: 'image',
        wrapTextLength: 250,
        wrapIndicator: ' <span class="wrap-indicator" title="{title}" onclick="{dialog}">[&hellip;]</span>',
        elCaptionContainer: null,
        elCaptionText: null,
        elPreviewContainer: null,
        elPreviewImage: null,
        elPreviewStatus: null,
        elErrorContainer: null,
        slugCallback: null,
        dropZoneEnabled: true,
        dropZoneTitle: 'Drag & drop files here &hellip;',
        dropZoneTitleClass: 'file-drop-zone-title',
        fileActionSettings: {},
        otherActionButtons: '',
        textEncoding: 'UTF-8',
        ajaxSettings: {}
    };

    $.fn.fileinput.Constructor = FileInput;

    /**
     * Convert automatically file inputs with class 'file'
     * into a bootstrap fileinput control.
     */
    $(document).ready(function() {
        var $input = $('input.file[type=file]'),
            count = $input.attr('type') ? $input.length : 0;
        if (count > 0) {
            $input.fileinput();
        }
    });
})(window.jQuery);

//
// backbone.stickit - v0.8.0
// The MIT License
// Copyright (c) 2012 The New York Times, CMS Group, Matthew DeLambo <delambo@gmail.com> 
//
// Backbone.Stickit v0.8.0, MIT Licensed
// Copyright (c) 2012 The New York Times, CMS Group, Matthew DeLambo <delambo@gmail.com>

(function(factory) {

    // Set up Stickit appropriately for the environment. Start with AMD.
    if (typeof define === 'function' && define.amd) {
        define(['underscore', 'backbone', 'exports'], factory);
    }

    // Next for Node.js or CommonJS.
    else if (typeof exports === 'object') {
        factory(_, Backbone, exports);
    }

    // Finally, as a browser global.
    else {
        factory(_, Backbone, {});
    }

}(function(_, Backbone, Stickit) {

    // Stickit Namespace
    // --------------------------

    Stickit._handlers = [];

    Stickit.addHandler = function(handlers) {
        // Fill-in default values.
        handlers = _.map(_.flatten([handlers]), function(handler) {
            return _.extend({
                updateModel: true,
                updateView: true,
                updateMethod: 'text'
            }, handler);
        });
        this._handlers = this._handlers.concat(handlers);
    };

    // Backbone.View Mixins
    // --------------------

    Stickit.ViewMixin = {

        // Collection of model event bindings.
        //   [{model,event,fn,config}, ...]
        _modelBindings: null,

        // Unbind the model and event bindings from `this._modelBindings` and
        // `this.$el`. If the optional `model` parameter is defined, then only
        // delete bindings for the given `model` and its corresponding view events.
        unstickit: function(model, bindingSelector) {
            // Support bindings hash in place of selector.
            if (_.isObject(bindingSelector)) {
                _.each(_.keys(bindingSelector), function(selector) {
                    this.unstickit(model, selector);
                }, this);
                return;
            }

            var models = [],
                destroyFns = [];
            _.each(this._modelBindings, function(binding, i) {
                if (model && binding.model !== model) {
                    return;
                }
                if (bindingSelector && binding.config.selector != bindingSelector) return;
                destroyFns.push(binding.config._destroy);
                binding.model.off(binding.event, binding.fn);
                models.push(binding.model);
                delete this._modelBindings[i];
            }, this);

            // Trigger an event for each model that was unbound.
            _.invoke(_.uniq(models), 'trigger', 'stickit:unstuck', this.cid);
            // Call `_destroy` on a unique list of the binding callbacks.
            _.each(_.uniq(destroyFns), function(fn) {
                fn.call(this);
            }, this);
            // Cleanup the null values.
            this._modelBindings = _.compact(this._modelBindings);

            this.$el.off('.stickit' + (model ? '.' + model.cid : ''), bindingSelector);
        },

        // Using `this.bindings` configuration or the `optionalBindingsConfig`, binds `this.model`
        // or the `optionalModel` to elements in the view.
        stickit: function(optionalModel, optionalBindingsConfig) {
            var model = optionalModel || this.model,
                bindings = optionalBindingsConfig || _.result(this, "bindings") || {};

            this._modelBindings || (this._modelBindings = []);

            // Iterate through the selectors in the bindings configuration and configure
            // the various options for each field.
            this.addBinding(model, bindings);

            // Wrap `view.remove` to unbind stickit model and dom events.
            var remove = this.remove;
            if (!remove.stickitWrapped)
                this.remove = function() {
                    var ret = this;
                    this.unstickit();
                    if (remove) ret = remove.apply(this, arguments);
                    return ret;
                };
            this.remove.stickitWrapped = true;
        },

        // Add a single model binding to the view
        addBinding: function(optionalModel, second, _binding) {
            var $el, options, modelAttr, config, selector,
                model = optionalModel || this.model,
                namespace = '.stickit.' + model.cid,
                binding = _binding || {},
                bindId = _.uniqueId();

            // Allow jQuery-style {key: val} event maps
            if (_.isString(second)) {
                selector = second;
            } else {
                var bindings = second;
                _.each(bindings, function(v, selector) {
                    this.addBinding(model, selector, bindings[selector]);
                }, this);
                return;
            }

            // Support ':el' selector - special case selector for the view managed delegate.
            $el = selector === ':el' ? this.$el : this.$(selector);

            this.unstickit(model, selector);

            // Fail fast if the selector didn't match an element.
            if (!$el.length) return;

            // Allow shorthand setting of model attributes - `'selector':'observe'`.
            if (_.isString(binding)) binding = {
                observe: binding
            };

            // Handle case where `observe` is in the form of a function.
            if (_.isFunction(binding.observe)) binding.observe = binding.observe.call(this);

            config = getConfiguration($el, binding);
            config.selector = selector;
            modelAttr = config.observe;

            // Create the model set options with a unique `bindId` so that we
            // can avoid double-binding in the `change:attribute` event handler.
            config.bindId = bindId;

            // Add a reference to the view for handlers of stickitChange events
            config.view = this;
            options = _.extend({
                stickitChange: config
            }, config.setOptions);

            // Add a `_destroy` callback to the configuration, in case `destroy`
            // is a named function and we need a unique function when unsticking.
            config._destroy = function() {
                applyViewFn(this, config.destroy, $el, model, config);
            };

            initializeAttributes(this, $el, config, model, modelAttr);

            initializeVisible(this, $el, config, model, modelAttr);

            if (modelAttr) {
                // Setup one-way, form element to model, bindings.
                _.each(config.events, function(type) {
                    var event = type + namespace;
                    var method = function(event) {
                        var val = config.getVal.call(this, $el, event, config, _.rest(arguments));
                        // Don't update the model if false is returned from the `updateModel` configuration.
                        if (evaluateBoolean(this, config.updateModel, val, event, config))
                            setAttr(model, modelAttr, val, options, this, config);
                    };
                    method = _.bind(method, this);
                    if (selector === ':el') this.$el.on(event, method);
                    else this.$el.on(event, selector, method);
                }, this);

                // Setup a `change:modelAttr` observer to keep the view element in sync.
                // `modelAttr` may be an array of attributes or a single string value.
                _.each(_.flatten([modelAttr]), function(attr) {
                    observeModelEvent(model, this, 'change:' + attr, config, function(model, val, options) {
                        var changeId = options && options.stickitChange && options.stickitChange.bindId || null;
                        if (changeId !== bindId)
                            updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model);
                    });
                }, this);

                updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model, true);
            }

            // After each binding is setup, call the `initialize` callback.
            applyViewFn(this, config.initialize, $el, model, config);
        }
    };

    _.extend(Backbone.View.prototype, Stickit.ViewMixin);

    // Helpers
    // -------

    // Evaluates the given `path` (in object/dot-notation) relative to the given
    // `obj`. If the path is null/undefined, then the given `obj` is returned.
    var evaluatePath = function(obj, path) {
        var parts = (path || '').split('.');
        var result = _.reduce(parts, function(memo, i) {
            return memo[i];
        }, obj);
        return result == null ? obj : result;
    };

    // If the given `fn` is a string, then view[fn] is called, otherwise it is
    // a function that should be executed.
    var applyViewFn = function(view, fn) {
        if (fn) return (_.isString(fn) ? evaluatePath(view, fn) : fn).apply(view, _.rest(arguments, 2));
    };

    var getSelectedOption = function($select) {
        return $select.find('option').not(function() {
            return !this.selected;
        });
    };

    // Given a function, string (view function reference), or a boolean
    // value, returns the truthy result. Any other types evaluate as false.
    var evaluateBoolean = function(view, reference) {
        if (_.isBoolean(reference)) return reference;
        else if (_.isFunction(reference) || _.isString(reference))
            return applyViewFn.apply(this, arguments);
        return false;
    };

    // Setup a model event binding with the given function, and track the event
    // in the view's _modelBindings.
    var observeModelEvent = function(model, view, event, config, fn) {
        model.on(event, fn, view);
        view._modelBindings.push({
            model: model,
            event: event,
            fn: fn,
            config: config
        });
    };

    // Prepares the given `val`ue and sets it into the `model`.
    var setAttr = function(model, attr, val, options, context, config) {
        var value = {};
        if (config.onSet)
            val = applyViewFn(context, config.onSet, val, config);

        if (config.set)
            applyViewFn(context, config.set, attr, val, options, config);
        else {
            value[attr] = val;
            // If `observe` is defined as an array and `onSet` returned
            // an array, then map attributes to their values.
            if (_.isArray(attr) && _.isArray(val)) {
                value = _.reduce(attr, function(memo, attribute, index) {
                    memo[attribute] = _.has(val, index) ? val[index] : null;
                    return memo;
                }, {});
            }
            model.set(value, options);
        }
    };

    // Returns the given `attr`'s value from the `model`, escaping and
    // formatting if necessary. If `attr` is an array, then an array of
    // respective values will be returned.
    var getAttr = function(model, attr, config, context) {
        var val,
            retrieveVal = function(field) {
                return model[config.escape ? 'escape' : 'get'](field);
            },
            sanitizeVal = function(val) {
                return val == null ? '' : val;
            };
        val = _.isArray(attr) ? _.map(attr, retrieveVal) : retrieveVal(attr);
        if (config.onGet) val = applyViewFn(context, config.onGet, val, config);
        return _.isArray(val) ? _.map(val, sanitizeVal) : sanitizeVal(val);
    };

    // Find handlers in `Backbone.Stickit._handlers` with selectors that match
    // `$el` and generate a configuration by mixing them in the order that they
    // were found with the given `binding`.
    var getConfiguration = Stickit.getConfiguration = function($el, binding) {
        var handlers = [{
            updateModel: false,
            updateMethod: 'text',
            update: function($el, val, m, opts) {
                if ($el[opts.updateMethod]) $el[opts.updateMethod](val);
            },
            getVal: function($el, e, opts) {
                return $el[opts.updateMethod]();
            }
        }];
        handlers = handlers.concat(_.filter(Stickit._handlers, function(handler) {
            return $el.is(handler.selector);
        }));
        handlers.push(binding);
        var config = _.extend.apply(_, handlers);
        // `updateView` is defaulted to false for configutrations with
        // `visible`; otherwise, `updateView` is defaulted to true.
        if (config.visible && !_.has(config, 'updateView')) config.updateView = false;
        else if (!_.has(config, 'updateView')) config.updateView = true;
        return config;
    };

    // Setup the attributes configuration - a list that maps an attribute or
    // property `name`, to an `observe`d model attribute, using an optional
    // `onGet` formatter.
    //
    //     attributes: [{
    //       name: 'attributeOrPropertyName',
    //       observe: 'modelAttrName'
    //       onGet: function(modelAttrVal, modelAttrName) { ... }
    //     }, ...]
    //
    var initializeAttributes = function(view, $el, config, model, modelAttr) {
        var props = ['autofocus', 'autoplay', 'async', 'checked', 'controls', 'defer', 'disabled', 'hidden', 'indeterminate', 'loop', 'multiple', 'open', 'readonly', 'required', 'scoped', 'selected'];

        _.each(config.attributes || [], function(attrConfig) {
            var lastClass = '',
                observed, updateAttr;
            attrConfig = _.clone(attrConfig);
            observed = attrConfig.observe || (attrConfig.observe = modelAttr),
                updateAttr = function() {
                    var updateType = _.indexOf(props, attrConfig.name, true) > -1 ? 'prop' : 'attr',
                        val = getAttr(model, observed, attrConfig, view);
                    // If it is a class then we need to remove the last value and add the new.
                    if (attrConfig.name === 'class') {
                        $el.removeClass(lastClass).addClass(val);
                        lastClass = val;
                    } else $el[updateType](attrConfig.name, val);
                };
            _.each(_.flatten([observed]), function(attr) {
                observeModelEvent(model, view, 'change:' + attr, config, updateAttr);
            });
            updateAttr();
        });
    };

    // If `visible` is configured, then the view element will be shown/hidden
    // based on the truthiness of the modelattr's value or the result of the
    // given callback. If a `visibleFn` is also supplied, then that callback
    // will be executed to manually handle showing/hiding the view element.
    //
    //     observe: 'isRight',
    //     visible: true, // or function(val, options) {}
    //     visibleFn: function($el, isVisible, options) {} // optional handler
    //
    var initializeVisible = function(view, $el, config, model, modelAttr) {
        if (config.visible == null) return;
        var visibleCb = function() {
            var visible = config.visible,
                visibleFn = config.visibleFn,
                val = getAttr(model, modelAttr, config, view),
                isVisible = !!val;
            // If `visible` is a function then it should return a boolean result to show/hide.
            if (_.isFunction(visible) || _.isString(visible)) isVisible = !!applyViewFn(view, visible, val, config);
            // Either use the custom `visibleFn`, if provided, or execute the standard show/hide.
            if (visibleFn) applyViewFn(view, visibleFn, $el, isVisible, config);
            else {
                $el.toggle(isVisible);
            }
        };
        _.each(_.flatten([modelAttr]), function(attr) {
            observeModelEvent(model, view, 'change:' + attr, config, visibleCb);
        });
        visibleCb();
    };

    // Update the value of `$el` using the given configuration and trigger the
    // `afterUpdate` callback. This action may be blocked by `config.updateView`.
    //
    //     update: function($el, val, model, options) {},  // handler for updating
    //     updateView: true, // defaults to true
    //     afterUpdate: function($el, val, options) {} // optional callback
    //
    var updateViewBindEl = function(view, $el, config, val, model, isInitializing) {
        if (!evaluateBoolean(view, config.updateView, val, config)) return;
        applyViewFn(view, config.update, $el, val, model, config);
        if (!isInitializing) applyViewFn(view, config.afterUpdate, $el, val, config);
    };

    // Default Handlers
    // ----------------

    Stickit.addHandler([{
        selector: '[contenteditable="true"]',
        updateMethod: 'html',
        events: ['input', 'change']
    }, {
        selector: 'input',
        events: ['propertychange', 'input', 'change'],
        update: function($el, val) {
            $el.val(val);
        },
        getVal: function($el) {
            return $el.val();
        }
    }, {
        selector: 'textarea',
        events: ['propertychange', 'input', 'change'],
        update: function($el, val) {
            $el.val(val);
        },
        getVal: function($el) {
            return $el.val();
        }
    }, {
        selector: 'input[type="radio"]',
        events: ['change'],
        update: function($el, val) {
            $el.filter('[value="' + val + '"]').prop('checked', true);
        },
        getVal: function($el) {
            return $el.filter(':checked').val();
        }
    }, {
        selector: 'input[type="checkbox"]',
        events: ['change'],
        update: function($el, val, model, options) {
            if ($el.length > 1) {
                // There are multiple checkboxes so we need to go through them and check
                // any that have value attributes that match what's in the array of `val`s.
                val || (val = []);
                $el.each(function(i, el) {
                    var checkbox = Backbone.$(el);
                    var checked = _.indexOf(val, checkbox.val()) > -1;
                    checkbox.prop('checked', checked);
                });
            } else {
                var checked = _.isBoolean(val) ? val : val === $el.val();
                $el.prop('checked', checked);
            }
        },
        getVal: function($el) {
            var val;
            if ($el.length > 1) {
                val = _.reduce($el, function(memo, el) {
                    var checkbox = Backbone.$(el);
                    if (checkbox.prop('checked')) memo.push(checkbox.val());
                    return memo;
                }, []);
            } else {
                val = $el.prop('checked');
                // If the checkbox has a value attribute defined, then
                // use that value. Most browsers use "on" as a default.
                var boxval = $el.val();
                if (boxval !== 'on' && boxval != null) {
                    val = val ? $el.val() : null;
                }
            }
            return val;
        }
    }, {
        selector: 'select',
        events: ['change'],
        update: function($el, val, model, options) {
            var optList,
                selectConfig = options.selectOptions,
                list = selectConfig && selectConfig.collection || undefined,
                isMultiple = $el.prop('multiple');

            // If there are no `selectOptions` then we assume that the `<select>`
            // is pre-rendered and that we need to generate the collection.
            if (!selectConfig) {
                selectConfig = {};
                var getList = function($el) {
                    return $el.map(function() {
                        return {
                            value: this.value,
                            label: this.text
                        };
                    }).get();
                };
                if ($el.find('optgroup').length) {
                    list = {
                        opt_labels: []
                    };
                    // Search for options without optgroup
                    if ($el.find('> option').length) {
                        list.opt_labels.push(undefined);
                        _.each($el.find('> option'), function(el) {
                            list[undefined] = getList(Backbone.$(el));
                        });
                    }
                    _.each($el.find('optgroup'), function(el) {
                        var label = Backbone.$(el).attr('label');
                        list.opt_labels.push(label);
                        list[label] = getList(Backbone.$(el).find('option'));
                    });
                } else {
                    list = getList($el.find('option'));
                }
            }

            // Fill in default label and path values.
            selectConfig.valuePath = selectConfig.valuePath || 'value';
            selectConfig.labelPath = selectConfig.labelPath || 'label';

            var addSelectOptions = function(optList, $el, fieldVal) {
                _.each(optList, function(obj) {
                    var option = Backbone.$('<option/>'),
                        optionVal = obj;

                    var fillOption = function(text, val) {
                        option.text(text);
                        optionVal = val;
                        // Save the option value as data so that we can reference it later.
                        option.data('stickit_bind_val', optionVal);
                        if (!_.isArray(optionVal) && !_.isObject(optionVal)) option.val(optionVal);
                    };

                    if (obj === '__default__')
                        fillOption(selectConfig.defaultOption.label, selectConfig.defaultOption.value);
                    else
                        fillOption(evaluatePath(obj, selectConfig.labelPath), evaluatePath(obj, selectConfig.valuePath));

                    // Determine if this option is selected.
                    if (!isMultiple && optionVal != null && fieldVal != null && optionVal === fieldVal || (_.isObject(fieldVal) && _.isEqual(optionVal, fieldVal)))
                        option.prop('selected', true);
                    else if (isMultiple && _.isArray(fieldVal)) {
                        _.each(fieldVal, function(val) {
                            if (_.isObject(val)) val = evaluatePath(val, selectConfig.valuePath);
                            if (val === optionVal || (_.isObject(val) && _.isEqual(optionVal, val)))
                                option.prop('selected', true);
                        });
                    }

                    $el.append(option);
                });
            };

            $el.find('*').remove();

            // The `list` configuration is a function that returns the options list or a string
            // which represents the path to the list relative to `window` or the view/`this`.
            var evaluate = function(view, list) {
                var context = window;
                if (list.indexOf('this.') === 0) context = view;
                list = list.replace(/^[a-z]*\.(.+)$/, '$1');
                return evaluatePath(context, list);
            };
            if (_.isString(list)) optList = evaluate(this, list);
            else if (_.isFunction(list)) optList = applyViewFn(this, list, $el, options);
            else optList = list;

            // Support Backbone.Collection and deserialize.
            if (optList instanceof Backbone.Collection) optList = optList.toJSON();

            if (selectConfig.defaultOption) {
                addSelectOptions(["__default__"], $el);
            }

            if (_.isArray(optList)) {
                addSelectOptions(optList, $el, val);
            } else if (optList.opt_labels) {
                // To define a select with optgroups, format selectOptions.collection as an object
                // with an 'opt_labels' property, as in the following:
                //
                //     {
                //       'opt_labels': ['Looney Tunes', 'Three Stooges'],
                //       'Looney Tunes': [{id: 1, name: 'Bugs Bunny'}, {id: 2, name: 'Donald Duck'}],
                //       'Three Stooges': [{id: 3, name : 'moe'}, {id: 4, name : 'larry'}, {id: 5, name : 'curly'}]
                //     }
                //
                _.each(optList.opt_labels, function(label) {
                    var $group = Backbone.$('<optgroup/>').attr('label', label);
                    addSelectOptions(optList[label], $group, val);
                    $el.append($group);
                });
                // With no 'opt_labels' parameter, the object is assumed to be a simple value-label map.
                // Pass a selectOptions.comparator to override the default order of alphabetical by label.
            } else {
                var opts = [],
                    opt;
                for (var i in optList) {
                    opt = {};
                    opt[selectConfig.valuePath] = i;
                    opt[selectConfig.labelPath] = optList[i];
                    opts.push(opt);
                }
                addSelectOptions(_.sortBy(opts, selectConfig.comparator || selectConfig.labelPath), $el, val);
            }
        },
        getVal: function($el) {
            var val;
            if ($el.prop('multiple')) {
                val = Backbone.$(getSelectedOption($el).map(function() {
                    return Backbone.$(this).data('stickit_bind_val');
                })).get();
            } else {
                val = getSelectedOption($el).data('stickit_bind_val');
            }
            return val;
        }
    }]);


    // Export onto Backbone object
    Backbone.Stickit = Stickit;

    return Backbone.Stickit;

}));

(function(root, factory) {

    // CommonJS compatibilty
    if (typeof exports !== 'undefined') {
        factory(Backbone);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['backbone'], function(Backbone) {
            // Use global variables if the locals are undefined.
            return factory(Backbone || root.Backbone);
        });
    } else {
        factory(root.Backbone);
    }

})(this, function(Backbone) {
    'use strict';
    Number.prototype.pad = function(size) {
      var s = String(this);
      while (s.length < (size || 2)) {s = "0" + s;}
      return s;
    };
    if(!window.isDirty) window.isDirty=new Object();
    _.groupByMulti = function(obj, values, context) {
        if (!values.length)
            return obj;
        var byFirst = _.groupBy(obj, values[0], context),
            rest = values.slice(1);
        for (var prop in byFirst) {
            byFirst[prop] = _.groupByMulti(byFirst[prop], rest, context);
        }
        return byFirst;
    };

    _.findDeep = function(items, attrs) {

        function match(value) {
            for (var key in attrs) {
                if (!_.isUndefined(value)) {
                    if (attrs[key] !== value[key]) {
                        return false;
                    }
                }
            }

            return true;
        }

        function traverse(value) {
            var result;

            $.each(value, function(i, val) {
                if (match(val)) {
                    result = val;
                    return false;
                }

                if (_.isObject(val) || _.isArray(val)) {
                    result = traverse(val);
                }

                if (result) {
                    return false;
                }
            });

            return result;
        }

        return traverse(items);

    }

    Backbone.Collection.prototype.save = function(options) {
        return Backbone.sync('create', this, options);
    };

    var originalFn = Backbone.history.loadUrl;

    Backbone.history.loadUrl = function() {
        var me = this;
        // I introduced an application state variable, but it can be solved in multiple ways
        // if (window.dirty) {
        //     var previousFragment = Backbone.history.fragment;
        //     window.location.hash = '#' + previousFragment;
        //     w2confirm('Exista inregistrari nesalvate! Sigur iesiti?').yes(function() {
        //         window.dirty = false;
        //         return originalFn.apply(me, arguments);
        //     }).no(function() {
        //         return false;
        //     });
        // } else {
        //     return originalFn.apply(this, arguments);
        // }

        var answer = $.Deferred();
        answer.promise().then(function() {
            return originalFn.apply(me, arguments);
        });
        if (window.isDirty.dirty) {
            var nextFragment = window.location.hash;
            var previousFragment = Backbone.history.fragment;
            window.location.hash = '#/' + previousFragment;
            w2confirm('Exista inregistrari nesalvate! Sigur iesiti?').yes(function() {
                window.isDirty.dirty = false;
                window.location.hash = nextFragment;
                return answer.resolve();
            }).no(function() {
                return answer.promise();
            });

        } else {
            answer.resolve();
        }
    };

    Backbone.SModel = Backbone.Model.extend({
        constructor: function() {
            this.listenTo(this, 'change', function() {
                if(!this.changed.EntityState){
                if (this.attributes.EntityState === 3) {
                    this.attributes.EntityState = 1;
                }
                }
            });
            this.listenTo(this, 'save', function() {
                this.attributes.EntityState = 1;
            });
            Backbone.Model.apply(this, arguments);
            this.attributes['recid'] = this.cid;
        }
    });

    Backbone.SCollection = Backbone.Collection.extend({
        constructor: function() {
            this.listenTo(this, 'remove', function(model) {
                model.set('EntityState', 2);
            });
            Backbone.Collection.apply(this, arguments);
        }
    });
    Backbone.SGridCollection = Backbone.SCollection.extend({
        gridRowProperty: undefined,
        constructor: function() {
            var me = this;
            this.listenTo(this, 'remove', function(model) {
                if (this.getGridRowProperty())
                    w2ui[me.getGridName()].remove(model.get(me.getGridRowProperty()).get('cid'));
                else
                    w2ui[me.getGridName()].remove(model.get('cid'));
            });
            this.listenTo(this, 'add', function(model) {
                if (this.getGridRowProperty()) {
                    model.get(this.getGridRowProperty()).set('recid', model.cid);
                    w2ui[me.getGridName()].add(model.get(this.getGridRowProperty()).toJSON());
                } else {
                    model.set('recid', model.cid);
                    w2ui[me.getGridName()].add(model.toJSON());
                }
            });
            this.listenTo(this, 'change', function(model) {
                //SET GRID RECORD BASED ON MODEL CHANGES
                if (this.getGridRowProperty())
                    w2ui[me.getGridName()].set(model.get(this.getGridRowProperty()).cid, model.get(this.getGridRowProperty()).toJSON());
                else
                    w2ui[me.getGridName()].set(model.cid, model.toJSON());
            });
            Backbone.Collection.apply(this, arguments);
        },
        setGridRowProperty: function(name) {
            this.gridRowProperty = name;
        },
        getGridRowProperty: function() {
            return this.gridRowProperty;
        },
        getGridName: function() {
            return this.gridName;
        },
        setGridName: function(name) {
            this.gridName = name;
        }
    });
    return Backbone;
});

(function(root, factory) {

    // CommonJS compatibilty
    if (typeof exports !== 'undefined') {
        factory(Marionette, Backbone);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['marionette', 'backbone'], function(Marionette, Backbone) {
            // Use global variables if the locals are undefined.
            return factory(Marionette || root.Marionette, Backbone || root.Backbone);
        });
    } else {
        factory(root.Marionette, root.Backbone);
    }

})(this, function(Marionette, Backbone) {
    'use strict';
    // var Marionette;
    // if (module) {
    //     Marionette = MarionetteBundle.Marionette;
    //     Backbone = MarionetteBundle.Backbone;
    // } else {
    //     Marionette = MarionetteBundle;
    // }
    /**
     * Extend default router to prevent user navigation if unsaved changes
     */

    Marionette.DirtyRouter = Marionette.AppRouter.extend({
        navigate: function(fragment, options) {
            var answer = $.Deferred();
            answer.promise().then(function() {
                return Marionette.AppRouter.prototype.navigate(fragment, options);
            });
            if (window.dirty) {
                w2confirm('Exista inregistrari nesalvate! Sigur iesiti?').yes(function() {
                    window.dirty = false;
                    return answer.resolve();
                }).no(function() {
                    return answer.promise();
                });

            } else {
                answer.resolve();
            }
        }
    });

    Marionette.SlashRouter = Marionette.AppRouter.extend({
        navigate: function(fragment) {
            var options = Backbone.history.options,
                ret;

            if (fragment === '' || fragment === '/') {
                Backbone.history.stop();
                Backbone.history.start({
                    pushState: options.pushState,
                    root: '/'
                });

                arguments[0] = options.root;

                ret = Backbone.Router.prototype.navigate.apply(this, arguments);

                Backbone.history.stop();
                Backbone.history.start({
                    pushState: options.pushState,
                    root: options.root
                });

                return ret;
            }

            return Backbone.Router.prototype.navigate.apply(this, arguments);
        }
    });


    /**
     * Create a ItemView with 2 functions that will construct the UI based on view's model definition
     */

    Marionette.FormView = Marionette.ItemView.extend({

        resetCombo: function() {
            var self = this;
            var fields = self.model.fields();
            for (var i in this.model.changed) {
                var field = _.find(fields, {
                    name: i
                });
                if (field && field.type === 'list') {
                    $(field.el).data('selected', field.selected);
                    $(field.el).w2field().refresh();
                }

            }
        },
        getTemplate: function() {
            if (!this.template) {
                var html = '';
                var fields;
                if (typeof this.model.fields === 'function')
                    fields = this.model.fields();
                else
                    fields = this.model.fields;
                for (var i in fields) {
                    var field = fields[i];
                    var input = field.isMemo ? '<textarea id="' + field.name + '"></textarea>' : '<input type="text" id="' + field.name + '" />';
                    html += '<div class="w2ui-field">' +
                        '<label>' + (field.displayName ? field.displayName : this.normalizeName(field.name)) + '</label>' +
                        '<div>' + input + '</div>' +
                        '</div>';
                }
                html += '<hr />' +
                    '<div style="text-align:left">' +
                    '<button class="toolbar-button" title="Salveaza modificarile" id="btnSave"><i class="w2ui-icon-save"></i></button>' +
                    '<button class="toolbar-button" title="Renunta la modificare" id="btnCancel"><i class="w2ui-icon-ban"></i></button>' +
                    '</div>';
                return html;
            } else {
                return this.template;
            }
        },
        bindings: {},
        constructor: function(options) {
            Marionette.ItemView.prototype.constructor.call(this, options);
        },
        ensureElement:function(setupview){
            var self = this;
             var checkInterval = setInterval(function(){
                if($.contains(document.body,self.el)){
                    clearInterval(checkInterval);
                    self.hasElement = true;
                    if (setupview)self.setupView();
                    if(typeof self.onViewRendered === 'function')
                        self.onViewRendered.apply(self,arguments);
                }
                return false;
            },10);
        },
        setupView: function() {
            console.log($.contains(document.body,this.el));
            if(!this.hasElement){
                if(!this.ensureElement(true)) return;
            }
            var self = this;
            self.$el.find('.button-translate button').each(function(i,b){
                b.textContent = w2utils.lang(b.textContent)
            });
            var fields;
            if (typeof this.model.fields === 'function')
                fields = this.model.fields();
            else
                fields = this.model.fields;
            for (var f in fields) {
                var field = fields[f]; 
                if (field.type === 'collection')
                    continue;
                if (field.selected) {
                    field.options.selected = field.selected;
                }

                if (field.options && typeof field.options.items === 'string') {
                    var prop = field.options.items;
                    field.options.items = self.model.get(prop);
                }
                var label = $(field.el).closest('.w2ui-field').find('label');
                label.text(w2utils.lang(label.text()));
                console.log('label:' + label.text());
                $(field.el).w2field(field.type, field.options);

                $(field.el).on('change', {
                    field: field
                }, function(event) {
                    if (event.data.field.idField && event.data.field.txtField) {
                        var selected = $(event.data.field.el).data('selected');
                        if (event.data.field.type === 'combo') { //allow addition to combo fields
                            var val = $(event.data.field.el).val();
                            if (val && val !== selected.text) {
                                self.model.set(event.data.field.idField, ''); // in case is new value we set id field to null
                            } else {
                                self.model.set(event.data.field.idField, selected.id);
                                self.model.set(event.data.field.txtField, selected.text);
                            }
                        } else {
                                self.model.set(event.data.field.idField, selected.id);
                                self.model.set(event.data.field.txtField, selected.text);
                        }
                    }
                    if (event.data.field.change)
                        event.data.field.change.apply(this, arguments);
                });
                // if(field.type==='list'){
                //      var listBinding ;
                //     if(field.idField && field.txtField){
                //         listBinding = {
                //             observe:field.name,
                //             onGet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 if(field.idField === field.name)
                //                     return selected.id;
                //                 if(field.txtField === field.name)
                //                     return selected.text;
                //             },
                //             onSet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 if(field.idField === field.name)
                //                     return selected.id;
                //                 if(field.txtField === field.name)
                //                     return selected.text;
                //             }
                //         }
                //     }else{
                //         listBinding = {
                //             observe:field.name,
                //             onGet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 return selected.id;
                //             },
                //             onSet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 return selected.id;
                //             }
                //         }
                //     }
                //     self.bindings[field.el] = listBinding;
                // }else{
                    self.bindings[field.el] = field.name;
                // }

            }
            $.extend(self.bindings, self.bindingsOverrides);
            self.stickit();
        },
        resetView: function() {
            var fields = this.model.fields();
            for (var f in fields) {
                var field = fields[f];
                if(($(field.el).w2field()))
                  $(field.el).w2field().refresh();
            }
        },
        normalizeName: function(name) {
            name = name.replace('_', ' ');
            return name.replace(/\w\S*/g, function(txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
        }
    });


    /**
     * Creates an AppRouter with a particular prefix at the beginning of each route.
     * @class Marionette.SubAppRouter
     * @alias module:marionette.subapprouter
     * @classdesc A router that prepends a specified prefix (passed on instantiation) onto each specified `route` or
     * `appRoute`.  Directly extends from Marione
tte.AppRouter to enable controller objects linked to the `appRoutes`
     * hash. Useful for sub applications that live in sub-directories under root and want to handle all of their own
     * routing.
     */
    Marionette.SubAppRouter = Marionette.AppRouter.extend({

        /**
         * @constructs Marionette.SubAppRouter
         * @param {string} [prefix] - The prefix string to prepend to all routes, making them act as if relative. If
         * blank, then it just acts like a regular Backbone.Router.
         * @param {Object} [options] - The options object expected by Marionette.AppRouter.
         * @param {Object} [options.controller] - An object with function properties corresponding to the hash values
         * from `routes` and `appRoutes`.
         */
        constructor: function(prefix, options) {

            var controller,
                appRoutes,
                routes = {};

            // Prefix is optional, set to empty string if not passed
            this.prefix = prefix = prefix || '';

            // SubRoute instances may be instantiated using a prefix with or without a trailing slash.
            // If the prefix does *not* have a trailing slash, we need to insert a slash as a separator
            // between the prefix and the sub-route path for each route that we register with Backbone.
            this.separator =
                (prefix.slice(-1) === '/') ? '' : '/';

            // if you want to match "books" and "books/" without creating separate routes, set this
            // option to "true" and the sub-router will automatically create those routes for you.
            var createTrailingSlashRoutes = options && options.createTrailingSlashRoutes;

            if (this.appRoutes) {

                appRoutes = this.appRoutes;
                controller = this.controller;

                if (options && options.controller) {
                    controller = options.controller;
                }

                _.each(appRoutes, function(callback, path) {

                    if (path) {

                        // strip off any leading slashes in the sub-route path,
                        // since we already handle inserting them when needed.
                        if (path.substr(0) === '/') {
                            path = path.substr(1, path.length);
                        }

                        routes[prefix + this.separator + path] = callback;

                        if (createTrailingSlashRoutes) {
                            routes[prefix + this.separator + path + '/'] = callback;
                        }

                    } else {
                        // default routes (those with a path equal to the empty string)
                        // are simply registered using the prefix as the route path.
                        routes[prefix] = callback;

                        if (createTrailingSlashRoutes) {
                            routes[prefix + '/'] = callback;
                        }
                    }

                }, this);

                // Override the local sub-routes with the fully-qualified routes that we just set up.
                this.appRoutes = routes;

            }

            Marionette.AppRouter.prototype.constructor.call(this, options);
        }


    });


    /**
     * https://github.com/justspamjustin/BossView
     * BossView v 0.1.4
     */

    Marionette.BossView = Marionette.ItemView.extend({

        template: function() {
            return '';
        },

        constructor: function() {
            Marionette.ItemView.prototype.constructor.apply(this, arguments);
            this._initializeSubViews();
            this._afterInitializeSubViews();
            this.listenTo(this, 'render', this._onParentRendered);
        },

        getParentEl: function() {
            return this.$el;
        },

        _afterInitializeSubViews: function() {
            this._initializeChildViewEvents();
            this._initializeSubViewEventBubbling();
        },

        _initializeSubViews: function() {
            this.initializedSubViews = {};
            this._eachSubView(_.bind(this._initializeSubView, this));
        },

        _initializeSubView: function(subViewName, subViewFunction) {
            var subView = this._getInitializedSubView(subViewFunction);
            this._checkSubViewForRender(subView, subViewName);
            this[subViewName] = subView;
            this.initializedSubViews[subViewName] = subView;
        },

        initializeSubView: function(subViewName, subViewFunction) {
            this._initializeSubView(subViewName, subViewFunction);
            this._afterInitializeSubViews();
        },

        _getInitializedSubView: function(subViewFunction) {
            var subView;
            var isRenderableView = _.isFunction(subViewFunction.prototype.render);
            if (isRenderableView) {
                subView = this._initializeRenderableSubView(subViewFunction);
            } else {
                subView = subViewFunction.call(this);
            }
            return subView;
        },

        _initializeRenderableSubView: function(subViewFunction) {
            return new subViewFunction({
                model: this.model,
                collection: this.collection
            });
        },

        _checkSubViewForRender: function(subView, subViewName) {
            if (_.isUndefined(subView) || !_.isFunction(subView.render)) {
                throw new Error('The subview named ' + subViewName + ' does not have a render function.');
            }
        },

        _initializeChildViewEvents: function() {
            this._eachSubViewEvent(_.bind(function(subView, subViewEventName, subViewEventCallback) {
                subViewEventCallback = this._getSubViewEventCallbackFunction(subViewEventCallback, subViewEventName);
                if (subView === '*') {
                    this._listenToEventOnAllSubViews(subViewEventCallback, subViewEventName);
                } else {
                    if (subView) {
                        this.listenTo(subView, subViewEventName, subViewEventCallback);
                    }
                }
            }, this));
        },

        _getSubViewEventCallbackFunction: function(subViewEventCallback, subViewEventName) {
            if (_.isString(subViewEventCallback)) {
                this._checkForSubViewEventCallback(subViewEventCallback, subViewEventName);
                subViewEventCallback = this[subViewEventCallback];
            }
            return subViewEventCallback;
        },

        _listenToEventOnAllSubViews: function(subViewEventCallback, subViewEventName) {
            this._eachSubView(_.bind(function(subViewName) {
                var subViewInstance = this[subViewName];
                this.listenTo(subViewInstance, subViewEventName, subViewEventCallback);
            }, this));
        },

        _checkForSubViewEventCallback: function(subViewEventCallback, subViewEventName) {
            if (_.isUndefined(this[subViewEventCallback])) {
                throw new Error('This view has no function named ' + subViewEventCallback + ' to use as a callback for the event ' + subViewEventName);
            }
        },

        _initializeSubViewEventBubbling: function() {
            this._eachSubView(_.bind(function(subViewName) {
                var subView = this[subViewName];
                this.listenTo(subView, 'all', function() {
                    this.trigger(subViewName + ':' + arguments[0], arguments[1]);
                });
            }, this));
        },

        _onParentRendered: function() {
            this.trigger('subviews:before:render');
            this._renderSubViews();
            this.trigger('subviews:after:render');
        },

        _renderSubViews: function() {
            this._eachSubView(_.bind(this.renderSubView, this));
        },

        renderSubView: function(subViewName) {
            var mainSubViewContainer = this._getOption('mainSubViewContainer');
            var appendToEl = this.getParentEl();
            if (this._hasSubViewContainer(subViewName)) {
                appendToEl = this._getSubViewContainer(subViewName);
            } else if (mainSubViewContainer) {
                appendToEl = this.$(mainSubViewContainer);
            }
            this._renderSubView(subViewName, appendToEl);
        },

        _renderSubView: function(subViewName, appendToEl) {
            if (this._shouldRenderSubView(subViewName)) {
                this[subViewName].render().$el.appendTo(appendToEl);
                /**
                 * We need to call delegateEvents here because when Marionette renders a template
                 * it uses this.$el.html(templateHTML).  If this is the second render, then it will
                 * remove each of the subViews from the DOM, thus also unbinding each of their DOM
                 * events.  So this is necessary for any renders after the initial render.
                 */
                this[subViewName].delegateEvents();
                if (this[subViewName].viewShown) {
                    this[subViewName].viewShown.apply(this[subViewName], arguments);
                }

            }
        },

        _shouldRenderSubView: function(subViewName) {
            var renderConditionFunction = this._getSubViewRenderConditions()[subViewName];
            var hasRenderConditionFunction = _.isFunction(renderConditionFunction);
            return hasRenderConditionFunction ? renderConditionFunction.call(this) : true;
        },

        _eachSubView: function(callback) {
            if (this._getSubViews()) {
                for (var subViewName in this._getSubViews()) {
                    callback(subViewName, this._getSubViews()[subViewName]);
                }
            }
        },

        _eachSubViewEvent: function(callback) {
            var subViewEvents = this._getOption('subViewEvents');
            if (subViewEvents) {
                for (var subViewEventKey in subViewEvents) {
                    var split = this._splitSubViewEventKey(subViewEventKey);
                    var subView = split.subViewName === '*' ? '*' : this[split.subViewName];
                    callback(subView, split.subViewEventName, subViewEvents[subViewEventKey]);
                }
            }
        },

        _splitSubViewEventKey: function(subViewEventKey) {
            var subViewEventKeySplit = subViewEventKey.split(' ');
            return {
                subViewName: subViewEventKeySplit[0],
                subViewEventName: subViewEventKeySplit[1]
            }
        },

        _hasSubViewContainer: function(subViewName) {
            var subViewContainers = this._getOption('subViewContainers');
            return !_.isUndefined(subViewContainers) && !_.isUndefined(subViewContainers[subViewName]);
        },

        _getSubViewContainer: function(subViewName) {
            if (!this._hasSubViewContainer(subViewName)) {
                throw new Error('No subview container for subView: ' + subViewName);
            }
            return this.$(this._getOption('subViewContainers')[subViewName]);
        },

        remove: function() {
            Backbone.Marionette.ItemView.prototype.remove.apply(this, arguments);
            console.log('view removed');
            this._removeSubViews();
        },

        _removeSubViews: function() {
            _.each(this.initializedSubViews, function(subView) {
                subView.remove();
            });
        },

        _getSubViews: function() {
            var subViews = _.result(this, 'subViews');
            if (this.options.subViews) {
                subViews = _.result(this.options, 'subViews');
            }
            return subViews;
        },

        _getOption: function(optionName) {
            return this[optionName] || this.options[optionName];
        },

        _getSubViewRenderConditions: function() {
            return this._getOption('subViewRenderConditions') || {};
        }
    });


    //END BOSSVIEW


    var isClosable = function(p) {
        if (p && p.reset && typeof(p.reset) == 'function') {
            return true;
        }
        return false;
    };

    var isStopable = function(p) {
        if (p && p.stop && typeof(p.stop) == 'function') {
            return true;
        }
        return false;
    };

    _.extend(Backbone.Marionette.Application.prototype, {
        stop: function() {
            _.each(this._regionManager._regions, function(region) {
                region.reset();
            });
            if (this.onStop && typeof this.onStop === 'function') {
                this.onStop();
            }
        }
    });


   // object.watch
if (!Object.prototype.watch) {
    Object.defineProperty(Object.prototype, "watch", {
          enumerable: false
        , configurable: true
        , writable: false
        , value: function (prop, handler) {
            var
              oldval = this[prop]
            , newval = oldval
            , getter = function () {
                return newval;
            }
            , setter = function (val) {
                oldval = newval;
                return newval = handler.call(this, prop, oldval, val);
            }
            ;

            if (delete this[prop]) { // can't watch constants
                Object.defineProperty(this, prop, {
                      get: getter
                    , set: setter
                    , enumerable: true
                    , configurable: true
                });
            }
        }
    });
}

// object.unwatch
if (!Object.prototype.unwatch) {
    Object.defineProperty(Object.prototype, "unwatch", {
          enumerable: false
        , configurable: true
        , writable: false
        , value: function (prop) {
            var val = this[prop];
            delete this[prop]; // remove accessors
            this[prop] = val;
        }
    });
}
    return Marionette;
});

/*global define,jQuery,window */

(function(factory) {

    "use strict";

    if (typeof(define) === 'function' && define.amd) {
        define(['jquery'], factory);
    } else {
        factory(jQuery);
    }
}(function($) {

    "use strict";

    $.fileMenu = function(el, options) {

        var base = this;

        base.$el = $(el).first('ul');
        base.el = el;
        base.index = 0;
        base.actions = [];

        base.options = $.extend({}, $.fileMenu.defaultOptions, options);
        base.touch = false;

        base.$ = function(query) {
            return base.$el.find(query);
        };
        base.setMenuItems = function(menu) {
            var self = this;
            var m;
            if (!menu){ 
                m = base.options.items;
            }else{
                m = menu;
            }
            for (var x in m) {
                var menuItem = m[x];
                if (!menuItem.index) {
                    menuItem.index = base.index;
                    base.index += 1;
                }
                menuItem.enabled = true;
                if (menuItem.show) {
                    try{
                        menuItem.hidden = !menuItem.show();
                    }catch(e){
                        menuItem.hidden = true;
                    }
                    
                }
                if (menuItem.submenu) {
                    base.setMenuItems(menuItem.submenu);
                }
            }
            base.options.items = m;
        };
        base.refresh = function(items) {
            base.setMenuItems();
            base.appendHtml(base.buildHTML());
            base.addListeners();
        };
        base.buildHTML = function() {
            var html = '<ul>';
            var items = base.options.items;
            for (var i in items) {
                var menu = items[i];
                //if (menu.visibile) {
                html += '<li data-index="' + menu.index + '"' + ' id = "menu' + menu.index + '"' +
                    ' class="' + (menu.type === 'separator' ? 'divider' : '') + (menu.enabled ? '' : ' disabled') + (menu.hidden ? ' hidden' : '') + '">' +
                    (menu.icon ? '<i class="' + menu.icon + '"></i>' : '') + ' ' + (menu.label ? menu.label : '');
                if (menu.submenu) {
                    html += base.buildSubHtml(menu.submenu);
                } else {
                    html += '<ul><li class="disabled">Empty</li></ul>';
                }
                html += '</li>';
                //}
            }
            html += '</ul>';
            return html;
        };
        base.buildSubHtml = function(items) {
            var html = '<ul>';
            for (var i in items) {
                var menu = items[i];
                if (menu.click) base.actions.push({
                    index: menu.index,
                    menu: menu
                });
                //if (!menu.hidden) {
                html += '<li data-index="' + menu.index + '" id="menu' + menu.index + '"' + (base.click ? 'data-action="' + menu.index + '"' : '') +
                    'class="' + (menu.submenu ? 'sub' : '') + ' ' + (menu.click ? 'menuaction' : '') + (menu.enabled ? '' : ' disabled') + (menu.hidden ? ' hidden' : '') +
                    ' ' + (menu.type === 'separator' ? 'divider' : '') + '">' +
                    '<div class="menuicon">' + (menu.icon ? '<i class="' + menu.icon + '"></i>' : ' ') + '</div> ' +
                    ' ' + (menu.label ? menu.label : '') + '';
                if (menu.submenu) {
                    html += base.buildSubHtml(menu.submenu);
                }

                html += '</li>';
                // }
            }
            html += '</ul>';
            return html;
        };
        base.appendHtml = function(markup) {
            base.$el.html(markup);
            var menu = base.$el.children('ul')[0];
            base.menu = $(menu);
            base.menu.addClass('w2ui-filemenu');
        };
        base.hideMenu = function() {
            base.$('.selected ul').slideUp(base.options.slideSpeed);
            base.$('.selected').removeClass('selected');
            base.menu.removeClass('active');
        };

        base.showMenu = function($this) {
            var $parent = $this.parent(),
                $menu = $this.children('ul').first(),
                offsets = $this.offset();

            $parent.addClass('active');

            $this.addClass('selected');
            $menu.css({
                'left': offsets.left,
                'top': offsets.top + $parent.height()
            });
            $menu.slideDown(base.options.slideSpeed);
        };

        base.addListeners = function() {
            base.menu.children('li').on('click', function(e) {
                var $this = $(this);

                if ($this.hasClass('selected')) {
                    base.hideMenu();
                } else {
                    base.hideMenu();
                    base.showMenu($this);
                }
                e.stopPropagation();
            });

            base.$('li').on('click', '.menuaction', function(e) {
                var $this = $(e.target);
                var id = $this.data('index');
                var menuItem = _.where(base.actions, {
                    index: id
                })[0].menu;
                if (menuItem.click && typeof(menuItem.click) === 'function') {
                    menuItem.click.apply(this, arguments);
                    $this.parent().addClass('selected');
                    base.hideMenu();
                }
                e.stopPropagation();
                //
            });

            base.menu.children('li').on('mouseenter', function() {
                var $this = $(this);
                if (!$this.parent().hasClass('active')) {
                    return;
                }
                if ($this.hasClass('selected')) {
                    return;
                }

                base.hideMenu();
                base.showMenu($this);
            });

            /* Don't slide up if submenu, divider or disabled item is clicked */
            base.$('ul').on('click', function(e) {
                var $this = $(e.target);
                if ($this.get(0).tagName === 'LI' && !$this.hasClass('sub')) {
                    return;
                }
                e.stopPropagation();
            });

            /* Handle toggle elements */
            base.$('ul').on('click', '.toggle', function(e) {
                $(this).toggleClass('active');
                e.stopPropagation();
            });

            /* Position sub menus */
            base.menu.on('mouseenter', 'ul li', function() {
                var $this = $(this);

                $this.find('ul').first().css({
                    'left': $this.parent().width(),
                    'margin-top': -$this.height(),
                    'display': ''
                });
            });

            /* Hide menu on click outside the menu */
            $('html').on('click', function() {
                base.hideMenu();
            });
        };

        base.init = function() {
            base.setMenuItems();
            var markup = base.buildHTML();
            base.appendHtml(markup);
            base.addListeners();
            //base.$el.addClass('fileMenu');
        };

        base.init();
        $.extend(w2ui.obj, base);
        w2ui['filemenu'] = base;
    };

    $.fileMenu.defaultOptions = {
        slideSpeed: 100,
        items: []
    };

    $.fn.fileMenu = function(options) {
        return this.each(function() {
            var fm = new $.fileMenu(this, options);
        });
    };

}));

/* w2ui 1.4.x (nightly) (c) http://w2ui.com, vitmalina@gmail.com */
var w2ui = w2ui || {};
var w2obj = w2obj || {}; // expose object to be able to overwrite default functions

/************************************************
 *  Library: Web 2.0 UI for jQuery
 *  - Following objects are defines
 *        - w2ui             - object that will contain all widgets
 *        - w2obj            - object with widget prototypes
 *        - w2utils          - basic utilities
 *        - $().w2render     - common render
 *        - $().w2destroy    - common destroy
 *        - $().w2marker     - marker plugin
 *        - $().w2tag        - tag plugin
 *        - $().w2overlay    - overlay plugin
 *        - $().w2menu       - menu plugin
 *        - w2utils.event    - generic event object
 *        - w2utils.keyboard - object for keyboard navigation
 *  - Dependencies: jQuery
 *
 * == NICE TO HAVE ==
 *   - overlay should be displayed where more space (on top or on bottom)
 *   - write and article how to replace certain framework functions
 *   - add maxHeight for the w2menu
 *   - isTime should support seconds
 *   - add time zone
 *   - TEST On IOS
 *   - $().w2marker() -- only unmarks first instance
 *   - subitems for w2menus()
 *   - add w2utils.lang wrap for all captions in all buttons.
 *   - add isDateTime()
 *   - remove momentjs
 *
 * == 1.5 changes
 *   - date has problems in FF new Date('yyyy-mm-dd') breaks
 *   - bug: w2utils.formatDate('2011-31-01', 'yyyy-dd-mm'); - wrong foratter
 *   - format date and time is buggy
 *   - added decimalSymbol
 *   - renamed size() -> formatSize()
 *   - added cssPrefix()
 *   - added w2utils.settings.weekStarts
 *   - onComplete should pass widget as context (this)
 *   - hidden and disabled in menus
 *   - added menu.item.hint for overlay menues
 *   - added w2tag options.id, options.left, options.top
 *
 ************************************************/

var w2utils = (function() {
    var tmp = {}; // for some temp variables
    var obj = {
        version: '1.5.x',
        settings: {
            "locale": "en-us",
            "date_format": "m/d/yyyy",
            "date_display": "Mon d, yyyy",
            "time_format": "hh:mi pm",
            "currencyPrefix": "$",
            "currencySuffix": "",
            "currencyPrecision": 2,
            "groupSymbol": ",",
            "decimalSymbol": ".",
            "shortmonths": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            "fullmonths": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            "shortdays": ["M", "T", "W", "T", "F", "S", "S"],
            "fulldays": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            "weekStarts": "M", // can be "M" for Monday or "S" for Sunday
            "dataType": 'HTTP', // can be HTTP, RESTFULL, JSON (case sensative)
            "phrases": {}, // empty object for english phrases
            "dateStartYear": 1950, // start year for date-picker
            "dateEndYear": 2020 // end year for date picker
        },
        isInt: isInt,
        isFloat: isFloat,
        isMoney: isMoney,
        isHex: isHex,
        isAlphaNumeric: isAlphaNumeric,
        isEmail: isEmail,
        isDate: isDate,
        isTime: isTime,
        isDateTime: isDateTime,
        age: age,
        date: date,
        formatSize: formatSize,
        formatNumber: formatNumber,
        formatDate: formatDate,
        formatTime: formatTime,
        formatDateTime: formatDateTime,
        stripTags: stripTags,
        encodeTags: encodeTags,
        escapeId: escapeId,
        base64encode: base64encode,
        base64decode: base64decode,
        transition: transition,
        lock: lock,
        unlock: unlock,
        lang: lang,
        locale: locale,
        getSize: getSize,
        scrollBarSize: scrollBarSize,
        checkName: checkName,
        checkUniqueId: checkUniqueId,
        parseRoute: parseRoute,
        cssPrefix: cssPrefix,
        validate: validate,
        escapeRegExp: escapeRegExp,
        modelErrors: modelErrors,
        validateRaw: validateRaw,
        // some internal variables
        isIOS: ((navigator.userAgent.toLowerCase().indexOf('iphone') != -1 ||
            navigator.userAgent.toLowerCase().indexOf('ipod') != -1 ||
            navigator.userAgent.toLowerCase().indexOf('ipad') != -1) ? true : false),
        isIE: ((navigator.userAgent.toLowerCase().indexOf('msie') != -1 ||
            navigator.userAgent.toLowerCase().indexOf('trident') != -1) ? true : false),
        use_momentjs: ((typeof moment === 'function') && (typeof moment.version === 'string'))
    };
    return obj;

    function isInt(val) {
        var re = /^[-+]?[0-9]+$/;
        return re.test(val);
    }

    function isFloat(val) {
        if (typeof val == 'string') val = val.replace(w2utils.settings.decimalSymbol, '.');
        return (typeof val === 'number' || (typeof val === 'string' && val !== '')) && !isNaN(Number(val));
    }

    function isMoney(val) {
        var se = w2utils.settings;
        var re = new RegExp('^' + (se.currencyPrefix ? '\\' + se.currencyPrefix + '?' : '') + '[-+]?[0-9]*[\\' + se.decimalSymbol + ']?[0-9]+' + (se.currencySuffix ? '\\' + se.currencySuffix + '?' : '') + '$', 'i');
        if (typeof val === 'string') {
            val = val.replace(new RegExp(se.groupSymbol, 'g'), '');
        }
        if (typeof val === 'object' || val === '') return false;
        return re.test(val);
    }

    function isHex(val) {
        var re = /^[a-fA-F0-9]+$/;
        return re.test(val);
    }

    function isAlphaNumeric(val) {
        var re = /^[a-zA-Z0-9_-]+$/;
        return re.test(val);
    }

    function isEmail(val) {
        var email = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        var mails = val.split(',');
        for (var i in mails) {
            var mail = mails[i];
            if (!email.test(mail))
                return false;
        }
        return true;
    }

    function isDate(val, format, retDate) {
        if (!val) return false;

        var dt = 'Invalid Date';
        var month, day, year;

        if (format == null) format = w2utils.settings.date_format;

        if (typeof val.getUTCFullYear === 'function' && typeof val.getUTCMonth === 'function' && typeof val.getUTCDate === 'function') {
            year = val.getUTCFullYear();
            month = val.getUTCMonth();
            day = val.getUTCDate();
        } else if (typeof val.getFullYear === 'function' && typeof val.getMonth === 'function' && typeof val.getDate === 'function') {
            year = val.getFullYear();
            month = val.getMonth();
            day = val.getDate();
        } else {
            val = String(val);
            // convert month formats
            if (new RegExp('mon', 'ig').test(format)) {
                format = format.replace(/month/ig, 'm').replace(/mon/ig, 'm').replace(/dd/ig, 'd').replace(/[, ]/ig, '/').replace(/\/\//g, '/').toLowerCase();
                val = val.replace(/[, ]/ig, '/').replace(/\/\//g, '/').toLowerCase();
                for (var m = 0, len = w2utils.settings.fullmonths.length; m < len; m++) {
                    var t = w2utils.settings.fullmonths[m];
                    val = val.replace(new RegExp(t, 'ig'), (parseInt(m) + 1)).replace(new RegExp(t.substr(0, 3), 'ig'), (parseInt(m) + 1));
                }
            }
            // format date
            var tmp = val.replace(/-/g, '/').replace(/\./g, '/').toLowerCase().split('/');
            var tmp2 = format.replace(/-/g, '/').replace(/\./g, '/').toLowerCase();
            if (tmp2 === 'mm/dd/yyyy') {
                month = tmp[0];
                day = tmp[1];
                year = tmp[2];
            }
            if (tmp2 === 'm/d/yyyy') {
                month = tmp[0];
                day = tmp[1];
                year = tmp[2];
            }
            if (tmp2 === 'dd/mm/yyyy') {
                month = tmp[1];
                day = tmp[0];
                year = tmp[2];
            }
            if (tmp2 === 'd/m/yyyy') {
                month = tmp[1];
                day = tmp[0];
                year = tmp[2];
            }
            if (tmp2 === 'yyyy/dd/mm') {
                month = tmp[2];
                day = tmp[1];
                year = tmp[0];
            }
            if (tmp2 === 'yyyy/d/m') {
                month = tmp[2];
                day = tmp[1];
                year = tmp[0];
            }
            if (tmp2 === 'yyyy/mm/dd') {
                month = tmp[1];
                day = tmp[2];
                year = tmp[0];
            }
            if (tmp2 === 'yyyy/m/d') {
                month = tmp[1];
                day = tmp[2];
                year = tmp[0];
            }
            if (tmp2 === 'mm/dd/yy') {
                month = tmp[0];
                day = tmp[1];
                year = tmp[2];
            }
            if (tmp2 === 'm/d/yy') {
                month = tmp[0];
                day = tmp[1];
                year = parseInt(tmp[2]) + 1900;
            }
            if (tmp2 === 'dd/mm/yy') {
                month = tmp[1];
                day = tmp[0];
                year = parseInt(tmp[2]) + 1900;
            }
            if (tmp2 === 'd/m/yy') {
                month = tmp[1];
                day = tmp[0];
                year = parseInt(tmp[2]) + 1900;
            }
            if (tmp2 === 'yy/dd/mm') {
                month = tmp[2];
                day = tmp[1];
                year = parseInt(tmp[0]) + 1900;
            }
            if (tmp2 === 'yy/d/m') {
                month = tmp[2];
                day = tmp[1];
                year = parseInt(tmp[0]) + 1900;
            }
            if (tmp2 === 'yy/mm/dd') {
                month = tmp[1];
                day = tmp[2];
                year = parseInt(tmp[0]) + 1900;
            }
            if (tmp2 === 'yy/m/d') {
                month = tmp[1];
                day = tmp[2];
                year = parseInt(tmp[0]) + 1900;
            }
        }
        if (!isInt(year)) return false;
        if (!isInt(month)) return false;
        if (!isInt(day)) return false;
        year = +year;
        month = +month;
        day = +day;
        dt = new Date(year, month - 1, day);
        // do checks
        if (month == null) return false;
        if (String(dt) == 'Invalid Date') return false;
        if ((dt.getMonth() + 1 !== month) || (dt.getDate() !== day) || (dt.getFullYear() !== year)) return false;
        if (retDate === true) return dt;
        else return true;
    }

    function isTime(val, retTime) {
        // Both formats 10:20pm and 22:20
        if (val == null) return false;
        var max, pm;
        // -- process american format
        val = String(val);
        val = val.toUpperCase();
        pm = val.indexOf('PM') >= 0;
        var ampm = (pm || val.indexOf('AM') >= 0);
        if (ampm) max = 12;
        else max = 24;
        val = val.replace('AM', '').replace('PM', '');
        val = $.trim(val);
        // ---
        var tmp = val.split(':');
        var h = parseInt(tmp[0] || 0),
            m = parseInt(tmp[1] || 0);
        // accept edge case: 3PM is a good timestamp, but 3 (without AM or PM) is NOT:
        if ((!ampm || tmp.length !== 1) && tmp.length !== 2) {
            return false;
        }
        if (tmp[0] === '' || h < 0 || h > max || !this.isInt(tmp[0]) || tmp[0].length > 2) {
            return false;
        }
        if (tmp.length === 2 && (tmp[1] === '' || m < 0 || m > 59 || !this.isInt(tmp[1]) || tmp[1].length !== 2)) {
            return false;
        }
        // check the edge cases: 12:01AM is ok, as is 12:01PM, but 24:01 is NOT ok while 24:00 is (midnight; equivalent to 00:00).
        // meanwhile, there is 00:00 which is ok, but 0AM nor 0PM are okay, while 0:01AM and 0:00AM are.
        if (!ampm && max === h && m !== 0) {
            return false;
        }
        if (ampm && tmp.length === 1 && h === 0) {
            return false;
        }

        if (retTime === true) {
            if (pm) h += 12;
            return {
                hours: h,
                minutes: m
            };
        }
        return true;
    }

    function isDateTime(val, format, retDate) {
        if (w2utils.use_momentjs) {
            var dt = moment(val, format);
            var valid = dt.isValid();
            if (valid && (retDate === true)) {
                return dt.clone().toDate();
            }
            return valid;
        }
        // TODO: perform time check, too
        format = format.split('|')[0];
        val = val.split(' ')[0];
        //console.log("isDateTime() - " + val + " / " + format);
        return isDate(val, format, retDate);
    }

    function age(dateStr) {
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';
        var d1 = new Date(dateStr);
        if (w2utils.isInt(dateStr)) d1 = new Date(Number(dateStr)); // for unix timestamps
        if (String(d1) == 'Invalid Date') return '';

        var d2 = new Date();
        var sec = (d2.getTime() - d1.getTime()) / 1000;
        var amount = '';
        var type = '';
        if (sec < 0) {
            amount = '<span style="color: #aaa">0 sec</span>';
            type = '';
        } else if (sec < 60) {
            amount = Math.floor(sec);
            type = 'sec';
            if (sec < 0) {
                amount = 0;
                type = 'sec';
            }
        } else if (sec < 60 * 60) {
            amount = Math.floor(sec / 60);
            type = 'min';
        } else if (sec < 24 * 60 * 60) {
            amount = Math.floor(sec / 60 / 60);
            type = 'hour';
        } else if (sec < 30 * 24 * 60 * 60) {
            amount = Math.floor(sec / 24 / 60 / 60);
            type = 'day';
        } else if (sec < 365 * 24 * 60 * 60) {
            amount = Math.floor(sec / 30 / 24 / 60 / 60 * 10) / 10;
            type = 'month';
        } else if (sec < 365 * 4 * 24 * 60 * 60) {
            amount = Math.floor(sec / 365 / 24 / 60 / 60 * 10) / 10;
            type = 'year';
        } else if (sec >= 365 * 4 * 24 * 60 * 60) {
            // factor in leap year shift (only older then 4 years)
            amount = Math.floor(sec / 365.25 / 24 / 60 / 60 * 10) / 10;
            type = 'year';
        }
        return amount + ' ' + type + (amount > 1 ? 's' : '');
    }

    function date(dateStr,span) {
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';
        var d1 = new Date(dateStr);
        if (w2utils.isInt(dateStr)) d1 = new Date(Number(dateStr)); // for unix timestamps
        if (String(d1) == 'Invalid Date') return '';

        var months = w2utils.settings.shortmonths;
        var d2 = new Date(); // today
        var d3 = new Date();
        d3.setTime(d3.getTime() - 86400000); // yesterday

        var dd1 = months[d1.getMonth()] + ' ' + d1.getDate() + ', ' + d1.getFullYear();
        var dd2 = months[d2.getMonth()] + ' ' + d2.getDate() + ', ' + d2.getFullYear();
        var dd3 = months[d3.getMonth()] + ' ' + d3.getDate() + ', ' + d3.getFullYear();

        var time = (d1.getHours() - (d1.getHours() > 12 ? 12 : 0)) + ':' + (d1.getMinutes() < 10 ? '0' : '') + d1.getMinutes() + ' ' + (d1.getHours() >= 12 ? 'pm' : 'am');
        var time2 = (d1.getHours() - (d1.getHours() > 12 ? 12 : 0)) + ':' + (d1.getMinutes() < 10 ? '0' : '') + d1.getMinutes() + ':' + (d1.getSeconds() < 10 ? '0' : '') + d1.getSeconds() + ' ' + (d1.getHours() >= 12 ? 'pm' : 'am');
        var dsp = dd1;
        if (dd1 === dd2) dsp = time;
        if (dd1 === dd3) dsp = w2utils.lang('Yesterday');
        if(span){
            return '<span title="' + dd1 + ' ' + time2 + '">' + dsp + '</span>';
        }else{
            return dsp;
        }
    }

    function formatSize(sizeStr) {
        if (!w2utils.isFloat(sizeStr) || sizeStr === '') return '';
        sizeStr = parseFloat(sizeStr);
        if (sizeStr === 0) return 0;
        var sizes = ['Bt', 'KB', 'MB', 'GB', 'TB'];
        var i = parseInt(Math.floor(Math.log(sizeStr) / Math.log(1024)));
        return (Math.floor(sizeStr / Math.pow(1024, i) * 10) / 10).toFixed(i === 0 ? 0 : 1) + ' ' + sizes[i];
    }

    function formatNumber(val, groupSymbol, decimalSymbol) {
        var ret = '';
        if (groupSymbol == null) groupSymbol = w2utils.settings.groupSymbol || ',';
        if (decimalSymbol == null) decimalSymbol = w2utils.settings.decimalSymbol || '.';
        // check if this is a number
        if (w2utils.isFloat(val) || w2utils.isInt(val) || w2utils.isMoney(val)) {
            tmp = String(val).split('.');
            ret = String(tmp[0]).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + groupSymbol);
            if (tmp[1] != null) ret += decimalSymbol + tmp[1];
        }
        return ret;
    }

    function formatDate(dateStr, format) { // IMPORTANT dateStr HAS TO BE valid JavaScript Date String
        if (!format) format = this.settings.date_format;
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';

        var dt = new Date(dateStr);
        if (w2utils.isInt(dateStr)) dt = new Date(Number(dateStr)); // for unix timestamps
        if (String(dt) == 'Invalid Date') return '';

        var year = dt.getFullYear();
        var month = dt.getMonth();
        var date = dt.getDate();
        return format.toLowerCase()
            .replace('month', w2utils.settings.fullmonths[month])
            .replace('mon', w2utils.settings.shortmonths[month])
            .replace(/yyyy/g, year)
            .replace(/yyy/g, year)
            .replace(/yy/g, year > 2000 ? 100 + parseInt(String(year).substr(2)) : String(year).substr(2))
            .replace(/(^|[^a-z$])y/g, '$1' + year) // only y's that are not preceeded by a letter
            .replace(/mm/g, (month + 1 < 10 ? '0' : '') + (month + 1))
            .replace(/dd/g, (date < 10 ? '0' : '') + date)
            .replace(/th/g, (date == 1 ? 'st' : 'th'))
            .replace(/th/g, (date == 2 ? 'nd' : 'th'))
            .replace(/th/g, (date == 3 ? 'rd' : 'th'))
            .replace(/(^|[^a-z$])m/g, '$1' + (month + 1)) // only y's that are not preceeded by a letter
            .replace(/(^|[^a-z$])d/g, '$1' + date); // only y's that are not preceeded by a letter
    }

    function formatTime(dateStr, format) { // IMPORTANT dateStr HAS TO BE valid JavaScript Date String
        var months = w2utils.settings.shortmonths;
        var fullMonths = w2utils.settings.fullmonths;
        if (!format) format = this.settings.time_format;
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';

        var dt = new Date(dateStr);
        if (w2utils.isInt(dateStr)) dt = new Date(Number(dateStr)); // for unix timestamps
        if (w2utils.isTime(dateStr)) {
            var tmp = w2utils.isTime(dateStr, true);
            dt = new Date();
            dt.setHours(tmp.hours);
            dt.setMinutes(tmp.minutes);
        }
        if (String(dt) == 'Invalid Date') return '';

        var type = 'am';
        var hour = dt.getHours();
        var h24 = dt.getHours();
        var min = dt.getMinutes();
        var sec = dt.getSeconds();
        if (min < 10) min = '0' + min;
        if (sec < 10) sec = '0' + sec;
        if (format.indexOf('am') !== -1 || format.indexOf('pm') !== -1) {
            if (hour >= 12) type = 'pm';
            if (hour > 12) hour = hour - 12;
        }
        return format.toLowerCase()
            .replace('am', type)
            .replace('pm', type)
            .replace('hhh', (hour < 10 ? '0' + hour : hour))
            .replace('hh24', (h24 < 10 ? '0' + h24 : h24))
            .replace('h24', h24)
            .replace('hh', hour)
            .replace('mm', min)
            .replace('mi', min)
            .replace('ss', sec)
            .replace(/(^|[^a-z$])h/g, '$1' + hour) // only y's that are not preceeded by a letter
            .replace(/(^|[^a-z$])m/g, '$1' + min) // only y's that are not preceeded by a letter
            .replace(/(^|[^a-z$])s/g, '$1' + sec); // only y's that are not preceeded by a letter
    }

    function formatDateTime(dateStr, format) {
        var fmt;
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';
        if (typeof format !== 'string') {
            fmt = [this.settings.date_format, this.settings.time_format];
        } else {
            fmt = format.split('|');
        }
        return this.formatDate(dateStr, fmt[0]) + ' ' + this.formatTime(dateStr, fmt[1]);
    }

    function stripTags(html) {
        if (html === null) return html;
        switch (typeof html) {
            case 'number':
                break;
            case 'string':
                html = $.trim(String(html).replace(/(<([^>]+)>)/ig, ""));
                break;
            case 'object':
                for (var a in html) html[a] = this.stripTags(html[a]);
                break;
        }
        return html;
    }

    function encodeTags(html) {
        if (html === null) return html;
        switch (typeof html) {
            case 'number':
                break;
            case 'string':
                html = String(html).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
                break;
            case 'object':
                for (var a in html) html[a] = this.encodeTags(html[a]);
                break;
        }
        return html;
    }

    function escapeId(id) {
        if (id === '' || id == null) return '';
        return String(id).replace(/([;&,\.\+\*\~'`:"\!\^#$%@\[\]\(\)=<>\|\/? {}\\])/g, '\\$1');
    }

    function base64encode(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        input = utf8_encode(input);

        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        }

        function utf8_encode(string) {
            string = String(string).replace(/\r\n/g, "\n");
            var utftext = "";

            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
            }
            return utftext;
        }

        return output;
    }

    function base64decode(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {
            enc1 = keyStr.indexOf(input.charAt(i++));
            enc2 = keyStr.indexOf(input.charAt(i++));
            enc3 = keyStr.indexOf(input.charAt(i++));
            enc4 = keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }
        }
        output = utf8_decode(output);

        function utf8_decode(utftext) {
            var string = "";
            var i = 0;
            var c = 0,
                c2, c3;

            while (i < utftext.length) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if ((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }

            return string;
        }

        return output;
    }

    function transition(div_old, div_new, type, callBack) {
        var width = $(div_old).width();
        var height = $(div_old).height();
        var time = 0.5;

        if (!div_old || !div_new) {
            console.log('ERROR: Cannot do transition when one of the divs is null');
            return;
        }

        div_old.parentNode.style.cssText += cross('perspective', '700px') + '; overflow: hidden;';
        div_old.style.cssText += '; position: absolute; z-index: 1019; ' + cross('backface-visibility', 'hidden');
        div_new.style.cssText += '; position: absolute; z-index: 1020; ' + cross('backface-visibility', 'hidden');

        switch (type) {
            case 'slide-left':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(' + width + 'px, 0, 0)', 'translate(' + width + 'px, 0)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + ';' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + ';' + cross('transform', 'translate3d(-' + width + 'px, 0, 0)', 'translate(-' + width + 'px, 0)');
                }, 1);
                break;

            case 'slide-right':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(-' + width + 'px, 0, 0)', 'translate(-' + width + 'px, 0)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0px, 0, 0)', 'translate(0px, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(' + width + 'px, 0, 0)', 'translate(' + width + 'px, 0)');
                }, 1);
                break;

            case 'slide-down':
                // init divs
                div_old.style.cssText += 'overflow: hidden; z-index: 1; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; z-index: 0; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, ' + height + 'px, 0)', 'translate(0, ' + height + 'px)');
                }, 1);
                break;

            case 'slide-up':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, ' + height + 'px, 0)', 'translate(0, ' + height + 'px)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                }, 1);
                break;

            case 'flip-left':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(-180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(180deg)');
                }, 1);
                break;

            case 'flip-right':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(-180deg)');
                }, 1);
                break;

            case 'flip-down':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(-180deg)');
                }, 1);
                break;

            case 'flip-up':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(-180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(180deg)');
                }, 1);
                break;

            case 'pop-in':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; ' + cross('transform', 'scale(.8)') + '; opacity: 0;';
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'scale(1)') + '; opacity: 1;';
                    div_old.style.cssText += cross('transition', time + 's') + ';';
                }, 1);
                break;

            case 'pop-out':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; ' + cross('transform', 'scale(1)') + '; opacity: 1;';
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; opacity: 0;';
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; opacity: 1;';
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'scale(1.7)') + '; opacity: 0;';
                }, 1);
                break;

            default:
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; opacity: 0;';
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; opacity: 1;';
                    div_old.style.cssText += cross('transition', time + 's');
                }, 1);
                break;
        }

        setTimeout(function() {
            if (type === 'slide-down') {
                $(div_old).css('z-index', '1019');
                $(div_new).css('z-index', '1020');
            }
            if (div_new) {
                $(div_new).css({
                    'opacity': '1'
                }).css(w2utils.cssPrefix({
                    'transition': '',
                    'transform': '',
                    'backface-visibility': ''
                }));
            }
            if (div_old) {
                $(div_old).css({
                    'opacity': '1'
                }).css(w2utils.cssPrefix({
                    'transition': '',
                    'transform': '',
                    'backface-visibility': ''
                }));
                if (div_old.parentNode) $(div_old.parentNode).css(w2utils.cssPrefix('perspective', ''));
            }
            if (typeof callBack === 'function') callBack();
        }, time * 1000);

        function cross(property, value, none_webkit_value) {
            var isWebkit = !!window.webkitURL; // jQuery no longer supports $.browser - RR
            if (!isWebkit && typeof none_webkit_value !== 'undefined') value = none_webkit_value;
            return ';' + property + ': ' + value + '; -webkit-' + property + ': ' + value + '; -moz-' + property + ': ' + value + '; ' +
                '-ms-' + property + ': ' + value + '; -o-' + property + ': ' + value + ';';
        }
    }

    function lock(box, msg, spinner) {
        var options = {};
        if (typeof msg === 'object') {
            options = msg;
        } else {
            options.msg = msg;
            options.spinner = spinner;
        }
        if (!options.msg && options.msg !== 0) options.msg = '';
        w2utils.unlock(box);
        $(box).prepend(
            '<div class="w2ui-lock"></div>' +
            '<div class="w2ui-lock-msg"></div>'
        );
        var $lock = $(box).find('.w2ui-lock');
        var mess = $(box).find('.w2ui-lock-msg');
        if (!options.msg) mess.css({
            'background-color': 'transparent',
            'border': '0px'
        });
        if (options.spinner === true) options.msg = '<div class="w2ui-spinner" ' + (!options.msg ? 'style="width: 35px; height: 35px"' : '') + '></div>' + options.msg;
        if (options.opacity != null) $lock.css('opacity', options.opacity);
        if (typeof $lock.fadeIn == 'function') {
            $lock.fadeIn(200);
            mess.html(options.msg).fadeIn(200);
        } else {
            $lock.show();
            mess.html(options.msg).show(0);
        }
        // hide all tags (do not hide overlays as the form can be in overlay)
        $().w2tag();
    }

    function unlock(box, speed) {
        if (isInt(speed)) {
            $(box).find('.w2ui-lock').fadeOut(speed);
            setTimeout(function() {
                $(box).find('.w2ui-lock').remove();
                $(box).find('.w2ui-lock-msg').remove();
            }, speed);
        } else {
            $(box).find('.w2ui-lock').remove();
            $(box).find('.w2ui-lock-msg').remove();
        }
    }

    function getSize(el, type) {
        var $el = $(el);
        var bwidth = {
            left: parseInt($el.css('border-left-width')) || 0,
            right: parseInt($el.css('border-right-width')) || 0,
            top: parseInt($el.css('border-top-width')) || 0,
            bottom: parseInt($el.css('border-bottom-width')) || 0
        };
        var mwidth = {
            left: parseInt($el.css('margin-left')) || 0,
            right: parseInt($el.css('margin-right')) || 0,
            top: parseInt($el.css('margin-top')) || 0,
            bottom: parseInt($el.css('margin-bottom')) || 0
        };
        var pwidth = {
            left: parseInt($el.css('padding-left')) || 0,
            right: parseInt($el.css('padding-right')) || 0,
            top: parseInt($el.css('padding-top')) || 0,
            bottom: parseInt($el.css('padding-bottom')) || 0
        };
        switch (type) {
            case 'top':
                return bwidth.top + mwidth.top + pwidth.top;
            case 'bottom':
                return bwidth.bottom + mwidth.bottom + pwidth.bottom;
            case 'left':
                return bwidth.left + mwidth.left + pwidth.left;
            case 'right':
                return bwidth.right + mwidth.right + pwidth.right;
            case 'width':
                return bwidth.left + bwidth.right + mwidth.left + mwidth.right + pwidth.left + pwidth.right + parseInt($el.width());
            case 'height':
                return bwidth.top + bwidth.bottom + mwidth.top + mwidth.bottom + pwidth.top + pwidth.bottom + parseInt($el.height());
            case '+width':
                return bwidth.left + bwidth.right + mwidth.left + mwidth.right + pwidth.left + pwidth.right;
            case '+height':
                return bwidth.top + bwidth.bottom + mwidth.top + mwidth.bottom + pwidth.top + pwidth.bottom;
        }
        return 0;
    }

    function lang(phrase) {
        var translation = this.settings.phrases[phrase];
        if (translation == null) return phrase;
        else return translation;
    }

    function locale(locale) {
        if (!locale) locale = 'en-us';
        if (typeof locale === 'object') {
            w2utils.settings = $.extend(true, w2utils.settings, locale);
            // apply translation to some prototype functions
            var p = w2obj.grid.prototype;
            for (var b in p.buttons) {
                p.buttons[b].caption = w2utils.lang(p.buttons[b].caption);
                p.buttons[b].hint = w2utils.lang(p.buttons[b].hint);
            }
            p.msgDelete = w2utils.lang(p.msgDelete);
            p.msgNotJSON = w2utils.lang(p.msgNotJSON);
            p.msgRefresh = w2utils.lang(p.msgRefresh);
        } else {
            if (locale.length === 5) locale = 'locale/' + locale + '.json';

            // clear phrases from language before
            w2utils.settings.phrases = {};

            // load from the file
            $.ajax({
                url: locale,
                type: "GET",
                dataType: "JSON",
                async: false,
                cache: false,
                success: function(data, status, xhr) {
                    w2utils.settings = $.extend(true, w2utils.settings, data);
                    // apply translation to some prototype functions
                    var p = w2obj.grid.prototype;
                    for (var b in p.buttons) { // buttons is an object
                        p.buttons[b].caption = w2utils.lang(p.buttons[b].caption);
                        p.buttons[b].hint = w2utils.lang(p.buttons[b].hint);
                    }
                    p.msgDelete = w2utils.lang(p.msgDelete);
                    p.msgNotJSON = w2utils.lang(p.msgNotJSON);
                    p.msgRefresh = w2utils.lang(p.msgRefresh);
                },
                error: function(xhr, status, msg) {
                    console.log('ERROR: Cannot load locale ' + locale);
                }
            });
        }
    }

    function scrollBarSize() {
        if (tmp.scrollBarSize) return tmp.scrollBarSize;
        var html =
            '<div id="_scrollbar_width" style="position: absolute; top: -300px; width: 100px; height: 100px; overflow-y: scroll;">' +
            '    <div style="height: 120px">1</div>' +
            '</div>';
        $('body').append(html);
        tmp.scrollBarSize = 100 - $('#_scrollbar_width > div').width();
        $('#_scrollbar_width').remove();
        if (String(navigator.userAgent).indexOf('MSIE') >= 0) tmp.scrollBarSize = tmp.scrollBarSize / 2; // need this for IE9+
        return tmp.scrollBarSize;
    }


    function checkName(params, component) { // was w2checkNameParam
        if (!params || typeof params.name === 'undefined') {
            console.log('ERROR: The parameter "name" is required but not supplied in $().' + component + '().');
            return false;
        }
        if (typeof w2ui[params.name] !== 'undefined') {
            console.log('ERROR: The parameter "name" is not unique. There are other objects already created with the same name (obj: ' + params.name + ').');
            return false;
        }
        if (!w2utils.isAlphaNumeric(params.name)) {
            console.log('ERROR: The parameter "name" has to be alpha-numeric (a-z, 0-9, dash and underscore). ');
            return false;
        }
        return true;
    }

    function checkUniqueId(id, items, itemsDecription, objName) { // was w2checkUniqueId
        if (!$.isArray(items)) items = [items];
        for (var i = 0; i < items.length; i++) {
            if (items[i].id === id) {
                console.log('ERROR: The parameter "id=' + id + '" is not unique within the current ' + itemsDecription + '. (obj: ' + objName + ')');
                return false;
            }
        }
        return true;
    }

    function parseRoute(route) {
        var keys = [];
        var path = route
            .replace(/\/\(/g, '(?:/')
            .replace(/\+/g, '__plus__')
            .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional) {
                keys.push({
                    name: key,
                    optional: !!optional
                });
                slash = slash || '';
                return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '');
            })
            .replace(/([\/.])/g, '\\$1')
            .replace(/__plus__/g, '(.+)')
            .replace(/\*/g, '(.*)');
        return {
            path: new RegExp('^' + path + '$', 'i'),
            keys: keys
        };
    }

    function cssPrefix(field, value, returnString) {
        var css = {};
        var newCSS = {};
        var ret = '';
        if (!$.isPlainObject(field)) {
            css[field] = value;
        } else {
            css = field;
            if (value === true) returnString = true;
        }
        for (var c in css) {
            newCSS[c] = css[c];
            newCSS['-webkit-' + c] = css[c];
            newCSS['-moz-' + c] = css[c].replace('-webkit-', '-moz-');
            newCSS['-ms-' + c] = css[c].replace('-webkit-', '-ms-');
            newCSS['-o-' + c] = css[c].replace('-webkit-', '-o-');
        }
        if (returnString === true) {
            for (var c in newCSS) {
                ret += c + ': ' + newCSS[c] + '; ';
            }
        } else {
            ret = newCSS;
        }
        return ret;
    }

    function escapeRegExp(str) {
        var txt = str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        return txt;
    }

    function validate(model, el) {
        var errors = modelErrors(model);
        if (errors.length > 0) {
            validateRaw(el, errors);
            return false;
        }
        return true;
    }

    function modelErrors(model) {
        var errors = [],
            eventdata;
        $().w2tag();
        var fields;

        if (typeof(model.fields) === 'function')
            fields = model.fields();
        else {
            fields = model.fields;
        }
        for (var f in fields) {
            var field = fields[f];
            if (model.get(field.name) === null) {
                model.set(field.name, '',{silent:true});
            }
            switch (field.type) {
                case 'int':
                    if (model.get(field.name) && !w2utils.isInt(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not an integer')
                        });
                    }
                    break;
                case 'float':
                    if (model.get(field.name) && !w2utils.isFloat(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a float')
                        });
                    }
                    break;
                case 'money':
                    if (this.record[field.name] && !w2utils.isMoney(this.record[field.name])) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not in money format')
                        });
                    }
                    break;
                case 'color':
                case 'hex':
                    if (model.get(field.name) && !w2utils.isHex(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a hex number')
                        });
                    }
                    break;
                case 'email':
                    if (model.get(field.name) && !w2utils.isEmail(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a valid email')
                        });
                    }
                    break;
                case 'checkbox':
                    // convert true/false
                    if (model.get(field.name) === true) {
                        model.set(field.name, 1);
                    } else {
                        model.set(field.name, 0);
                    }
                    break;
                case 'date':
                    // format date before submit
                    //if (!field.options.format) field.options.format = w2utils.settings.date_format;
                    if (model.get(field.name) && !w2utils.isDate(model.get(field.name), w2utils.settings.date_format)) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a valid date') /*+': ' + field.options.format*/
                        });
                    } else {}
                    break;
                case 'list':
                case 'combo':
                    break;
                case 'enum':
                    break;
                case 'model':
                    var mdl = model.get(field.name);
                    var childerrors = w2utils.modelErrors(mdl);
                    errors = _.union(errors, childerrors);
                    break;
                case 'collection':
                    var ok = true;
                    $.each(model.get(field.name).models, function(i, mdl) {
                        var childerrors = w2utils.modelErrors(mdl);
                        errors = _.union(errors, childerrors);
                    });
                    // if (!ok) {
                    //     errors.push({
                    //         field: field,
                    //         error: w2utils.lang('Child not valid') /*+': ' + field.options.format*/
                    //     });
                    // }
                    break;
            }
            // === check required - if field is '0' it should be considered not empty
            var val = model.get(field.name);
            if (field.required && (val === '' || (val!==0 && !val) || ($.isArray(val) && val.length === 0) || ($.isPlainObject(val) && $.isEmptyObject(val)))) {
                errors.push({
                    name: field.el.replace('#', ''),
                    message: w2utils.lang('Required field')
                });
            }
            if (field.equalto && model.get(field.name) != model.get(field.name)) {
                errors.push({
                    name: field.el.replace('#', ''),
                    message: w2utils.lang('Field should be equal to ') + field.equalto
                });
            }
        }
        // event before
        eventData = {
            phase: 'before',
            target: model.id,
            type: 'validate',
            errors: errors
        };
        //if (eventData.isCancelled === true) return;
        // show error

        if (false)
            for (var e in eventData.errors) {
                var err = eventData.errors[e];
                if (err.field.type == 'radio') { // for radio and checkboxes
                    $($(err.field.el).parents('div')[0]).w2tag(err.error, {
                        'class': 'w2ui-error'
                    });
                } else if (['enum', 'file'].indexOf(err.field.type) != -1) {
                    (function(err) {
                        setTimeout(function() {
                            var fld = $(err.field.el).data('w2field').helpers.multi;
                            $(err.field.el).w2tag(err.error);
                            $(fld).addClass('w2ui-error');
                        }, 1);
                    })(err);
                } else if (err.field.type == 'collection') {
                    continue;
                } else {
                    if ($(err.field.el).length > 0) {
                        $(err.field.el).w2tag(err.error, {
                            'class': 'w2ui-error',
                            //'parentEl': $(err.field.el).parents('.w2ui-page')
                        });
                    }
                }

            }
            // event after
        model.trigger($.extend(eventData, {
            phase: 'after'
        }));
        return errors;
    }


    function validateRaw(el, errors) {
        if (true)
            for (var e in errors) {
                var err = errors[e];
                var type = "";
                var realfield = $(el.find('#' + err.name)).w2field();
                var fname = '#' + err.name;
                var parent = $(fname).parent();
                //if(!field){
                var field = $(el.find('#' + err.name));

                type = realfield ? realfield.type : "";
                if (realfield) {
                    if (type == 'radio') { // for radio and checkboxes
                        $(realfield.el).parents('div')[0].w2tag(err.message, {
                            "class": 'w2ui-error',
                            parentEl: parent
                        });
                    } else if (['enum', 'file'].indexOf(type) != -1) {
                        //(function(err) {
                        //    setTimeout(function() {
                        var fld = realfield.helpers.multi;
                        $(realfield.el).w2tag(err.message, {
                            parentEl: parent,
                            onHide: function(e) {
                                $(fld).removeClass('w2ui-error');
                            }
                        });
                        $(fld).addClass('w2ui-error');
                        //    }, 1);
                        //})(err);
                    } else {
                        $(realfield.el).w2tag(err.message, {
                            "class": 'w2ui-error',
                            parentEl: parent
                        });
                    }
                } else {
                    field.w2tag(err.message, {
                        "class": 'w2ui-error',
                        parentEl: parent
                    });
                }
            }
    }

})();

/***********************************************************
 *  Generic Event Object
 *  --- This object is reused across all other
 *  --- widgets in w2ui.
 *
 *********************************************************/

w2utils.event = {
    on: function(eventData, handler) {
        if (!$.isPlainObject(eventData)) eventData = {
            type: eventData
        };
        eventData = $.extend({
            type: null,
            execute: 'before',
            target: null,
            onComplete: null
        }, eventData);

        if (!eventData.type) {
            console.log('ERROR: You must specify event type when calling .on() method of ' + this.name);
            return;
        }
        if (!handler) {
            console.log('ERROR: You must specify event handler function when calling .on() method of ' + this.name);
            return;
        }
        if (!$.isArray(this.handlers)) this.handlers = [];
        this.handlers.push({
            event: eventData,
            handler: handler
        });
    },

    off: function(eventData, handler) {
        if (!$.isPlainObject(eventData)) eventData = {
            type: eventData
        };
        eventData = $.extend({}, {
            type: null,
            execute: 'before',
            target: null,
            onComplete: null
        }, eventData);

        if (!eventData.type) {
            console.log('ERROR: You must specify event type when calling .off() method of ' + this.name);
            return;
        }
        if (!handler) {
            handler = null;
        }
        // remove handlers
        var newHandlers = [];
        for (var h = 0, len = this.handlers.length; h < len; h++) {
            var t = this.handlers[h];
            if ((t.event.type === eventData.type || eventData.type === '*') &&
                (t.event.target === eventData.target || eventData.target === null) &&
                (t.handler === handler || handler === null)) {
                // match
            } else {
                newHandlers.push(t);
            }
        }
        this.handlers = newHandlers;
    },

    trigger: function(eventData) {
        var eventData = $.extend({
            type: null,
            phase: 'before',
            target: null
        }, eventData, {
            isStopped: false,
            isCancelled: false,
            preventDefault: function() {
                this.isCancelled = true;
            },
            stopPropagation: function() {
                this.isStopped = true;
            }
        });
        if (eventData.phase === 'before') eventData.onComplete = null;
        var args, fun, tmp;
        if (eventData.target == null) eventData.target = null;
        if (!$.isArray(this.handlers)) this.handlers = [];
        // process events in REVERSE order
        for (var h = this.handlers.length - 1; h >= 0; h--) {
            var item = this.handlers[h];
            if ((item.event.type === eventData.type || item.event.type === '*') &&
                (item.event.target === eventData.target || item.event.target === null) &&
                (item.event.execute === eventData.phase || item.event.execute === '*' || item.event.phase === '*')) {
                eventData = $.extend({}, item.event, eventData);
                // check handler arguments
                args = [];
                tmp = new RegExp(/\((.*?)\)/).exec(item.handler);
                if (tmp) args = tmp[1].split(/\s*,\s*/);
                if (args.length === 2) {
                    item.handler.call(this, eventData.target, eventData); // old way for back compatibility
                } else {
                    item.handler.call(this, eventData); // new way
                }
                if (eventData.isStopped === true || eventData.stop === true) return eventData; // back compatibility eventData.stop === true
            }
        }
        // main object events
        var funName = 'on' + eventData.type.substr(0, 1).toUpperCase() + eventData.type.substr(1);
        if (eventData.phase === 'before' && typeof this[funName] === 'function') {
            fun = this[funName];
            // check handler arguments
            args = [];
            tmp = new RegExp(/\((.*?)\)/).exec(fun);
            if (tmp) args = tmp[1].split(/\s*,\s*/);
            if (args.length === 2) {
                fun.call(this, eventData.target, eventData); // old way for back compatibility
            } else {
                fun.call(this, eventData); // new way
            }
            if (eventData.isStopped === true || eventData.stop === true) return eventData; // back compatibility eventData.stop === true
        }
        // item object events
        if (eventData.object != null && eventData.phase === 'before' &&
            typeof eventData.object[funName] === 'function') {
            fun = eventData.object[funName];
            // check handler arguments
            args = [];
            tmp = new RegExp(/\((.*?)\)/).exec(fun);
            if (tmp) args = tmp[1].split(/\s*,\s*/);
            if (args.length === 2) {
                fun.call(this, eventData.target, eventData); // old way for back compatibility
            } else {
                fun.call(this, eventData); // new way
            }
            if (eventData.isStopped === true || eventData.stop === true) return eventData;
        }
        // execute onComplete
        if (eventData.phase === 'after' && typeof eventData.onComplete === 'function') eventData.onComplete.call(this, eventData);

        return eventData;
    }
};

/***********************************************************
 *  Common Keyboard Handler. Supported in
 *  - grid
 *  - sidebar
 *  - popup
 *
 *********************************************************/

w2utils.keyboard = (function(obj) {
    // private scope
    var w2ui_name = null;

    obj.active = active;
    obj.clear = clear;

    init();
    return obj;

    function init() {
        $(document).on('keydown', keydown);
        $(document).on('mousedown', mousedown);
    }

    function keydown(event) {
        var tag = event.target.tagName;
        if ($.inArray(tag, ['INPUT', 'SELECT', 'TEXTAREA']) !== -1) return;
        if ($(event.target).prop('contenteditable') === 'true') return;
        if (!w2ui_name) return;
        // pass to appropriate widget
        if (w2ui[w2ui_name] && typeof w2ui[w2ui_name].keydown === 'function') {
            w2ui[w2ui_name].keydown.call(w2ui[w2ui_name], event);
        }
    }

    function mousedown(event) {
        var tag = event.target.tagName;
        var els = $(event.target).parents('.w2ui-grid, .w2ui-sidebar, .w2ui-popup, .w2ui-keyboard');
        if (els.length > 0) {
            var name = els.attr('name');
            var obj = w2ui[name];
            if (name != w2ui_name) {
                if (clear(event) === false) return; // event cancelled
                if (active(name, event) === false) return; // event cancelled
            }
            if (obj && obj.keyboard) w2ui_name = name;
        } else {
            clear(event);
        }
    }

    function active(new_w2ui_name, event) {
        if (new_w2ui_name == null) return w2ui_name;
        var obj = w2ui[new_w2ui_name];
        if (obj && obj.focus) {
            if (obj.focus.call(obj, event) === false) return false;
        }
        w2ui_name = new_w2ui_name;
        return true;
    }

    function clear(event) {
        if (w2ui_name != null && w2ui[w2ui_name] && w2ui[w2ui_name].blur) {
            if (w2ui[w2ui_name].blur.call(w2ui[w2ui_name], event) === false) return false;
        }
        w2ui_name = null;
        return true;
    }

})({});

/***********************************************************
 *  Commonly used plugins
 *  --- used primarily in grid and form
 *
 *********************************************************/

(function() {

    $.fn.w2render = function(name) {
        if ($(this).length > 0) {
            if (typeof name === 'string' && w2ui[name]) w2ui[name].render($(this)[0]);
            if (typeof name === 'object') name.render($(this)[0]);
        }
    };

    $.fn.w2destroy = function(name) {
        if (!name && this.length > 0) name = this.attr('name');
        if (typeof name === 'string' && w2ui[name]) w2ui[name].destroy();
        if (typeof name === 'object') name.destroy();
    };

    $.fn.w2marker = function() {
        var str = Array.prototype.slice.call(arguments, 0);
        if (str.length == 0 || !str[0]) { // remove marker
            return $(this).each(clearMarkedText);
        } else { // add marker
            return $(this).each(function(index, el) {
                clearMarkedText(index, el);
                for (var s = 0; s < str.length; s++) {
                    var tmp = str[s];
                    if (typeof tmp !== 'string') tmp = String(tmp);
                    // escape regex special chars
                    tmp = tmp.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&").replace(/&/g, '&amp;').replace(/</g, '&gt;').replace(/>/g, '&lt;');
                    var regex = new RegExp(tmp + '(?!([^<]+)?>)', "gi"); // only outside tags
                    el.innerHTML = el.innerHTML.replace(regex, replaceValue);
                }

                function replaceValue(matched) { // mark new
                    return '<span class="w2ui-marker">' + matched + '</span>';
                }
            });
        }

        function clearMarkedText(index, el) {
            while (el.innerHTML.indexOf('<span class="w2ui-marker">') != -1) {
                el.innerHTML = el.innerHTML.replace(/\<span class=\"w2ui\-marker\"\>(.*)\<\/span\>/ig, '$1'); // unmark
            }
        }
    };

    // -- w2tag - appears on the right side from element, there can be multiple on screen at a time

    $.fn.w2tag = function(text, options) {
        if (!$.isPlainObject(options)) options = {};
        if (!$.isPlainObject(options.css)) options.css = {};
        if (typeof options['class'] === 'undefined') options['class'] = '';
        // remove all tags
        if ($(this).length === 0) {
            $('.w2ui-tag').each(function(index, elem) {
                var opt = $(elem).data('options');
                if (opt == null) opt = {};
                $($(elem).data('taged-el')).removeClass(opt['class']);
                clearInterval($(elem).data('timer'));
                $(elem).remove();
            });
            return;
        }
        return $(this).each(function(index, el) {
            // show or hide tag
            var tagOrigID = (options.id ? options.id : el.id);
            var tagID = w2utils.escapeId(tagOrigID);
            if (text === '' || text == null) {
                $('#w2ui-tag-' + tagID).css('opacity', 0);
                // remmove element
                clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                $('#w2ui-tag-' + tagID).remove();
            } else {
                // remove elements
                clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                $('#w2ui-tag-' + tagID).remove();
                // insert
                var parentEl = options.parentEl ? options.parentEl : $('body');
                parentEl.append(
                    '<div id="w2ui-tag-' + tagOrigID + '" class="w2ui-tag ' + ($(el).parents('.w2ui-popup').length > 0 ? 'w2ui-tag-popup' : '') +
                    '" style="' + (options.parentEl ? 'position:fixed' : '') + '"></div>');

                var timer = setInterval(function() {
                    // monitor if destroyed
                    if ($(el).length === 0 || ($(el).offset().left === 0 && $(el).offset().top === 0)) {
                        clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                        tmp_hide();
                        return;
                    }
                    // monitor if moved
                    if ($('#w2ui-tag-' + tagID).data('position') !== ($(el).offset().left + el.offsetWidth) + 'x' + $(el).offset().top) {
                        $('#w2ui-tag-' + tagID).css(w2utils.cssPrefix({
                            'transition': '.2s'
                        })).css({
                            left: ($(el).offset().left + el.offsetWidth + (options.left ? options.left : 0)) + 'px',
                            top: ($(el).offset().top + (options.top ? options.top : 0)) + 'px'
                        }).data('position', ($(el).offset().left + el.offsetWidth) + 'x' + $(el).offset().top);
                    }
                }, 100);
                setTimeout(function() {
                    if (!$(el).offset()) return;
                    $('#w2ui-tag-' + tagID).css({
                            opacity: '1',
                            left: ($(el).offset().left + el.offsetWidth + (options.left ? options.left : 0)) + 'px',
                            top: ($(el).offset().top + (options.top ? options.top : 0)) + 'px'
                        }).html('<div style="margin-top: -2px 0px 0px -2px; white-space: nowrap;"> <div class="w2ui-tag-body">' + text + '</div> </div>')
                        .data('text', text)
                        .data('taged-el', el)
                        .data('options', options)
                        .data('position', ($(el).offset().left + el.offsetWidth) + 'x' + $(el).offset().top)
                        .data('timer', timer);
                    $(el).off('keypress', tmp_hide).on('keypress', tmp_hide).off('change', tmp_hide).on('change', tmp_hide)
                        .css(options.css).addClass(options['class']);
                    if (typeof options.onShow === 'function') options.onShow();
                }, 1);
                var originalCSS = '';
                if ($(el).length > 0) originalCSS = $(el)[0].style.cssText;
                // bind event to hide it
                function tmp_hide() {
                    $tag = $('#w2ui-tag-' + tagID);
                    if ($tag.length <= 0) return;
                    clearInterval($tag.data('timer'));
                    $tag.remove();
                    $(el).off('keypress', tmp_hide).removeClass(options['class']);
                    if ($(el).length > 0) $(el)[0].style.cssText = originalCSS;
                    if (typeof options.onHide === 'function') options.onHide();
                }
            }
        });
    };

    // -- w2tag - appears on the right side from element, there can be multiple on screen at a time

    $.fn.w2error = function(text, options) {
        if (!$.isPlainObject(options)) options = {};
        if (!$.isPlainObject(options.css)) options.css = {};
        if (typeof options['class'] === 'undefined') options['class'] = '';
        // remove all tags
        if ($(this).length === 0) {
            $('.w2ui-tag').each(function(index, elem) {
                var opt = $(elem).data('options');
                if (opt == null) opt = {};
                $($(elem).data('taged-el')).removeClass(opt['class']);
                $(elem).remove();
            });
            return;
        }
        return $(this).each(function(index, el) {
            // show or hide tag
            var tagOrigID = (options.id ? options.id : el.id);
            var tagID = w2utils.escapeId(tagOrigID);
            if (text === '' || text == null) {
                $('#w2ui-tag-' + tagID).css('opacity', 0);
                // remmove element
                clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                $('#w2ui-tag-' + tagID).remove();
            } else {
                $('#w2ui-tag-' + tagID).remove();
                // insert
                var parentEl = options.parentEl;
                parentEl.append(
                    '<div id="w2ui-tag-' + tagOrigID + '" class="w2ui-tag ' + ($(el).parents('.w2ui-popup').length > 0 ? 'w2ui-tag-popup' : '') +
                    '" style=""></div>');
                $('#w2ui-tag-' + tagID).css({
                        left: $(el).offsetWidth(),
                        top: 0,
                        opacity: '1'
                    }).html('<div style="margin-top: -2px 0px 0px -2px; white-space: nowrap;"> <div class="w2ui-tag-body">' + text + '</div> </div>')
                    .data('text', text)
                    .data('taged-el', el)
                    .data('options', options);

            }
        });
    };

    // w2overlay - appears under the element, there can be only one at a time

    $.fn.w2overlay = function(html, options) {
        var obj = this;
        var name = '';
        var defaults = {
            name: null, // it not null, then allows multiple concurent overlays
            html: '', // html text to display
            align: 'none', // can be none, left, right, both
            left: 0, // offset left
            top: 0, // offset top
            tipLeft: 30, // tip offset left
            width: 0, // fixed width
            height: 0, // fixed height
            maxWidth: null, // max width if any
            maxHeight: null, // max height if any
            style: '', // additional style for main div
            'class': '', // additional class name for main div
            onShow: null, // event on show
            onHide: null, // event on hide
            openAbove: false, // show abover control
            tmp: {}
        };
        if (arguments.length == 1) {
            if (typeof html == 'object') {
                options = html;
            } else {
                options = {
                    html: html
                };
            }
        }
        if (arguments.length == 2) options.html = html;
        if (!$.isPlainObject(options)) options = {};
        options = $.extend({}, defaults, options);
        if (options.name) name = '-' + options.name;
        // if empty then hide
        var tmp_hide;
        if (this.length === 0 || options.html === '' || options.html == null) {
            if ($('#w2ui-overlay' + name).length > 0) {
                tmp_hide = $('#w2ui-overlay' + name)[0].hide;
                if (typeof tmp_hide === 'function') tmp_hide();
            } else {
                $('#w2ui-overlay' + name).remove();
            }
            return $(this);
        }
        if ($('#w2ui-overlay' + name).length > 0) {
            tmp_hide = $('#w2ui-overlay' + name)[0].hide;
            $(document).off('click', tmp_hide);
            if (typeof tmp_hide === 'function') tmp_hide();
        }
        $('body').append(
            '<div id="w2ui-overlay' + name + '" style="display: none"' +
            '        class="w2ui-reset w2ui-overlay ' + ($(this).parents('.w2ui-popup, .w2ui-overlay-popup').length > 0 ? 'w2ui-overlay-popup' : '') + '">' +
            '    <style></style>' +
            '    <div style="' + options.style + '" class="' + options['class'] + '"></div>' +
            '</div>'
        );
        // init
        var div1 = $('#w2ui-overlay' + name);



        var div2 = div1.find(' > div');
        div2.html(options.html);
        // pick bg color of first div
        var bc = div2.css('background-color');
        if (bc != null && bc !== 'rgba(0, 0, 0, 0)' && bc !== 'transparent') div1.css('background-color', bc);

        div1.data('element', obj.length > 0 ? obj[0] : null)
            .data('options', options)
            .data('position', $(obj).offset().left + 'x' + $(obj).offset().top)
            .fadeIn('fast')
            .on('click', function(event) {
                // if there is label for input, it will produce 2 click events
                if (event.target.tagName == 'LABEL') event.stopPropagation();
            })
            .on('mousedown', function(event) {
                $('#w2ui-overlay' + name).data('keepOpen', true);
                if (['INPUT', 'TEXTAREA', 'SELECT'].indexOf(event.target.tagName) == -1) event.preventDefault();
            });
        div1[0].hide = hide;
        div1[0].resize = resize;

        // need time to display
        resize();
        setTimeout(function() {
            resize();
            $(document).off('click', hide).on('click', hide);
            if (typeof options.onShow === 'function') options.onShow();
            /**
             * modified
             * if we have a hide el we attach click event on hideEl
             * @param  {[type]} options &&            options.hideEl [description]
             * @return {[type]}         [description]
             */
            if (options && options.hideEl) {
                $(options.hideEl).off('click').on('click',
                    function() {
                        hide();
                    });
            }
        }, 10);

        monitor();
        return $(this);

        // monitor position
        function monitor() {
            var tmp = $('#w2ui-overlay' + name);
            if (tmp.data('element') !== obj[0]) return; // it if it different overlay
            if (tmp.length === 0) return;
            var pos = $(obj).offset().left + 'x' + $(obj).offset().top;
            if (tmp.data('position') !== pos) {
                hide();
            } else {
                setTimeout(monitor, 250);
            }
        }

        // click anywhere else hides the drop down
        function hide() {
            var div1 = $('#w2ui-overlay' + name);
            if (div1.data('keepOpen') === true) {
                div1.removeData('keepOpen');
                return;
            }
            var result;
            if (typeof options.onHide === 'function') result = options.onHide();
            if (result === false) return;
            div1.remove();
            $(document).off('click', hide);
            clearInterval(div1.data('timer'));
        }

        function resize() {
            var div1 = $('#w2ui-overlay' + name);
            var div2 = div1.find(' > div');
            // if goes over the screen, limit height and width
            if (div1.length > 0) {
                div2.height('auto').width('auto');
                // width/height
                var overflowX = false;
                var overflowY = false;
                var h = div2.height();
                var w = div2.width();
                if (options.width && options.width < w) w = options.width;
                if (w < 30) w = 30;
                // if content of specific height
                if (options.tmp.contentHeight) {
                    h = parseInt(options.tmp.contentHeight);
                    div2.height(h);
                    setTimeout(function() {
                        if (h > div2.find('div.menu > table').height()) {
                            div2.find('div.menu').css('overflow-y', 'hidden');
                        }
                    }, 1);
                    setTimeout(function() {
                        div2.find('div.menu').css('overflow-y', 'auto');
                    }, 10);
                }
                if (options.tmp.contentWidth) {
                    w = parseInt(options.tmp.contentWidth);
                    div2.width(w);
                    setTimeout(function() {
                        if (w > div2.find('div.menu > table').width()) {
                            div2.find('div.menu').css('overflow-x', 'hidden');
                        }
                    }, 1);
                    setTimeout(function() {
                        div2.find('div.menu').css('overflow-x', 'auto');
                    }, 10);
                }
                // alignment
                switch (options.align) {
                    case 'both':
                        options.left = 17;
                        if (options.width === 0) options.width = w2utils.getSize($(obj), 'width');
                        break;
                    case 'left':
                        options.left = 17;
                        break;
                    case 'right':
                        options.tipLeft = w - 45;
                        options.left = w2utils.getSize($(obj), 'width') - w + 10;
                        break;
                }
                // adjust position
                var tmp = (w - 17) / 2;
                var boxLeft = options.left;
                var boxWidth = options.width;
                var tipLeft = options.tipLeft;
                if (w === 30 && !boxWidth) boxWidth = 30;
                else boxWidth = (options.width ? options.width : 'auto');
                if (tmp < 25) {
                    boxLeft = 25 - tmp;
                    tipLeft = Math.floor(tmp);
                }
                // Y coord
                div1.css({
                    top: (obj.offset().top + w2utils.getSize(obj, 'height') + options.top + 7) + 'px',
                    left: ((obj.offset().left > 25 ? obj.offset().left : 25) + boxLeft) + 'px',
                    'min-width': boxWidth,
                    'min-height': (options.height ? options.height : 'auto')
                });
                // $(window).height() - has a problem in FF20
                var maxHeight = window.innerHeight + $(document).scrollTop() - div2.offset().top - 7;
                var maxWidth = window.innerWidth + $(document).scrollLeft() - div2.offset().left - 7;
                if (((maxHeight > -50 && maxHeight < 210) || options.openAbove === true) && !options.overridePosition) {
                    // show on top
                    maxHeight = div2.offset().top - $(document).scrollTop() - 7;
                    if (options.maxHeight && maxHeight > options.maxHeight) maxHeight = options.maxHeight;
                    if (h > maxHeight) {
                        overflowY = true;
                        div2.height(maxHeight).width(w).css({
                            'overflow-y': 'auto'
                        });
                        h = maxHeight;
                    }
                    div1.css('top', ($(obj).offset().top - h - 24 + options.top) + 'px');
                    div1.find('>style').html(
                        '#w2ui-overlay' + name + ':before { display: none; margin-left: ' + parseInt(tipLeft) + 'px; }' +
                        '#w2ui-overlay' + name + ':after { display: block; margin-left: ' + parseInt(tipLeft) + 'px; }'
                    );
                } else {
                    // show under
                    if (options.maxHeight && maxHeight > options.maxHeight) maxHeight = options.maxHeight;
                    if (h > maxHeight) {
                        overflowY = true;
                        div2.height(maxHeight).width(w).css({
                            'overflow-y': 'auto'
                        });
                    }
                    div1.find('>style').html(
                        '#w2ui-overlay' + name + ':before { display: block; margin-left: ' + parseInt(tipLeft) + 'px; }' +
                        '#w2ui-overlay' + name + ':after { display: none; margin-left: ' + parseInt(tipLeft) + 'px; }'
                    );
                }
                // check width
                w = div2.width();
                maxWidth = window.innerWidth + $(document).scrollLeft() - div2.offset().left - 7;
                if (options.maxWidth && maxWidth > options.maxWidth) maxWidth = options.maxWidth;
                if (w > maxWidth && options.align !== 'both') {
                    options.align = 'right';
                    setTimeout(function() {
                        resize();
                    }, 1);
                }
                // check scroll bar
                if (overflowY && overflowX) div2.width(w + w2utils.scrollBarSize() + 2);
            }
        }
    };



    $.fn.w2menu = function(menu, options) {
        /*
        ITEM STRUCTURE
            item : {
                id       : null,
                text     : '',
                style    : '',
                img      : '',
                icon     : '',
                count    : '',
                hidden   : false,
                disabled : false
                ...
            }
        */
        var defaults = {
            index: null, // current selected
            items: [],
            render: null,
            msgNoItems: 'No items',
            onSelect: null,
            tmp: {}
        };
        var obj = this;
        var name = '';
        if (menu === 'refresh') {
            // if not show - call blur
            if ($('#w2ui-overlay' + name).length > 0) {
                options = $.extend($.fn.w2menuOptions, options);
                var scrTop = $('#w2ui-overlay' + name + ' div.menu').scrollTop();
                $('#w2ui-overlay' + name + ' div.menu').html(getMenuHTML());
                $('#w2ui-overlay' + name + ' div.menu').scrollTop(scrTop);
                setTimeout(function() {
                    mresize();
                }, 1);
            } else {
                $(this).w2menu(options);
            }
        } else if (menu === 'refresh-index') {
            var $menu = $('#w2ui-overlay' + name + ' div.menu');
            var cur = $menu.find('tr[index=' + options.index + ']');
            var scrTop = $menu.scrollTop();
            $menu.find('tr.w2ui-selected').removeClass('w2ui-selected'); // clear all
            cur.addClass('w2ui-selected'); // select current
            // scroll into view
            if (cur.length > 0) {
                var top = cur[0].offsetTop - 5; // 5 is margin top
                var height = $menu.height();
                $menu.scrollTop(scrTop);
                if (top < scrTop || top + cur.height() > scrTop + height) {
                    $menu.animate({
                        'scrollTop': top - (height - cur.height() * 2) / 2
                    }, 200, 'linear');
                }
            }
            return;
        } else {
            if (arguments.length === 1) options = menu;
            else options.items = menu;
            if (typeof options !== 'object') options = {};
            options = $.extend({}, defaults, options);
            $.fn.w2menuOptions = options;
            if (options.name) name = '-' + options.name;
            if (typeof options.select === 'function' && typeof options.onSelect !== 'function') options.onSelect = options.select;
            if (typeof options.onRender === 'function' && typeof options.render !== 'function') options.render = options.onRender;
            // since only one overlay can exist at a time
            $.fn.w2menuHandler = function(event, index) {
                if (event.type === 'mouseover') {
                    setTimeout(function() {
                        var el = event.target;
                        $(el).w2menu(options.items[index].submenu);
                        console.log(options.items[index].submenu);
                    }, 300);
                } else if (event.type === 'mouseout') {
                    setTimeout(function() {
                        console.log('out now');
                    }, 300);
                }
                if (typeof options.onSelect === 'function') {
                    // need time so that menu first hides
                    setTimeout(function() {
                        options.onSelect({
                            index: index,
                            item: options.items[index],
                            originalEvent: event
                        });
                    }, 10);
                }
                // do not uncomment (or enum search type is not working in grid)
                // setTimeout(function () { $(document).click(); }, 50);
            };
            var html = '';
            if (options.search) {
                html +=
                    '<div style="position: absolute; top: 0px; height: 40px; left: 0px; right: 0px; border-bottom: 1px solid silver; background-color: #ECECEC; padding: 8px 5px;">' +
                    '    <div class="w2ui-icon icon-search" style="position: absolute; margin-top: 4px; margin-left: 6px; width: 11px; background-position: left !important;"></div>' +
                    '    <input id="menu-search" type="text" style="width: 100%; outline: none; padding-left: 20px;" onclick="event.stopPropagation();">' +
                    '</div>';
                options.style += ';background-color: #ECECEC';
                options.index = 0;
                for (var i = 0; i < options.items.length; i++) options.items[i].hidden = false;
            }
            html += '<div class="menu" style="position: absolute; top: ' + (options.search ? 40 : 0) + 'px; bottom: 0px; width: 100%; overflow: auto;">' +
                getMenuHTML() +
                '</div>';
            var ret = $(this).w2overlay(html, options);
            setTimeout(function() {
                $('#w2ui-overlay' + name + ' #menu-search')
                    .on('keyup', change)
                    .on('keydown', function(event) {
                        // cancel tab key
                        if (event.keyCode === 9) {
                            event.stopPropagation();
                            event.preventDefault();
                        }
                    });
                if (options.search) {
                    if (['text', 'password'].indexOf($(obj)[0].type) != -1 || $(obj)[0].tagName == 'texarea') return;
                    $('#w2ui-overlay' + name + ' #menu-search').focus();
                }
            }, 200);
            mresize();
            return ret;
        }

        function mresize() {
            setTimeout(function() {
                // show selected
                $('#w2ui-overlay' + name + ' tr.w2ui-selected').removeClass('w2ui-selected');
                var cur = $('#w2ui-overlay' + name + ' tr[index=' + options.index + ']');
                var scrTop = $('#w2ui-overlay' + name + ' div.menu').scrollTop();
                cur.addClass('w2ui-selected');
                if (options.tmp) options.tmp.contentHeight = $('#w2ui-overlay' + name + ' table').height() + (options.search ? 50 : 10);
                if (options.tmp) options.tmp.contentWidth = $('#w2ui-overlay' + name + ' table').width();
                if ($('#w2ui-overlay' + name).length > 0) $('#w2ui-overlay' + name)[0].resize();
                // scroll into view
                if (cur.length > 0) {
                    var top = cur[0].offsetTop - 5; // 5 is margin top
                    var el = $('#w2ui-overlay' + name + ' div.menu');
                    var height = el.height();
                    $('#w2ui-overlay' + name + ' div.menu').scrollTop(scrTop);
                    if (top < scrTop || top + cur.height() > scrTop + height) {
                        $('#w2ui-overlay' + name + ' div.menu').animate({
                            'scrollTop': top - (height - cur.height() * 2) / 2
                        }, 200, 'linear');
                    }
                }
            }, 1);
        }

        function change(event) {
            var search = this.value;
            var key = event.keyCode;
            var cancel = false;
            switch (key) {
                case 13: // enter
                    $('#w2ui-overlay' + name).remove();
                    $.fn.w2menuHandler(event, options.index);
                    break;
                case 9: // tab
                case 27: // escape
                    $('#w2ui-overlay' + name).remove();
                    $.fn.w2menuHandler(event, -1);
                    break;
                case 38: // up
                    options.index = w2utils.isInt(options.index) ? parseInt(options.index) : 0;
                    options.index--;
                    while (options.index > 0 && options.items[options.index].hidden) options.index--;
                    if (options.index === 0 && options.items[options.index].hidden) {
                        while (options.items[options.index] && options.items[options.index].hidden) options.index++;
                    }
                    if (options.index < 0) options.index = 0;
                    cancel = true;
                    break;
                case 40: // down
                    options.index = w2utils.isInt(options.index) ? parseInt(options.index) : 0;
                    options.index++;
                    while (options.index < options.items.length - 1 && options.items[options.index].hidden) options.index++;
                    if (options.index === options.items.length - 1 && options.items[options.index].hidden) {
                        while (options.items[options.index] && options.items[options.index].hidden) options.index--;
                    }
                    if (options.index >= options.items.length) options.index = options.items.length - 1;
                    cancel = true;
                    break;
            }
            // filter
            if (!cancel) {
                var shown = 0;
                for (var i = 0; i < options.items.length; i++) {
                    var item = options.items[i];
                    var prefix = '';
                    var suffix = '';
                    if (['is', 'begins with'].indexOf(options.match) !== -1) prefix = '^';
                    if (['is', 'ends with'].indexOf(options.match) !== -1) suffix = '$';
                    try {
                        var re = new RegExp(prefix + search + suffix, 'i');
                        if (re.test(item.text) || item.text === '...') item.hidden = false;
                        else item.hidden = true;
                    } catch (e) {}
                    // do not show selected items
                    if (obj.type === 'enum' && $.inArray(item.id, ids) !== -1) item.hidden = true;
                    if (item.hidden !== true) shown++;
                }
                options.index = 0;
                while (options.index < options.items.length - 1 && options.items[options.index].hidden) options.index++;
                if (shown <= 0) options.index = -1;
            }
            $(obj).w2menu('refresh', options);
            mresize();
        }

        function getMenuHTML() {
            if (options.spinner) {
                return '<table class="w2ui-drop-menu"><tr><td style="padding: 5px 10px 10px 10px; text-align: center">' +
                    '    <div class="w2ui-spinner" style="width: 18px; height: 18px; position: relative; top: 5px;"></div> ' +
                    '    <div style="display: inline-block; padding: 3px; color: #999;">' + w2utils.lang('Loading...') + '</div>' +
                    '</td></tr></table>';
            }
            var count = 0;
            var menu_html = '<table cellspacing="0" cellpadding="0" class="w2ui-drop-menu">';
            var img = null,
                icon = null;
            for (var f = 0; f < options.items.length; f++) {
                var mitem = options.items[f];
                if (typeof mitem === 'string') {
                    mitem = {
                        id: mitem,
                        text: mitem
                    };
                } else {
                    if (mitem.text != null && mitem.id == null) mitem.id = mitem.text;
                    if (mitem.text == null && mitem.id != null) mitem.text = mitem.id;
                    if (mitem.caption != null) mitem.text = mitem.caption;
                    img = mitem.img;
                    icon = mitem.icon;
                    if (img == null) img = null;
                    if (icon == null) icon = null;
                }
                if (mitem.hidden !== true) {
                    var imgd = '';
                    var txt = mitem.text;
                    if (typeof options.render === 'function') txt = options.render(mitem, options);
                    if (img) imgd = '<td class="menu-icon"><div class="w2ui-tb-image w2ui-icon ' + img + '"></div></td>';
                    if (icon) imgd = '<td class="menu-icon" align="center"><span class="w2ui-icon ' + icon + '"></span></td>';
                    // render only if non-empty
                    if (typeof txt !== 'undefined' && txt !== '' && !(/^-+$/.test(txt))) {
                        var bg = (count % 2 === 0 ? 'w2ui-item-even' : 'w2ui-item-odd');
                        if (options.altRows !== true) bg = '';
                        var colspan = 1;
                        if (imgd == '') colspan++;
                        if (mitem.count == null) colspan++;
                        menu_html +=
                            '<tr index="' + f + '" style="' + (mitem.style ? mitem.style : '') + '" ' + (mitem.hint ? 'title="' + mitem.hint + '"' : '') +
                            '        class="' + bg + ' ' + (options.index === f ? 'w2ui-selected' : '') + ' ' + (mitem.disabled === true ? 'w2ui-disabled' : '') + '"' +
                            '        onmousedown="$(this).parent().find(\'tr\').removeClass(\'w2ui-selected\'); $(this).addClass(\'w2ui-selected\');"' +
                            '        onclick="event.stopPropagation(); ' +
                            '               if (' + (mitem.disabled === true ? 'true' : 'false') + ') return;' +
                            '               $(\'#w2ui-overlay' + name + '\').remove(); ' +
                            '               $.fn.w2menuHandler(event, \'' + f + '\');"' +
                            '       onmouseover = "' + (mitem.submenu ? "$.fn.w2menuHandler(event, '" + f + "');" : "") + '"' +
                            '       onmouseout  = "' + (mitem.submenu ? "$.fn.w2menuHandler(event, '" + f + "');" : "") + '"' + '>' +
                            imgd +
                            '   <td class="menu-text" colspan="' + colspan + '">' + txt + '</td>' +
                            '   <td class="menu-count">' + (mitem.count != null ? '<span>' + mitem.count + '</span>' : '') + '</td>' +
                            '</tr>';
                        count++;
                    } else {
                        // horizontal line
                        menu_html += '<tr><td colspan="2" style="padding: 6px; pointer-events: none"><div style="border-top: 1px solid silver;"></div></td></tr>';
                    }
                }
                options.items[f] = mitem;
            }
            if (count === 0) {
                menu_html += '<tr><td style="padding: 13px; color: #999; text-align: center">' + options.msgNoItems + '</div></td></tr>';
            }
            menu_html += "</table>";
            return menu_html;
        }
    };
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2grid        - grid widget
 *        - $().w2grid    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils, w2toolbar, w2fields, w2alert, w2confirm
 *
 * == NICE TO HAVE ==
 *   - frozen columns
 *   - add colspans
 *   - allow this.total to be unknown (-1)
 *   - column autosize based on largest content
 *   - easy bubbles in the grid
 *   - More than 2 layers of header groups
 *   - reorder columns/records
 *   - hidden searches could not be clearned by the user
 *   - problem with .set() and arrays, array get extended too, but should be replaced
 *   - move events into prototype
 *   - add grid.focus()
 *   - add showExtra, KickIn Infinite scroll when so many records
 *   - after edit stay on the same record option
 *   - allow render: function to be filters
 *
 ************************************************************************/

(function() {
    var w2grid = function(options) {

        // public properties
        this.name = null;
        this.box = null; // HTML element that hold this element
        this.header = '';
        this.url = '';
        this.routeData = {}; // data for dynamic routes
        this.columns = []; // { field, caption, size, attr, render, hidden, gridMinWidth, editable }
        this.columnGroups = []; // { span: int, caption: 'string', master: true/false }
        this.records = []; // { recid: int(requied), field1: 'value1', ... fieldN: 'valueN', style: 'string', editable: true/false, summary: true/false, changes: object }
        this.summary = []; // arry of summary records, same structure as records array
        this.searches = []; // { type, caption, field, inTag, outTag, hidden }
        this.searchData = [];
        this.sortData = [];
        this.postData = {};
        this.toolbar = {}; // if not empty object; then it is toolbar object

        this.show = {
            header: false,
            toolbar: false,
            footer: false,
            columnHeaders: true,
            lineNumbers: false,
            expandColumn: false,
            groupExpand: false,
            selectColumn: false,
            emptyRecords: true,
            toolbarReload: true,
            toolbarColumns: true,
            toolbarSearch: true,
            toolbarAdd: false,
            toolbarEdit: false,
            toolbarDelete: false,
            toolbarSave: false,
            selectionBorder: true,
            recordTitles: true,
            skipRecords: true
        };

        this.autoLoad = true; // for infinite scroll
        this.fixedBody = true; // if false; then grid grows with data
        this.recordHeight = 24;
        this.keyboard = true;
        this.selectType = 'row'; // can be row|cell
        this.multiSearch = true;
        this.multiSelect = true;
        this.multiSort = true;
        this.reorderColumns = false;
        this.reorderRows = false;
        this.markSearch = true;
        this.hasInitialSearchData = false;

        //group related
        this.enableGrouping = false;
        this.groupData = {};
        this.summaryData = [];
        this.expandedGroups = [];
        this.summaryTemplates = [];
        this.groupTemplates = [];
        this.expandedGrids = [];

        this.total = 0; // server total
        this.limit = 100;
        this.offset = 0; // how many records to skip (for infinite scroll) when pulling from server
        this.style = '';
        this.ranges = [];
        this.menu = [];
        this.method = null; // if defined, then overwrited ajax method
        this.recid = null;
        this.parser = null;
        this.data = null;

        // events
        this.onAdd = null;
        this.onEdit = null;
        this.onRequest = null; // called on any server event
        this.onLoad = null;
        this.onDelete = null;
        this.onDeleted = null;
        this.onSubmit = null;
        this.onSave = null;
        this.onSelect = null;
        this.onUnselect = null;
        this.onClick = null;
        this.onDblClick = null;
        this.onContextMenu = null;
        this.onMenuClick = null; // when context menu item selected
        this.onColumnClick = null;
        this.onColumnResize = null;
        this.onSort = null;
        this.onSearch = null;
        this.onChange = null; // called when editable record is changed
        this.onRestore = null; // called when editable record is restored
        this.onExpand = null;
        this.onCollapse = null;
        this.onError = null;
        this.onKeydown = null;
        this.onToolbar = null; // all events from toolbar
        this.onColumnOnOff = null;
        this.onCopy = null;
        this.onPaste = null;
        this.onSelectionExtend = null;
        this.onEditField = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onReload = null;
        this.onResize = null;
        this.onDestroy = null;
        this.onStateSave = null;
        this.onStateRestore = null;

        // internal
        this.last = {
            field: 'all',
            caption: w2utils.lang('All Fields'),
            logic: 'OR',
            search: '',
            searchIds: [],
            selection: {
                indexes: [],
                columns: {}
            },
            postData:{},
            multi: false,
            scrollTop: 0,
            scrollLeft: 0,
            sortData: null,
            sortCount: 0,
            xhr: null,
            range_start: null,
            range_end: null,
            sel_ind: null,
            sel_col: null,
            sel_type: null,
            edit_col: null
        };

        $.extend(true, this, w2obj.grid, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2grid = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2grid')) return;
            // remember items
            var columns = method.columns;
            var records;
            var columnGroups = method.columnGroups;

            var searches = method.searches;
            var searchData = method.searchData;
            var sortData = method.sortData;
            var postData = method.postData || {};
            var toolbar = method.toolbar;
            var enableGrouping = method.enableGrouping;

            // extend items
            var object = new w2grid(method);
            $.extend(object, {
                postData: {},
                records: [],
                columns: [],
                searches: [],
                toolbar: {},
                sortData: [],
                searchData: [],
                handlers: [],
                groupData: method.groupData,
                hasInitialSearchData:method.hasInitialSearchData
            });
            if (typeof method.records === 'function')
                records = method.records.apply(object, arguments);
            else
                records = method.records;
            // extend postData to include grouping
            if (enableGrouping) {
                object.show.groupExpand = true;
                if (method.groupData)
                    postData.groupOn = method.groupData[0];
                if (method.summaryData)
                    postData.summaryData = method.summaryData;
                $.extend(true, object.summaryTemplates, method.summaryTemplates);
                $.extend(true, object.groupTemplates, method.groupTemplates);
                $.extend(true, object.enableGrouping, method.enableGrouping);

            }

            if (object.onExpand !== null || object.enableGrouping) object.show.expandColumn = true;
            //hide expand column for grouped grid - will show group expand
            //if (enableGrouping) object.show.expandColumn = false;

            $.extend(true, object.toolbar, toolbar);
            // reassign variables
            for (var p in columns) object.columns[p] = $.extend(true, {}, columns[p]);
            for (var p in columnGroups) object.columnGroups[p] = $.extend(true, {}, columnGroups[p]);
            for (var p in searches) object.searches[p] = $.extend(true, {}, searches[p]);
            for (var p in searchData) object.searchData[p] = $.extend(true, {}, searchData[p]);
            for (var p in sortData) object.sortData[p] = $.extend(true, {}, sortData[p]);
            object.postData = $.extend(true, {}, postData);
            if (!method.url && object.enableGrouping) {
                records = object.getGroupedRecords(records);
            }
            // check if there are records without recid
            for (var r in records) {
                if (records[r].recid === null || typeof records[r].recid === 'undefined') {
                    console.log('ERROR: Cannot add records without recid. (obj: ' + object.name + ')');
                    return;
                }
                object.records[r] = $.extend(true, {}, records[r]);
            }

            // add searches
            for (var c in object.columns) {
                var col = object.columns[c];
                if (typeof col.searchable === 'undefined' || object.getSearch(col.field) !== null) continue;
                var stype = col.searchable;
                var attr = '';
                if (col.searchable === true) {
                    stype = 'text';
                    attr = 'size="20"';
                }
                object.addSearch({
                    field: col.field,
                    caption: col.caption,
                    type: stype,
                    attr: attr
                });
            }
            // init toolbar
            object.initToolbar();

            // render if necessary
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            // register new object
            //object.initGrouping();
            w2ui[object.name] = object;

            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2grid');
        }

    };

    // ====================================================
    // -- Implementation of core functionality

    w2grid.prototype = {
        // ----
        // properties that need to be in prototype

        msgDelete: w2utils.lang('Are you sure you want to delete selected records?'),
        msgNotJSON: w2utils.lang('Returned data is not in valid JSON format.'),
        msgAJAXerror: w2utils.lang('AJAX error. See console for more details.'),
        msgRefresh: w2utils.lang('Refreshing...'),

        // for easy button overwrite
        buttons: {
            'reload': {
                type: 'button',
                id: 'w2ui-reload',
                icon: 'w2ui-icon-reload',
                hint: w2utils.lang('Reload data in the list')
            },
            'columns': {
                type: 'drop',
                id: 'w2ui-column-on-off',
                icon: 'w2ui-icon-columns',
                hint: w2utils.lang('Show/hide columns'),
                arrow: false,
                html: ''
            },
            'search': {
                type: 'html',
                id: 'w2ui-search',
                html: '<div class="w2ui-icon icon-search-down w2ui-search-down" title="' + 'Select Search Field' + '" ' +
                    'onclick="var obj = w2ui[$(this).parents(\'div.w2ui-grid\').attr(\'name\')]; obj.searchShowFields();"></div>'
            },
            'search-go': {
                type: 'check',
                id: 'w2ui-search-advanced',
                caption: w2utils.lang('Search...'),
                hint: w2utils.lang('Open Search Fields')
            },
            'add': {
                type: 'button',
                id: 'w2ui-add',
                caption: w2utils.lang('Add New'),
                hint: w2utils.lang('Add new record'),
                icon: 'w2ui-icon-plus'
            },
            'edit': {
                type: 'button',
                id: 'w2ui-edit',
                caption: w2utils.lang('Edit'),
                hint: w2utils.lang('Edit selected record'),
                icon: 'w2ui-icon-pencil',
                disabled: true
            },
            'delete': {
                type: 'button',
                id: 'w2ui-delete',
                caption: w2utils.lang('Delete'),
                hint: w2utils.lang('Delete selected records'),
                icon: 'w2ui-icon-cross',
                disabled: true
            },
            'save': {
                type: 'button',
                id: 'w2ui-save',
                caption: w2utils.lang('Save'),
                hint: w2utils.lang('Save changed records'),
                icon: 'w2ui-icon-check'
            },
            'groups': {
                type: 'html',
                id: 'dropArea',
                html: '<div class="dropGroup"></div>'
            }
        },


        getGroupedRecords: function(records) {
            var grid = this.mainGrid || this;
            var obj = this;
            var parentRecords = [];
            var fields = [];
            _.each(obj.groupData, function(g) {
                fields.push(g);
            });
            var rs = _.groupByMulti(records || grid.records, fields);
            var index = 0;
            parentRecords = obj.constructRecords(records, rs, grid.postData.groupOn);
            return parentRecords;
        },

        constructRecords: function(records, data, groupColumn) {
            var obj = this;
            var ret = [];
            var index = 0;
            $.each(data, function(i, grp) {
                var o = {
                    recid: index,
                    grpcnt: obj.getSizeOfGroup(records, groupColumn, i),
                    childRecords: grp
                };
                o[groupColumn] = i;
                ret.push(o);
                index++;
            });
            return ret;
        },



        getSizeOfGroup: function(records, column, value) {
            var count = _.countBy(records, function(num) {
                return num[column] === value ? value : 'others';
            });
            return count[value];
        },


        getRecordsOfGroup: function(column, value) {
            var obj = this;
            var records = _.find(this.records, function(rec) {
                return rec[column] === value;
            });
            return records.childRecords;
        },


        //W2UI GROUPED GRID
        initGrouping: function() {
            var mainGrid = this.mainGrid ? this.mainGrid : this;
            // if (mainGrid.groupsInitiated)
            //     return;

            var ele = $(mainGrid.box);
            $('.dropGroup .w2ui-col-header').on('click', function() {
                var el = $(this);
                el.remove();
                //get the id of group, if is first, we have to rebuild grid
                var id;
                $.map(mainGrid.groupData, function(obj, index) {
                    if (obj === el.data('col'))
                        id = index;
                });


                mainGrid.groupData = $.grep(mainGrid.groupData, function(obj, index) {
                    return obj === el.data('col');
                }, true);

                mainGrid.postData.group_data = [];
                mainGrid.postData.groupOn = mainGrid.groupData[0];

                if (mainGrid.groupData.length === 0) {
                    mainGrid.postData.groupOn = '';
                    mainGrid.isLastGroup = true;
                }
                // //

                mainGrid.resetGroups();


            });
            //;
            var dragSrcEl;

            function handleDragStart(e) {
                var colname = mainGrid.columns[$(this).attr('col')].field;
                dragSrcEl = '<div class="w2ui-col-header" data-col="' + colname + '">' + this.innerText + '</div>';
            }

            function handleDragEnter() {
                $(this).addClass('over');
            }

            function handleDragLeave(e) {
                $(this).removeClass('over'); // this / e.target is previous target element.
            }

            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault(); // Necessary. Allows us to drop.
                }

            }

            function handleDragDrop(e) {
                var dropGroup = $('.dropGroup');
                dropGroup.removeClass('over');
                dropGroup.append(dragSrcEl);
                mainGrid.postData.group_data = [];
                mainGrid.isLastGroup = false;
                mainGrid.groupData.push($(dragSrcEl).data('col'));
                if (mainGrid.groupData.length === 1)
                    mainGrid.postData.groupOn = mainGrid.groupData[0];
                if (!mainGrid.url) {
                    mainGrid.records = mainGrid.getGroupedRecords(mainGrid.records);
                }
                mainGrid.resetGroups();
            }

            function handleDragEnd(e) {
                $('.dropGroup').removeClass('over');
            }
            var headers = $('.page').find('.w2ui-head').attr('draggable', true);
            var dropGroup = $('.dropGroup');
            headers.off('dragstart').on('dragstart', handleDragStart);
            dropGroup.off('dragleave').on('dragleave', handleDragLeave);
            dropGroup.off('dragenter').on('dragenter', handleDragEnter);
            dropGroup.off('dragover').on('dragover', handleDragOver);
            dropGroup.off('drop').on('drop', handleDragDrop);
            headers.off('dragend').on('dragend', handleDragEnd);

            // });
        },

        add: function(record,last) {
            if (!$.isArray(record)) record = [record];
            var added = 0;
            for (var o in record) {
                if (this.recid && typeof record[o].recid == 'undefined') record[o].recid = record[o][this.recid];
                if (record[o].recid == null || typeof record[o].recid == 'undefined') {
                    console.log('ERROR: Cannot add record without recid. (obj: ' + this.name + ')');
                    continue;
                }
                if(last){
                  this.records.push(record[o]);
                }else{
                  this.records.unshift(record[o]); // modified : to add new record on top of grid
                }
                //
                added++;
            }
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.total = this.records.length;
                this.localSort();
                this.localSearch();
            }
            this.refresh(); // ??  should it be reload?
            return added;
        },

        find: function(obj, returnIndex) {
            if (typeof obj == 'undefined' || obj == null) obj = {};
            var recs = [];
            var hasDots = false;
            // check if property is nested - needed for speed
            for (var o in obj)
                if (String(o).indexOf('.') != -1) hasDots = true;
                // look for an item
            for (var i = 0; i < this.records.length; i++) {
                var match = true;
                for (var o in obj) {
                    var val = this.records[i][o];
                    if (hasDots && String(o).indexOf('.') != -1) val = this.parseField(this.records[i], o);
                    if (obj[o] != val) match = false;
                }
                if (match && returnIndex !== true) recs.push(this.records[i].recid);
                if (match && returnIndex === true) recs.push(i);
            }
            return recs;
        },

        set: function(recid, record, noRefresh) { // does not delete existing, but overrides on top of it
            if (typeof recid == 'object') {
                noRefresh = record;
                record = recid;
                recid = null;
            }
            // update all records
            if (recid == null) {
                for (var r in this.records) {
                    $.extend(true, this.records[r], record); // recid is the whole record
                }
                if (noRefresh !== true) this.refresh();
            } else { // find record to update
                var ind = this.get(recid, true);
                if (ind == null) return false;
                var isSummary = (this.records[ind] && this.records[ind].recid == recid ? false : true);
                if (isSummary) {
                    $.extend(true, this.summary[ind], record);
                } else {
                    $.extend(true, this.records[ind], record);
                }
                if (noRefresh !== true) this.refreshRow(recid); // refresh only that record
            }
            return true;
        },

        get: function(recid, returnIndex) {
            // search records
            for (var i = 0; i < this.records.length; i++) {
                if (this.records[i].recid == recid) {
                    if (returnIndex === true) return i;
                    else return this.records[i];
                }
            }
            // search summary
            for (var i = 0; i < this.summary.length; i++) {
                if (this.summary[i].recid == recid) {
                    if (returnIndex === true) return i;
                    else return this.summary[i];
                }
            }
            return null;
        },

        remove: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.records.length - 1; r >= 0; r--) {
                    if (this.records[r].recid == arguments[a]) {
                        this.records.splice(r, 1);
                        removed++;
                    }
                }
            }
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.localSort();
                this.localSearch();
            }
            this.refresh();
            return removed;
        },

        addColumn: function(before, columns) {
            var added = 0;
            if (arguments.length == 1) {
                columns = before;
                before = this.columns.length;
            } else {
                if (typeof before == 'string') before = this.getColumn(before, true);
                if (before === null) before = this.columns.length;
            }
            if (!$.isArray(columns)) columns = [columns];
            for (var o in columns) {
                this.columns.splice(before, 0, columns[o]);
                before++;
                added++;
            }
            this.refresh();
            return added;
        },

        removeColumn: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    if (this.columns[r].field == arguments[a]) {
                        this.columns.splice(r, 1);
                        removed++;
                    }
                }
            }
            this.refresh();
            return removed;
        },

        getColumn: function(field, returnIndex) {
            for (var i = 0; i < this.columns.length; i++) {
                if (this.columns[i].field == field) {
                    if (returnIndex === true) return i;
                    else return this.columns[i];
                }
            }
            return null;
        },

        toggleColumn: function() {
            var effected = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    var col = this.columns[r];
                    if (col.field == arguments[a]) {
                        col.hidden = !col.hidden;
                        effected++;
                    }
                }
            }
            this.refresh();
            return effected;
        },

        showColumn: function() {
            var shown = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    var col = this.columns[r];
                    if (col.gridMinWidth) delete col.gridMinWidth;
                    if (col.field == arguments[a] && col.hidden !== false) {
                        col.hidden = false;
                        shown++;
                    }
                }
            }
            this.refresh();
            return shown;
        },

        hideColumn: function() {
            var hidden = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    var col = this.columns[r];
                    if (col.field == arguments[a] && col.hidden !== true) {
                        col.hidden = true;
                        hidden++;
                    }
                }
            }
            this.refresh();
            return hidden;
        },

        addSearch: function(before, search) {
            var added = 0;
            if (arguments.length == 1) {
                search = before;
                before = this.searches.length;
            } else {
                if (typeof before == 'string') before = this.getSearch(before, true);
                if (before === null) before = this.searches.length;
            }
            if (!$.isArray(search)) search = [search];
            for (var o in search) {
                this.searches.splice(before, 0, search[o]);
                before++;
                added++;
            }
            this.searchClose();
            return added;
        },

        removeSearch: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a]) {
                        this.searches.splice(r, 1);
                        removed++;
                    }
                }
            }
            this.searchClose();
            return removed;
        },

        getSearch: function(field, returnIndex) {
            for (var i = 0; i < this.searches.length; i++) {
                if (this.searches[i].field == field) {
                    if (returnIndex === true) return i;
                    else return this.searches[i];
                }
            }
            return null;
        },

        toggleSearch: function() {
            var effected = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a]) {
                        this.searches[r].hidden = !this.searches[r].hidden;
                        effected++;
                    }
                }
            }
            this.searchClose();
            return effected;
        },

        showSearch: function() {
            var shown = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a] && this.searches[r].hidden !== false) {
                        this.searches[r].hidden = false;
                        shown++;
                    }
                }
            }
            this.searchClose();
            return shown;
        },

        hideSearch: function() {
            var hidden = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a] && this.searches[r].hidden !== true) {
                        this.searches[r].hidden = true;
                        hidden++;
                    }
                }
            }
            this.searchClose();
            return hidden;
        },

        getSearchData: function(field) {
            for (var s in this.searchData) {
                if (this.searchData[s].field == field) return this.searchData[s];
            }
            return null;
        },

        localSort: function(silent) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                console.log('ERROR: grid.localSort can only be used on local data source, grid.url should be empty.');
                return;
            }
            if ($.isEmptyObject(this.sortData)) return;
            var time = (new Date()).getTime();
            var obj = this;
            // process date fields
            obj.prepareData();
            // process sortData
            for (var s in this.sortData) {
                var column = this.getColumn(this.sortData[s].field);
                if (!column) return;
                if (typeof column.render == 'string') {
                    if (['date', 'age'].indexOf(column.render.split(':')[0]) != -1) {
                        this.sortData[s]['field_'] = column.field + '_';
                    }
                    if (['time'].indexOf(column.render.split(':')[0]) != -1) {
                        this.sortData[s]['field_'] = column.field + '_';
                    }
                }
            }
            // process sort
            this.records.sort(function(a, b) {
                var ret = 0;
                for (var s in obj.sortData) {
                    var fld = obj.sortData[s].field;
                    if (obj.sortData[s].field_) fld = obj.sortData[s].field_;
                    var aa = a[fld];
                    var bb = b[fld];
                    if (String(fld).indexOf('.') != -1) {
                        aa = obj.parseField(a, fld);
                        bb = obj.parseField(b, fld);
                    }
                    if (typeof aa == 'string') aa = $.trim(aa.toLowerCase());
                    if (typeof bb == 'string') bb = $.trim(bb.toLowerCase());
                    if (aa > bb) ret = (obj.sortData[s].direction == 'asc' ? 1 : -1);
                    if (aa < bb) ret = (obj.sortData[s].direction == 'asc' ? -1 : 1);
                    if (typeof aa != 'object' && typeof bb == 'object') ret = -1;
                    if (typeof bb != 'object' && typeof aa == 'object') ret = 1;
                    if (aa == null && bb != null) ret = 1; // all nuls and undefined on bottom
                    if (aa != null && bb == null) ret = -1;
                    if (ret != 0) break;
                }
                return ret;
            });
            time = (new Date()).getTime() - time;
            if (silent !== true) setTimeout(function() {
                obj.status(w2utils.lang('Sorting took') + ' ' + time / 1000 + ' ' + w2utils.lang('sec'));
            }, 10);
            return time;
        },

        localSearch: function(silent, override) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                console.log('ERROR: grid.localSearch can only be used on local data source, grid.url should be empty.');
                return;
            }
            var time = (new Date()).getTime();
            var obj = this;
            this.total = this.records.length;
            // mark all records as shown
            this.last.searchIds = [];
            // prepare date/time fields
            this.prepareData();
            if (override) return;
            // hide records that did not match
            if (this.searchData.length > 0 && !url) {
                this.total = 0;
                for (var r in this.records) {
                    var rec = this.records[r];
                    var fl = 0;
                    for (var s in this.searchData) {
                        var sdata = this.searchData[s];
                        var search = this.getSearch(sdata.field);
                        if (sdata == null) continue;
                        if (search == null) search = {
                            field: sdata.field,
                            type: sdata.type
                        };
                        var val1 = String(obj.parseField(rec, search.field)).toLowerCase();
                        if (typeof sdata.value != 'undefined') {
                            if (!$.isArray(sdata.value)) {
                                var val2 = String(sdata.value).toLowerCase();
                            } else {
                                var val2 = sdata.value[0];
                                var val3 = sdata.value[1];
                            }
                        }
                        switch (sdata.operator) {
                            case 'is':
                                if (rec[search.field] == sdata.value) fl++; // do not hide record
                                if (search.type == 'date') {
                                    var val1 = w2utils.formatDate(rec[search.field + '_'], 'yyyy-mm-dd');
                                    var val2 = w2utils.formatDate(val2, 'yyyy-mm-dd');
                                    if (val1 == val2) fl++;
                                }
                                if (search.type == 'time') {
                                    var val1 = w2utils.formatTime(rec[search.field + '_'], 'h24:mi');
                                    var val2 = w2utils.formatTime(val2, 'h24:mi');
                                    if (val1 == val2) fl++;
                                }
                                break;
                            case 'between':
                                if (['int', 'float', 'money', 'currency', 'percent'].indexOf(search.type) != -1) {
                                    if (parseFloat(rec[search.field]) >= parseFloat(val2) && parseFloat(rec[search.field]) <= parseFloat(val3)) fl++;
                                }
                                if (search.type == 'date') {
                                    var val1 = rec[search.field + '_'];
                                    var val2 = w2utils.isDate(val2, w2utils.settings.date_format, true);
                                    var val3 = w2utils.isDate(val3, w2utils.settings.date_format, true);
                                    if (val3 != null) val3 = new Date(val3.getTime() + 86400000); // 1 day
                                    if (val1 >= val2 && val1 < val3) fl++;
                                }
                                if (search.type == 'time') {
                                    var val1 = rec[search.field + '_'];
                                    var val2 = w2utils.isTime(val2, true);
                                    var val3 = w2utils.isTime(val3, true);
                                    val2 = (new Date()).setHours(val2.hours, val2.minutes, val2.seconds ? val2.seconds : 0, 0);
                                    val3 = (new Date()).setHours(val3.hours, val3.minutes, val3.seconds ? val3.seconds : 0, 0);
                                    if (val1 >= val2 && val1 < val3) fl++;
                                }
                                break;
                            case 'in':
                                var tmp = sdata.value;
                                if (sdata.svalue) tmp = sdata.svalue;
                                if (tmp.indexOf(val1) !== -1) fl++;
                                break;
                            case 'not in':
                                var tmp = sdata.value;
                                if (sdata.svalue) tmp = sdata.svalue;
                                if (tmp.indexOf(val1) == -1) fl++;
                                break;
                            case 'begins':
                            case 'begins with': // need for back compatib.
                                if (val1.indexOf(val2) == 0) fl++; // do not hide record
                                break;
                            case 'contains':
                                if (val1.indexOf(val2) >= 0) fl++; // do not hide record
                                break;
                            case 'ends':
                            case 'ends with': // need for back compatib.
                                if (val1.indexOf(val2) == val1.length - val2.length) fl++; // do not hide record
                                break;
                        }
                    }
                    if ((this.last.logic == 'OR' && fl != 0) || (this.last.logic == 'AND' && fl == this.searchData.length)) this.last.searchIds.push(parseInt(r));
                }
                this.total = this.last.searchIds.length;
            }
            time = (new Date()).getTime() - time;
            if (silent !== true) setTimeout(function() {
                obj.status(w2utils.lang('Search took') + ' ' + time / 1000 + ' ' + w2utils.lang('sec'));
            }, 10);
            return time;
        },

        getRangeData: function(range, extra) {
            var rec1 = this.get(range[0].recid, true);
            var rec2 = this.get(range[1].recid, true);
            var col1 = range[0].column;
            var col2 = range[1].column;

            var res = [];
            if (col1 == col2) { // one row
                for (var r = rec1; r <= rec2; r++) {
                    var record = this.records[r];
                    var dt = record[this.columns[col1].field] || null;
                    if (extra !== true) {
                        res.push(dt);
                    } else {
                        res.push({
                            data: dt,
                            column: col1,
                            index: r,
                            record: record
                        });
                    }
                }
            } else if (rec1 == rec2) { // one line
                var record = this.records[rec1];
                for (var i = col1; i <= col2; i++) {
                    var dt = record[this.columns[i].field] || null;
                    if (extra !== true) {
                        res.push(dt);
                    } else {
                        res.push({
                            data: dt,
                            column: i,
                            index: rec1,
                            record: record
                        });
                    }
                }
            } else {
                for (var r = rec1; r <= rec2; r++) {
                    var record = this.records[r];
                    res.push([]);
                    for (var i = col1; i <= col2; i++) {
                        var dt = record[this.columns[i].field];
                        if (extra !== true) {
                            res[res.length - 1].push(dt);
                        } else {
                            res[res.length - 1].push({
                                data: dt,
                                column: i,
                                index: r,
                                record: record
                            });
                        }
                    }
                }
            }
            return res;
        },

        addRange: function(ranges) {
            var added = 0;
            if (this.selectType == 'row') return added;
            if (!$.isArray(ranges)) ranges = [ranges];
            // if it is selection
            for (var r in ranges) {
                if (typeof ranges[r] != 'object') ranges[r] = {
                    name: 'selection'
                };
                if (ranges[r].name == 'selection') {
                    if (this.show.selectionBorder === false) continue;
                    var sel = this.getSelection();
                    if (sel.length == 0) {
                        this.removeRange(ranges[r].name);
                        continue;
                    } else {
                        var first = sel[0];
                        var last = sel[sel.length - 1];
                        var td1 = $('#grid_' + this.name + '_rec_' + first.recid + ' td[col=' + first.column + ']');
                        var td2 = $('#grid_' + this.name + '_rec_' + last.recid + ' td[col=' + last.column + ']');
                    }
                } else { // other range
                    var first = ranges[r].range[0];
                    var last = ranges[r].range[1];
                    var td1 = $('#grid_' + this.name + '_rec_' + first.recid + ' td[col=' + first.column + ']');
                    var td2 = $('#grid_' + this.name + '_rec_' + last.recid + ' td[col=' + last.column + ']');
                }
                if (first) {
                    var rg = {
                        name: ranges[r].name,
                        range: [{
                            recid: first.recid,
                            column: first.column
                        }, {
                            recid: last.recid,
                            column: last.column
                        }],
                        style: ranges[r].style || ''
                    };
                    // add range
                    var ind = false;
                    for (var t in this.ranges)
                        if (this.ranges[t].name == ranges[r].name) {
                            ind = r;
                            break;
                        }
                    if (ind !== false) {
                        this.ranges[ind] = rg;
                    } else {
                        this.ranges.push(rg);
                    }
                    added++
                }
            }
            this.refreshRanges();
            return added;
        },

        removeRange: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                var name = arguments[a];
                $('#grid_' + this.name + '_' + name).remove();
                for (var r = this.ranges.length - 1; r >= 0; r--) {
                    if (this.ranges[r].name == name) {
                        this.ranges.splice(r, 1);
                        removed++;
                    }
                }
            }
            return removed;
        },

        refreshRanges: function() {
            var obj = this;
            var time = (new Date()).getTime();
            var rec = $('#grid_' + this.name + '_records');
            for (var r in this.ranges) {
                var rg = this.ranges[r];
                var first = rg.range[0];
                var last = rg.range[1];
                var td1 = $('#grid_' + this.name + '_rec_' + first.recid + ' td[col=' + first.column + ']');
                var td2 = $('#grid_' + this.name + '_rec_' + last.recid + ' td[col=' + last.column + ']');
                if ($('#grid_' + this.name + '_' + rg.name).length == 0) {
                    rec.append('<div id="grid_' + this.name + '_' + rg.name + '" class="w2ui-selection" style="' + rg.style + '">' +
                        (rg.name == 'selection' ? '<div id="grid_' + this.name + '_resizer" class="w2ui-selection-resizer"></div>' : '') +
                        '</div>');
                } else {
                    $('#grid_' + this.name + '_' + rg.name).attr('style', rg.style);
                }
                if (td1.length > 0 && td2.length > 0) {
                    $('#grid_' + this.name + '_' + rg.name).css({
                        left: (td1.position().left - 1 + rec.scrollLeft()) + 'px',
                        top: (td1.position().top - 1 + rec.scrollTop()) + 'px',
                        width: (td2.position().left - td1.position().left + td2.width() + 3) + 'px',
                        height: (td2.position().top - td1.position().top + td2.height() + 3) + 'px'
                    });
                }
            }

            // add resizer events
            $(this.box).find('#grid_' + this.name + '_resizer').off('mousedown').on('mousedown', mouseStart);
            //$(this.box).find('#grid_'+ this.name +'_resizer').off('selectstart').on('selectstart', function () { return false; }); // fixes chrome cursror bug

            var eventData = {
                phase: 'before',
                type: 'selectionExtend',
                target: obj.name,
                originalRange: null,
                newRange: null
            };

            function mouseStart(event) {
                var sel = obj.getSelection();
                obj.last.move = {
                    type: 'expand',
                    x: event.screenX,
                    y: event.screenY,
                    divX: 0,
                    divY: 0,
                    recid: sel[0].recid,
                    column: sel[0].column,
                    originalRange: [{
                        recid: sel[0].recid,
                        column: sel[0].column
                    }, {
                        recid: sel[sel.length - 1].recid,
                        column: sel[sel.length - 1].column
                    }],
                    newRange: [{
                        recid: sel[0].recid,
                        column: sel[0].column
                    }, {
                        recid: sel[sel.length - 1].recid,
                        column: sel[sel.length - 1].column
                    }]
                };
                $(document).off('mousemove', mouseMove).on('mousemove', mouseMove);
                $(document).off('mouseup', mouseStop).on('mouseup', mouseStop);
            }

            function mouseMove(event) {
                var mv = obj.last.move;
                if (!mv || mv.type != 'expand') return;
                mv.divX = (event.screenX - mv.x);
                mv.divY = (event.screenY - mv.y);
                // find new cell
                var recid, column;
                var tmp = event.originalEvent.target;
                if (tmp.tagName != 'TD') tmp = $(tmp).parents('td')[0];
                if (typeof $(tmp).attr('col') != 'undefined') column = parseInt($(tmp).attr('col'));
                tmp = $(tmp).parents('tr')[0];
                recid = $(tmp).attr('recid');
                // new range
                if (mv.newRange[1].recid == recid && mv.newRange[1].column == column) return;
                var prevNewRange = $.extend({}, mv.newRange);
                mv.newRange = [{
                    recid: mv.recid,
                    column: mv.column
                }, {
                    recid: recid,
                    column: column
                }];
                // event before
                eventData = obj.trigger($.extend(eventData, {
                    originalRange: mv.originalRange,
                    newRange: mv.newRange
                }));
                if (eventData.isCancelled === true) {
                    mv.newRange = prevNewRange;
                    eventData.newRange = prevNewRange;
                    return;
                } else {
                    // default behavior
                    obj.removeRange('grid-selection-expand');
                    obj.addRange({
                        name: 'grid-selection-expand',
                        range: eventData.newRange,
                        style: 'background-color: rgba(100,100,100,0.1); border: 2px dotted rgba(100,100,100,0.5);'
                    });
                }
            }

            function mouseStop(event) {
                // default behavior
                obj.removeRange('grid-selection-expand');
                delete obj.last.move;
                $(document).off('mousemove', mouseMove);
                $(document).off('mouseup', mouseStop);
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }

            return (new Date()).getTime() - time;
        },
        //GRID SELECT RECORD
        select: function() {
            var selected = 0;
            var sel = this.last.selection;
            if (!this.multiSelect) this.selectNone();
            for (var a = 0; a < arguments.length; a++) {
                var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                var record = this.get(recid);
                if (record == null) continue;
                var index = this.get(recid, true);
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                if (this.selectType == 'row') {
                    if (sel.indexes.indexOf(index) >= 0) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'select',
                        target: this.name,
                        recid: recid,
                        index: index
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    sel.indexes.push(index);
                    sel.indexes.sort(function(a, b) {
                        return a - b
                    });
                    recEl.addClass('w2ui-selected').data('selected', 'yes');
                    recEl.find('.w2ui-grid-select-check').prop("checked", true);
                    selected++;
                } else {
                    var col = arguments[a].column;
                    if (!w2utils.isInt(col)) { // select all columns
                        var cols = [];
                        for (var c in this.columns) {
                            if (this.columns[c].hidden) continue;
                            cols.push({
                                recid: recid,
                                column: parseInt(c)
                            });
                        }
                        if (!this.multiSelect) cols = cols.splice(0, 1);
                        return this.select.apply(this, cols);
                    }
                    var s = sel.columns[index] || [];
                    if ($.isArray(s) && s.indexOf(col) != -1) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'select',
                        target: this.name,
                        recid: recid,
                        index: index,
                        column: col
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    if (sel.indexes.indexOf(index) == -1) {
                        sel.indexes.push(index);
                        sel.indexes.sort(function(a, b) {
                            return a - b
                        });
                    }
                    s.push(col);
                    s.sort(function(a, b) {
                        return a - b
                    }); // sort function must be for numerical sort
                    recEl.find(' > td[col=' + col + ']').addClass('w2ui-selected');
                    selected++;
                    recEl.data('selected', 'yes');
                    recEl.find('.w2ui-grid-select-check').prop("checked", true);
                    // save back to selection object
                    sel.columns[index] = s;
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            // all selected?
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            this.status();
            this.addRange('selection');
            return selected;
        },


         selecttest: function() {
            var selected = 0;
            var grid = this.mainGrid || this;
            if(this.isLastGroup){
                var sel = grid.last.selection;
                if (!grid.multiSelect) this.selectNone();
                for (var a = 0; a < arguments.length; a++) {
                    var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                    var record = this.get(recid);
                    if (record == null) continue;
                    var index = this.get(recid, true);
                    var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                    if (grid.selectType == 'row') {
                        if (sel.indexes.indexOf(index) >= 0) continue;
                        // event before
                        var eventData = grid.trigger({
                            phase: 'before',
                            type: 'select',
                            target: grid.name,
                            recid: recid,
                            index: index
                        });
                        if (eventData.isCancelled === true) continue;
                        // default action
                        sel.indexes.push(index);
                        sel.indexes.sort(function(a, b) {
                            return a - b
                        });
                        recEl.addClass('w2ui-selected').data('selected', 'yes');
                        recEl.find('.w2ui-grid-select-check').prop("checked", true);
                        selected++;
                    } else {
                        var col = arguments[a].column;
                        if (!w2utils.isInt(col)) { // select all columns
                            var cols = [];
                            for (var c in this.columns) {
                                if (this.columns[c].hidden) continue;
                                cols.push({
                                    recid: recid,
                                    column: parseInt(c)
                                });
                            }
                            if (!grid.multiSelect) cols = cols.splice(0, 1);
                            return grid.select.apply(grid, cols);
                        }
                        var s = sel.columns[index] || [];
                        if ($.isArray(s) && s.indexOf(col) != -1) continue;
                        // event before
                        var eventData = grid.trigger({
                            phase: 'before',
                            type: 'select',
                            target: grid.name,
                            recid: recid,
                            index: index,
                            column: col
                        });
                        if (eventData.isCancelled === true) continue;
                        // default action
                        if (sel.indexes.indexOf(index) == -1) {
                            sel.indexes.push(index);
                            sel.indexes.sort(function(a, b) {
                                return a - b
                            });
                        }
                        s.push(col);
                        s.sort(function(a, b) {
                            return a - b
                        }); // sort function must be for numerical sort
                        recEl.find(' > td[col=' + col + ']').addClass('w2ui-selected');
                        selected++;
                        recEl.data('selected', 'yes');
                        recEl.find('.w2ui-grid-select-check').prop("checked", true);
                        // save back to selection object
                        sel.columns[index] = s;
                    }
                    // event after
                    grid.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }
                // all selected?
                if (sel.indexes.length == this.records.length || (grid.searchData.length !== 0 && sel.indexes.length == grid.last.searchIds.length)) {
                    $('#grid_' + this.name + '_check_all').prop('checked', true);
                } else {
                    $('#grid_' + this.name + '_check_all').prop('checked', false);
                }
                this.status();
                this.addRange('selection');
                return selected;
            }
        },


        unselecttest: function() {
            var unselected = 0;
            var grid = this.mainGrid || this;
            var sel = grid.last.selection;
            for (var a = 0; a < arguments.length; a++) {
                var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                var record = this.get(recid);
                if (record == null) continue;
                var index = this.get(record.recid, true);
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                if (grid.selectType == 'row') {
                    if (sel.indexes.indexOf(index) == -1) continue;
                    // event before
                    var eventData = grid.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: this.name,
                        recid: recid,
                        index: index
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    sel.indexes.splice(sel.indexes.indexOf(index), 1);
                    recEl.removeClass('w2ui-selected').removeData('selected');
                    if (recEl.length != 0) recEl[0].style.cssText = 'height: ' + this.recordHeight + 'px; ' + recEl.attr('custom_style');
                    recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    unselected++;
                } else {
                    var col = arguments[a].column;
                    if (!w2utils.isInt(col)) { // unselect all columns
                        var cols = [];
                        for (var c in this.columns) {
                            if (this.columns[c].hidden) continue;
                            cols.push({
                                recid: recid,
                                column: parseInt(c)
                            });
                        }
                        return grid.unselect.apply(grid, cols);
                    }
                    var s = sel.columns[index];
                    if (!$.isArray(s) || s.indexOf(col) == -1) continue;
                    // event before
                    var eventData = grid.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: grid.name,
                        recid: recid,
                        column: col
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    s.splice(s.indexOf(col), 1);
                    $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid) + ' > td[col=' + col + ']').removeClass('w2ui-selected');
                    unselected++;
                    if (s.length == 0) {
                        delete sel.columns[index];
                        sel.indexes.splice(sel.indexes.indexOf(index), 1);
                        recEl.removeData('selected');
                        recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    }
                }
                // event after
                grid.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            // all selected?
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            // show number of selected
            grid.status();
            this.addRange('selection');
            return unselected;
        },

        unselect: function() {
            var unselected = 0;
            var sel = this.last.selection;
            for (var a = 0; a < arguments.length; a++) {
                var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                var record = this.get(recid);
                if (record == null) continue;
                var index = this.get(record.recid, true);
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                if (this.selectType == 'row') {
                    if (sel.indexes.indexOf(index) == -1) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: this.name,
                        recid: recid,
                        index: index
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    sel.indexes.splice(sel.indexes.indexOf(index), 1);
                    recEl.removeClass('w2ui-selected').removeData('selected');
                    if (recEl.length != 0) recEl[0].style.cssText = 'height: ' + this.recordHeight + 'px; ' + recEl.attr('custom_style');
                    recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    unselected++;
                } else {
                    var col = arguments[a].column;
                    if (!w2utils.isInt(col)) { // unselect all columns
                        var cols = [];
                        for (var c in this.columns) {
                            if (this.columns[c].hidden) continue;
                            cols.push({
                                recid: recid,
                                column: parseInt(c)
                            });
                        }
                        return this.unselect.apply(this, cols);
                    }
                    var s = sel.columns[index];
                    if (!$.isArray(s) || s.indexOf(col) == -1) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: this.name,
                        recid: recid,
                        column: col
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    s.splice(s.indexOf(col), 1);
                    $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid) + ' > td[col=' + col + ']').removeClass('w2ui-selected');
                    unselected++;
                    if (s.length == 0) {
                        delete sel.columns[index];
                        sel.indexes.splice(sel.indexes.indexOf(index), 1);
                        recEl.removeData('selected');
                        recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    }
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            // all selected?
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            // show number of selected
            this.status();
            this.addRange('selection');
            return unselected;
        },
        selectAll: function() {
            if (this.multiSelect === false) return;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'select',
                target: this.name,
                all: true
            });
            if (eventData.isCancelled === true) return;
            // default action
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            var sel = this.last.selection;
            var cols = [];
            for (var c in this.columns) cols.push(parseInt(c));
            // if local data source and searched
            sel.indexes = [];
            if (!url && this.searchData.length !== 0) {
                // local search applied
                for (var i = 0; i < this.last.searchIds.length; i++) {
                    sel.indexes.push(this.last.searchIds[i]);
                    if (this.selectType != 'row') sel.columns[this.last.searchIds[i]] = cols.slice(); // .slice makes copy of the array
                }
            } else {
                var buffered = this.records.length;
                if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
                for (var i = 0; i < buffered; i++) {
                    sel.indexes.push(i);
                    if (this.selectType != 'row') sel.columns[i] = cols.slice(); // .slice makes copy of the array
                }
            }
            this.refresh();
            // enable/disable toolbar buttons
            var sel = this.getSelection();
            if (this.toolbar) {
                if (sel.length == 1) this.toolbar.enable('w2ui-edit');
                else this.toolbar.disable('w2ui-edit');
                if (sel.length >= 1) this.toolbar.enable('w2ui-delete');
                else this.toolbar.disable('w2ui-delete');
            }
            this.addRange('selection');
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        selectNone: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'unselect',
                target: this.name,
                all: true
            });
            if (eventData.isCancelled === true) return;
            // default action
            var sel = this.last.selection;
            for (var s in sel.indexes) {
                var index = sel.indexes[s];
                var rec = this.records[index];
                var recid = rec ? rec.recid : null;
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                recEl.removeClass('w2ui-selected').removeData('selected');
                recEl.find('.w2ui-grid-select-check').prop("checked", false);
                // for not rows
                if (this.selectType != 'row') {
                    var cols = sel.columns[index];
                    for (var c in cols) recEl.find(' > td[col=' + cols[c] + ']').removeClass('w2ui-selected');
                }
            }
            sel.indexes = [];
            sel.columns = {};
            if (this.toolbar) this.toolbar.disable('w2ui-edit', 'w2ui-delete');
            this.removeRange('selection');
            $('#grid_' + this.name + '_check_all').prop('checked', false);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        getSelectiontest: function(returnIndex) {
            var ret = [];
            var grid = this.mainGrid || this;
            var sel = grid.last.selection;
            if (grid.selectType == 'row') {
                for (var s in sel.indexes) {
                    if (!this.records[sel.indexes[s]]) continue;
                    if (returnIndex === true) ret.push(sel.indexes[s]);
                    else ret.push(this.records[sel.indexes[s]].recid);
                }
                return ret;
            } else {
                for (var s in sel.indexes) {
                    var cols = sel.columns[sel.indexes[s]];
                    if (!this.records[sel.indexes[s]]) continue;
                    for (var c in cols) {
                        ret.push({
                            recid: this.records[sel.indexes[s]].recid,
                            index: parseInt(sel.indexes[s]),
                            column: cols[c]
                        });
                    }
                }
                return ret;
            }
        },
        getSelection: function(returnIndex) {
            var ret = [];
            var sel = this.last.selection;
            if (this.selectType == 'row') {
                for (var s in sel.indexes) {
                    if (!this.records[sel.indexes[s]]) continue;
                    if (returnIndex === true) ret.push(sel.indexes[s]);
                    else ret.push(this.records[sel.indexes[s]].recid);
                }
                return ret;
            } else {
                for (var s in sel.indexes) {
                    var cols = sel.columns[sel.indexes[s]];
                    if (!this.records[sel.indexes[s]]) continue;
                    for (var c in cols) {
                        ret.push({
                            recid: this.records[sel.indexes[s]].recid,
                            index: parseInt(sel.indexes[s]),
                            column: cols[c]
                        });
                    }
                }
                return ret;
            }
        },
        // select: function() {
        //     var selected = 0;
        //     var grid = this.mainGrid || this;
        //     if (this.isLastGroup) {
        //         var sel = this.last.selection;
        //         if (!grid.multiSelect) this.selectNone();
        //         for (var a = 0; a < arguments.length; a++) {
        //             var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
        //             var record = this.get(recid);
        //             if (record == null) continue;
        //             var index = this.get(recid, true);
        //             var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
        //             if (this.selectType == 'row') {
        //                 if (sel.indexes.indexOf(index) >= 0) continue;
        //                 // event before
        //                 var eventData = grid.trigger({
        //                     phase: 'before',
        //                     type: 'select',
        //                     target: this.name,
        //                     recid: recid,
        //                     index: index
        //                 });
        //                 if (eventData.isCancelled === true) continue;
        //                 // default action
        //                 sel.indexes.push(index);
        //                 sel.indexes.sort(function(a, b) {
        //                     return a - b
        //                 });
        //                 recEl.addClass('w2ui-selected').data('selected', 'yes');
        //                 recEl.find('.w2ui-grid-select-check').prop("checked", true);
        //                 selected++;
        //             } else {
        //                 var col = arguments[a].column;
        //                 if (!w2utils.isInt(col)) { // select all columns
        //                     var cols = [];
        //                     for (var c in this.columns) {
        //                         if (this.columns[c].hidden) continue;
        //                         cols.push({
        //                             recid: recid,
        //                             column: parseInt(c)
        //                         });
        //                     }
        //                     if (!grid.multiSelect) cols = cols.splice(0, 1);
        //                     return this.select.apply(this, cols);
        //                 }
        //                 var s = sel.columns[index] || [];
        //                 if ($.isArray(s) && s.indexOf(col) != -1) continue;
        //                 // event before
        //                 var eventData = grid.trigger({
        //                     phase: 'before',
        //                     type: 'select',
        //                     target: this.name,
        //                     recid: recid,
        //                     index: index,
        //                     column: col
        //                 });
        //                 if (eventData.isCancelled === true) continue;
        //                 // default action
        //                 if (sel.indexes.indexOf(index) == -1) {
        //                     sel.indexes.push(index);
        //                     sel.indexes.sort(function(a, b) {
        //                         return a - b
        //                     });
        //                 }
        //                 s.push(col);
        //                 s.sort(function(a, b) {
        //                     return a - b
        //                 }); // sort function must be for numerical sort
        //                 recEl.find(' > td[col=' + col + ']').addClass('w2ui-selected');
        //                 selected++;
        //                 recEl.data('selected', 'yes');
        //                 recEl.find('.w2ui-grid-select-check').prop("checked", true);
        //                 // save back to selection object
        //                 sel.columns[index] = s;
        //             }
        //             // event after
        //             grid.trigger($.extend(eventData, {
        //                 phase: 'after'
        //             }));
        //         }
        //         // all selected?
        //         if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
        //             $('#grid_' + this.name + '_check_all').prop('checked', true);
        //         } else {
        //             $('#grid_' + this.name + '_check_all').prop('checked', false);
        //         }
        //         this.status();
        //         this.addRange('selection');
        //         grid.last.activeGrid = this.name;
        //         return selected;
        //     }
        // },

        // unselect: function() {
        //     var unselected = 0;
        //     var grid = this.mainGrid || this;
        //     var sel = this.last.selection;
        //     for (var a = 0; a < arguments.length; a++) {
        //         var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
        //         var record = this.get(recid);
        //         if (record == null) continue;
        //         var index = this.get(record.recid, true);
        //         var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
        //         if (this.selectType == 'row') {
        //             if (sel.indexes.indexOf(index) == -1) continue;
        //             // event before
        //             var eventData = grid.trigger({
        //                 phase: 'before',
        //                 type: 'unselect',
        //                 target: this.name,
        //                 recid: recid,
        //                 index: index
        //             });
        //             if (eventData.isCancelled === true) continue;
        //             // default action
        //             sel.indexes.splice(sel.indexes.indexOf(index), 1);
        //             recEl.removeClass('w2ui-selected').removeData('selected');
        //             if (recEl.length != 0) recEl[0].style.cssText = 'height: ' + this.recordHeight + 'px; ' + recEl.attr('custom_style');
        //             recEl.find('.w2ui-grid-select-check').prop("checked", false);
        //             unselected++;
        //         } else {
        //             var col = arguments[a].column;
        //             if (!w2utils.isInt(col)) { // unselect all columns
        //                 var cols = [];
        //                 for (var c in this.columns) {
        //                     if (this.columns[c].hidden) continue;
        //                     cols.push({
        //                         recid: recid,
        //                         column: parseInt(c)
        //                     });
        //                 }
        //                 return this.unselect.apply(this, cols);
        //             }
        //             var s = sel.columns[index];
        //             if (!$.isArray(s) || s.indexOf(col) == -1) continue;
        //             // event before
        //             var eventData = grid.trigger({
        //                 phase: 'before',
        //                 type: 'unselect',
        //                 target: this.name,
        //                 recid: recid,
        //                 column: col
        //             });
        //             if (eventData.isCancelled === true) continue;
        //             // default action
        //             s.splice(s.indexOf(col), 1);
        //             $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid) + ' > td[col=' + col + ']').removeClass('w2ui-selected');
        //             unselected++;
        //             if (s.length == 0) {
        //                 delete sel.columns[index];
        //                 sel.indexes.splice(sel.indexes.indexOf(index), 1);
        //                 recEl.removeData('selected');
        //                 recEl.find('.w2ui-grid-select-check').prop("checked", false);
        //             }
        //         }
        //         // event after
        //         grid.trigger($.extend(eventData, {
        //             phase: 'after'
        //         }));
        //     }
        //     // all selected?
        //     if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
        //         $('#grid_' + this.name + '_check_all').prop('checked', true);
        //     } else {
        //         $('#grid_' + this.name + '_check_all').prop('checked', false);
        //     }
        //     // show number of selected
        //     this.status();
        //     this.addRange('selection');
        //     return unselected;
        // },

        // selectAll: function() {
        //     var grid = this.mainGrid || this;
        //     if (grid.multiSelect === false) return;
        //     if (this.isLastGroup) {
        //         // event before
        //         var eventData = grid.trigger({
        //             phase: 'before',
        //             type: 'select',
        //             target: this.name,
        //             all: true
        //         });
        //         if (eventData.isCancelled === true) return;
        //         // default action
        //         var url = (typeof this.url != 'object' ? this.url : this.url.get);
        //         var sel = grid.last.selection;
        //         var cols = [];
        //         for (var c in this.columns) cols.push(parseInt(c));
        //         // if local data source and searched
        //         sel.indexes = [];
        //         if (!url && this.searchData.length !== 0) {
        //             // local search applied
        //             for (var i = 0; i < this.last.searchIds.length; i++) {
        //                 sel.indexes.push(this.last.searchIds[i]);
        //                 if (this.selectType != 'row') sel.columns[this.last.searchIds[i]] = cols.slice(); // .slice makes copy of the array
        //             }
        //         } else {
        //             var buffered = this.records.length;
        //             if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
        //             for (var i = 0; i < buffered; i++) {
        //                 sel.indexes.push(i);
        //                 if (this.selectType != 'row') sel.columns[i] = cols.slice(); // .slice makes copy of the array
        //             }
        //         }
        //         this.refresh();
        //         // enable/disable toolbar buttons
        //         var sel = this.getSelection();
        //         if (sel.length == 1) grid.toolbar.enable('w2ui-edit');
        //         else grid.toolbar.disable('w2ui-edit');
        //         if (sel.length >= 1) grid.toolbar.enable('w2ui-delete');
        //         else grid.toolbar.disable('w2ui-delete');
        //         this.addRange('selection');
        //         // event after
        //         grid.trigger($.extend(eventData, {
        //             phase: 'after'
        //         }));
        //     }
        // },

        // selectNone: function() {
        //     // event before
        //     var grid = this.mainGrid || this;
        //     grid.last.activeGrid = '';
        //     if (this.isLastGroup) {
        //         var eventData = grid.trigger({
        //             phase: 'before',
        //             type: 'unselect',
        //             target: this.name,
        //             all: true
        //         });
        //         if (eventData.isCancelled === true) return;
        //         // default action
        //         var sel = this.last.selection;
        //         for (var s in sel.indexes) {
        //             var index = sel.indexes[s];
        //             var rec = this.records[index];
        //             var recid = rec ? rec.recid : null;
        //             var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
        //             recEl.removeClass('w2ui-selected').removeData('selected');
        //             recEl.find('.w2ui-grid-select-check').prop("checked", false);
        //             // for not rows
        //             if (this.selectType != 'row') {
        //                 var cols = sel.columns[index];
        //                 for (var c in cols) recEl.find(' > td[col=' + cols[c] + ']').removeClass('w2ui-selected');
        //             }
        //         }
        //         sel.indexes = [];
        //         sel.columns = {};
        //         grid.toolbar.disable('w2ui-edit', 'w2ui-delete');
        //         this.removeRange('selection');
        //         $('#grid_' + this.name + '_check_all').prop('checked', false);
        //         // event after
        //         grid.trigger($.extend(eventData, {
        //             phase: 'after'
        //         }));
        //     }
        // },

        // getSelection: function(returnIndex) {
        //     var ret = [];
        //     var grid = this.mainGrid || this;
        //     var sel = this.last.selection;
        //     if (this.selectType == 'row') {
        //         for (var s in sel.indexes) {
        //             if (!this.records[sel.indexes[s]]) continue;
        //             if (returnIndex === true) ret.push(sel.indexes[s]);
        //             else ret.push(this.records[sel.indexes[s]].recid);
        //         }
        //         return ret;
        //     } else {
        //         for (var s in sel.indexes) {
        //             var cols = sel.columns[sel.indexes[s]];
        //             if (!this.records[sel.indexes[s]]) continue;
        //             for (var c in cols) {
        //                 ret.push({
        //                     recid: this.records[sel.indexes[s]].recid,
        //                     index: parseInt(sel.indexes[s]),
        //                     column: cols[c]
        //                 });
        //             }
        //         }
        //         return ret;
        //     }
        // },

        search: function(field, value, override) {
            var obj = this;
            obj.hasInitialSearchData = false;
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            var searchData = [];
            var last_multi = this.last.multi;
            var last_logic = this.last.logic;
            var last_field = this.last.field;
            var last_search = this.last.search;
            // 1: search() - advanced search (reads from popup)
            if (arguments.length == 0) {
                last_search = '';
                // advanced search
                for (var s in this.searches) {
                    var search = this.searches[s];
                    var operator = $('#grid_' + this.name + '_operator_' + s).val();
                    var field1 = $('#grid_' + this.name + '_field_' + s);
                    var field2 = $('#grid_' + this.name + '_field2_' + s);
                    var value1 = field1.val();
                    var value2 = field2.val();
                    var svalue = null;
                    if (['int', 'float', 'money', 'currency', 'percent'].indexOf(search.type) != -1) {
                        var fld1 = field1.data('w2field');
                        var fld2 = field2.data('w2field');
                        if (fld1) value1 = fld1.clean(value1);
                        if (fld2) value2 = fld2.clean(value2);
                    }
                    if (['list', 'enum'].indexOf(search.type) != -1) {
                        value1 = field1.data('selected') || {};
                        if ($.isArray(value1)) {
                            svalue = [];
                            for (var v in value1) {
                                svalue.push(w2utils.isFloat(value1[v].id) ? parseFloat(value1[v].id) : String(value1[v].id).toLowerCase());
                                delete value1[v].hidden;
                            }
                        } else {
                            value1 = value1.id || '';
                        }
                    }
                    if ((value1 != '' && value1 != null) || (typeof value2 != 'undefined' && value2 != '')) {
                        var tmp = {
                            field: search.field,
                            type: search.type,
                            operator: operator
                        }
                        if (operator == 'between') {
                            $.extend(tmp, {
                                value: [value1, value2]
                            });
                        } else if (operator == 'in' && typeof value1 == 'string') {
                            $.extend(tmp, {
                                value: value1.split(',')
                            });
                        } else if (operator == 'not in' && typeof value1 == 'string') {
                            $.extend(tmp, {
                                value: value1.split(',')
                            });
                        } else {
                            $.extend(tmp, {
                                value: value1
                            });
                        }
                        if (svalue) $.extend(tmp, {
                            svalue: svalue
                        });
                        // conver date to unix time
                        try {
                            if (search.type == 'date' && operator == 'between') {
                                tmp.value[0] = value1; // w2utils.isDate(value1, w2utils.settings.date_format, true).getTime();
                                tmp.value[1] = value2; // w2utils.isDate(value2, w2utils.settings.date_format, true).getTime();
                            }
                            if (search.type == 'date' && operator == 'is') {
                                tmp.value = value1; // w2utils.isDate(value1, w2utils.settings.date_format, true).getTime();
                            }
                        } catch (e) {

                        }
                        searchData.push(tmp);
                    }
                }
                if (searchData.length > 0 && !url) {
                    last_multi = true;
                    last_logic = 'AND';
                } else {
                    last_multi = true;
                    last_logic = 'AND';
                }
            }
            // 2: search(field, value) - regular search
            if (typeof field == 'string') {
                last_field = field;
                last_search = value;
                last_multi = false;
                last_logic = 'OR';
                // loop through all searches and see if it applies
                if (typeof value != 'undefined') {
                    if (field.toLowerCase() == 'all') {
                        // if there are search fields loop thru them
                        if (this.searches.length > 0) {
                            for (var s in this.searches) {
                                var search = this.searches[s];
                                if (search.type == 'text' || (search.type == 'alphanumeric' && w2utils.isAlphaNumeric(value)) || (search.type == 'int' && w2utils.isInt(value)) || (search.type == 'float' && w2utils.isFloat(value)) || (search.type == 'percent' && w2utils.isFloat(value)) || (search.type == 'hex' && w2utils.isHex(value)) || (search.type == 'currency' && w2utils.isMoney(value)) || (search.type == 'money' && w2utils.isMoney(value)) || (search.type == 'date' && w2utils.isDate(value))) {
                                    var tmp = {
                                        field: search.field,
                                        type: search.type,
                                        operator: (search.type == 'text' ? 'contains' : 'is'),
                                        value: value
                                    };
                                    searchData.push(tmp);
                                }
                                // range in global search box
                                if (['int', 'float', 'money', 'currency', 'percent'].indexOf(search.type) != -1 && String(value).indexOf('-') != -1) {
                                    var t = String(value).split('-');
                                    var tmp = {
                                        field: search.field,
                                        type: search.type,
                                        operator: 'between',
                                        value: [t[0], t[1]]
                                    };
                                    searchData.push(tmp);
                                }
                            }
                        } else {
                            // no search fields, loop thru columns
                            for (var c in this.columns) {
                                var tmp = {
                                    field: this.columns[c].field,
                                    type: 'text',
                                    operator: 'contains',
                                    value: value
                                };
                                searchData.push(tmp);
                            }
                        }
                    } else {
                        var el = $('#grid_' + this.name + '_search_all');
                        var search = this.getSearch(field);
                        if (search == null) search = {
                            field: field,
                            type: 'text'
                        };
                        if (search.field == field) this.last.caption = search.caption;
                        if (search.type == 'list') {
                            var tmp = el.data('selected');
                            if (tmp && !$.isEmptyObject(tmp)) value = tmp.id;
                        }
                        if (value != '') {
                            var op = 'contains';
                            var val = value;
                            if (['date', 'time', 'list'].indexOf(search.type) != -1) op = 'is';
                            if (search.type == 'int' && value != '') {
                                op = 'is';
                                if (String(value).indexOf('-') != -1) {
                                    var tmp = value.split('-');
                                    if (tmp.length == 2) {
                                        op = 'between';
                                        val = [parseInt(tmp[0]), parseInt(tmp[1])];
                                    }
                                }
                                if (String(value).indexOf(',') != -1) {
                                    var tmp = value.split(',');
                                    op = 'in';
                                    val = [];
                                    for (var t in tmp) val.push(tmp[t]);
                                }
                            }
                            var tmp = {
                                field: search.field,
                                type: search.type,
                                operator: op,
                                value: val
                            }
                            searchData.push(tmp);
                        }
                    }
                }
            }
            // 3: search([ { field, value, [operator,] [type] }, { field, value, [operator,] [type] } ], logic) - submit whole structure
            if ($.isArray(field)) {
                var logic = 'AND';
                if (typeof value == 'string') {
                    logic = value.toUpperCase();
                    if (logic != 'OR' && logic != 'AND') logic = 'AND';
                }
                last_search = '';
                last_multi = true;
                last_logic = logic;
                for (var f in field) {
                    var data = field[f];
                    var search = this.getSearch(data.field);
                    if (search == null) search = {
                        type: 'text',
                        operator: 'contains'
                    };
                    // merge current field and search if any
                    searchData.push($.extend(true, {}, search, data));
                }
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'search',
                target: this.name,
                searchData: searchData,
                searchField: (field ? field : 'multi'),
                searchValue: (value ? value : 'multi')
            });
            if (eventData.isCancelled === true) return;
            // default action
            this.searchData = eventData.searchData;
            this.last.field = last_field;
            this.last.search = last_search;
            this.last.multi = last_multi;
            this.last.logic = last_logic;
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            // -- clear all search field
            this.searchClose();
            this.set({
                expanded: false
            }, true);
            // apply search
            if (url) {
                this.last.xhr_offset = 0;
                this.reload();
            } else {
                // local search
                this.localSearch(false, override);
                this.refresh();
            }

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        searchOpen: function() {
            if (!this.box) return;
            if (this.searches.length == 0) return;
            var obj = this;
            // show search
            $('#tb_' + this.name + '_toolbar_item_w2ui-search-advanced').w2overlay(
                this.getSearchesHTML(), {
                    name: 'searches-' + this.name,
                    left: -10,
                    'class': 'w2ui-grid-searches',
                    onShow: function() {
                        if (obj.last.logic == 'OR'  && !obj.hasInitialSearchData) obj.searchData = [];
                        obj.initSearches();
                        $('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches').data('grid-name', obj.name);
                        var sfields = $('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches *[rel=search]');
                        if (sfields.length > 0) sfields[0].focus();
                    }
                }
            );
        },

        searchClose: function() {
            if (!this.box) return;
            if (this.searches.length == 0) return;
            if (this.toolbar) this.toolbar.uncheck('w2ui-search-advanced')
                // hide search
            if ($('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches').length > 0) {
                $().w2overlay('', {
                    name: 'searches-' + this.name
                });
            }
        },

        searchShowFields: function() {
            var el = $('#grid_' + this.name + '_search_all');
            var html = '<div class="w2ui-select-field"><table>';
            for (var s = -1; s < this.searches.length; s++) {
                var search = this.searches[s];
                if (s == -1) {
                    if (!this.multiSearch) continue;
                    search = {
                        field: 'all',
                        caption: w2utils.lang('All Fields')
                    };
                } else {
                    if (this.searches[s].hidden === true) continue;
                }
                html += '<tr ' + (w2utils.isIOS ? 'onTouchStart' : 'onClick') + '="w2ui[\'' + this.name + '\'].initAllField(\'' + search.field + '\')">' +
                    '    <td><input type="radio" tabIndex="-1" ' + (search.field == this.last.field ? 'checked' : '') + '></td>' +
                    '    <td>' + search.caption + '</td>' +
                    '</tr>';
            }
            html += "</table></div>";
            // need timer otherwise does nto show with list type
            setTimeout(function() {
                $(el).w2overlay(html, {
                    left: -10
                });
            }, 1);
        },

        initAllField: function(field, value) {
            var el = $('#grid_' + this.name + '_search_all');
            var search = this.getSearch(field);
            if (field == 'all') {
                search = {
                    field: 'all',
                    caption: w2utils.lang('All Fields')
                };
                el.w2field('clear');
                el.change().focus();
            } else {
                var st = search.type;
                if (['enum', 'select'].indexOf(st) != -1) st = 'list';
                el.w2field(st, $.extend({}, search.options, {
                    suffix: '',
                    autoFormat: false,
                    selected: value
                }));
                if (['list', 'enum'].indexOf(search.type) != -1) {
                    this.last.search = '';
                    this.last.item = '';
                    el.val('');
                }
                // set focus
                setTimeout(function() {
                    el.focus(); /* do not do el.change() as it will refresh grid and pull from server */
                }, 1);
            }
            // update field
            if (this.last.search != '') {
                this.search(search.field, this.last.search);
            } else {
                this.last.field = search.field;
                this.last.caption = search.caption;
            }
            el.attr('placeholder', search.caption);
            $().w2overlay();
        },

        searchReset: function(noRefresh) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'search',
                target: this.name,
                searchData: []
            });
            if (eventData.isCancelled === true) return;
            // default action
            this.searchData = [];
            this.last.search = '';
            this.last.logic = 'OR';
            // --- do not reset to All Fields (I think)
            // if (this.last.multi) {
            //     if (!this.multiSearch) {
            //         this.last.field     = this.searches[0].field;
            //         this.last.caption     = this.searches[0].caption;
            //     } else {
            //         this.last.field      = 'all';
            //         this.last.caption     = w2utils.lang('All Fields');
            //     }
            // }
            this.last.multi = false;
            this.last.xhr_offset = 0;
            // reset scrolling position
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            // -- clear all search field
            this.searchClose();
            $('#grid_' + this.name + '_search_all').val('');
            // apply search
            if (!noRefresh) this.reload();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        clear: function(noRefresh) {
            // this.offset              = 0;   // clear should not reset offset
            // this.total               = 0;   // clear should not reset total
            this.records = [];
            this.summary = [];
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            this.last.range_start = null;
            this.last.range_end = null;
            this.last.xhr_offset = 0;
            if (!noRefresh) this.refresh();
        },

        reset: function(noRefresh) {
            // reset last remembered state
            this.offset = 0;
            this.total = 0;
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            this.last.range_start = null;
            this.last.range_end = null;
            this.last.xhr_offset = 0;
            this.searchReset(noRefresh);
            // initial sort
            if (this.last.sortData != null) this.sortData = this.last.sortData;
            // select none without refresh
            this.set({
                expanded: false
            }, true);
            // refresh
            if (!noRefresh) this.refresh();
        },

        resetGroups: function(noRefresh) {
            // reset last remembered state
            this.offset = 0;
            this.total = 0;
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            this.last.range_start = null;
            this.last.range_end = null;
            this.last.xhr_offset = 0;
            if (this.url)
                this.records = [];
            // this.searchReset(noRefresh);
            // initial sort
            if (this.last.sortData != null) this.sortData = this.last.sortData;
            // select none without refresh
            this.set({
                expanded: false
            }, true);
            // refresh
            if (!noRefresh) this.refresh();
            this.reload();
        },

        skip: function(offset) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                this.offset = parseInt(offset);
                if (this.offset > this.total) this.offset = this.total - this.limit;
                if (this.offset < 0 || !w2utils.isInt(this.offset)) this.offset = 0;
                this.records = [];
                this.last.xhr_offset = 0;
                this.last.pull_more = true;
                this.last.scrollTop = 0;
                this.last.scrollLeft = 0;
                $('#grid_' + this.name + '_records').prop('scrollTop', 0);
                this.reload();
            } else {
                console.log('ERROR: grid.skip() can only be called when you have remote data source.');
            }
        },

        load: function(url, callBack) {
            if (typeof url == 'undefined') {
                console.log('ERROR: You need to provide url argument when calling .load() method of "' + this.name + '" object.');
                return;
            }
            // default action
            this.request('get-records', {}, url, callBack);
        },

        reload: function(callBack) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                this.clear(true);
                this.request('get-records', {}, null, callBack);
            } else {
                this.last.scrollTop = 0;
                this.last.scrollLeft = 0;
                this.last.range_start = null;
                this.last.range_end = null;
                this.localSearch();
                this.refresh();
                if (typeof callBack == 'function') callBack({
                    status: 'success'
                });
            }
        },

        request: function(cmd, add_params, url, callBack) {
            if (typeof add_params == 'undefined') add_params = {};
            if (typeof url == 'undefined' || url == '' || url == null) url = this.url;
            if (url == '' || url == null) return;
            // build parameters list
            var params = {};
            if (!w2utils.isInt(this.offset)) this.offset = 0;
            if (!w2utils.isInt(this.last.xhr_offset)) this.last.xhr_offset = 0;
            // add list params
            params['cmd'] = cmd;
            params['selected'] = this.getSelection();
            params['limit'] = this.limit;
            params['offset'] = parseInt(this.offset) + this.last.xhr_offset;
            params['search'] = this.searchData;
            params['searchLogic'] = this.last.logic;
            params['sort'] = this.sortData;
            if (this.searchData.length == 0) {
                delete params['search'];
                delete params['searchLogic'];
            }
            if (this.sortData.length == 0) {
                delete params['sort'];
            }
            // append other params
            $.extend(params, this.postData);
            $.extend(params, add_params);
            // event before
            if (cmd == 'get-records') {
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'request',
                    target: this.name,
                    url: url,
                    postData: params
                });
                if (eventData.isCancelled === true) {
                    if (typeof callBack == 'function') callBack({
                        status: 'error',
                        message: 'Request aborted.'
                    });
                    return;
                }
            } else {
                var eventData = {
                    url: url,
                    postData: params
                };
            }
            // call server to get data
            var obj = this;
            if (this.last.xhr_offset == 0) {
                this.lock(this.msgRefresh, true);
            } else {
                var more = $('#grid_' + this.name + '_rec_more');
                if (this.autoLoad === true) {
                    more.show().find('td').html('<div><div style="width: 20px; height: 20px;" class="w2ui-spinner"></div></div>');
                } else {
                    more.find('td').html('<div>' + w2utils.lang('Load') + ' ' + obj.limit + ' ' + w2utils.lang('More') + '...</div>');
                }
            }
            if (this.last.xhr) try {
                this.last.xhr.abort();
            } catch (e) {};
            // URL
            var url = (typeof eventData.url != 'object' ? eventData.url : eventData.url.get);
            if (params.cmd == 'save-records' && typeof eventData.url == 'object') url = eventData.url.save;
            if (params.cmd == 'delete-records' && typeof eventData.url == 'object') url = eventData.url.remove;
            // process url with routeData
            if (!$.isEmptyObject(obj.routeData)) {
                var info = w2utils.parseRoute(url);
                if (info.keys.length > 0) {
                    for (var k = 0; k < info.keys.length; k++) {
                        if (obj.routeData[info.keys[k].name] == null) continue;
                        url = url.replace((new RegExp(':' + info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                    }
                }
            }
            // ajax ptions
            var ajaxOptions = {
                type: 'POST',
                url: url,
                data: eventData.postData,
                dataType: 'text' // expected data type from server
            };
            if (w2utils.settings.dataType == 'HTTP') {
                ajaxOptions.data = (typeof ajaxOptions.data == 'object' ? String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']') : ajaxOptions.data);
            }
            if (w2utils.settings.dataType == 'RESTFULL') {
                ajaxOptions.type = 'GET';
                if (params.cmd == 'save-records') ajaxOptions.type = 'PUT'; // so far it is always update
                if (params.cmd == 'delete-records') ajaxOptions.type = 'DELETE';
                ajaxOptions.data = (typeof ajaxOptions.data == 'object' ? String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']') : ajaxOptions.data);
            }
            if (w2utils.settings.dataType == 'JSON') {
                ajaxOptions.type = 'POST';
                ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                ajaxOptions.contentType = 'application/json';
            }
            if (this.method) ajaxOptions.type = this.method;

            this.last.xhr_cmd = params.cmd;
            this.last.xhr_start = (new Date()).getTime();
            this.last.xhr = $.ajax(ajaxOptions)
                .done(function(data, status, xhr) {
                    obj.requestComplete(status, cmd, callBack);
                })
                .fail(function(xhr, status, error) {
                    // trigger event
                    var errorObj = {
                        status: status,
                        error: error,
                        rawResponseText: xhr.responseText
                    };
                    var eventData2 = obj.trigger({
                        phase: 'before',
                        type: 'error',
                        error: errorObj,
                        xhr: xhr
                    });
                    if (eventData2.isCancelled === true) return;
                    // default behavior
                    if (status != 'abort') {
                        var data;
                        try {
                            data = $.parseJSON(xhr.responseText)
                        } catch (e) {}
                        console.log('ERROR: Server communication failed.',
                            '\n   EXPECTED:', {
                                status: 'success',
                                total: 5,
                                records: [{
                                    recid: 1,
                                    field: 'value'
                                }]
                            },
                            '\n         OR:', {
                                status: 'error',
                                message: 'error message'
                            },
                            '\n   RECEIVED:', typeof data == 'object' ? data : xhr.responseText);
                        obj.requestComplete('error', cmd, callBack);
                    }
                    // event after
                    obj.trigger($.extend(eventData2, {
                        phase: 'after'
                    }));
                });
            if (cmd == 'get-records') {
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        requestComplete: function(status, cmd, callBack) {
            var obj = this;
            this.unlock();
            setTimeout(function() {
                obj.status(w2utils.lang('Server Response') + ' ' + ((new Date()).getTime() - obj.last.xhr_start) / 1000 + ' ' + w2utils.lang('sec'));
            }, 10);
            this.last.pull_more = false;
            this.last.pull_refresh = true;

            // event before
            var event_name = 'load';
            if (this.last.xhr_cmd == 'save-records') event_name = 'save';
            if (this.last.xhr_cmd == 'delete-records') event_name = 'deleted';
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: event_name,
                xhr: this.last.xhr,
                status: status
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            // parse server response
            var data;
            var responseText = this.last.xhr.responseText;
            if (status != 'error') {
                // default action
                if (typeof responseText != 'undefined' && responseText != '') {
                    // check if the onLoad handler has not already parsed the data
                    if (typeof responseText == "object") {
                        data = responseText;
                    } else {
                        if (typeof obj.parser == 'function') {
                            data = obj.parser(responseText);
                            if (typeof data != 'object') {
                                console.log('ERROR: Your parser did not return proper object');
                            }
                        } else {
                            // $.parseJSON or $.getJSON did not work because those expect perfect JSON data - where everything is in double quotes
                            //
                            // TODO: avoid (potentially malicious) code injection from the response.
                            try {
                                eval('data = ' + responseText);
                            } catch (e) {}
                        }
                    }
                    // convert recids
                    if (obj.recid) {
                        for (var r in data.records) {
                            data.records[r]['recid'] = data.records[r][obj.recid];
                        }
                    }
                    if (typeof data == 'undefined') {
                        data = {
                            status: 'error',
                            message: this.msgNotJSON,
                            responseText: responseText
                        };
                    }
                    if (data['status'] == 'error') {
                        obj.error(data['message']);
                    } else {
                        if (cmd == 'get-records') {
                            if (this.last.xhr_offset == 0) {
                                this.records = [];
                                this.summary = [];
                                //data.xhr_status=data.status;
                                delete data.status;
                                $.extend(true, this, data);
                            } else {
                                var records = data.records;
                                delete data.records;
                                //data.xhr_status=data.status;
                                delete data.status;
                                $.extend(true, this, data);
                                for (var r in records) {
                                    this.records.push(records[r]);
                                }
                            }
                        }
                        if (cmd == 'delete-records') {
                            // reset() also triggers reload
                            this.reset(); // unselect old selections
                            return;
                        }
                    }
                }
            } else {
                data = {
                    status: 'error',
                    message: this.msgAJAXerror,
                    responseText: responseText
                };
                obj.error(this.msgAJAXerror);
            }
            // event after
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.localSort();
                this.localSearch();
            }
            this.total = parseInt(this.total);
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // do not refresh if loading on infinite scroll
            if (this.last.xhr_offset == 0) this.refresh();
            else this.scroll();
            // call back
            if (typeof callBack == 'function') callBack(data);
        },

        error: function(msg) {
            var obj = this;
            // let the management of the error outside of the grid
            var eventData = this.trigger({
                target: this.name,
                type: 'error',
                message: msg,
                xhr: this.last.xhr
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            if (this.last.xhr.status !== 401) { // modified : to prevent popup error on unauthorized request
                w2alert(msg, 'Error');
            }
            //w2alert(msg, 'Error');
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        getChanges: function() {
            var changes = [];
            for (var r in this.records) {
                var rec = this.records[r];
                if (typeof rec['changes'] != 'undefined') {
                    changes.push($.extend(true, {
                        recid: rec.recid
                    }, rec.changes));
                }
            }
            return changes;
        },

        mergeChanges: function() {
            var changes = this.getChanges();
            for (var c in changes) {
                var record = this.get(changes[c].recid);
                for (var s in changes[c]) {
                    if (s == 'recid') continue; // do not allow to change recid
                    try {
                        eval('record.' + s + ' = changes[c][s]');
                    } catch (e) {}
                    delete record.changes;
                }
            }
            this.refresh();
        },

        // ===================================================
        // --  Action Handlers

        save: function() {
            var obj = this;
            var changes = this.getChanges();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'submit',
                changes: changes
            });
            if (eventData.isCancelled === true) return;
            var url = (typeof this.url != 'object' ? this.url : this.url.save);
            if (url) {
                this.request('save-records', {
                        'changes': eventData.changes
                    }, null,
                    function(data) {
                        if (data.status !== 'error') {
                            // only merge changes, if save was successful
                            obj.mergeChanges();
                        }
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }
                );
            } else {
                this.mergeChanges();
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        editField: function(recid, column, value, event) {
            var obj = this;
            var index = obj.get(recid, true);
            var rec = obj.records[index];
            var col = obj.columns[column];
            var edit = col ? col.editable : null;
            if (!rec || !col || !edit || rec.editable === false) return;
            if (['enum', 'file'].indexOf(edit.type) != -1) {
                console.log('ERROR: input types "enum" and "file" are not supported in inline editing.');
                return;
            }
            if(rec.items) edit.items = rec.items;
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'editField',
                target: obj.name,
                recid: recid,
                column: column,
                value: value,
                index: index,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            value = eventData.value;
            // default behaviour
            this.selectNone();
            this.select({
                recid: recid,
                column: column
            });
            this.last.edit_col = column;
            if (['checkbox', 'check'].indexOf(edit.type) != -1) return;
            // create input element
            var tr = $('#grid_' + obj.name + '_rec_' + w2utils.escapeId(recid));
            var el = tr.find('[col=' + column + '] > div');
            if (typeof edit.inTag == 'undefined') edit.inTag = '';
            if (typeof edit.outTag == 'undefined') edit.outTag = '';
            if (typeof edit.style == 'undefined') edit.style = '';
            if (typeof edit.items == 'undefined') edit.items = [];
            var val = (rec.changes && typeof rec.changes[col.field] != 'undefined' ? w2utils.stripTags(rec.changes[col.field]) : w2utils.stripTags(rec[col.field]));
            if (val == null || typeof val == 'undefined') val = '';
            if (typeof value != 'undefined' && value != null) val = value;
            var addStyle = (typeof col.style != 'undefined' ? col.style + ';' : '');
            if (typeof col.render == 'string' && ['number', 'int', 'float', 'money', 'percent'].indexOf(col.render.split(':')[0]) != -1) {
                addStyle += 'text-align: right;';
            }
            // mormalize items
            if (edit.items.length > 0 && !$.isPlainObject(edit.items[0])) {
                edit.items = w2obj.field.prototype.normMenu(edit.items);
            }
            if (edit.type == 'select') {
                var html = '';
                for (var i in edit.items) {
                    html += '<option value="' + edit.items[i].id + '" ' + (edit.items[i].id == val ? 'selected' : '') + '>' + edit.items[i].text + '</option>';
                }
                el.addClass('w2ui-editable')
                    .html('<select id="grid_' + obj.name + '_edit_' + recid + '_' + column + '" column="' + column + '" ' +
                        '    style="width: 100%; ' + addStyle + edit.style + '" field="' + col.field + '" recid="' + recid + '" ' +
                        '    ' + edit.inTag +
                        '>' + html + '</select>' + edit.outTag);
                el.find('select').focus()
                    .on('change', function(event) {
                        delete obj.last.move;
                    })
                    .on('blur', function(event) {
                        obj.editChange.call(obj, this, index, column, event);
                    });
            } else {
                el.addClass('w2ui-editable')
                    .html('<input id="grid_' + obj.name + '_edit_' + recid + '_' + column + '" ' +
                        '    type="text" style="font-family: inherit; font-size: inherit; outline: none; ' + addStyle + edit.style + '" field="' + col.field + '" recid="' + recid + '" ' +
                        '    column="' + column + '" ' + edit.inTag +
                        '>' + edit.outTag);
                if (value == null) el.find('input').val(val != 'object' ? val : '');
                // init w2field
                var input = el.find('input').get(0);
                $(input).w2field(edit.type, $.extend(edit, {
                        selected: val
                    }))
                    // add blur listener
                setTimeout(function() {
                    var tmp = input;
                    if (edit.type == 'list') {
                        tmp = $($(input).data('w2field').helpers.focus).find('input');
                        if (typeof val != 'object' && val != '') tmp.val(val).css({
                            opacity: 1
                        }).prev().css({
                            opacity: 1
                        });
                    }
                    $(tmp).on('blur', function(event) {
                        obj.editChange.call(obj, input, index, column, event);
                    });
                }, 10);
                if (value != null) $(input).val(val != 'object' ? val : '');
            }
            setTimeout(function() {
                el.find('input, select')
                    .on('click', function(event) {
                        event.stopPropagation();
                    })
                    .on('keydown', function(event) {
                        var cancel = false;
                        switch (event.keyCode) {
                            case 9: // tab
                                cancel = true;
                                var next_rec = recid;
                                var next_col = event.shiftKey ? obj.prevCell(column, true) : obj.nextCell(column, true);
                                // next or prev row
                                if (next_col == null) {
                                    var tmp = event.shiftKey ? obj.prevRow(index) : obj.nextRow(index);
                                    if (tmp != null && tmp != index) {
                                        next_rec = obj.records[tmp].recid;
                                        // find first editable row
                                        for (var c in obj.columns) {
                                            var tmp = obj.columns[c].editable;
                                            if (typeof tmp != 'undefined' && ['checkbox', 'check'].indexOf(tmp.type) == -1) {
                                                next_col = parseInt(c);
                                                if (!event.shiftKey) break;
                                            }
                                        }
                                    }

                                }
                                if (next_rec === false) next_rec = recid;
                                if (next_col == null) next_col = column;
                                // init new or same record
                                this.blur();
                                setTimeout(function() {
                                    if (obj.selectType != 'row') {
                                        obj.selectNone();
                                        obj.select({
                                            recid: next_rec,
                                            column: next_col
                                        });
                                    } else {
                                        obj.editField(next_rec, next_col, null, event);
                                    }
                                }, 1);
                                break;

                            case 13: // enter
                                this.blur();
                                var next = event.shiftKey ? obj.prevRow(index) : obj.nextRow(index);
                                if (next != null && next != index) {
                                    setTimeout(function() {
                                        if (obj.selectType != 'row') {
                                            obj.selectNone();
                                            obj.select({
                                                recid: obj.records[next].recid,
                                                column: column
                                            });
                                        } else {
                                            obj.editField(obj.records[next].recid, column, null, event);
                                        }
                                    }, 100);
                                }
                                break;

                            case 38: // up arrow
                                if (!event.shiftKey) break;
                                cancel = true;
                                var next = obj.prevRow(index);
                                if (next != index) {
                                    this.blur();
                                    setTimeout(function() {
                                        if (obj.selectType != 'row') {
                                            obj.selectNone();
                                            obj.select({
                                                recid: obj.records[next].recid,
                                                column: column
                                            });
                                        } else {
                                            obj.editField(obj.records[next].recid, column, null, event);
                                        }
                                    }, 1);
                                }
                                break;

                            case 40: // down arrow
                                if (!event.shiftKey) break;
                                cancel = true;
                                var next = obj.nextRow(index);
                                if (next != null && next != index) {
                                    this.blur();
                                    setTimeout(function() {
                                        if (obj.selectType != 'row') {
                                            obj.selectNone();
                                            obj.select({
                                                recid: obj.records[next].recid,
                                                column: column
                                            });
                                        } else {
                                            obj.editField(obj.records[next].recid, column, null, event);
                                        }
                                    }, 1);
                                }
                                break;

                            case 27: // escape
                                var old = obj.parseField(rec, col.field);
                                if (rec.changes && typeof rec.changes[col.field] != 'undefined') old = rec.changes[col.field];
                                this.value = typeof old != 'undefined' ? old : '';
                                this.blur();
                                setTimeout(function() {
                                    obj.select({
                                        recid: recid,
                                        column: column
                                    })
                                }, 1);
                                break;
                        }
                        if (cancel)
                            if (event.preventDefault) event.preventDefault();
                    });
                // focus and select
                var tmp = el.find('input').focus();
                if (value != null) {
                    // set cursor to the end
                    tmp[0].setSelectionRange(tmp.val().length, tmp.val().length);
                } else {
                    tmp.select();
                }

            }, 1);
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },
        //GRID EDITCHANGE EVENT
        editChange: function(el, index, column, event) {
            // all other fields
            var summary = index < 0;
            index = index < 0 ? -index - 1 : index;
            var records = summary ? this.summary : this.records;
            var rec = records[index];
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(rec.recid));
            var col = this.columns[column];
            var new_val = el.value;
            var old_val = this.parseField(rec, col.field);
            var tmp = $(el).data('w2field');
            if (tmp) {
                new_val = tmp.clean(new_val);
                if (tmp.type == 'list' && tmp.options.bindToObject && new_val != '') new_val = $(el).data('selected');
            }
            if (el.type == 'checkbox') new_val = el.checked;
            // change/restore event
            var eventData = {
                phase: 'before',
                type: 'change',
                target: this.name,
                input_id: el.id,
                recid: rec.recid,
                index: index,
                column: column,
                value_new: new_val,
                value_previous: (rec.changes && rec.changes.hasOwnProperty(col.field) ? rec.changes[col.field] : old_val),
                value_original: old_val
            };
            while (true) {
                new_val = eventData.value_new;
                if ((typeof new_val != 'object' && String(old_val) != String(new_val)) ||
                    (typeof new_val == 'object' && (typeof old_val != 'object' || new_val.id != old_val.id))) {
                    // change event
                    eventData = this.trigger($.extend(eventData, {
                        type: 'change',
                        phase: 'before'
                    }));
                    if (eventData.isCancelled !== true) {
                        if (new_val !== eventData.value_new) {
                            // re-evaluate the type of change to be made
                            continue;
                        }
                        // default action
                        rec.changes = rec.changes || {};
                        rec.changes[col.field] = eventData.value_new;
                        // event after
                        this.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }
                } else {
                    // restore event
                    eventData = this.trigger($.extend(eventData, {
                        type: 'restore',
                        phase: 'before'
                    }));
                    if (eventData.isCancelled !== true) {
                        if (new_val !== eventData.value_new) {
                            // re-evaluate the type of change to be made
                            continue;
                        }
                        // default action
                        if (rec.changes) delete rec.changes[col.field];
                        if ($.isEmptyObject(rec.changes)) delete rec.changes;
                        // event after
                        this.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }
                }
                break;
            }
            // refresh cell
            var cell = this.getCellHTML(index, column, summary);
            if (!summary) {
                if (rec.changes && typeof rec.changes[col.field] != 'undefined') {
                    $(tr).find('[col=' + column + ']').addClass('w2ui-changed').html(cell);
                } else {
                    $(tr).find('[col=' + column + ']').removeClass('w2ui-changed').html(cell);
                }
            }
        },

        "delete": function(force) {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'delete',
                force: force
            });
            if (eventData.isCancelled === true) return;
            force = eventData.force;
            // default action
            var recs = this.getSelection();
            if (recs.length == 0) return;
            if (this.msgDelete != '' && !force) {
                w2confirm({
                    title: w2utils.lang('Delete Confirmation'),
                    msg: obj.msgDelete,
                    btn_yes: {
                        "class": 'btn-red'
                    },
                    callBack: function(result) {
                        if (result == 'Yes') w2ui[obj.name]['delete'](true);
                    }
                });
                return;
            }
            // call delete script
            var url = (typeof this.url != 'object' ? this.url : this.url.remove);
            if (url) {
                this.request('delete-records');
            } else {
                this.selectNone();
                if (typeof recs[0] != 'object') {
                    this.remove.apply(this, recs);
                } else {
                    // clear cells
                    for (var r in recs) {
                        var fld = this.columns[recs[r].column].field;
                        var ind = this.get(recs[r].recid, true);
                        if (ind != null && fld != 'recid') {
                            this.records[ind][fld] = '';
                            if (this.records[ind].changes) delete this.records[ind].changes[fld];
                        }
                    }
                    this.refresh();
                }
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        click: function(recid, event) {
            var time = (new Date()).getTime();
            var column = null;
            if (this.last.cancelClick == true || (event && event.altKey)) return;
            if (typeof recid == 'object') {
                column = recid.column;
                recid = recid.recid;
            }
            if (typeof event == 'undefined') event = {};
            // check for double click
            if (time - parseInt(this.last.click_time) < 350 && event.type == 'click') {
                this.dblClick(recid, event);
                return;
            }
            this.last.click_time = time;
            // column user clicked on
            if (column == null && event.target) {
                var tmp = event.target;
                if (tmp.tagName != 'TD') tmp = $(tmp).parents('td')[0];
                if (typeof $(tmp).attr('col') != 'undefined') column = parseInt($(tmp).attr('col'));
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'click',
                recid: recid,
                column: column,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // if it is subgrid unselect top grid
            var parent = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid)).parents('tr');
            if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                var grid = parent.parents('.w2ui-grid').attr('name');
                w2ui[grid].selectNone();
                // all subgrids
                parent.parents('.w2ui-grid').find('.w2ui-expanded-row .w2ui-grid').each(function(index, el) {
                    var grid = $(el).attr('name');
                    if (w2ui[grid]) w2ui[grid].selectNone();
                });
            }
            // unselect all subgrids
            $(this.box).find('.w2ui-expanded-row .w2ui-grid').each(function(index, el) {
                var grid = $(el).attr('name');
                if (w2ui[grid]) w2ui[grid].selectNone();
            });
            // default action
            var obj = this;
            var sel = this.getSelection();
            $('#grid_' + this.name + '_check_all').prop("checked", false);
            var ind = this.get(recid, true);
            var record = this.records[ind];
            var selectColumns = [];
            obj.last.sel_ind = ind;
            obj.last.sel_col = column;
            obj.last.sel_recid = recid;
            obj.last.sel_type = 'click';
            // multi select with shif key
            if (event.shiftKey && sel.length > 0 && obj.multiSelect) {
                if (sel[0].recid) {
                    var start = this.get(sel[0].recid, true);
                    var end = this.get(recid, true);
                    if (column > sel[0].column) {
                        var t1 = sel[0].column;
                        var t2 = column;
                    } else {
                        var t1 = column;
                        var t2 = sel[0].column;
                    }
                    for (var c = t1; c <= t2; c++) selectColumns.push(c);
                } else {
                    var start = this.get(sel[0], true);
                    var end = this.get(recid, true);
                }
                var sel_add = []
                if (start > end) {
                    var tmp = start;
                    start = end;
                    end = tmp;
                }
                var url = (typeof this.url != 'object' ? this.url : this.url.get);
                for (var i = start; i <= end; i++) {
                    if (this.searchData.length > 0 && !url && $.inArray(i, this.last.searchIds) == -1) continue;
                    if (this.selectType == 'row') {
                        sel_add.push(this.records[i].recid);
                    } else {
                        for (var sc in selectColumns) sel_add.push({
                            recid: this.records[i].recid,
                            column: selectColumns[sc]
                        });
                    }
                    //sel.push(this.records[i].recid);
                }
                this.select.apply(this, sel_add);
            } else {
                var last = this.last.selection;
                var flag = (last.indexes.indexOf(ind) != -1 ? true : false);
                // clear other if necessary
                if (((!event.ctrlKey && !event.shiftKey && !event.metaKey) || !this.multiSelect) && !this.showSelectColumn) {
                    if (this.selectType != 'row' && $.inArray(column, last.columns[ind]) == -1) flag = false;
                    if (sel.length > 300) this.selectNone();
                    else this.unselect.apply(this, sel);
                    if (flag === true) {
                        this.unselect({
                            recid: recid,
                            column: column
                        });
                    } else {
                        this.select({
                            recid: recid,
                            column: column
                        });
                    }
                } else {
                    if (this.selectType != 'row' && $.inArray(column, last.columns[ind]) == -1) flag = false;
                    if (flag === true) {
                        this.unselect({
                            recid: recid,
                            column: column
                        });
                    } else {
                        this.select({
                            recid: recid,
                            column: column
                        });
                    }
                }
            }
            this.status();
            obj.initResize();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        columnClick: function(field, event) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'columnClick',
                target: this.name,
                field: field,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behaviour
            var column = this.getColumn(field);
            if (column.sortable) this.sort(field, null, (event && (event.ctrlKey || event.metaKey) ? true : false));
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        keydown: function(event) {
            // this method is called from w2utils
            var obj = this;
            if (obj.keyboard !== true) return;
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'keydown',
                target: obj.name,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            var empty = false;
            var records = $('#grid_' + obj.name + '_records');
            var sel = obj.getSelection();
            if (sel.length == 0) empty = true;
            var recid = sel[0] || null;
            var columns = [];
            var recid2 = sel[sel.length - 1];
            if (typeof recid == 'object' && recid != null) {
                recid = sel[0].recid;
                columns = [];
                var ii = 0;
                while (true) {
                    if (!sel[ii] || sel[ii].recid != recid) break;
                    columns.push(sel[ii].column);
                    ii++;
                }
                recid2 = sel[sel.length - 1].recid;
            }
            var ind = obj.get(recid, true);
            var ind2 = obj.get(recid2, true);
            var rec = obj.get(recid);
            var recEL = $('#grid_' + obj.name + '_rec_' + (ind !== null ? w2utils.escapeId(obj.records[ind].recid) : 'none'));
            var cancel = false;
            var key = event.keyCode;
            var shiftKey = event.shiftKey;
            if (key == 9) { // tab key
                if (event.shiftKey) key = 37;
                else key = 39; // replace with arrows
                shiftKey = false;
                cancel = true;
            }
            switch (key) {
                case 8: // backspace
                case 46: // delete
                    if (this.show.toolbarDelete) obj["delete"]();
                    cancel = true;
                    event.stopPropagation();
                    break;

                case 27: // escape
                    obj.selectNone();
                    if (sel.length > 0 && typeof sel[0] == 'object') {
                        obj.select({
                            recid: sel[0].recid,
                            column: sel[0].column
                        });
                    }
                    cancel = true;
                    break;

                case 65: // cmd + A
                    if (!event.metaKey && !event.ctrlKey) break;
                    obj.selectAll();
                    cancel = true;
                    break;

                case 70: // cmd + F
                    if (!event.metaKey && !event.ctrlKey) break;
                    $('#grid_' + obj.name + '_search_all').focus();
                    cancel = true;
                    break;

                case 13: // enter
                    // if expandable columns - expand it
                    if (this.selectType == 'row' && obj.show.expandColumn === true) {
                        if (recEL.length <= 0) break;
                        obj.toggle(recid, event);
                        cancel = true;
                    } else { // or enter edit
                        for (var c in this.columns) {
                            if (this.columns[c].editable) {
                                columns.push(parseInt(c));
                                break;
                            }
                        }
                        // edit last column that was edited
                        if (this.selectType == 'row' && this.last.edit_col) columns = [this.last.edit_col];
                        if (columns.length > 0) {
                            obj.editField(recid, columns[0], null, event);
                            cancel = true;
                        }
                    }
                    break;

                case 37: // left
                    if (empty) break;
                    // check if this is subgrid
                    var parent = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(obj.records[ind].recid)).parents('tr');
                    if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                        var recid = parent.prev().attr('recid');
                        var grid = parent.parents('.w2ui-grid').attr('name');
                        obj.selectNone();
                        w2utils.keyboard.active(grid);
                        w2ui[grid].set(recid, {
                            expanded: false
                        });
                        w2ui[grid].collapse(recid);
                        w2ui[grid].click(recid);
                        cancel = true;
                        break;
                    }
                    if (this.selectType == 'row') {
                        if (recEL.length <= 0 || rec.expanded !== true) break;
                        obj.set(recid, {
                            expanded: false
                        }, true);
                        obj.collapse(recid, event);
                    } else {
                        var prev = obj.prevCell(columns[0]);
                        if (prev != null) {
                            if (shiftKey && obj.multiSelect) {
                                if (tmpUnselect()) return;
                                var tmp = [];
                                var newSel = [];
                                var unSel = [];
                                if (columns.indexOf(this.last.sel_col) == 0 && columns.length > 1) {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        unSel.push({
                                            recid: sel[i].recid,
                                            column: columns[columns.length - 1]
                                        });
                                    }
                                } else {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        newSel.push({
                                            recid: sel[i].recid,
                                            column: prev
                                        });
                                    }
                                }
                                obj.unselect.apply(obj, unSel);
                                obj.select.apply(obj, newSel);
                            } else {
                                event.shiftKey = false;
                                obj.click({
                                    recid: recid,
                                    column: prev
                                }, event);
                            }
                        } else {
                            // if selected more then one, then select first
                            if (!shiftKey) {
                                for (var s = 1; s < sel.length; s++) obj.unselect(sel[s]);
                            }
                        }
                    }
                    cancel = true;
                    break;

                case 39: // right
                    if (empty) break;
                    if (this.selectType == 'row') {
                        if (recEL.length <= 0 || rec.expanded === true || obj.show.expandColumn !== true) break;
                        obj.expand(recid, event);
                    } else {
                        var next = obj.nextCell(columns[columns.length - 1]);
                        if (next !== null) {
                            if (shiftKey && key == 39 && obj.multiSelect) {
                                if (tmpUnselect()) return;
                                var tmp = [];
                                var newSel = [];
                                var unSel = [];
                                if (columns.indexOf(this.last.sel_col) == columns.length - 1 && columns.length > 1) {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        unSel.push({
                                            recid: sel[i].recid,
                                            column: columns[0]
                                        });
                                    }
                                } else {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        newSel.push({
                                            recid: sel[i].recid,
                                            column: next
                                        });
                                    }
                                }
                                obj.unselect.apply(obj, unSel);
                                obj.select.apply(obj, newSel);
                            } else {
                                obj.click({
                                    recid: recid,
                                    column: next
                                }, event);
                            }
                        } else {
                            // if selected more then one, then select first
                            if (!shiftKey) {
                                for (var s = 0; s < sel.length - 1; s++) obj.unselect(sel[s]);
                            }
                        }
                    }
                    cancel = true;
                    break;

                case 38: // up
                    if (empty) selectTopRecord();
                    if (recEL.length <= 0) break;
                    // move to the previous record
                    var prev = obj.prevRow(ind);
                    if (prev != null) {
                        // jump into subgrid
                        if (obj.records[prev].expanded) {
                            var subgrid = $('#grid_' + obj.name + '_rec_' + w2utils.escapeId(obj.records[prev].recid) + '_expanded_row').find('.w2ui-grid');
                            if (subgrid.length > 0 && w2ui[subgrid.attr('name')]) {
                                obj.selectNone();
                                var grid = subgrid.attr('name');
                                var recs = w2ui[grid].records;
                                w2utils.keyboard.active(grid);
                                w2ui[grid].click(recs[recs.length - 1].recid);
                                cancel = true;
                                break;
                            }
                        }
                        if (shiftKey && obj.multiSelect) { // expand selection
                            if (tmpUnselect()) return;
                            if (obj.selectType == 'row') {
                                if (obj.last.sel_ind > prev && obj.last.sel_ind != ind2) {
                                    obj.unselect(obj.records[ind2].recid);
                                } else {
                                    obj.select(obj.records[prev].recid);
                                }
                            } else {
                                if (obj.last.sel_ind > prev && obj.last.sel_ind != ind2) {
                                    prev = ind2;
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[prev].recid,
                                        column: columns[c]
                                    });
                                    obj.unselect.apply(obj, tmp);
                                } else {
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[prev].recid,
                                        column: columns[c]
                                    });
                                    obj.select.apply(obj, tmp);
                                }
                            }
                        } else { // move selected record
                            obj.selectNone();
                            obj.click({
                                recid: obj.records[prev].recid,
                                column: columns[0]
                            }, event);
                        }
                        obj.scrollIntoView(prev);
                        if (event.preventDefault) event.preventDefault();
                    } else {
                        // if selected more then one, then select first
                        if (!shiftKey) {
                            for (var s = 1; s < sel.length; s++) obj.unselect(sel[s]);
                        }
                        // jump out of subgird (if first record)
                        var parent = $('#grid_' + obj.name + '_rec_' + w2utils.escapeId(obj.records[ind].recid)).parents('tr');
                        if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                            var recid = parent.prev().attr('recid');
                            var grid = parent.parents('.w2ui-grid').attr('name');
                            obj.selectNone();
                            w2utils.keyboard.active(grid);
                            w2ui[grid].click(recid);
                            cancel = true;
                            break;
                        }
                    }
                    break;

                case 40: // down
                    if (empty) selectTopRecord();
                    if (recEL.length <= 0) break;
                    // jump into subgrid
                    if (obj.records[ind2].expanded) {
                        var subgrid = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(obj.records[ind2].recid) + '_expanded_row').find('.w2ui-grid');
                        if (subgrid.length > 0 && w2ui[subgrid.attr('name')]) {
                            obj.selectNone();
                            var grid = subgrid.attr('name');
                            var recs = w2ui[grid].records;
                            w2utils.keyboard.active(grid);
                            w2ui[grid].click(recs[0].recid);
                            cancel = true;
                            break;
                        }
                    }
                    // move to the next record
                    var next = obj.nextRow(ind2);
                    if (next != null) {
                        if (shiftKey && obj.multiSelect) { // expand selection
                            if (tmpUnselect()) return;
                            if (obj.selectType == 'row') {
                                if (this.last.sel_ind < next && this.last.sel_ind != ind) {
                                    obj.unselect(obj.records[ind].recid);
                                } else {
                                    obj.select(obj.records[next].recid);
                                }
                            } else {
                                if (this.last.sel_ind < next && this.last.sel_ind != ind) {
                                    next = ind;
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[next].recid,
                                        column: columns[c]
                                    });
                                    obj.unselect.apply(obj, tmp);
                                } else {
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[next].recid,
                                        column: columns[c]
                                    });
                                    obj.select.apply(obj, tmp);
                                }
                            }
                        } else { // move selected record
                            obj.selectNone();
                            obj.click({
                                recid: obj.records[next].recid,
                                column: columns[0]
                            }, event);
                        }
                        obj.scrollIntoView(next);
                        cancel = true;
                    } else {
                        // if selected more then one, then select first
                        if (!shiftKey) {
                            for (var s = 0; s < sel.length - 1; s++) obj.unselect(sel[s]);
                        }
                        // jump out of subgrid (if last record in subgrid)
                        var parent = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(obj.records[ind2].recid)).parents('tr');
                        if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                            var recid = parent.next().attr('recid');
                            var grid = parent.parents('.w2ui-grid').attr('name');
                            obj.selectNone();
                            w2utils.keyboard.active(grid);
                            w2ui[grid].click(recid);
                            cancel = true;
                            break;
                        }
                    }
                    break;

                    // copy & paste

                case 17: // ctrl key
                case 91: // cmd key
                    if (empty) break;
                    var text = obj.copy();
                    $('body').append('<textarea id="_tmp_copy_data" ' +
                        '   onpaste="var obj = this; setTimeout(function () { w2ui[\'' + obj.name + '\'].paste(obj.value); }, 1);" ' +
                        '   onkeydown="w2ui[\'' + obj.name + '\'].keydown(event)"' +
                        '   style="position: absolute; top: -100px; height: 1px; width: 1px">' + text + '</textarea>');
                    $('#_tmp_copy_data').focus().select();
                    // remove _tmp_copy_data textarea
                    $(document).on('keyup', tmp_key_down);

                    function tmp_key_down() {
                        $('#_tmp_copy_data').remove();
                        $(document).off('keyup', tmp_key_down);
                    }
                    break;

                case 88: // x - cut
                    if (empty) break;
                    if (event.ctrlKey || event.metaKey) {
                        setTimeout(function() {
                            obj["delete"](true);
                        }, 100);
                    }
                    break;
            }
            var tmp = [187, 189, 32]; // =-spacebar
            for (var i = 48; i <= 90; i++) tmp.push(i); // 0-9,a-z,A-Z
            if (tmp.indexOf(key) != -1 && !event.ctrlKey && !event.metaKey && !cancel) {
                if (columns.length == 0) columns.push(0);
                var tmp = String.fromCharCode(key);
                if (key == 187) tmp = '=';
                if (key == 189) tmp = '-';
                if (!shiftKey) tmp = tmp.toLowerCase();
                obj.editField(recid, columns[0], tmp, event);
                cancel = true;
            }
            if (cancel) { // cancel default behaviour
                if (event.preventDefault) event.preventDefault();
            }
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));

            function selectTopRecord() {
                var ind = Math.floor((records[0].scrollTop + (records.height() / 2.1)) / obj.recordHeight);
                if (!obj.records[ind]) ind = 0;
                obj.select({
                    recid: obj.records[ind].recid,
                    column: 0
                });
            }

            function tmpUnselect() {
                if (obj.last.sel_type != 'click') return false;
                if (obj.selectType != 'row') {
                    obj.last.sel_type = 'key';
                    if (sel.length > 1) {
                        for (var s in sel) {
                            if (sel[s].recid == obj.last.sel_recid && sel[s].column == obj.last.sel_col) {
                                sel.splice(s, 1);
                                break;
                            }
                        }
                        obj.unselect.apply(obj, sel);
                        return true;
                    }
                    return false;
                } else {
                    obj.last.sel_type = 'key';
                    if (sel.length > 1) {
                        sel.splice(sel.indexOf(obj.records[obj.last.sel_ind].recid), 1);
                        obj.unselect.apply(obj, sel);
                        return true;
                    }
                    return false;
                }
            }
        },

        scrollIntoView: function(ind) {
            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            if (typeof ind == 'undefined') {
                var sel = this.getSelection();
                if (sel.length == 0) return;
                ind = this.get(sel[0], true);
            }
            var records = $('#grid_' + this.name + '_records');
            if (buffered == 0) return;
            // if all records in view
            var len = this.last.searchIds.length;
            if (records.height() > this.recordHeight * (len > 0 ? len : buffered)) return;
            if (len > 0) ind = this.last.searchIds.indexOf(ind); // if seach is applied
            // scroll to correct one
            var t1 = Math.floor(records[0].scrollTop / this.recordHeight);
            var t2 = t1 + Math.floor(records.height() / this.recordHeight);
            if (ind == t1) records.animate({
                'scrollTop': records.scrollTop() - records.height() / 1.3
            }, 250, 'linear');
            if (ind == t2) records.animate({
                'scrollTop': records.scrollTop() + records.height() / 1.3
            }, 250, 'linear');
            if (ind < t1 || ind > t2) records.animate({
                'scrollTop': (ind - 1) * this.recordHeight
            });
        },

        dblClick: function(recid, event) {
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // find columns
            var column = null;
            if (typeof recid == 'object') {
                column = recid.column;
                recid = recid.recid;
            }
            if (typeof event == 'undefined') event = {};
            // column user clicked on
            if (column == null && event.target) {
                var tmp = event.target;
                if (tmp.tagName != 'TD') tmp = $(tmp).parents('td')[0];
                column = parseInt($(tmp).attr('col'));
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'dblClick',
                recid: recid,
                column: column,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default action
            this.selectNone();
            var col = this.columns[column];
            if (col && $.isPlainObject(col.editable)) {
                this.editField(recid, column, null, event);
            } else {
                this.select({
                    recid: recid,
                    column: column
                });
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        contextMenu: function(recid, event) {
            var obj = this;
            if (obj.last.userSelect == 'text') return;
            if (typeof event == 'undefined') event = {
                offsetX: 0,
                offsetY: 0,
                target: $('#grid_' + obj.name + '_rec_' + recid)[0]
            };
            if (typeof event.offsetX === 'undefined') {
                event.offsetX = event.layerX - event.target.offsetLeft;
                event.offsetY = event.layerY - event.target.offsetTop;
            }
            if (w2utils.isFloat(recid)) recid = parseFloat(recid);
            if (this.getSelection().indexOf(recid) == -1) obj.click(recid);
            // need timeout to allow click to finish first
            setTimeout(function() {
                // event before
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'contextMenu',
                    target: obj.name,
                    originalEvent: event,
                    recid: recid
                });
                if (eventData.isCancelled === true) return;
                // default action
                if (obj.menu.length > 0) {
                    $(obj.box).find(event.target)
                        .w2menu(obj.menu, {
                            left: event.offsetX,
                            onSelect: function(event) {
                                obj.menuClick(recid, parseInt(event.index), event.originalEvent);
                            }
                        });
                }
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, 150); // need timer 150 for FF
            // cancel event
            if (event.preventDefault) event.preventDefault();
        },

        menuClick: function(recid, index, event) {
            var obj = this;
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'menuClick',
                target: obj.name,
                originalEvent: event,
                recid: recid,
                menuIndex: index,
                menuItem: obj.menu[index]
            });
            if (eventData.isCancelled === true) return;
            // default action
            // -- empty
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        toggle: function(recid) {
            var rec = this.get(recid);
            if (rec.expanded === true) return this.collapse(recid);
            else return this.expand(recid);
        },

        expand: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length > 0) return false;
            if (rec.expanded == 'none') return false;
            // insert expand row
            var tmp = 1 + (this.show.selectColumn ? 1 : 0);
            var addClass = ''; // ($('#grid_'+this.name +'_rec_'+ w2utils.escapeId(recid)).hasClass('w2ui-odd') ? 'w2ui-odd' : 'w2ui-even');
            $('#grid_' + this.name + '_rec_' + id).after(
                '<tr id="grid_' + this.name + '_rec_' + recid + '_expanded_row" class="w2ui-expanded-row ' + addClass + '">' +
                (this.show.lineNumbers ? '<td class="w2ui-col-number"></td>' : '') +
                '    <td class="w2ui-grid-data w2ui-expanded1" colspan="' + tmp + '"><div style="display: none"></div></td>' +
                '    <td colspan="100" class="w2ui-expanded2">' +
                '        <div id="grid_' + this.name + '_rec_' + recid + '_expanded" style="opacity: 0"></div>' +
                '    </td>' +
                '</tr>');
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'expand',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + recid + '_expanded',
                ready: ready
            });
            if (eventData.isCancelled === true) {
                $('#grid_' + this.name + '_rec_' + id + '_expanded_row').remove();
                return;
            }
            // default action
            $('#grid_' + this.name + '_rec_' + id).attr('expanded', 'yes').addClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded_row').show();
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('<div class="w2ui-spinner" style="width: 16px; height: 16px; margin: -2px 2px;"></div>');
            rec.expanded = true;
            // check if height of expanded row > 5 then remove spinner
            setTimeout(ready, 300);

            function ready() {
                var div1 = $('#grid_' + obj.name + '_rec_' + id + '_expanded');
                var div2 = $('#grid_' + obj.name + '_rec_' + id + '_expanded_row .w2ui-expanded1 > div');
                if (div1.height() < 5) return;
                div1.css('opacity', 1);
                div2.show().css('opacity', 1);
                $('#grid_' + obj.name + '_cell_' + obj.get(recid, true) + '_expand div').html('-');
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.resizeRecords();
            return true;
        },

        collapse: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length == 0) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'collapse',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + id + '_expanded'
            });
            if (eventData.isCancelled === true) return;
            // default action
            $('#grid_' + this.name + '_rec_' + id).removeAttr('expanded').removeClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded').css('opacity', 0);
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('+');
            setTimeout(function() {
                $('#grid_' + obj.name + '_rec_' + id + '_expanded').height('0px');
                setTimeout(function() {
                    $('#grid_' + obj.name + '_rec_' + id + '_expanded_row').remove();
                    delete rec.expanded;
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    obj.resizeRecords();
                }, 300);
            }, 200);
            return true;
        },

        sort: function(field, direction, multiField) { // if no params - clears sort
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'sort',
                target: this.name,
                field: field,
                direction: direction,
                multiField: multiField
            });
            if (eventData.isCancelled === true) return;
            // check if needed to quit
            if (typeof field != 'undefined') {
                // default action
                var sortIndex = this.sortData.length;
                for (var s in this.sortData) {
                    if (this.sortData[s].field == field) {
                        sortIndex = s;
                        break;
                    }
                }
                if (typeof direction == 'undefined' || direction == null) {
                    if (typeof this.sortData[sortIndex] == 'undefined') {
                        direction = 'asc';
                    } else {
                        switch (String(this.sortData[sortIndex].direction)) {
                            case 'asc':
                                direction = 'desc';
                                break;
                            case 'desc':
                                direction = 'asc';
                                break;
                            default:
                                direction = 'asc';
                                break;
                        }
                    }
                }
                if (this.multiSort === false) {
                    this.sortData = [];
                    sortIndex = 0;
                }
                if (multiField != true) {
                    this.sortData = [];
                    sortIndex = 0;
                }
                // set new sort
                if (typeof this.sortData[sortIndex] == 'undefined') this.sortData[sortIndex] = {};
                this.sortData[sortIndex].field = field;
                this.sortData[sortIndex].direction = direction;
            } else {
                this.sortData = [];
            }
            this.selectNone();
            // if local
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.localSort();
                if (this.searchData.length > 0) this.localSearch(true);
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                this.refresh();
            } else {
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                this.last.xhr_offset = 0;
                this.reload();
            }
        },

        copy: function() {
            var sel = this.getSelection();
            if (sel.length == 0) return '';
            var text = '';
            if (typeof sel[0] == 'object') { // cell copy
                // find min/max column
                var minCol = sel[0].column;
                var maxCol = sel[0].column;
                var recs = [];
                for (var s in sel) {
                    if (sel[s].column < minCol) minCol = sel[s].column;
                    if (sel[s].column > maxCol) maxCol = sel[s].column;
                    if (recs.indexOf(sel[s].index) == -1) recs.push(sel[s].index);
                }
                recs.sort();
                for (var r in recs) {
                    var ind = recs[r];
                    for (var c = minCol; c <= maxCol; c++) {
                        var col = this.columns[c];
                        if (col.hidden === true) continue;
                        text += w2utils.stripTags(this.getCellHTML(ind, c)) + '\t';
                    }
                    text = text.substr(0, text.length - 1); // remove last \t
                    text += '\n';
                }
            } else { // row copy
                // copy headers
                for (var c in this.columns) {
                    var col = this.columns[c];
                    if (col.hidden === true) continue;
                    text += '"' + w2utils.stripTags(col.caption ? col.caption : col.field) + '"\t';
                }
                text = text.substr(0, text.length - 1); // remove last \t
                text += '\n';
                // copy selected text
                for (var s in sel) {
                    var ind = this.get(sel[s], true);
                    for (var c in this.columns) {
                        var col = this.columns[c];
                        if (col.hidden === true) continue;
                        text += '"' + w2utils.stripTags(this.getCellHTML(ind, c)) + '"\t';
                    }
                    text = text.substr(0, text.length - 1); // remove last \t
                    text += '\n';
                }
            }
            text = text.substr(0, text.length - 1);
            // before event
            var eventData = this.trigger({
                phase: 'before',
                type: 'copy',
                target: this.name,
                text: text
            });
            if (eventData.isCancelled === true) return '';
            text = eventData.text;
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return text;
        },

        paste: function(text) {
            var sel = this.getSelection();
            var ind = this.get(sel[0].recid, true);
            var col = sel[0].column;
            // before event
            var eventData = this.trigger({
                phase: 'before',
                type: 'paste',
                target: this.name,
                text: text,
                index: ind,
                column: col
            });
            if (eventData.isCancelled === true) return;
            text = eventData.text;
            // default action
            if (this.selectType == 'row' || sel.length == 0) {
                console.log('ERROR: You can paste only if grid.selectType = \'cell\' and when at least one cell selected.');
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                return;
            }
            var newSel = [];
            var text = text.split('\n');
            for (var t in text) {
                var tmp = text[t].split('\t');
                var cnt = 0;
                var rec = this.records[ind];
                var cols = [];
                for (var dt in tmp) {
                    if (!this.columns[col + cnt]) continue;
                    var field = this.columns[col + cnt].field;
                    rec.changes = rec.changes || {};
                    rec.changes[field] = tmp[dt];
                    cols.push(col + cnt);
                    cnt++;
                }
                for (var c in cols) newSel.push({
                    recid: rec.recid,
                    column: cols[c]
                });
                ind++;
            }
            this.selectNone();
            this.select.apply(this, newSel);
            this.refresh();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ==================================================
        // --- Common functions

        resize: function() {
            var obj = this;
            var time = (new Date()).getTime();
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // make sure the box is right
            if (!this.box || $(this.box).attr('name') != this.name) return;
            // determine new width and height
            $(this.box).find('> div')
                .css('width', $(this.box).width())
                .css('height', $(this.box).height());
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            // resize
            obj.resizeBoxes();
            obj.resizeRecords();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        refreshCell: function(recid, field) {
            var index = this.get(recid, true);
            var isSummary = (this.records[index] && this.records[index].recid == recid ? false : true);
            var col_ind = this.getColumn(field, true);
            var rec = (isSummary ? this.summary[index] : this.records[index]);
            var col = this.columns[col_ind];
            var cell = $('#grid_' + this.name + '_rec_' + recid + ' [col=' + col_ind + ']');
            // set cell html and changed flag
            cell.html(this.getCellHTML(index, col_ind, isSummary));
            if (rec.changes && typeof rec.changes[col.field] != 'undefined') {
                cell.addClass('w2ui-changed');
            } else {
                cell.removeClass('w2ui-changed');
            }
        },

        addRowClass: function(recid, cls) {
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
            $(tr).addClass(cls);
        },
        removeRowClass: function(recid, cls) {
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
            $(tr).removeClass(cls);
        },
        refreshRow: function(recid) {
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
            if (tr.length != 0) {
                var ind = this.get(recid, true);
                var line = tr.attr('line');
                var isSummary = (this.records[ind] && this.records[ind].recid == recid ? false : true);
                // if it is searched, find index in search array
                var url = (typeof this.url != 'object' ? this.url : this.url.get);
                if (this.searchData.length > 0 && !url)
                    for (var s in this.last.searchIds)
                        if (this.last.searchIds[s] == ind) ind = s;
                $(tr).replaceWith(this.getRecordHTML(ind, line, isSummary));
                if (isSummary) this.resize();
            }
        },

        refreshFull: function() {
            this.initToolbar();
            if (this.toolbar != null) this.toolbar.render($('#grid_' + this.name + '_toolbar')[0]);
            this.refresh();
        },

        refreshRecords: function() {
            var obj = this;
            //if (typeof obj.records === 'function') {
            obj.records = obj.records.apply(obj, arguments);
            //}
            obj.refresh();
        },

        refresh: function() {
            var obj = this;
            var time = (new Date()).getTime();
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (this.total <= 0 && !url && this.searchData.length == 0) {
                this.total = this.records.length;
            }
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (this.toolbar) this.toolbar.disable('w2ui-edit', 'w2ui-delete');
            if (!this.box) return;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'refresh'
            });
            if (eventData.isCancelled === true) return;
            // -- header
            if (this.show.header) {
                $('#grid_' + this.name + '_header').html(this.header + '&nbsp;').show();
            } else {
                $('#grid_' + this.name + '_header').hide();
            }
            // -- toolbar
            if (this.show.toolbar) {
                // if select-collumn is checked - no toolbar refresh
                if (this.toolbar && this.toolbar.get('w2ui-column-on-off') && this.toolbar.get('w2ui-column-on-off').checked) {
                    // no action
                } else {
                    $('#grid_' + this.name + '_toolbar').show();
                    // refresh toolbar all but search field
                    if (typeof this.toolbar == 'object') {
                        var tmp = this.toolbar.items;
                        for (var t in tmp) {
                            if (tmp[t].id == 'w2ui-search' || tmp[t].type == 'break') continue;
                            this.toolbar.refresh(tmp[t].id);
                        }
                    }
                }
            } else {
                $('#grid_' + this.name + '_toolbar').hide();
            }

            // append groupcolumns to grouping area
            $(this.box).find('.dropGroup').empty();
            for (var g in this.groupData) {
                var group = this.groupData[g],
                    col;
                $.map(this.columns, function(ob, index) {
                    if (ob.field === group) {
                        col = ob.caption;
                    }
                });
                $(this.box).find('.dropGroup').append('<div class="w2ui-col-header" data-col="' + group + '">' + col + '</div>');
            }

            // -- make sure search is closed
            this.searchClose();
            // search placeholder
            var el = $('#grid_' + obj.name + '_search_all');
            if (!this.multiSearch && this.last.field == 'all' && this.searches.length > 0) {
                this.last.field = this.searches[0].field;
                this.last.caption = this.searches[0].caption;
            }
            for (var s in this.searches) {
                if (this.searches[s].field == this.last.field) this.last.caption = this.searches[s].caption;
            }
            if (this.last.multi) {
                el.attr('placeholder', '[' + w2utils.lang('Multiple Fields') + ']');
            } else {
                el.attr('placeholder', this.last.caption);
            }
            if (el.val() != this.last.search) {
                var val = this.last.search;
                var tmp = el.data('w2field');
                if (tmp) val = tmp.format(val);
                el.val(val);
            }

            //refresh records if function

            if (typeof obj.records === 'function') {
                obj.records = obj.records.apply(obj, arguments);
            }

            // -- separate summary
            var tmp = this.find({
                summary: true
            }, true);
            if (tmp.length > 0) {
                for (var t in tmp) this.summary.push(this.records[tmp[t]]);
                for (var t = tmp.length - 1; t >= 0; t--) this.records.splice(tmp[t], 1);
                this.total = this.total - tmp.length;
            }

            // -- body
            var bodyHTML = '';
            bodyHTML += '<div id="grid_' + this.name + '_records" class="w2ui-grid-records"' +
                '    onscroll="var obj = w2ui[\'' + this.name + '\']; ' +
                '        obj.last.scrollTop = this.scrollTop; ' +
                '        obj.last.scrollLeft = this.scrollLeft; ' +
                '        $(\'#grid_' + this.name + '_columns\')[0].scrollLeft = this.scrollLeft;' +
                '        $(\'#grid_' + this.name + '_summary\')[0].scrollLeft = this.scrollLeft;' +
                '        obj.scroll(event);">' +
                this.getRecordsHTML() +
                '</div>' +
                '<div id="grid_' + this.name + '_columns" class="w2ui-grid-columns">' +
                '    <table>' + this.getColumnsHTML() + '</table>' +
                '</div>'; // Columns need to be after to be able to overlap
            $('#grid_' + this.name + '_body').html(bodyHTML);
            // show summary records
            if (this.summary.length > 0) {
                $('#grid_' + this.name + '_summary').html(this.getSummaryHTML()).show();
            } else {
                $('#grid_' + this.name + '_summary').hide();
            }
            // -- footer
            if (this.show.footer) {
                $('#grid_' + this.name + '_footer').html(this.getFooterHTML()).show();
            } else {
                $('#grid_' + this.name + '_footer').hide();
            }
            // show/hide clear search link
            if (this.searchData.length > 0) {
                $('#grid_' + this.name + '_searchClear').show();
            } else {
                $('#grid_' + this.name + '_searchClear').hide();
            }
            // all selected?
            var sel = this.last.selection;
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            // show number of selected
            this.status();
            // collapse all records
            var rows = obj.find({
                expanded: true
            }, true);
            for (var r in rows) obj.records[rows[r]].expanded = false;
            // mark selection
            setTimeout(function() {
                var str = $.trim($('#grid_' + obj.name + '_search_all').val());
                if (str != '') $(obj.box).find('.w2ui-grid-data > div').w2marker(str);
            }, 50);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            obj.resize();
            if (obj.enableGrouping)
                obj.initGrouping();
            obj.addRange('selection');
            setTimeout(function() {
                obj.resize();
                obj.scroll();
            }, 1); // allow to render first

            if (obj.reorderColumns && !obj.last.columnDrag) {
                obj.last.columnDrag = obj.initColumnDrag();
            } else if (!obj.reorderColumns && obj.last.columnDrag) {
                obj.last.columnDrag.remove();
            }

            return (new Date()).getTime() - time;
        },

        render: function(box) {
            var obj = this;
            var time = (new Date()).getTime();
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (typeof box != 'undefined' && box != null) {
                if ($(this.box).find('#grid_' + this.name + '_body').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-grid')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return;
            if (this.last.sortData == null) this.last.sortData = this.sortData;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'render',
                box: box
            });
            if (eventData.isCancelled === true) return;
            // insert Elements
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-grid')
                .html('<div>' +
                    '    <div id="grid_' + this.name + '_header" class="w2ui-grid-header"></div>' +
                    '    <div id="grid_' + this.name + '_toolbar" class="w2ui-grid-toolbar"></div>' +
                    '    <div id="grid_' + this.name + '_body" class="w2ui-grid-body"></div>' +
                    '    <div id="grid_' + this.name + '_summary" class="w2ui-grid-body w2ui-grid-summary"></div>' +
                    '    <div id="grid_' + this.name + '_footer" class="w2ui-grid-footer"></div>' +
                    '</div>');
            if (this.selectType != 'row') $(this.box).addClass('w2ui-ss');
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // init toolbar

            this.initToolbar();
            if (this.toolbar != null) this.toolbar.render($('#grid_' + this.name + '_toolbar')[0]);
            // reinit search_all
            if (this.last.field && this.last.field != 'all') {
                var sd = this.searchData;
                this.initAllField(this.last.field, (sd.length == 1 ? sd[0].value : null));
            }
            // init footer
            $('#grid_' + this.name + '_footer').html(this.getFooterHTML());
            // refresh
            if (!this.last.state) this.last.state = this.stateSave(true); // initial default state
            this.stateRestore();
            if (this.url) this.refresh(); // show empty grid (need it) - should it be only for remote data source
            this.reload();

            // init mouse events for mouse selection
            $(this.box).on('mousedown', mouseStart);
            $(this.box).on('selectstart', function() {
                return false;
            }); // fixes chrome cursor bug

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // attach to resize event
            if ($('.w2ui-layout').length == 0) { // if there is layout, it will send a resize event
                this.tmp_resize = function(event) {
                    w2ui[obj.name].resize();
                }
                $(window).off('resize', this.tmp_resize).on('resize', this.tmp_resize);
            }
            return (new Date()).getTime() - time;

            function mouseStart(event) {
                if (event.which != 1) return; // if not left mouse button
                // restore css user-select
                if (obj.last.userSelect == 'text') {
                    delete obj.last.userSelect;
                    $(obj.box).find('.w2ui-grid-body')
                        .css('user-select', 'none')
                        .css('-webkit-user-select', 'none')
                        .css('-moz-user-select', 'none')
                        .css('-ms-user-select', 'none');
                    $(this.box).on('selectstart', function() {
                        return false;
                    });
                }
                // regular record select
                if ($(event.target).parents().hasClass('w2ui-head') || $(event.target).hasClass('w2ui-head')) return;
                if (obj.last.move && obj.last.move.type == 'expand') return;
                // if altKey - alow text selection
                if (event.altKey) {
                    $(obj.box).off('selectstart');
                    $(obj.box).find('.w2ui-grid-body')
                        .css('user-select', 'text')
                        .css('-webkit-user-select', 'text')
                        .css('-moz-user-select', 'text')
                        .css('-ms-user-select', 'text');
                    obj.selectNone();
                    obj.last.move = {
                        type: 'text-select'
                    };
                    obj.last.userSelect = 'text';
                } else {
                    if (!obj.multiSelect) return;
                    obj.last.move = {
                        x: event.screenX,
                        y: event.screenY,
                        divX: 0,
                        divY: 0,
                        recid: $(event.target).parents('tr').attr('recid'),
                        column: (event.target.tagName == 'TD' ? $(event.target).attr('col') : $(event.target).parents('td').attr('col')),
                        type: 'select',
                        ghost: false,
                        start: true
                    };
                }
                $(document).on('mousemove', mouseMove);
                $(document).on('mouseup', mouseStop);
            }

            function mouseMove(event) {
                var mv = obj.last.move;
                if (!mv || mv.type != 'select') return;
                mv.divX = (event.screenX - mv.x);
                mv.divY = (event.screenY - mv.y);
                if (Math.abs(mv.divX) <= 1 && Math.abs(mv.divY) <= 1) return; // only if moved more then 1px
                obj.last.cancelClick = true;
                if (obj.reorderRows == true) {
                    if (!mv.ghost) {
                        var row = $('#grid_' + obj.name + '_rec_' + mv.recid);
                        var tmp = row.parents('table').find('tr:first-child').clone();
                        mv.offsetY = event.offsetY;
                        mv.from = mv.recid;
                        mv.pos = row.position();
                        mv.ghost = $(row).clone(true);
                        mv.ghost.removeAttr('id');
                        row.find('td:first-child').replaceWith('<td colspan="1000" style="height: ' + obj.recordHeight + 'px; background-color: #ddd"></td>');
                        var recs = $(obj.box).find('.w2ui-grid-records');
                        recs.append('<table id="grid_' + obj.name + '_ghost" style="position: absolute; z-index: 999999; opacity: 0.8; border-bottom: 2px dashed #aaa; border-top: 2px dashed #aaa; pointer-events: none;"></table>');
                        $('#grid_' + obj.name + '_ghost').append(tmp).append(mv.ghost);
                    }
                    var recid = $(event.target).parents('tr').attr('recid');
                    if (recid != mv.from) {
                        var row1 = $('#grid_' + obj.name + '_rec_' + mv.recid);
                        var row2 = $('#grid_' + obj.name + '_rec_' + recid);
                        if (event.screenY - mv.lastY < 0) row1.after(row2);
                        else row2.after(row1);
                        mv.lastY = event.screenY;
                        mv.to = recid;
                    }
                    var ghost = $('#grid_' + obj.name + '_ghost');
                    var recs = $(obj.box).find('.w2ui-grid-records');
                    ghost.css({
                        top: mv.pos.top + mv.divY + recs.scrollTop(), // + mv.offsetY - obj.recordHeight / 2,
                        left: mv.pos.left
                    });
                    return;
                }
                if (mv.start && mv.recid) {
                    obj.selectNone();
                    mv.start = false;
                }
                var newSel = [];
                var recid = (event.target.tagName == 'TR' ? $(event.target).attr('recid') : $(event.target).parents('tr').attr('recid'));
                if (typeof recid == 'undefined') return;
                var ind1 = obj.get(mv.recid, true);
                // |:wolfmanx:| this happens when selection is started on summary row
                if (ind1 === null) return;
                var ind2 = obj.get(recid, true);
                // this happens when selection is extended into summary row (a good place to implement scrolling)
                if (ind2 === null) return;
                var col1 = parseInt(mv.column);
                var col2 = parseInt(event.target.tagName == 'TD' ? $(event.target).attr('col') : $(event.target).parents('td').attr('col'));
                if (ind1 > ind2) {
                    var tmp = ind1;
                    ind1 = ind2;
                    ind2 = tmp;
                }
                // check if need to refresh
                var tmp = 'ind1:' + ind1 + ',ind2;' + ind2 + ',col1:' + col1 + ',col2:' + col2;
                if (mv.range == tmp) return;
                mv.range = tmp;
                for (var i = ind1; i <= ind2; i++) {
                    if (obj.last.searchIds.length > 0 && obj.last.searchIds.indexOf(i) == -1) continue;
                    if (obj.selectType != 'row') {
                        if (col1 > col2) {
                            var tmp = col1;
                            col1 = col2;
                            col2 = tmp;
                        }
                        var tmp = [];
                        for (var c = col1; c <= col2; c++) {
                            if (obj.columns[c].hidden) continue;
                            newSel.push({
                                recid: obj.records[i].recid,
                                column: parseInt(c)
                            });
                        }
                    } else {
                        newSel.push(obj.records[i].recid);
                    }
                }
                if (obj.selectType != 'row') {
                    var sel = obj.getSelection();
                    // add more items
                    var tmp = [];
                    for (var ns in newSel) {
                        var flag = false;
                        for (var s in sel)
                            if (newSel[ns].recid == sel[s].recid && newSel[ns].column == sel[s].column) flag = true;
                        if (!flag) tmp.push({
                            recid: newSel[ns].recid,
                            column: newSel[ns].column
                        });
                    }
                    obj.select.apply(obj, tmp);
                    // remove items
                    var tmp = [];
                    for (var s in sel) {
                        var flag = false;
                        for (var ns in newSel)
                            if (newSel[ns].recid == sel[s].recid && newSel[ns].column == sel[s].column) flag = true;
                        if (!flag) tmp.push({
                            recid: sel[s].recid,
                            column: sel[s].column
                        });
                    }
                    obj.unselect.apply(obj, tmp);
                } else {
                    if (obj.multiSelect) {
                        var sel = obj.getSelection();
                        for (var ns in newSel)
                            if (sel.indexOf(newSel[ns]) == -1) obj.select(newSel[ns]); // add more items
                        for (var s in sel)
                            if (newSel.indexOf(sel[s]) == -1) obj.unselect(sel[s]); // remove items
                    }
                }
            }

            function mouseStop(event) {
                var mv = obj.last.move;
                setTimeout(function() {
                    delete obj.last.cancelClick;
                }, 1);
                if ($(event.target).parents().hasClass('.w2ui-head') || $(event.target).hasClass('.w2ui-head')) return;
                if (mv && mv.type == 'select') {
                    if (obj.reorderRows == true) {
                        var ind1 = obj.get(mv.from, true);
                        var tmp = obj.records[ind1];
                        obj.records.splice(ind1, 1);
                        var ind2 = obj.get(mv.to, true);
                        if (ind1 > ind2) obj.records.splice(ind2, 0, tmp);
                        else obj.records.splice(ind2 + 1, 0, tmp);
                        $('#grid_' + obj.name + '_ghost').remove();
                        obj.refresh();
                    }
                }
                delete obj.last.move;
                $(document).off('mousemove', mouseMove);
                $(document).off('mouseup', mouseStop);
            }
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'destroy'
            });

            if (eventData.isCancelled === true) return;
            // remove events
            $(window).off('resize', this.tmp_resize);
            // clean up
            if (typeof this.toolbar == 'object' && this.toolbar.destroy) this.toolbar.destroy();
            if ($(this.box).find('#grid_' + this.name + '_body').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-grid')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ===========================================
        // --- Internal Functions

        initColumnOnOff: function() {
            if (!this.show.toolbarColumns) return;
            var obj = this;
            var col_html = '<div class="w2ui-col-on-off">' +
                '<table><tr>' +
                '<td style="width: 30px">' +
                '    <input id="grid_' + this.name + '_column_ln_check" type="checkbox" tabIndex="-1" ' + (obj.show.lineNumbers ? 'checked' : '') +
                '        onclick="w2ui[\'' + obj.name + '\'].columnOnOff(this, event, \'line-numbers\');">' +
                '</td>' +
                '<td onclick="w2ui[\'' + obj.name + '\'].columnOnOff(this, event, \'line-numbers\'); $(\'#w2ui-overlay\')[0].hide();">' +
                '    <label for="grid_' + this.name + '_column_ln_check">' + w2utils.lang('Line #') + '</label>' +
                '</td></tr>';
            for (var c in this.columns) {
                var col = this.columns[c];
                var tmp = this.columns[c].caption;
                if (col.hideable === false) continue;
                if (!tmp && this.columns[c].hint) tmp = this.columns[c].hint;
                if (!tmp) tmp = '- column ' + (parseInt(c) + 1) + ' -';
                col_html += '<tr>' +
                    '<td style="width: 30px">' +
                    '    <input id="grid_' + this.name + '_column_' + c + '_check" type="checkbox" tabIndex="-1" ' + (col.hidden ? '' : 'checked') +
                    '        onclick="w2ui[\'' + obj.name + '\'].columnOnOff(this, event, \'' + col.field + '\');">' +
                    '</td>' +
                    '<td>' +
                    '    <label for="grid_' + this.name + '_column_' + c + '_check">' + tmp + '</label>' +
                    '</td>' +
                    '</tr>';
            }
            col_html += '<tr><td colspan="2"><div style="border-top: 1px solid #ddd;"></div></td></tr>';
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url && obj.show.skipRecords) {
                col_html +=
                    '<tr><td colspan="2" style="padding: 0px">' +
                    '    <div style="cursor: pointer; padding: 2px 8px; cursor: default">' + w2utils.lang('Skip') +
                    '        <input type="text" style="width: 45px" value="' + this.offset + '" ' +
                    '            onkeypress="if (event.keyCode == 13) { ' +
                    '               w2ui[\'' + obj.name + '\'].skip(this.value); ' +
                    '               $(\'#w2ui-overlay\')[0].hide(); ' +
                    '            }"> ' + w2utils.lang('Records') +
                    '    </div>' +
                    '</td></tr>';
            }
            col_html += '<tr><td colspan="2" onclick="w2ui[\'' + obj.name + '\'].stateSave(); $(\'#w2ui-overlay\')[0].hide();">' +
                '    <div style="cursor: pointer; padding: 4px 8px; cursor: default">' + w2utils.lang('Save Grid State') + '</div>' +
                '</td></tr>' +
                '<tr><td colspan="2" onclick="w2ui[\'' + obj.name + '\'].stateReset(); $(\'#w2ui-overlay\')[0].hide();">' +
                '    <div style="cursor: pointer; padding: 4px 8px; cursor: default">' + w2utils.lang('Restore Default State') + '</div>' +
                '</td></tr>';
            col_html += "</table></div>";
            if (this.toolbar) this.toolbar.get('w2ui-column-on-off').html = col_html;
        },

        /**
         *
         * @param box, grid object
         * @returns {{remove: Function}} contains a closure around all events to ensure they are removed from the dom
         */
        initColumnDrag: function(box) {
            //throw error if using column groups
            if (this.columnGroups && this.columnGroups.length) throw 'Draggable columns are not currently supported with column groups.';

            var obj = this,
                _dragData = {};
            _dragData.lastInt = null;
            _dragData.pressed = false;
            _dragData.timeout = null;
            _dragData.columnHead = null;

            //attach orginal event listener
            $(obj.box).on('mousedown', dragColStart);
            $(obj.box).on('mouseup', catchMouseup);

            function catchMouseup() {
                _dragData.pressed = false;
                clearTimeout(_dragData.timeout);
            }
            /**
             *
             * @param event, mousedown
             * @returns {boolean} false, preventsDefault
             */

            function dragColStart(event) {
                if (_dragData.timeout) clearTimeout(_dragData.timeout);
                var self = this;
                _dragData.pressed = true;

                _dragData.timeout = setTimeout(function() {
                    if (!_dragData.pressed) return;

                    var eventData,
                        columns,
                        selectedCol,
                        origColumn,
                        origColumnNumber,
                        invalidPreColumns = ['w2ui-col-number', 'w2ui-col-expand', 'w2ui-col-select'],
                        invalidPostColumns = ['w2ui-head-last'],
                        invalidColumns = invalidPreColumns.concat(invalidPostColumns),
                        preColumnsSelector = '.w2ui-col-number, .w2ui-col-expand, .w2ui-col-select',
                        preColHeadersSelector = '.w2ui-head.w2ui-col-number, .w2ui-head.w2ui-col-expand, .w2ui-head.w2ui-col-select';

                    // do nothing if it is not a header
                    if (!$(event.originalEvent.target).parents().hasClass('w2ui-head')) return;

                    // do nothing if it is an invalid column
                    for (var i = 0, l = invalidColumns.length; i < l; i++) {
                        if ($(event.originalEvent.target).parents().hasClass(invalidColumns[i])) return;
                    }

                    _dragData.numberPreColumnsPresent = $(obj.box).find(preColHeadersSelector).length;

                    //start event for drag start
                    _dragData.columnHead = origColumn = $(event.originalEvent.target).parents('.w2ui-head');
                    origColumnNumber = parseInt(origColumn.attr('col'), 10);
                    eventData = obj.trigger({
                        type: 'columnDragStart',
                        phase: 'before',
                        originalEvent: event,
                        origColumnNumber: origColumnNumber,
                        target: origColumn[0]
                    });
                    if (eventData.isCancelled === true) return false;

                    columns = _dragData.columns = $(obj.box).find('.w2ui-head:not(.w2ui-head-last)');

                    //add events
                    $(document).on('mouseup', dragColEnd);
                    $(document).on('mousemove', dragColOver);

                    _dragData.originalPos = parseInt($(event.originalEvent.target).parent('.w2ui-head').attr('col'), 10);
                    //_dragData.columns.css({ overflow: 'visible' }).children( 'div' ).css({ overflow: 'visible' });

                    //configure and style ghost image
                    _dragData.ghost = $(self).clone(true);

                    //hide other elements on ghost except the grid body
                    $(_dragData.ghost).find('[col]:not([col="' + _dragData.originalPos + '"]), .w2ui-toolbar, .w2ui-grid-header').remove();
                    $(_dragData.ghost).find(preColumnsSelector).remove();
                    $(_dragData.ghost).find('.w2ui-grid-body').css({
                        top: 0
                    });

                    selectedCol = $(_dragData.ghost).find('[col="' + _dragData.originalPos + '"]');
                    $(document.body).append(_dragData.ghost);

                    $(_dragData.ghost).css({
                        width: 0,
                        height: 0,
                        margin: 0,
                        position: 'fixed',
                        zIndex: 999999,
                        opacity: 0
                    }).addClass('.w2ui-grid-ghost').animate({
                        width: selectedCol.width(),
                        height: $(obj.box).find('.w2ui-grid-body:first').height(),
                        left: event.pageX,
                        top: event.pageY,
                        opacity: .8
                    }, 0);

                    //establish current offsets
                    _dragData.offsets = [];
                    for (var i = 0, l = columns.length; i < l; i++) {
                        _dragData.offsets.push($(columns[i]).offset().left);
                    }

                    //conclude event
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, 150); //end timeout wrapper
            }

            function dragColOver(event) {
                if (!_dragData.pressed) return;

                var cursorX = event.originalEvent.pageX,
                    cursorY = event.originalEvent.pageY,
                    offsets = _dragData.offsets,
                    lastWidth = $('.w2ui-head:not(.w2ui-head-last)').width();

                _dragData.targetInt = Math.max(_dragData.numberPreColumnsPresent, targetIntersection(cursorX, offsets, lastWidth));

                markIntersection(_dragData.targetInt);
                trackGhost(cursorX, cursorY);
            }

            function dragColEnd(event) {
                _dragData.pressed = false;

                var eventData,
                    target,
                    selected,
                    columnConfig,
                    targetColumn,
                    ghosts = $('.w2ui-grid-ghost');

                //start event for drag start
                eventData = obj.trigger({
                    type: 'columnDragEnd',
                    phase: 'before',
                    originalEvent: event,
                    target: _dragData.columnHead[0]
                });
                if (eventData.isCancelled === true) return false;

                selected = obj.columns[_dragData.originalPos];
                columnConfig = obj.columns;
                targetColumn = $(_dragData.columns[Math.min(_dragData.lastInt, _dragData.columns.length - 1)]);
                target = (_dragData.lastInt < _dragData.columns.length) ? parseInt(targetColumn.attr('col')) : columnConfig.length;

                if (target !== _dragData.originalPos + 1 && target !== _dragData.originalPos && targetColumn && targetColumn.length) {
                    $(_dragData.ghost).animate({
                        top: $(obj.box).offset().top,
                        left: targetColumn.offset().left,
                        width: 0,
                        height: 0,
                        opacity: .2
                    }, 300, function() {
                        $(this).remove();
                        ghosts.remove();
                    });

                    columnConfig.splice(target, 0, $.extend({}, selected));
                    columnConfig.splice(columnConfig.indexOf(selected), 1);

                } else {
                    $(_dragData.ghost).remove();
                    ghosts.remove();
                }

                //_dragData.columns.css({ overflow: '' }).children( 'div' ).css({ overflow: '' });

                $(document).off('mouseup', dragColEnd);
                $(document).off('mousemove', dragColOver);
                if (_dragData.marker) _dragData.marker.remove();
                _dragData = {};

                obj.refresh();

                //conclude event
                obj.trigger($.extend(eventData, {
                    phase: 'after',
                    targetColumnNumber: target - 1
                }));
            }

            function markIntersection(intersection) {
                if (!_dragData.marker && !_dragData.markerLeft) {
                    _dragData.marker = $('<div class="col-intersection-marker">' +
                        '<div class="top-marker"></div>' +
                        '<div class="bottom-marker"></div>' +
                        '</div>');
                    _dragData.markerLeft = $('<div class="col-intersection-marker">' +
                        '<div class="top-marker"></div>' +
                        '<div class="bottom-marker"></div>' +
                        '</div>');
                }

                if (!_dragData.lastInt || _dragData.lastInt !== intersection) {
                    _dragData.lastInt = intersection;
                    _dragData.marker.remove();
                    _dragData.markerLeft.remove();
                    $('.w2ui-head').removeClass('w2ui-col-intersection');

                    //if the current intersection is greater than the number of columns add the marker to the end of the last column only
                    if (intersection >= _dragData.columns.length) {
                        $(_dragData.columns[_dragData.columns.length - 1]).children('div:last').append(_dragData.marker.addClass('right').removeClass('left'));
                        $(_dragData.columns[_dragData.columns.length - 1]).addClass('w2ui-col-intersection');
                    } else if (intersection <= _dragData.numberPreColumnsPresent) {
                        //if the current intersection is on the column numbers place marker on first available column only
                        $(_dragData.columns[_dragData.numberPreColumnsPresent]).prepend(_dragData.marker.addClass('left').removeClass('right')).css({
                            position: 'relative'
                        });
                        $(_dragData.columns[_dragData.numberPreColumnsPresent]).prev().addClass('w2ui-col-intersection');
                    } else {
                        //otherwise prepend the marker to the targeted column and append it to the previous column
                        $(_dragData.columns[intersection]).children('div:last').prepend(_dragData.marker.addClass('left').removeClass('right'));
                        $(_dragData.columns[intersection]).prev().children('div:last').append(_dragData.markerLeft.addClass('right').removeClass('left')).css({
                            position: 'relative'
                        });
                        $(_dragData.columns[intersection - 1]).addClass('w2ui-col-intersection');
                    }
                }
            }

            function targetIntersection(cursorX, offsets, lastWidth) {
                if (cursorX <= offsets[0]) {
                    return 0;
                } else if (cursorX >= offsets[offsets.length - 1] + lastWidth) {
                    return offsets.length;
                } else {
                    for (var i = 0, l = offsets.length; i < l; i++) {
                        var thisOffset = offsets[i];
                        var nextOffset = offsets[i + 1] || offsets[i] + lastWidth;
                        var midpoint = (nextOffset - offsets[i]) / 2 + offsets[i];

                        if (cursorX > thisOffset && cursorX <= midpoint) {
                            return i;
                        } else if (cursorX > midpoint && cursorX <= nextOffset) {
                            return i + 1;
                        }
                    }
                    return intersection;
                }
            }

            function trackGhost(cursorX, cursorY) {
                $(_dragData.ghost).css({
                    left: cursorX - 10,
                    top: cursorY - 10
                });
            }

            //return an object to remove drag if it has ever been enabled
            return {
                remove: function() {
                    $(obj.box).off('mousedown', dragColStart);
                    $(obj.box).off('mouseup', catchMouseup);
                    $(obj.box).find('.w2ui-head').removeAttr('draggable');
                    obj.last.columnDrag = false;
                }
            }
        },

        columnOnOff: function(el, event, field) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'columnOnOff',
                checkbox: el,
                field: field,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // regular processing
            var obj = this;
            // collapse expanded rows
            for (var r in this.records) {
                if (this.records[r].expanded === true) this.records[r].expanded = false
            }
            // show/hide
            var hide = true;
            if (field == 'line-numbers') {
                this.show.lineNumbers = !this.show.lineNumbers;
                this.refresh();
            } else {
                var col = this.getColumn(field);
                if (col.hidden) {
                    $(el).prop('checked', true);
                    this.showColumn(col.field);
                } else {
                    $(el).prop('checked', false);
                    this.hideColumn(col.field);
                }
                hide = false;
            }
            if (hide) {
                setTimeout(function() {
                    $().w2overlay('', {
                        name: 'searches-' + this.name
                    });
                    obj.toolbar.uncheck('column-on-off');
                }, 100);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        initToolbar: function() {
            // -- if toolbar is true
            if (this.toolbar && typeof this.toolbar['render'] == 'undefined') {
                var tmp_items = this.toolbar.items;
                this.toolbar.items = [];
                this.toolbar = $().w2toolbar($.extend(true, {}, this.toolbar, {
                    name: this.name + '_toolbar',
                    owner: this
                }));

                // =============================================
                // ------ Toolbar Generic buttons

                if (this.show.toolbarReload) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['reload']));
                }
                if (this.show.toolbarColumns) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['columns']));
                }
                if (this.show.toolbarReload || this.show.toolbarColumn) {
                    this.toolbar.items.push({
                        type: 'break',
                        id: 'w2ui-break0'
                    });
                }
                if (this.show.toolbarSearch) {
                    var html =
                        '<div class="w2ui-toolbar-search">' +
                        '<table cellpadding="0" cellspacing="0"><tr>' +
                        '    <td>' + this.buttons['search'].html + '</td>' +
                        '    <td>' +
                        '        <input id="grid_' + this.name + '_search_all" class="w2ui-search-all" ' +
                        '            placeholder="' + this.last.caption + '" value="' + this.last.search + '"' +
                        '            onkeydown="if (event.keyCode == 13 && w2utils.isIE) this.onchange();"' +
                        '            onchange="' +
                        '                var val = this.value; ' +
                        '                var fld = $(this).data(\'w2field\'); ' +
                        '                var dat = $(this).data(\'selected\'); ' +
                        '                if (fld) val = fld.clean(val);' +
                        '                if (dat != null && $.isPlainObject(dat)) val = dat.id;' +
                        '                w2ui[\'' + this.name + '\'].search(w2ui[\'' + this.name + '\'].last.field, val); ' +
                        '            ">' +
                        '    </td>' +
                        '    <td>' +
                        '        <div title="' + w2utils.lang('Clear Search') + '" class="w2ui-search-clear" id="grid_' + this.name + '_searchClear"  ' +
                        '             onclick="var obj = w2ui[\'' + this.name + '\']; obj.searchReset();" ' +
                        '        >&nbsp;&nbsp;</div>' +
                        '    </td>' +
                        '</tr></table>' +
                        '</div>';
                    this.toolbar.items.push({
                        type: 'html',
                        id: 'w2ui-search',
                        html: html
                    });
                    if (this.multiSearch && this.searches.length > 0) {
                        this.toolbar.items.push($.extend(true, {}, this.buttons['search-go']));
                    }
                }
                if (this.show.toolbarSearch && (this.show.toolbarAdd || this.show.toolbarEdit || this.show.toolbarDelete || this.show.toolbarSave)) {
                    this.toolbar.items.push({
                        type: 'break',
                        id: 'w2ui-break1'
                    });
                }
                if (this.show.toolbarAdd) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['add']));
                }
                if (this.show.toolbarEdit) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['edit']));
                }
                if (this.show.toolbarDelete) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['delete']));
                }
                if (this.show.toolbarSave) {
                    if (this.show.toolbarAdd || this.show.toolbarDelete || this.show.toolbarEdit) {
                        this.toolbar.items.push({
                            type: 'break',
                            id: 'w2ui-break2'
                        });
                    }
                    this.toolbar.items.push($.extend(true, {}, this.buttons['save']));
                }
                //drop columns for froups is shown by default
                if (this.enableGrouping)
                    this.toolbar.items.push($.extend(true, {}, this.buttons['groups']));
                // add original buttons
                for (var i in tmp_items) this.toolbar.items.push(tmp_items[i]);

                // =============================================
                // ------ Toolbar onClick processing

                var obj = this;
                this.toolbar.on('click', function(event) {
                    var eventData = obj.trigger({
                        phase: 'before',
                        type: 'toolbar',
                        target: event.target,
                        originalEvent: event
                    });
                    if (eventData.isCancelled === true) return;
                    var id = event.target;
                    switch (id) {
                        case 'w2ui-reload':
                            var eventData2 = obj.trigger({
                                phase: 'before',
                                type: 'reload',
                                target: obj.name
                            });
                            if (eventData2.isCancelled === true) return false;
                            obj.reload();
                            obj.trigger($.extend(eventData2, {
                                phase: 'after'
                            }));
                            break;
                        case 'w2ui-column-on-off':
                            obj.initColumnOnOff();
                            obj.initResize();
                            obj.resize();
                            break;
                        case 'w2ui-search-advanced':
                            var tb = this;
                            var it = this.get(id);
                            if (it.checked) {
                                obj.searchClose();
                                setTimeout(function() {
                                    tb.uncheck(id);
                                }, 1);
                            } else {
                                obj.searchOpen();
                                event.originalEvent.stopPropagation();

                                function tmp_close() {
                                    if ($('#w2ui-overlay-searches-' + obj.name).data('keepOpen') === true) return;
                                    tb.uncheck(id);
                                    $(document).off('click', 'body', tmp_close);
                                }
                                $(document).on('click', 'body', tmp_close);
                            }
                            break;
                        case 'w2ui-add':
                            // events
                            var eventData = obj.trigger({
                                phase: 'before',
                                target: obj.name,
                                type: 'add',
                                recid: null
                            });
                            obj.trigger($.extend(eventData, {
                                phase: 'after'
                            }));
                            break;
                        case 'w2ui-edit':
                            var sel = obj.getSelection();
                            var recid = null;
                            if (sel.length == 1) recid = sel[0];
                            // events
                            var eventData = obj.trigger({
                                phase: 'before',
                                target: obj.name,
                                type: 'edit',
                                recid: recid
                            });
                            obj.trigger($.extend(eventData, {
                                phase: 'after'
                            }));
                            break;
                        case 'w2ui-delete':
                            obj["delete"]();
                            break;
                        case 'w2ui-save':
                            obj.save();
                            break;
                    }
                    // no default action
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                });
            }
            return;
        },

        initResize: function() {
            var obj = this;
            var firstVisibleColumn = 0;
            if(obj.columns.length>0){
              for (var i = 0; i <= obj.columns.length; i++) {
                  if (!obj.columns[i].hidden) {
                      firstVisibleColumn = i;
                      break;
                  }
              }
            }
            //if (obj.resizing === true) return;
            $(this.box).find('.w2ui-resizer')
                .off('click')
                .on('click', function(event) {
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                    if (event.preventDefault) event.preventDefault();
                })
                .off('mousedown')
                .on('mousedown', function(event) {
                    var column = parseInt($(this).attr('name'));
                    if (!event) event = window.event;
                    if (!window.addEventListener) {
                        window.document.attachEvent('onselectstart', function() {
                            return false;
                        });
                    }
                    obj.resizing = true;
                    obj.last.tmp = {
                        x: event.screenX,
                        y: event.screenY,
                        gx: event.screenX,
                        gy: event.screenY,
                        col: parseInt($(this).attr('name'))
                    };
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                    if (event.preventDefault) event.preventDefault();
                    // fix sizes
                    for (var c in obj.columns) {
                        if (obj.columns[c].hidden) continue;
                        if (typeof obj.columns[c].sizeOriginal == 'undefined') obj.columns[c].sizeOriginal = obj.columns[c].size;
                        obj.columns[c].size = obj.columns[c].sizeCalculated;
                    }
                    var eventData = {
                        phase: 'before',
                        type: 'columnResize',
                        target: obj.name,
                        column: obj.last.tmp.col,
                        field: obj.columns[obj.last.tmp.col].field
                    };
                    eventData = obj.trigger($.extend(eventData, {
                        resizeBy: 0,
                        originalEvent: event
                    }));
                    // set move event
                    var mouseMove = function(event) {

                        if (obj.resizing != true) return;
                        if (!event) event = window.event;
                        // event before
                        eventData = obj.trigger($.extend(eventData, {
                            resizeBy: (event.screenX - obj.last.tmp.gx),
                            originalEvent: event
                        }));
                        if (eventData.isCancelled === true) {
                            eventData.isCancelled = false;
                            return;
                        }
                        // default action
                        obj.last.tmp.x = (event.screenX - obj.last.tmp.x);
                        obj.last.tmp.y = (event.screenY - obj.last.tmp.y);
                        obj.columns[obj.last.tmp.col].size = (parseInt(obj.columns[obj.last.tmp.col].size) + obj.last.tmp.x) + 'px';
                        obj.resizeRecords();
                        // reset
                        obj.last.tmp.x = event.screenX;
                        obj.last.tmp.y = event.screenY;
                        var colSize = obj.columns[obj.last.tmp.col].size.replace('px', '');
                        //var groupCount = column === firstVisibleColumn ? obj.groupData.length - 1 : 0;
                        for (var f in obj.expandedGrids) {
                            // var childGrid = w2ui[obj.expandedGrids[f]];
                            //if (childGrid.isLastGroup) {
                            // childGrid.last.tmp = {
                            //     x: event.screenX,
                            //     y: event.screenY,
                            //     gx: event.screenX,
                            //     gy: event.screenY,
                            //     col: column //parseInt($(this).attr('name'))
                            // };
                            //childGrid.last.tmp.x = (event.screenX - childGrid.last.tmp.x);
                            //childGrid.last.tmp.y = (event.screenY - childGrid.last.tmp.y);
                            // childGrid.columns[obj.last.tmp.col].size = parseInt(colSize) + 'px';
                            // childGrid.resize();
                            // childGrid.resizeRecords();

                            // reset
                            //childGrid.last.tmp.x = event.screenX;
                            //childGrid.last.tmp.y = event.screenY;
                            //}
                            obj.resizeChildColumns(f, obj.last.tmp.col, firstVisibleColumn, colSize);
                        }
                    }
                    var mouseUp = function(event) {
                        delete obj.resizing;
                        $(document).off('mousemove', 'body');
                        $(document).off('mouseup', 'body');
                        obj.resizeRecords();
                        // event before
                        obj.trigger($.extend(eventData, {
                            phase: 'after',
                            originalEvent: event
                        }));
                    }
                    $(document).on('mousemove', 'body', mouseMove);
                    $(document).on('mouseup', 'body', mouseUp);
                })
                .each(function(index, el) {
                    var td = $(el).parent();
                    $(el).css({
                        "height": '25px',
                        "margin-left": (td.width() - 3) + 'px'
                    })
                });
        },

        resizeChildColumns: function(f, ind, first, colSize) {
            var obj = this;
            var childGrid = w2ui[this.expandedGrids[f]];
            var count = 0;
            if (ind === first) {
                count = obj.groupData.indexOf(obj.postData.groupOn);
                if (count === -1) {
                    if (childGrid.show.expandColumn)
                        count = 1;
                    else
                        count = 0;
                } else {
                    count += childGrid.show.expandColumn ? 1 : 0;
                }
            }
            childGrid.columns[ind].size = parseInt(colSize - 25 * count) + 'px';
            childGrid.resize();
            for (var x in childGrid.expandedGrids) {
                childGrid.resizeChildColumns(x, ind, first, colSize);
            }
        },

        resizeBoxes: function() {
            // elements
            var main = $(this.box).find('> div');
            var header = $('#grid_' + this.name + '_header');
            var toolbar = $('#grid_' + this.name + '_toolbar');
            var summary = $('#grid_' + this.name + '_summary');
            var footer = $('#grid_' + this.name + '_footer');
            var body = $('#grid_' + this.name + '_body');
            var columns = $('#grid_' + this.name + '_columns');
            var records = $('#grid_' + this.name + '_records');

            if (this.show.header) {
                header.css({
                    top: '0px',
                    left: '0px',
                    right: '0px'
                });
            }

            if (this.show.toolbar) {
                toolbar.css({
                    top: (0 + (this.show.header ? w2utils.getSize(header, 'height') : 0)) + 'px',
                    left: '0px',
                    right: '0px'
                });
            }
            if (this.show.footer) {
                footer.css({
                    bottom: '0px',
                    left: '0px',
                    right: '0px'
                });
            }
            if (this.summary.length > 0) {
                summary.css({
                    bottom: (0 + (this.show.footer ? w2utils.getSize(footer, 'height') : 0)) + 'px',
                    left: '0px',
                    right: '0px'
                });
            }
            body.css({
                top: (0 + (this.show.header ? w2utils.getSize(header, 'height') : 0) + (this.show.toolbar ? w2utils.getSize(toolbar, 'height') : 0)) + 'px',
                bottom: (0 + (this.show.footer ? w2utils.getSize(footer, 'height') : 0) + (this.summary.length > 0 ? w2utils.getSize(summary, 'height') : 0)) + 'px',
                left: '0px',
                right: '0px'
            });
        },

        resizeRecords: function() {
            var obj = this;
            // remove empty records
            $(this.box).find('.w2ui-empty-record').remove();
            // -- Calculate Column size in PX
            var box = $(this.box);
            var grid = $(this.box).find('> div');
            var header = $('#grid_' + this.name + '_header');
            var toolbar = $('#grid_' + this.name + '_toolbar');
            var summary = $('#grid_' + this.name + '_summary');
            var footer = $('#grid_' + this.name + '_footer');
            var body = $('#grid_' + this.name + '_body');
            var columns = $('#grid_' + this.name + '_columns');
            var records = $('#grid_' + this.name + '_records');

            // body might be expanded by data
            if (!this.fixedBody) {
                // allow it to render records, then resize
                var calculatedHeight = w2utils.getSize(columns, 'height') + w2utils.getSize($('#grid_' + obj.name + '_records table'), 'height');
                obj.height = calculatedHeight + w2utils.getSize(grid, '+height') + (obj.show.header ? w2utils.getSize(header, 'height') : 0) + (obj.show.toolbar ? w2utils.getSize(toolbar, 'height') : 0) + (summary.css('display') != 'none' ? w2utils.getSize(summary, 'height') : 0) + (obj.show.footer ? w2utils.getSize(footer, 'height') : 0);
                grid.css('height', obj.height);
                body.css('height', calculatedHeight);
                box.css('height', w2utils.getSize(grid, 'height') + w2utils.getSize(box, '+height'));
            } else {
                // fixed body height
                var calculatedHeight = grid.height() - (this.show.header ? w2utils.getSize(header, 'height') : 0) - (this.show.toolbar ? w2utils.getSize(toolbar, 'height') : 0) - (summary.css('display') != 'none' ? w2utils.getSize(summary, 'height') : 0) - (this.show.footer ? w2utils.getSize(footer, 'height') : 0);
                body.css('height', calculatedHeight);
            }

            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            // check overflow
            var bodyOverflowX = false;
            var bodyOverflowY = false;
            if (body.width() < $(records).find('>table').width()) bodyOverflowX = true;
            if (body.height() - columns.height() < $(records).find('>table').height() + (bodyOverflowX ? w2utils.scrollBarSize() : 0)) bodyOverflowY = true;
            if (!this.fixedBody) {
                bodyOverflowY = false;
                bodyOverflowX = false;
            }
            if (bodyOverflowX || bodyOverflowY) {
                columns.find('> table > tbody > tr:nth-child(1) td.w2ui-head-last').css('width', w2utils.scrollBarSize()).show();
                records.css({
                    top: ((this.columnGroups.length > 0 && this.show.columns ? 1 : 0) + w2utils.getSize(columns, 'height')) + 'px',
                    "-webkit-overflow-scrolling": "touch",
                    "overflow-x": (bodyOverflowX && !obj.isGroupGrid ? 'auto' : 'hidden'),
                    "overflow-y": (bodyOverflowY ? 'auto' : 'hidden')
                });
            } else {
                columns.find('> table > tbody > tr:nth-child(1) td.w2ui-head-last').hide();
                records.css({
                    top: ((this.columnGroups.length > 0 && this.show.columns ? 1 : 0) + w2utils.getSize(columns, 'height')) + 'px',
                    overflow: 'hidden'
                });
                if (records.length > 0) {
                    this.last.scrollTop = 0;
                    this.last.scrollLeft = 0;
                } // if no scrollbars, always show top
            }
            if (this.show.emptyRecords && !bodyOverflowY) {
                var max = Math.floor(records.height() / this.recordHeight) + 1;
                if (this.fixedBody) {
                    for (var di = buffered; di <= max; di++) {
                        var html = '';
                        html += '<tr class="' + (di % 2 ? 'w2ui-even' : 'w2ui-odd') + ' w2ui-empty-record" style="height: ' + this.recordHeight + 'px">';
                        if (this.show.lineNumbers) html += '<td class="w2ui-col-number"></td>';
                        if (this.show.selectColumn) html += '<td class="w2ui-grid-data w2ui-col-select"></td>';
                        if (this.show.expandColumn) html += '<td class="w2ui-grid-data w2ui-col-expand"></td>';
                        var j = 0;
                        while (true && this.columns.length > 0) {
                            var col = this.columns[j];
                            if (col.hidden) {
                                j++;
                                if (typeof this.columns[j] == 'undefined') break;
                                else continue;
                            }
                            html += '<td class="w2ui-grid-data" ' + (typeof col.attr != 'undefined' ? col.attr : '') + ' col="' + j + '"></td>';
                            j++;
                            if (typeof this.columns[j] == 'undefined') break;
                        }
                        html += '<td class="w2ui-grid-data-last"></td>';
                        html += '</tr>';
                        $('#grid_' + this.name + '_records > table').append(html);
                    }
                }
            }
            if (body.length > 0) {
                var width_max = parseInt(body.width()) - (bodyOverflowY ? w2utils.scrollBarSize() : 0) - (this.show.lineNumbers ? 34 : 0) - (this.show.selectColumn ? 26 : 0) - (this.show.expandColumn ? 26 : 0);
                var width_box = width_max;
                var percent = 0;
                // gridMinWidth processiong
                var restart = false;
                for (var i = 0; i < this.columns.length; i++) {
                    var col = this.columns[i];
                    if (col.gridMinWidth > 0) {
                        if (col.gridMinWidth > width_box && col.hidden !== true) {
                            col.hidden = true;
                            restart = true;
                        }
                        if (col.gridMinWidth < width_box && col.hidden === true) {
                            col.hidden = false;
                            restart = true;
                        }
                    }
                }
                if (restart === true) {
                    this.refresh();
                    return;
                }
                // assign PX column s
                for (var i = 0; i < this.columns.length; i++) {
                    var col = this.columns[i];
                    if (col.hidden) continue;
                    if (String(col.size).substr(String(col.size).length - 2).toLowerCase() == 'px') {
                        width_max -= parseFloat(col.size);
                        this.columns[i].sizeCalculated = col.size;
                        this.columns[i].sizeType = 'px';
                    } else {
                        percent += parseFloat(col.size);
                        this.columns[i].sizeType = '%';
                        delete col.sizeCorrected;
                    }
                }
                // if sum != 100% -- reassign proportionally
                if (percent != 100 && percent > 0) {
                    for (var i = 0; i < this.columns.length; i++) {
                        var col = this.columns[i];
                        if (col.hidden) continue;
                        if (col.sizeType == '%') {
                            col.sizeCorrected = Math.round(parseFloat(col.size) * 100 * 100 / percent) / 100 + '%';
                        }
                    }
                }
                // calculate % columns
                for (var i = 0; i < this.columns.length; i++) {
                    var col = this.columns[i];
                    if (col.hidden) continue;
                    if (col.sizeType == '%') {
                        if (typeof this.columns[i].sizeCorrected != 'undefined') {
                            // make it 1px smaller, so margin of error can be calculated correctly
                            this.columns[i].sizeCalculated = Math.floor(width_max * parseFloat(col.sizeCorrected) / 100) - 1 + 'px';
                        } else {
                            // make it 1px smaller, so margin of error can be calculated correctly
                            this.columns[i].sizeCalculated = Math.floor(width_max * parseFloat(col.size) / 100) - 1 + 'px';
                        }
                    }
                }
            }
            // fix margin of error that is due percentage calculations
            var width_cols = 0;
            for (var i = 0; i < this.columns.length; i++) {
                var col = this.columns[i];
                if (col.hidden) continue;
                if (typeof col.min == 'undefined') col.min = 20;
                if (parseInt(col.sizeCalculated) < parseInt(col.min)) col.sizeCalculated = col.min + 'px';
                if (parseInt(col.sizeCalculated) > parseInt(col.max)) col.sizeCalculated = col.max + 'px';
                width_cols += parseInt(col.sizeCalculated);
            }
            var width_diff = parseInt(width_box) - parseInt(width_cols);
            if (width_diff > 0 && percent > 0) {
                var i = 0;
                while (true) {
                    var col = this.columns[i];
                    if (typeof col == 'undefined') {
                        i = 0;
                        continue;
                    }
                    if (col.hidden || col.sizeType == 'px') {
                        i++;
                        continue;
                    }
                    col.sizeCalculated = (parseInt(col.sizeCalculated) + 1) + 'px';
                    width_diff--;
                    if (width_diff == 0) break;
                    i++;
                }
            } else if (width_diff > 0) {
                columns.find('> table > tbody > tr:nth-child(1) td.w2ui-head-last').css('width', w2utils.scrollBarSize()).show();
            }
            // resize columns
            columns.find('> table > tbody > tr:nth-child(1) td').each(function(index, el) {
                var ind = $(el).attr('col');
                if (typeof ind != 'undefined' && obj.columns[ind]) $(el).css('width', obj.columns[ind].sizeCalculated);
                // last column
                if ($(el).hasClass('w2ui-head-last')) {
                    $(el).css('width', w2utils.scrollBarSize() + (width_diff > 0 && percent == 0 ? width_diff : 0) + 'px');
                }
            });
            // if there are column groups - hide first row (needed for sizing)
            if (columns.find('> table > tbody > tr').length == 3) {
                columns.find('> table > tbody > tr:nth-child(1) td').html('').css({
                    'height': '0px',
                    'border': '0px',
                    'padding': '0px',
                    'margin': '0px'
                });
            }
            // resize records
            records.find('> table > tbody > tr:nth-child(1) td').each(function(index, el) {
                var ind = $(el).attr('col');
                if (typeof ind != 'undefined' && obj.columns[ind]) $(el).css('width', obj.columns[ind].sizeCalculated);
                // last column
                if ($(el).hasClass('w2ui-grid-data-last')) {
                    $(el).css('width', (width_diff > 0 && percent == 0 ? width_diff : 0) + 'px');
                }
            });
            // resize summary
            summary.find('> table > tbody > tr:nth-child(1) td').each(function(index, el) {
                var ind = $(el).attr('col');
                if (typeof ind != 'undefined' && obj.columns[ind]) $(el).css('width', obj.columns[ind].sizeCalculated);
                // last column
                if ($(el).hasClass('w2ui-grid-data-last')) {
                    $(el).css('width', w2utils.scrollBarSize() + (width_diff > 0 && percent == 0 ? width_diff : 0) + 'px');
                }
            });
            this.initResize();
            this.refreshRanges();
            // apply last scroll if any
            if ((this.last.scrollTop || this.last.scrollLeft) && records.length > 0) {
                columns.prop('scrollLeft', this.last.scrollLeft);
                records.prop('scrollTop', this.last.scrollTop);
                records.prop('scrollLeft', this.last.scrollLeft);
            }
        },

        getSearchesHTML: function() {
            var html = '<table cellspacing="0">';
            var showBtn = false;
            for (var i = 0; i < this.searches.length; i++) {
                var s = this.searches[i];
                s.type = String(s.type).toLowerCase();
                if (s.hidden) continue;
                var btn = '';
                if (showBtn == false) {
                    btn = '<button class="btn close-btn" onclick="obj = w2ui[\'' + this.name + '\']; if (obj) { obj.searchClose(); }">X</button';
                    showBtn = true;
                }
                if (typeof s.inTag == 'undefined') s.inTag = '';
                if (typeof s.outTag == 'undefined') s.outTag = '';
                if (typeof s.type == 'undefined') s.type = 'text';
                if (['text', 'alphanumeric', 'combo'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" onclick="event.stopPropagation();" >' +
                        '    <option value="is">' + w2utils.lang('is') + '</option>' +
                        '    <option value="begins">' + w2utils.lang('begins') + '</option>' +
                        '    <option value="contains">' + w2utils.lang('contains') + '</option>' +
                        '    <option value="ends">' + w2utils.lang('ends') + '</option>' +
                        '</select>';
                }
                if (['int', 'float', 'money', 'currency', 'percent', 'date', 'time'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" ' +
                        '        onchange="w2ui[\'' + this.name + '\'].initOperator(this, ' + i + ');" onclick="event.stopPropagation();" >' +
                        '    <option value="is">' + w2utils.lang('is') + '</option>' +
                        (['int'].indexOf(s.type) != -1 ? '<option value="in">' + w2utils.lang('in') + '</option>' : '') +
                        (['int'].indexOf(s.type) != -1 ? '<option value="not in">' + w2utils.lang('not in') + '</option>' : '') +
                        '<option value="between">' + w2utils.lang('between') + '</option>' +
                        '</select>';
                }
                if (['select', 'list', 'hex'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" onclick="event.stopPropagation();">' +
                        '    <option value="is">' + w2utils.lang('is') + '</option>' +
                        '</select>';
                }
                if (['enum'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" onclick="event.stopPropagation();">' +
                        '    <option value="in">' + w2utils.lang('in') + '</option>' +
                        '    <option value="not in">' + w2utils.lang('not in') + '</option>' +
                        '</select>';
                }
                html += '<tr>' +
                    '    <td class="close-btn">' + btn + '</td>' +
                    '    <td class="caption">' + s.caption + '</td>' +
                    '    <td class="operator">' + operator + '</td>' +
                    '    <td class="value">';

                switch (s.type) {
                    case 'text':
                    case 'alphanumeric':
                    case 'hex':
                    case 'list':
                    case 'combo':
                    case 'enum':
                        html += '<input rel="search" type="text" style="width: 300px;" id="grid_' + this.name + '_field_' + i + '" name="' + s.field + '" ' + s.inTag + ' >';
                        break;

                    case 'int':
                    case 'float':
                    case 'money':
                    case 'currency':
                    case 'percent':
                    case 'date':
                    case 'time':
                        html += '<input rel="search" type="text" size="12" id="grid_' + this.name + '_field_' + i + '" name="' + s.field + '" ' + s.inTag + '>' +
                            '<span id="grid_' + this.name + '_range_' + i + '" style="display: none">' +
                            '&nbsp;-&nbsp;&nbsp;<input rel="search" type="text" style="width: 90px" id="grid_' + this.name + '_field2_' + i + '" name="' + s.field + '" ' + s.inTag + '>' +
                            '</span>';
                        break;

                    case 'select':
                        html += '<select rel="search" id="grid_' + this.name + '_field_' + i + '" name="' + s.field + '" ' + s.inTag + '  onclick="event.stopPropagation();"></select>';
                        break;

                }
                html += s.outTag +
                    '    </td>' +
                    '</tr>';
            }
            html += '<tr>' +
                '    <td colspan="4" class="actions">' +
                '        <div>' +
                '        <button class="btn" onclick="obj = w2ui[\'' + this.name + '\']; if (obj) { obj.searchReset(); }">' + w2utils.lang('Reset') + '</button>' +
                '        <button class="btn btn-blue" onclick="obj = w2ui[\'' + this.name + '\']; if (obj) { obj.search(); }">' + w2utils.lang('Search') + '</button>' +
                '        </div>' +
                '    </td>' +
                '</tr></table>';
            return html;
        },

        initOperator: function(el, search_ind) {
            var obj = this;
            var search = obj.searches[search_ind];
            var range = $('#grid_' + obj.name + '_range_' + search_ind);
            var fld1 = $('#grid_' + obj.name + '_field_' + search_ind);
            var fld2 = fld1.parent().find('span input');
            if ($(el).val() == 'in' || $(el).val() == 'not in') {
                fld1.w2field('clear');
            } else {
                fld1.w2field(search.type);
            }
            if ($(el).val() == 'between') {
                range.show();
                fld2.w2field(search.type);
            } else {
                range.hide();
            }
        },

        initSearches: function() {
            var obj = this;
            // init searches
            for (var s in this.searches) {
                var search = this.searches[s];
                var sdata = this.getSearchData(search.field);
                search.type = String(search.type).toLowerCase();
                if (typeof search.options != 'object') search.options = {};
                // init types
                switch (search.type) {
                    case 'text':
                    case 'alphanumeric':
                        $('#grid_' + this.name + '_operator_' + s).val('begins');
                        if (['alphanumeric', 'hex'].indexOf(search.type) != -1) {
                            $('#grid_' + this.name + '_field_' + s).w2field(search.type, search.options);
                        }
                        break;

                    case 'int':
                    case 'float':
                    case 'money':
                    case 'currency':
                    case 'percent':
                    case 'date':
                    case 'time':
                        if (sdata && sdata.type == 'int' && ['in', 'not in'].indexOf(sdata.operator) != -1) break;
                        $('#grid_' + this.name + '_field_' + s).w2field(search.type, search.options);
                        $('#grid_' + this.name + '_field2_' + s).w2field(search.type, search.options);
                        setTimeout(function() { // convert to date if it is number
                            $('#grid_' + obj.name + '_field_' + s).keydown();
                            $('#grid_' + obj.name + '_field2_' + s).keydown();
                        }, 1);
                        break;

                    case 'hex':
                        break;

                    case 'list':
                    case 'combo':
                    case 'enum':
                        var options = search.options;
                        if (search.type == 'list') options.selected = {};
                        if (search.type == 'enum') options.selected = [];
                        if (sdata) options.selected = sdata.value;
                        $('#grid_' + this.name + '_field_' + s).w2field(search.type, options);
                        if (search.type == 'combo') {
                            $('#grid_' + this.name + '_operator_' + s).val('begins');
                        }
                        break;

                    case 'select':
                        // build options
                        var options = '<option value="">--</option>';
                        for (var i in search.options.items) {
                            var si = search.options.items[i];
                            if ($.isPlainObject(search.options.items[i])) {
                                var val = si.id;
                                var txt = si.text;
                                if (typeof val == 'undefined' && typeof si.value != 'undefined') val = si.value;
                                if (typeof txt == 'undefined' && typeof si.caption != 'undefined') txt = si.caption;
                                if (val == null) val = '';
                                options += '<option value="' + val + '">' + txt + '</option>';
                            } else {
                                options += '<option value="' + si + '">' + si + '</option>';
                            }
                        }
                        $('#grid_' + this.name + '_field_' + s).html(options);
                        break;
                }
                if (sdata != null) {
                    if (sdata.type == 'int' && ['in', 'not in'].indexOf(sdata.operator) != -1) {
                        $('#grid_' + this.name + '_field_' + s).w2field('clear').val(sdata.value);
                    }
                    $('#grid_' + this.name + '_operator_' + s).val(sdata.operator).trigger('change');
                    if (!$.isArray(sdata.value)) {
                        if (typeof sdata.value != 'udefined') $('#grid_' + this.name + '_field_' + s).val(sdata.value).trigger('change');
                    } else {
                        if (['in', 'not in'].indexOf(sdata.operator) != -1) {
                            $('#grid_' + this.name + '_field_' + s).val(sdata.value).trigger('change');
                        } else {
                            $('#grid_' + this.name + '_field_' + s).val(sdata.value[0]).trigger('change');
                            $('#grid_' + this.name + '_field2_' + s).val(sdata.value[1]).trigger('change');
                        }
                    }
                }
            }
            // add on change event
            $('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches *[rel=search]').on('keypress', function(evnt) {
                if (evnt.keyCode == 13) {
                    obj.search();
                    $().w2overlay();
                }
            });
        },

        getColumnsHTML: function() {
            var obj = this;
            var html = '';
            if (this.show.columnHeaders) {
                if (this.columnGroups.length > 0) {
                    html = getColumns(true) + getGroups() + getColumns(false);
                } else {
                    html = getColumns(true);
                }
            }
            return html;

            function getGroups() {
                var html = '<tr>';
                // add empty group at the end
                if (obj.columnGroups[obj.columnGroups.length - 1].caption != '') obj.columnGroups.push({
                    caption: ''
                });

                if (obj.show.lineNumbers) {
                    html += '<td class="w2ui-head w2ui-col-number">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                if (obj.show.selectColumn) {
                    html += '<td class="w2ui-head w2ui-col-select">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                if (obj.show.expandColumn) {
                    html += '<td class="w2ui-head w2ui-col-expand">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                var ii = 0;
                for (var i = 0; i < obj.columnGroups.length; i++) {
                    var colg = obj.columnGroups[i];
                    var col = obj.columns[ii];
                    if (typeof colg.span == 'undefined' || colg.span != parseInt(colg.span)) colg.span = 1;
                    if (typeof colg.colspan != 'undefined') colg.span = colg.colspan;
                    if (colg.master === true) {
                        var sortStyle = '';
                        for (var si in obj.sortData) {
                            if (obj.sortData[si].field == col.field) {
                                if (RegExp('asc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-up';
                                if (RegExp('desc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-down';
                            }
                        }
                        var resizer = "";
                        if (col.resizable !== false) {
                            resizer = '<div class="w2ui-resizer" name="' + ii + '"></div>';
                        }
                        html += '<td class="w2ui-head ' + sortStyle + '" col="' + ii + '" rowspan="2" colspan="' + (colg.span + (i == obj.columnGroups.length - 1 ? 1 : 0)) + '" ' +
                            '    onclick="w2ui[\'' + obj.name + '\'].columnClick(\'' + col.field + '\', event);">' +
                            resizer +
                            '    <div class="w2ui-col-group w2ui-col-header ' + (sortStyle ? 'w2ui-col-sorted' : '') + '">' +
                            '        <div class="' + sortStyle + '"></div>' +
                            (!col.caption ? '&nbsp;' : col.caption) +
                            '    </div>' +
                            '</td>';
                    } else {
                        html += '<td class="w2ui-head" col="' + ii + '" ' +
                            '        colspan="' + (colg.span + (i == obj.columnGroups.length - 1 ? 1 : 0)) + '">' +
                            '    <div class="w2ui-col-group">' +
                            (!colg.caption ? '&nbsp;' : colg.caption) +
                            '    </div>' +
                            '</td>';
                    }
                    ii += colg.span;
                }
                html += '</tr>';
                return html;
            }

            function getColumns(master) {
                var html = '<tr>',
                    reorderCols = (obj.reorderColumns && (!obj.columnGroups || !obj.columnGroups.length)) ? ' w2ui-reorder-cols-head ' : '';
                if (obj.show.lineNumbers) {
                    html += '<td class="w2ui-head w2ui-col-number" onclick="w2ui[\'' + obj.name + '\'].columnClick(\'line-number\', event);">' +
                        '    <div>#</div>' +
                        '</td>';
                }
                if (obj.show.selectColumn) {
                    html += '<td class="w2ui-head w2ui-col-select" ' +
                        '        onclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '    <div>' +
                        '        <input type="checkbox" id="grid_' + obj.name + '_check_all" tabIndex="-1"' +
                        '            style="' + (obj.multiSelect == false ? 'display: none;' : '') + '"' +
                        '            onclick="if (this.checked) w2ui[\'' + obj.name + '\'].selectAll(); ' +
                        '                     else w2ui[\'' + obj.name + '\'].selectNone(); ' +
                        '                     if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '    </div>' +
                        '</td>';
                }
                if (obj.show.expandColumn) {
                    html += '<td class="w2ui-head w2ui-col-expand">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                var ii = 0;
                var id = 0;
                for (var i = 0; i < obj.columns.length; i++) {
                    var col = obj.columns[i];
                    var colg = {};
                    if (i == id) {
                        id = id + (typeof obj.columnGroups[ii] != 'undefined' ? parseInt(obj.columnGroups[ii].span) : 0);
                        ii++;
                    }
                    if (typeof obj.columnGroups[ii - 1] != 'undefined') var colg = obj.columnGroups[ii - 1];
                    if (col.hidden) continue;
                    var sortStyle = '';
                    for (var si in obj.sortData) {
                        if (obj.sortData[si].field == col.field) {
                            if (RegExp('asc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-up';
                            if (RegExp('desc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-down';
                        }
                    }
                    if (colg['master'] !== true || master) { // grouping of columns
                        var resizer = "";
                        if (col.resizable !== false) {
                            resizer = '<div class="w2ui-resizer" name="' + i + '"></div>';
                        }
                        html += '<td col="' + i + '" class="w2ui-head ' + sortStyle + reorderCols + '" ' +
                            '    onclick="w2ui[\'' + obj.name + '\'].columnClick(\'' + col.field + '\', event);">' +
                            resizer +
                            '    <div class="w2ui-col-header ' + (sortStyle ? 'w2ui-col-sorted' : '') + '">' +
                            '        <div class="' + sortStyle + '"></div>' +
                            (!col.caption ? '&nbsp;' : col.caption) +
                            '    </div>' +
                            '</td>';
                    }
                }
                html += '<td class="w2ui-head w2ui-head-last"><div>&nbsp;</div></td>';
                html += '</tr>';
                return html;
            }
        },

        getRecordsHTML: function() {
            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            // larget number works better with chrome, smaller with FF.
            if (buffered > 300) this.show_extra = 30;
            else this.show_extra = 300;
            var records = $('#grid_' + this.name + '_records');
            var limit = Math.floor(records.height() / this.recordHeight) + this.show_extra + 1;
            if (!this.fixedBody || limit > buffered) limit = buffered;
            // always need first record for resizing purposes
            var html = '<table>' + this.getRecordHTML(-1, 0);
            // first empty row with height
            html += '<tr id="grid_' + this.name + '_rec_top" line="top" style="height: ' + 0 + 'px">' +
                '    <td colspan="200"></td>' +
                '</tr>';
            for (var i = 0; i < limit; i++) {
                html += this.getRecordHTML(i, i + 1);
            }
            html += '<tr id="grid_' + this.name + '_rec_bottom" line="bottom" style="height: ' + ((buffered - limit) * this.recordHeight) + 'px">' +
                '    <td colspan="200"></td>' +
                '</tr>' +
                '<tr id="grid_' + this.name + '_rec_more" style="display: none">' +
                '    <td colspan="200" class="w2ui-load-more"></td>' +
                '</tr>' +
                '</table>';
            this.last.range_start = 0;
            this.last.range_end = limit;
            return html;
        },

        getSummaryHTML: function() {
            if (this.summary.length == 0) return;
            var html = '<table>';
            for (var i = 0; i < this.summary.length; i++) {
                html += this.getRecordHTML(i, i + 1, true);
            }
            html += '</table>';
            return html;
        },

        getSummaryRecordHTML: function(ind, lineNum) {
            if (this.summaryTemplates && this.summaryTemplates.length > 0) {
                if (ind >= this.summary.length) return '';
                record = this.summary[ind];
                if (!record) return '';
            } else {
                return this.getRecordHTML(i, h, true);
            }
        },

        toggleGroup: function(recid) {
            var rec = this.get(recid);
            if (rec.expanded === true) return this.groupCollapse(recid);
            else return this.groupExpand(recid);
        },

        groupExpand: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length > 0) return false;
            if (rec.expanded == 'none') return false;
            // insert expand row
            var tmp = 1 + (this.show.selectColumn ? 1 : 0);
            var addClass = ''; // ($('#grid_'+this.name +'_rec_'+ w2utils.escapeId(recid)).hasClass('w2ui-odd') ? 'w2ui-odd' : 'w2ui-even');
            $('#grid_' + this.name + '_rec_' + id).after(
                '<tr id="grid_' + this.name + '_rec_' + recid + '_expanded_row" class="w2ui-expanded-row ' + addClass + '">' +
                (this.show.lineNumbers ? '<td class="w2ui-col-number"></td>' : '') +
                '    <td class="w2ui-grid-data w2ui-expanded1" colspan="' + tmp + '"><div style="display: none"></div></td>' +
                '    <td colspan="100" class="w2ui-expanded2">' +
                '        <div id="grid_' + this.name + '_rec_' + recid + '_expanded" style="opacity: 0"></div>' +
                '    </td>' +
                '</tr>');
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'groupExpand',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + recid + '_expanded',
                ready: ready
            });
            if (eventData.isCancelled === true) {
                $('#grid_' + this.name + '_rec_' + id + '_expanded_row').remove();
                return;
            }
            // default action
            $('#grid_' + this.name + '_rec_' + id).attr('expanded', 'yes').addClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded_row').show();
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('<div class="w2ui-spinner" style="width: 16px; height: 16px; margin: -2px 2px;"></div>');
            rec.expanded = true;
            // check if height of expanded row > 5 then remove spinner
            setTimeout(ready, 300);

            function ready() {
                var div1 = $('#grid_' + obj.name + '_rec_' + id + '_expanded');
                var div2 = $('#grid_' + obj.name + '_rec_' + id + '_expanded_row .w2ui-expanded1 > div');
                div2.show().css('opacity', 1);
                div1.html('lorem ipsum');
                obj.showGroup(recid);
                if (div1.height() < 5) return;
                div1.css('opacity', 1);
                $('#grid_' + obj.name + '_cell_' + obj.get(recid, true) + '_expand div').html('-');
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.resizeRecords();
            return true;
        },

        groupCollapse: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var mainGrid = obj.mainGrid ? obj.mainGrid : obj;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length == 0) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'groupCollapse',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + id + '_expanded'
            });
            if (eventData.isCancelled === true) return;
            // default action
            $('#grid_' + this.name + '_rec_' + id).removeAttr('expanded').removeClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded').css('opacity', 0);
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('+');
            setTimeout(function() {
                $('#grid_' + obj.name + '_rec_' + id + '_expanded').height('0px');
                setTimeout(function() {
                    $('#grid_' + obj.name + '_rec_' + id + '_expanded_row').remove();
                    delete rec.expanded;
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    //console.log('name:' + obj.name + '\nparent:' + this.parentGrid);
                    //var name = obj.name + '_grp_' + recid;
                    var grids = obj.expandedGrids || [];
                    // mainGrid.childrenGrids = _.reject(mainGrid.childrenGrids, function(ob) {
                    //     console.log('parent:' + obj.name + '\nchildren:' + ob.name);
                    //     return obj.getRoot(ob.name) === name;
                    // }, true);
                    for (var x in grids) {
                        if (w2ui[grids[x]].expandedGrids) {
                            for (var y in w2ui[grids[x]].expandedGrids) {
                                if (w2ui.hasOwnProperty(w2ui[grids[x]].expandedGrids[y]))
                                    w2ui[w2ui[grids[x]].expandedGrids[y]].destroy();
                            }
                        }
                        w2ui[grids[x]].destroy();
                        obj.expandedGrids.splice(x, 1);
                    }

                    obj.resizeRecords();
                    obj.resize();
                }, 300);
            }, 200);
            return true;
        },

        showGroup: function(recid) {
            var obj = this;
            //get current record which is expanded
            var record = obj.get(recid);
            //copy current grid
            var tmp = $.extend(true, {}, this);
            //set new grid name
            var name = this.name + '_grp_' + recid;
            if (!tmp.url) {
                tmp.records = obj.getRecordsOfGroup(obj.postData.groupOn, record[obj.postData.groupOn]);
            } else {
                //reset records
                tmp.records = [];
            }

            // get element to render
            var box_id = 'grid_' + obj.name + '_rec_' + recid + '_expanded';
            $('#grid_' + obj.name + '_records').css('overflow-x', 'hidden');
            tmp.name = name;
            //no toolbar
            delete tmp.toolbar;
            //no need to show
            delete tmp.show.toolbar;
            delete tmp.show.footer;
            delete tmp.show.columnHeaders;

            //tmp.fixedBody = false;
            //hide x-overflow - not nice - will be checked on resizeRecords and if true - set overflowX hidden
            //main grid will have overflow - good enough
            tmp.isGroupGrid = true;

            //set main grid reference
            tmp.mainGrid = this.mainGrid ? this.mainGrid : this;
            //conditionals here!!!!!!!!!
            //need to know group level here. We should get the column that current grid is grouped on,
            //find its position in the groupData and set the group level
            var currentGroupLevel = obj.groupData.indexOf(obj.postData.groupOn);
            var nextGroupLevel;
            // if we are at last level we should render a regular grid
            if (currentGroupLevel === obj.groupData.length - 1) {
                tmp.enableGrouping = false;
                delete tmp.groupData;
                delete tmp.postData.groupOn;
                // tmp.postData.groupOn = obj.groupData[currentGroupLevel];
                tmp.isLastGroup = true;
                tmp.show.expandColumn = tmp.mainGrid.onExpand !== null;
            } else {
                // set new group on column
                nextGroupLevel = currentGroupLevel + 1
                tmp.postData.groupOn = obj.groupData[nextGroupLevel];
            }
            //Now we should set some filters so that the group we render has only the records
            //coresponding to parent record.
            //First we have to find the column value we are grouping data
            var groupValue = record[obj.postData.groupOn];

            // We have to extend post data with group data so that server will know what data to return
            // first we ensure that group_data exists in postData
            var group_data = obj.postData.group_data || [];
            //we need to find if there is a group data with the same parent group and extend it, if exists
            //otherwise we add it to post data
            var existing = $.grep(group_data, function(o) {
                return o.parentGroup === obj.groupData[currentGroupLevel];
            })[0];
            if (existing) {
                existing.parentGroup = obj.groupData[currentGroupLevel];
                existing.parentGroupValue = groupValue;
                existing.groupColumn = obj.groupData[nextGroupLevel] || '';
            } else {
                var currentGroupData = {
                    parentGroup: obj.groupData[currentGroupLevel],
                    parentGroupValue: groupValue,
                    groupColumn: obj.groupData[nextGroupLevel] || ''
                };
                group_data.push(currentGroupData);
            }

            tmp.postData.group_data = group_data;

            //assign new grid to framework
            w2ui[name] = tmp;

            //render new grid animated
            $('#' + box_id).css({
                margin: '0px',
                padding: '0px',
                width: '100%',
                'min-height': '300px'
            }).animate({
                height: '305px'
            }, {
                duration: 10,
                complete: function() {
                    //We have to resize the first column to align with parent grid
                    if (tmp.enableGrouping || tmp.show.expandColumn) {
                        var isFirstColumn = true;
                        $.each(tmp.columns, function(i, col) {
                            if (!col.hidden) {
                                var firstSize = obj.columns[i].sizeCalculated.replace('px', '');
                                var offset = isFirstColumn ? 25 : 0;
                                col.size = parseInt(firstSize - offset) + 'px';
                                isFirstColumn = false;
                            }
                        });
                    }
                    $('#' + box_id).w2render(name);
                    //tmp.resizeRecords();
                    record.expanded = true;
                    //push new grid name into expanded grid array of current grid
                    obj.expandedGrids.push(name);
                }
            });

            this.resize();
        },

        getGroupRecordHtml: function(ind, lineNum) {
            var self = this;
            var rec_html = '';
            var record;
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (this.searchData.length > 0 && !url) {
                if (ind >= this.last.searchIds.length) return '';
                ind = this.last.searchIds[ind];
                record = this.records[ind];
            } else {
                if (ind >= this.records.length) return '';
                record = this.records[ind];
            }
            if (!record) return '';
            var id = w2utils.escapeId(record.recid);

            rec_html += '<tr id="grid_' + this.name + '_rec_' + record.recid + '" recid="' + record.recid + '" line="' + lineNum + '" ' +
                ' class="' + (lineNum % 2 == 0 ? 'w2ui-even' : 'w2ui-odd') + (record.expanded === true ? ' w2ui-expanded' : '') + '" ' +
                (w2utils.isIOS ?
                    '    onclick  = "w2ui[\'' + this.name + '\'].dblClick(\'' + record.recid + '\', event);"' :
                    '    onclick  = "w2ui[\'' + this.name + '\'].click(\'' + record.recid + '\', event);"' +
                    '    oncontextmenu = "w2ui[\'' + this.name + '\'].contextMenu(\'' + record.recid + '\', event);"'
                ) +
                ' style="height: ' + this.recordHeight + 'px; ' + '" ' +
                (typeof record['style'] == 'string' ? 'custom_style="' + record['style'] + '"' : '') +
                '>';

            var tmp_img = '';
            if (record.expanded === true) tmp_img = '-';
            else tmp_img = '+';
            if (record.expanded == 'none') tmp_img = '';
            if (record.expanded == 'spinner') tmp_img = '<div class="w2ui-spinner" style="width: 16px; margin: -2px 2px;"></div>';
            rec_html +=
                '<td id="grid_' + this.name + '_cell_' + ind + '_expand' + '" class="w2ui-grid-data w2ui-col-expand">' +
                '    <div ondblclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;" ' +
                '            onclick="w2ui[\'' + this.name + '\'].toggleGroup(' + record.recid + ', event); ' +
                '                if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                '        ' + tmp_img + ' </div>'
            '</td>';

            var col = $.grep(this.columns, function(c) {
                return c.field === self.postData.groupOn;
            })[0];
            var col_ind = this.columns.indexOf(col);
            if (col.hidden) {
                if (typeof this.columns[col_ind] == 'undefined') return '';
            }
            var rec_cell = this.getCellHTML(ind, col_ind, false);
            var addStyle = '';
            if (typeof col.render == 'string') {
                var tmp = col.render.toLowerCase().split(':');
                if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(tmp[0]) != -1) addStyle += 'text-align: right;';
            }
            if (typeof record.style == 'object' && typeof record.style[col_ind] == 'string') {
                addStyle += record.style[col_ind] + ';';
            }
            rec_html += '<td colspan="' + this.columns.length + '" class="w2ui-grid-data' + '" col="' + col_ind + '" ' +
                '    style="' + addStyle + (typeof col.style != 'undefined' ? col.style : '') + '" ' +
                (typeof col.attr != 'undefined' ? col.attr : '') + '>' +
                rec_cell +
                '</td>';
            if (typeof this.columns[col_ind] == 'undefined') return '';

            rec_html += '<td class="w2ui-grid-data-last"></td>';
            rec_html += '</tr>';

            return rec_html;
        },

        getRecordHTML: function(ind, lineNum, summary) {
            var rec_html = '';
            var sel = this.last.selection;
            var record;
            if (this.enableGrouping && !this.isLastGroup && !summary && ind !== -1) {
                return this.getGroupRecordHtml(ind, lineNum);
            }
            // first record needs for resize purposes
            if (ind == -1) {
                rec_html += '<tr line="0">';
                if (this.show.lineNumbers) rec_html += '<td class="w2ui-col-number" style="height: 0px;"></td>';
                if (this.show.selectColumn) rec_html += '<td class="w2ui-col-select" style="height: 0px;"></td>';
                if (this.show.expandColumn || this.enableGrouping) rec_html += '<td class="w2ui-col-expand" style="height: 0px;"></td>';
                for (var i in this.columns) {
                    if (this.columns[i].hidden) continue;
                    rec_html += '<td class="w2ui-grid-data" col="' + i + '" style="height: 0px;"></td>';
                }
                rec_html += '<td class="w2ui-grid-data-last" style="height: 0px;"></td>';
                rec_html += '</tr>';
                return rec_html;
            }
            // regular record
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (summary !== true) {
                if (this.searchData.length > 0 && !url) {
                    if (ind >= this.last.searchIds.length) return '';
                    ind = this.last.searchIds[ind];
                    record = this.records[ind];
                } else {
                    if (ind >= this.records.length) return '';
                    record = this.records[ind];
                }
            } else {
                if (ind >= this.summary.length) return '';
                record = this.summary[ind];
            }
            if (!record) return '';
            var id = w2utils.escapeId(record.recid);
            var isRowSelected = false;
            if (sel.indexes.indexOf(ind) != -1) isRowSelected = true;
            // render TR
            rec_html += '<tr id="grid_' + this.name + '_rec_' + record.recid + '" recid="' + record.recid + '" line="' + lineNum + '" ' +
                ' class="' + (lineNum % 2 == 0 ? 'w2ui-even' : 'w2ui-odd') + (isRowSelected && this.selectType == 'row' ? ' w2ui-selected' : '') + (record.expanded === true ? ' w2ui-expanded' : '') + '" ' +
                (summary !== true ?
                    (w2utils.isIOS ?
                        '    onclick  = "w2ui[\'' + this.name + '\'].dblClick(\'' + record.recid + '\', event);"' :
                        '    onclick  = "w2ui[\'' + this.name + '\'].click(\'' + record.recid + '\', event);"' +
                        '    oncontextmenu = "w2ui[\'' + this.name + '\'].contextMenu(\'' + record.recid + '\', event);"'
                    ) : ''
                ) +
                ' style="height: ' + this.recordHeight + 'px; ' + (!isRowSelected && typeof record['style'] == 'string' ? record['style'] : '') + '" ' +
                (typeof record['style'] == 'string' ? 'custom_style="' + record['style'] + '"' : '') +
                '>';
            if (this.show.lineNumbers) {
                rec_html += '<td id="grid_' + this.name + '_cell_' + ind + '_number' + (summary ? '_s' : '') + '" class="w2ui-col-number">' +
                    (summary !== true ? '<div>' + lineNum + '</div>' : '') +
                    '</td>';
            }
            if (this.show.selectColumn) {
                rec_html +=
                    '<td id="grid_' + this.name + '_cell_' + ind + '_select' + (summary ? '_s' : '') + '" class="w2ui-grid-data w2ui-col-select" ' +
                    '        onclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                    (summary !== true ?
                        '    <div>' +
                        '        <input class="w2ui-grid-select-check" type="checkbox" tabIndex="-1"' +
                        '            ' + (isRowSelected ? 'checked="checked"' : '') +
                        '            onclick="var obj = w2ui[\'' + this.name + '\']; ' +
                        '                if (!obj.multiSelect) { obj.selectNone(); }' +
                        '                if (this.checked) obj.select(\'' + record.recid + '\'); else obj.unselect(\'' + record.recid + '\'); ' +
                        '                if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '    </div>' :
                        '') +
                    '</td>';
            }
            if (this.show.expandColumn) {
                var tmp_img = '';
                if (record.expanded === true) tmp_img = '-';
                else tmp_img = '+';
                if (record.expanded == 'none') tmp_img = '';
                if (record.expanded == 'spinner') tmp_img = '<div class="w2ui-spinner" style="width: 16px; margin: -2px 2px;"></div>';
                rec_html +=
                    '<td id="grid_' + this.name + '_cell_' + ind + '_expand' + (summary ? '_s' : '') + '" class="w2ui-grid-data w2ui-col-expand">' +
                    (summary !== true ?
                        '    <div ondblclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;" ' +
                        '            onclick="w2ui[\'' + this.name + '\'].toggle(\'' + record.recid + '\', event); ' +
                        '                if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '        ' + tmp_img + ' </div>' :
                        '') +
                    '</td>';
            }
            var col_ind = 0;
            while (true) {
                var col = this.columns[col_ind];
                if (col.hidden) {
                    col_ind++;
                    if (typeof this.columns[col_ind] == 'undefined') break;
                    else continue;
                }
                var isChanged = !summary && record.changes && typeof record.changes[col.field] != 'undefined';
                var rec_cell = this.getCellHTML(ind, col_ind, summary);
                var addStyle = '';
                if (typeof col.render == 'string') {
                    var tmp = col.render.toLowerCase().split(':');
                    if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(tmp[0]) != -1) addStyle += 'text-align: right;';
                }
                if (typeof record.style == 'object' && typeof record.style[col_ind] == 'string') {
                    addStyle += record.style[col_ind] + ';';
                }
                var isCellSelected = false;
                if (isRowSelected && $.inArray(col_ind, sel.columns[ind]) != -1) isCellSelected = true;
                rec_html += '<td class="w2ui-grid-data' + (isCellSelected ? ' w2ui-selected' : '') + (isChanged ? ' w2ui-changed' : '') + '" col="' + col_ind + '" ' +
                    '    style="' + addStyle + (typeof col.style != 'undefined' ? col.style : '') + '" ' +
                    (typeof col.attr != 'undefined' ? col.attr : '') + '>' +
                    rec_cell +
                    '</td>';
                col_ind++;
                if (typeof this.columns[col_ind] == 'undefined') break;
            }
            rec_html += '<td class="w2ui-grid-data-last"></td>';
            rec_html += '</tr>';
            return rec_html;
        },

        scroll: function(event) {
            var time = (new Date()).getTime();
            var obj = this;
            var records = $('#grid_' + this.name + '_records');
            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            if (buffered == 0 || records.length == 0 || records.height() == 0) return;
            if (buffered > 300) this.show_extra = 30;
            else this.show_extra = 300;
            // need this to enable scrolling when this.limit < then a screen can fit
            if (records.height() < buffered * this.recordHeight && records.css('overflow-y') == 'hidden') {
                if (this.total > 0) this.refresh();
                return;
            }
            // update footer
            var t1 = Math.round(records[0].scrollTop / this.recordHeight + 1);
            var t2 = t1 + (Math.round(records.height() / this.recordHeight) - 1);
            if (t1 > buffered) t1 = buffered;
            if (t2 > buffered) t2 = buffered;
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            $('#grid_' + this.name + '_footer .w2ui-footer-right').html(w2utils.formatNumber(this.offset + t1) + '-' + w2utils.formatNumber(this.offset + t2) + ' ' + w2utils.lang('of') + ' ' + w2utils.formatNumber(this.total) +
                (url ? ' (' + w2utils.lang('buffered') + ' ' + w2utils.formatNumber(buffered) + (this.offset > 0 ? ', skip ' + w2utils.formatNumber(this.offset) : '') + ')' : '')
            );
            // only for local data source, else no extra records loaded
            if (!url && (!this.fixedBody || this.total <= 300)) return;
            // regular processing
            var start = Math.floor(records[0].scrollTop / this.recordHeight) - this.show_extra;
            var end = start + Math.floor(records.height() / this.recordHeight) + this.show_extra * 2 + 1;
            // var div     = start - this.last.range_start;
            if (start < 1) start = 1;
            if (end > this.total) end = this.total;
            var tr1 = records.find('#grid_' + this.name + '_rec_top');
            var tr2 = records.find('#grid_' + this.name + '_rec_bottom');
            // if row is expanded
            if (String(tr1.next().prop('id')).indexOf('_expanded_row') != -1) tr1.next().remove();
            if (this.total > end && String(tr2.prev().prop('id')).indexOf('_expanded_row') != -1) tr2.prev().remove();
            var first = parseInt(tr1.next().attr('line'));
            var last = parseInt(tr2.prev().attr('line'));
            //$('#log').html('buffer: '+ this.buffered +' start-end: ' + start + '-'+ end + ' ===> first-last: ' + first + '-' + last);
            if (first < start || first == 1 || this.last.pull_refresh) { // scroll down
                // console.log('end', end, 'last', last, 'show_extre', this.show_extra, this.last.pull_refresh);
                if (end <= last + this.show_extra - 2 && end != this.total) return;
                this.last.pull_refresh = false;
                // remove from top
                while (true) {
                    var tmp = records.find('#grid_' + this.name + '_rec_top').next();
                    if (tmp.attr('line') == 'bottom') break;
                    if (parseInt(tmp.attr('line')) < start) tmp.remove();
                    else break;
                }
                // add at bottom
                var tmp = records.find('#grid_' + this.name + '_rec_bottom').prev();
                var rec_start = tmp.attr('line');
                if (rec_start == 'top') rec_start = start;
                for (var i = parseInt(rec_start) + 1; i <= end; i++) {
                    if (!this.records[i - 1]) continue;
                    if (this.records[i - 1].expanded === true) this.records[i - 1].expanded = false;
                    tr2.before(this.getRecordHTML(i - 1, i));
                }
                markSearch();
                setTimeout(function() {
                    obj.refreshRanges();
                }, 0);
            } else { // scroll up
                if (start >= first - this.show_extra + 2 && start > 1) return;
                // remove from bottom
                while (true) {
                    var tmp = records.find('#grid_' + this.name + '_rec_bottom').prev();
                    if (tmp.attr('line') == 'top') break;
                    if (parseInt(tmp.attr('line')) > end) tmp.remove();
                    else break;
                }
                // add at top
                var tmp = records.find('#grid_' + this.name + '_rec_top').next();
                var rec_start = tmp.attr('line');
                if (rec_start == 'bottom') rec_start = end;
                for (var i = parseInt(rec_start) - 1; i >= start; i--) {
                    if (!this.records[i - 1]) continue;
                    if (this.records[i - 1].expanded === true) this.records[i - 1].expanded = false;
                    tr1.after(this.getRecordHTML(i - 1, i));
                }
                markSearch();
                setTimeout(function() {
                    obj.refreshRanges();
                }, 0);
            }
            // first/last row size
            var h1 = (start - 1) * obj.recordHeight;
            var h2 = (buffered - end) * obj.recordHeight;
            if (h2 < 0) h2 = 0;
            tr1.css('height', h1 + 'px');
            tr2.css('height', h2 + 'px');
            obj.last.range_start = start;
            obj.last.range_end = end;
            // load more if needed
            var s = Math.floor(records[0].scrollTop / this.recordHeight);
            var e = s + Math.floor(records.height() / this.recordHeight);
            if (e + 10 > buffered && this.last.pull_more !== true && buffered < this.total - this.offset) {
                if (this.autoLoad === true) {
                    this.last.pull_more = true;
                    this.last.xhr_offset += this.limit;
                    this.request('get-records');
                } else {
                    var more = $('#grid_' + this.name + '_rec_more');
                    if (more.css('display') == 'none') {
                        more.show()
                            .on('click', function() {
                                obj.last.pull_more = true;
                                obj.last.xhr_offset += obj.limit;
                                obj.request('get-records');
                                // show spinner the last
                                $(this).find('td').html('<div><div style="width: 20px; height: 20px;" class="w2ui-spinner"></div></div>');
                            });
                    }
                    if (more.find('td').text().indexOf('Load') == -1) {
                        more.find('td').html('<div>' + w2utils.lang('Load') + ' ' + obj.limit + ' ' + w2utils.lang('More') + '...</div>');
                    }
                }
            }
            // check for grid end
            if (buffered >= this.total - this.offset) $('#grid_' + this.name + '_rec_more').hide();
            return;

            function markSearch() {
                // mark search
                if (obj.markSearch === false) return;
                clearTimeout(obj.last.marker_timer);
                obj.last.marker_timer = setTimeout(function() {
                    // mark all search strings
                    var str = [];
                    for (var s in obj.searchData) {
                        var tmp = obj.searchData[s];
                        if ($.inArray(tmp.value, str) == -1) str.push(tmp.value);
                    }
                    if (str.length > 0) $(obj.box).find('.w2ui-grid-data > div').w2marker(str);
                }, 50);
            }
        },



        getCellHTML: function(ind, col_ind, summary) {
            var col = this.columns[col_ind];
            var record = (summary !== true ? this.records[ind] : this.summary[ind]);
            var data = this.getCellValue(ind, col_ind, summary);
            var edit = col.editable;

            //handle group record
            if (!summary && col.field === this.postData.groupOn) {
                if (this.groupTemplates && this.groupTemplates.length > 0) {
                    var template = $.grep(this.groupTemplates, function(c) {
                        return c.field === col.field;
                    })[0];
                    if (template) {
                        if (template.render && typeof template.render === 'function') {
                            data = $.trim(template.render.call(this, record, ind, col_ind));
                            if (data.length < 4 || data.substr(0, 4).toLowerCase() != '<div') data = '<div>' + data + '</div>';
                            return data;
                        } else {
                            console.warn('Group templates has to contain a render function!');
                        }
                    }
                }
            }

            if (summary && this.summaryTemplates && this.summaryTemplates.length > 0) {
                var template = $.grep(this.summaryTemplates, function(c) {
                    return c.field === col.field;
                })[0];
                if (template) {
                    if (template.render && typeof template.render === 'function') {
                        data = $.trim(template.render.call(this, record, ind, col_ind));
                        if (data.length < 4 || data.substr(0, 4).toLowerCase() != '<div') data = '<div>' + data + '</div>';
                        return data;
                    } else {
                        console.warn('Summary templates has to contain a render function!');
                    }
                }
            }
            // various renderers
            if (typeof col.render != 'undefined' /*&& record[col.field]*/) {
                if (typeof col.render == 'function') {
                    data = $.trim(col.render.call(this, record, ind, col_ind));
                    if (data.length < 4 || data.substr(0, 4).toLowerCase() != '<div') data = '<div>' + data + '</div>';
                }
                if (typeof col.render == 'object') data = '<div>' + (col.render[data] || '') + '</div>';
                if (typeof col.render == 'string') {
                    var tmp = col.render.toLowerCase().split(':');
                    var prefix = '';
                    var suffix = '';
                    if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(tmp[0]) != -1) {
                        if (typeof tmp[1] == 'undefined' || !w2utils.isInt(tmp[1])) tmp[1] = 0;
                        if (tmp[1] > 20) tmp[1] = 20;
                        if (tmp[1] < 0) tmp[1] = 0;
                        if (['money', 'currency'].indexOf(tmp[0]) != -1) {
                            tmp[1] = w2utils.settings.currencyPrecision;
                            prefix = w2utils.settings.currencyPrefix;
                            suffix = w2utils.settings.currencySuffix
                        }
                        if (tmp[0] == 'percent') {
                            suffix = '%';
                            if (tmp[1] !== '0') tmp[1] = 1;
                        }
                        if (tmp[0] == 'int') {
                            tmp[1] = 0;
                        }
                        // format
                        data = '<div>' + (data !== '' ? prefix + w2utils.formatNumber(Number(data).toFixed(tmp[1])) + suffix : '') + '</div>';
                    }
                    if (tmp[0] == 'time') {
                        if (typeof tmp[1] == 'undefined' || tmp[1] == '') tmp[1] = w2utils.settings.time_format;
                        data = '<div>' + prefix + w2utils.formatTime(data, tmp[1] == 'h12' ? 'hh:mi pm' : 'h24:min') + suffix + '</div>';
                    }
                    if (tmp[0] == 'date') {
                        if (typeof tmp[1] == 'undefined' || tmp[1] == '') tmp[1] = w2utils.settings.date_display;
                        data = '<div>' + prefix + w2utils.formatDate(data, tmp[1]) + suffix + '</div>';
                    }
                    if (tmp[0] == 'age') {
                        data = '<div>' + prefix + w2utils.age(data) + suffix + '</div>';
                    }
                    if (tmp[0] == 'toggle') {
                        data = '<div>' + prefix + (data ? 'Yes' : '') + suffix + '</div>';
                    }
                }
            } else {
                // if editable checkbox
                var addStyle = '';
                if (edit && ['checkbox', 'check'].indexOf(edit.type) != -1) {
                    var changeInd = summary ? -(ind + 1) : ind;
                    addStyle = 'text-align: center';
                    data = '<input type="checkbox" ' + (data ? 'checked' : '') + ' onclick="' +
                        '    var obj = w2ui[\'' + this.name + '\']; ' +
                        '    obj.editChange.call(obj, this, ' + changeInd + ', ' + col_ind + ', event); ' +
                        '">';
                }
                if (!this.show.recordTitles) {
                    var data = '<div style="' + addStyle + '">' + data + '</div>';
                } else {
                    // title overwrite
                    var title = String(data).replace(/"/g, "''");
                    if (typeof col.title != 'undefined') {
                        if (typeof col.title == 'function') title = col.title.call(this, record, ind, col_ind);
                        if (typeof col.title == 'string') title = col.title;
                    }
                    var data = '<div title="' + w2utils.stripTags(title) + '" style="' + addStyle + '">' + data + '</div>';
                }
            }
            if (data == null || typeof data == 'undefined') data = '';
            return data;
        },

        getCellValue: function(ind, col_ind, summary) {
            var col = this.columns[col_ind];
            var record = (summary !== true ? this.records[ind] : this.summary[ind]);
            var data = this.parseField(record, col.field);
            if (record.changes && typeof record.changes[col.field] != 'undefined') data = record.changes[col.field];
            if (data == null || typeof data == 'undefined') data = '';
            return data;
        },

        getFooterHTML: function() {
            return '<div>' +
                '    <div class="w2ui-footer-left"></div>' +
                '    <div class="w2ui-footer-right"></div>' +
                '    <div class="w2ui-footer-center"></div>' +
                '</div>';
        },

        statustest: function(msg) {
            var grid = this.mainGrid || this;
            if (typeof msg != 'undefined') {
                $('#grid_' + grid.name + '_footer').find('.w2ui-footer-left').html(msg);
            } else {
                // show number of selected
                var msgLeft = '';
                var sel = grid.getSelection();
                if (sel.length > 0) {
                    msgLeft = String(sel.length).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + ' ' + w2utils.lang('selected');
                    var tmp = sel[0];
                    if (typeof tmp == 'object') tmp = tmp.recid + ', ' + w2utils.lang('Column') + ': ' + tmp.column;
                    if (sel.length == 1) msgLeft = w2utils.lang('Record ID') + ': ' + tmp + ' ';
                }
                $('#grid_' + grid.name + '_footer .w2ui-footer-left').html(msgLeft);
                // toolbar
                if (grid.toolbar) {
                    if (sel.length == 1) grid.toolbar.enable('w2ui-edit');
                    else grid.toolbar.disable('w2ui-edit');
                    if (sel.length >= 1) grid.toolbar.enable('w2ui-delete');
                    else grid.toolbar.disable('w2ui-delete');
                }
            }
        },

        status: function(msg) {
            var grid = this.mainGrid || this;
            if (typeof msg != 'undefined') {
                $('#grid_' + grid.name + '_footer').find('.w2ui-footer-left').html(msg);
            } else {
                // show number of selected
                var msgLeft = '';
                var sel = this.getSelection();
                if (sel.length > 0) {
                    msgLeft = String(sel.length).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + ' ' + w2utils.lang('selected');
                    var tmp = sel[0];
                    if (typeof tmp == 'object') tmp = tmp.recid + ', ' + w2utils.lang('Column') + ': ' + tmp.column;
                    if (sel.length == 1) msgLeft = w2utils.lang('Record ID') + ': ' + tmp + ' ';
                }
                $('#grid_' + grid.name + '_footer .w2ui-footer-left').html(msgLeft);
                // toolbar
                if (grid.toolbar) {
                    if (sel.length == 1) grid.toolbar.enable('w2ui-edit');
                    else grid.toolbar.disable('w2ui-edit');
                    if (sel.length >= 1) grid.toolbar.enable('w2ui-delete');
                    else grid.toolbar.disable('w2ui-delete');
                }
            }
        },

        lock: function(msg, showSpinner) {
            var box = $(this.box).find('> div:first-child');
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(box);
            setTimeout(function() {
                w2utils.lock.apply(window, args);
            }, 10);
        },

        unlock: function() {
            var box = this.box;
            setTimeout(function() {
                w2utils.unlock(box);
            }, 25); // needed timer so if server fast, it will not flash
        },

        stateSave: function(returnOnly) {
            if (!localStorage) return null;
            var state = {
                columns: [],
                show: $.extend({}, this.show),
                last: {
                    search: this.last.search,
                    multi: this.last.multi,
                    logic: this.last.logic,
                    caption: this.last.caption,
                    field: this.last.field,
                    scrollTop: this.last.scrollTop,
                    scrollLeft: this.last.scrollLeft
                },
                sortData: [],
                searchData: []
            };
            for (var i in this.columns) {
                var col = this.columns[i];
                state.columns.push({
                    field: col.field,
                    hidden: col.hidden,
                    size: col.size,
                    sizeCalculated: col.sizeCalculated,
                    sizeOriginal: col.sizeOriginal,
                    sizeType: col.sizeType
                });
            }
            for (var i in this.sortData) state.sortData.push($.extend({}, this.sortData[i]));

            for (var i in this.searchData) state.searchData.push($.extend({}, this.searchData[i]));
            // save into local storage
            if (returnOnly !== true) {
                // event before
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'stateSave',
                    target: this.name,
                    state: state
                });
                if (eventData.isCancelled === true) {
                    if (typeof callBack == 'function') callBack({
                        status: 'error',
                        message: 'Request aborted.'
                    });
                    return;
                }
                try {
                    var savedState = $.parseJSON(localStorage.w2ui || '{}');
                    if (!savedState) savedState = {};
                    if (!savedState.states) savedState.states = {};
                    savedState.states[this.name] = state;
                    localStorage.w2ui = JSON.stringify(savedState);
                } catch (e) {
                    delete localStorage.w2ui;
                    return null;
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            return state;
        },

        stateRestore: function(newState) {
            var obj = this;
            if (!newState) {
                // read it from local storage
                try {
                    if (!localStorage) return false;
                    var tmp = $.parseJSON(localStorage.w2ui || '{}');
                    if (!tmp) tmp = {};
                    if (!tmp.states) tmp.states = {};
                    newState = tmp.states[this.name];
                } catch (e) {
                    delete localStorage.w2ui;
                    return null;
                }
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'stateRestore',
                target: this.name,
                state: newState
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            // default behavior
            if ($.isPlainObject(newState)) {
                $.extend(this.show, newState.show);
                $.extend(this.last, newState.last);
                var sTop = this.last.scrollTop;
                var sLeft = this.last.scrollLeft;
                for (var c in newState.columns) {
                    var tmp = newState.columns[c];
                    var col = this.getColumn(tmp.field);
                    if (col) $.extend(col, tmp);
                }
                this.sortData.splice(0, this.sortData.length);
                for (var c in newState.sortData) this.sortData.push(newState.sortData[c]);
                this.searchData.splice(0, this.searchData.length);
                for (var c in newState.searchData) this.searchData.push(newState.searchData[c]);
                // apply sort and search
                setTimeout(function() {
                    // needs timeout as records need to be populated
                    if (obj.sortData.length > 0) obj.localSort();
                    if (obj.searchData.length > 0) obj.localSearch();
                    obj.last.scrollTop = sTop;
                    obj.last.scrollLeft = sLeft;
                    obj.refresh();
                }, 1);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return true;
        },

        stateReset: function() {
            this.stateRestore(this.last.state);
            // remove from local storage
            if (localStorage) {
                try {
                    var tmp = $.parseJSON(localStorage.w2ui || '{}');
                    if (tmp.states && tmp.states[this.name]) {
                        delete tmp.states[this.name];
                    }
                    localStorage.w2ui = JSON.stringify(tmp);
                } catch (e) {
                    delete localStorage.w2ui;
                    return null;
                }
            }
        },

        parseField: function(obj, field) {
            var val = '';
            try { // need this to make sure no error in fields
                val = obj;
                var tmp = String(field).split('.');
                for (var i in tmp) {
                    val = val[tmp[i]];
                }
            } catch (event) {
                val = '';
            }
            return val;
        },

        prepareData: function() {
            // loops thru records and prepares date and time objects
            for (var r in this.records) {
                var rec = this.records[r];
                for (var c in this.columns) {
                    var column = this.columns[c];
                    if (rec[column.field] == null || typeof column.render != 'string') continue;
                    // number
                    if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(column.render.split(':')[0]) != -1) {
                        if (typeof rec[column.field] != 'number') rec[column.field] = parseFloat(rec[column.field]);
                    }
                    // date
                    if (['date', 'age'].indexOf(column.render.split(':')[0]) != -1) {
                        if (!rec[column.field + '_']) {
                            var dt = rec[column.field];
                            if (w2utils.isInt(dt)) dt = parseInt(dt);
                            rec[column.field + '_'] = new Date(dt);
                        }
                    }
                    // time
                    if (['time'].indexOf(column.render) != -1) {
                        if (w2utils.isTime(rec[column.field])) { // if string
                            var tmp = w2utils.isTime(rec[column.field], true);
                            var dt = new Date();
                            dt.setHours(tmp.hours, tmp.minutes, (tmp.seconds ? tmp.seconds : 0), 0); // sets hours, min, sec, mills
                            if (!rec[column.field + '_']) rec[column.field + '_'] = dt;
                        } else { // if date object
                            var tmp = rec[column.field];
                            if (w2utils.isInt(tmp)) tmp = parseInt(tmp);
                            var tmp = (tmp != null ? new Date(tmp) : new Date());
                            var dt = new Date();
                            dt.setHours(tmp.getHours(), tmp.getMinutes(), tmp.getSeconds(), 0); // sets hours, min, sec, mills
                            if (!rec[column.field + '_']) rec[column.field + '_'] = dt;
                        }
                    }
                }
            }
        },

        nextCell: function(col_ind, editable) {
            var check = col_ind + 1;
            if (this.columns.length == check) return null;
            if (editable === true) {
                var edit = this.columns[check].editable;
                if (this.columns[check].hidden || typeof edit == 'undefined' || (edit && ['checkbox', 'check'].indexOf(edit.type) != -1)) return this.nextCell(check, editable);
            }
            return check;
        },

        prevCell: function(col_ind, editable) {
            var check = col_ind - 1;
            if (check < 0) return null;
            if (editable === true) {
                var edit = this.columns[check].editable;
                if (this.columns[check].hidden || typeof edit == 'undefined' || (edit && ['checkbox', 'check'].indexOf(edit.type) != -1)) return this.prevCell(check, editable);
            }
            return check;
        },

        nextRow: function(ind) {
            if ((ind + 1 < this.records.length && this.last.searchIds.length == 0) // if there are more records
                || (this.last.searchIds.length > 0 && ind < this.last.searchIds[this.last.searchIds.length - 1])) {
                ind++;
                if (this.last.searchIds.length > 0) {
                    while (true) {
                        if ($.inArray(ind, this.last.searchIds) != -1 || ind > this.records.length) break;
                        ind++;
                    }
                }
                return ind;
            } else {
                return null;
            }
        },

        prevRow: function(ind) {
            if ((ind > 0 && this.last.searchIds.length == 0) // if there are more records
                || (this.last.searchIds.length > 0 && ind > this.last.searchIds[0])) {
                ind--;
                if (this.last.searchIds.length > 0) {
                    while (true) {
                        if ($.inArray(ind, this.last.searchIds) != -1 || ind < 0) break;
                        ind--;
                    }
                }
                return ind;
            } else {
                return null;
            }
        }
    };

    $.extend(w2grid.prototype, w2utils.event);
    w2obj.grid = w2grid;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2layout        - layout widget
 *        - $().w2layout    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils, w2toolbar, w2tabs
 *
 * == NICE TO HAVE ==
 *   - onResize for the panel
 *   - add more panel title positions (left=rotated, right=rotated, bottom)
 *   - bug: resizer is visible (and onHover) when panel is hidden.
 *   - bug: when you assign content before previous transition completed.
 *
 ************************************************************************/

(function() {
    var w2layout = function(options) {
        this.box = null; // DOM Element that holds the element
        this.name = null; // unique name for w2ui
        this.panels = [];
        this.tmp = {};

        this.padding = 1; // panel padding
        this.resizer = 4; // resizer width or height
        this.style = '';

        this.onShow = null;
        this.onHide = null;
        this.onResizing = null;
        this.onResizerClick = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;


        $.extend(true, this, w2obj.layout, options);
    };

    /* @const */
    var w2layout_panels = ['top', 'left', 'main', 'preview', 'right', 'bottom'];

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2layout = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2layout')) return;
            var panels = method.panels || [];
            var object = new w2layout(method);
            $.extend(object, {
                handlers: [],
                panels: []
            });
            // add defined panels
            for (var p = 0, len = panels.length; p < len; p++) {
                object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]);
                if ($.isPlainObject(object.panels[p].tabs) || $.isArray(object.panels[p].tabs)) initTabs(object, panels[p].type);
                if ($.isPlainObject(object.panels[p].toolbar) || $.isArray(object.panels[p].toolbar)) initToolbar(object, panels[p].type);
            }
            // add all other panels
            for (var p1 in w2layout_panels) {
                p1 = w2layout_panels[p1];
                if (object.get(p1) !== null) continue;
                object.panels.push($.extend(true, {}, w2layout.prototype.panel, {
                    type: p1,
                    hidden: (p1 !== 'main'),
                    size: 50
                }));
            }
            if ($(this).length > 0) {
                object.render($(this)[0]);
            }
            w2ui[object.name] = object;
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2layout');
        }

        function initTabs(object, panel, tabs) {
            var pan = object.get(panel);
            if (pan !== null && typeof tabs == 'undefined') tabs = pan.tabs;
            if (pan === null || tabs === null) return false;
            // instanciate tabs
            if ($.isArray(tabs)) tabs = {
                tabs: tabs
            };
            $().w2destroy(object.name + '_' + panel + '_tabs'); // destroy if existed
            pan.tabs = $().w2tabs($.extend({}, tabs, {
                owner: object,
                name: object.name + '_' + panel + '_tabs'
            }));
            pan.show.tabs = true;
            return true;
        }

        function initToolbar(object, panel, toolbar) {
            var pan = object.get(panel);
            if (pan !== null && typeof toolbar == 'undefined') toolbar = pan.toolbar;
            if (pan === null || toolbar === null) return false;
            // instanciate toolbar
            if ($.isArray(toolbar)) toolbar = {
                items: toolbar
            };
            $().w2destroy(object.name + '_' + panel + '_toolbar'); // destroy if existed
            pan.toolbar = $().w2toolbar($.extend({}, toolbar, {
                owner: object,
                name: object.name + '_' + panel + '_toolbar'
            }));
            pan.show.toolbar = true;
            return true;
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2layout.prototype = {
        // default setting for a panel
        panel: {
            type: null, // left, right, top, bottom
            title: '',
            size: 100, // width or height depending on panel name
            minSize: 20,
            maxSize: false,
            hidden: false,
            resizable: false,
            overflow: 'auto',
            style: '',
            content: '', // can be String or Object with .render(box) method
            tabs: null,
            toolbar: null,
            width: null, // read only
            height: null, // read only
            show: {
                toolbar: false,
                tabs: false
            },
            onRefresh: null,
            onShow: null,
            onHide: null,
            hideInFullScreen: false
        },

        // alias for content
        html: function(panel, data, transition) {
            return this.content(panel, data, transition);
        },

        content: function(panel, data, transition) {
            var obj = this;
            var p = this.get(panel);
            // if it is CSS panel
            if (panel == 'css') {
                $('#layout_' + obj.name + '_panel_css').html('<style>' + data + '</style>');
                return true;
            }
            if (p === null) return false;
            if (typeof data == 'undefined' || data === null) {
                return p.content;
            } else {
                if (data instanceof jQuery) {
                    console.log('ERROR: You can not pass jQuery object to w2layout.content() method');
                    return false;
                }
                var pname = '#layout_' + this.name + '_panel_' + p.type;
                var current = $(pname + '> .w2ui-panel-content');
                var panelTop = 0;
                if (current.length > 0) {
                    $(pname).scrollTop(0);
                    panelTop = $(current).position().top;
                }
                if (p.content === '') {
                    p.content = data;
                    this.refresh(panel);
                } else {
                    p.content = data;
                    if (!p.hidden) {
                        if (transition !== null && transition !== '' && typeof transition != 'undefined') {
                            // apply transition
                            var div1 = $(pname + '> .w2ui-panel-content');
                            div1.after('<div class="w2ui-panel-content new-panel" style="' + div1[0].style.cssText + '"></div>');
                            var div2 = $(pname + '> .w2ui-panel-content.new-panel');
                            div1.css('top', panelTop);
                            div2.css('top', panelTop);
                            if (typeof data == 'object') {
                                data.box = div2[0]; // do not do .render(box);
                                data.render();
                            } else {
                                div2.html(data);
                            }
                            w2utils.transition(div1[0], div2[0], transition, function() {
                                div1.remove();
                                div2.removeClass('new-panel');
                                div2.css('overflow', p.overflow);
                                // IE Hack
                                obj.resize();
                                if (window.navigator.userAgent.indexOf('MSIE') != -1) setTimeout(function() {
                                    obj.resize();
                                }, 100);
                            });
                        }
                    }
                    this.refresh(panel);
                }
            }
            // IE Hack
            obj.resize();
            if (window.navigator.userAgent.indexOf('MSIE') != -1) setTimeout(function() {
                obj.resize();
            }, 100);
            return true;
        },

        load: function(panel, url, transition, onLoad) {
            var obj = this;
            if (panel == 'css') {
                $.get(url, function(data, status, xhr) { // should always be $.get as it is template
                    obj.content(panel, xhr.responseText);
                    if (onLoad) onLoad();
                });
                return true;
            }
            if (this.get(panel) !== null) {
                $.get(url, function(data, status, xhr) { // should always be $.get as it is template
                    obj.content(panel, xhr.responseText, transition);
                    if (onLoad) onLoad();
                    // IE Hack
                    obj.resize();
                    if (window.navigator.userAgent.indexOf('MSIE') != -1) setTimeout(function() {
                        obj.resize();
                    }, 100);
                });
                return true;
            }
            return false;
        },

        sizeTo: function(panel, size) {
            var obj = this;
            var pan = obj.get(panel);
            if (pan === null) return false;
            // resize
            $(obj.box).find(' > div > .w2ui-panel').css({
                '-webkit-transition': '.2s',
                '-moz-transition': '.2s',
                '-ms-transition': '.2s',
                '-o-transition': '.2s'
            });
            setTimeout(function() {
                obj.set(panel, {
                    size: size
                });
            }, 1);
            // clean
            setTimeout(function() {
                $(obj.box).find(' > div > .w2ui-panel').css({
                    '-webkit-transition': '0s',
                    '-moz-transition': '0s',
                    '-ms-transition': '0s',
                    '-o-transition': '0s'
                });
                obj.resize();
            }, 500);
            return true;
        },

        show: function(panel, immediate) {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'show',
                target: panel,
                object: this.get(panel),
                immediate: immediate
            });
            if (eventData.isCancelled === true) return;

            var p = obj.get(panel);
            if (p === null) return false;
            p.hidden = false;
            if (immediate === true) {
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '1'
                });
                if (p.resizable) $('#layout_' + obj.name + '_resizer_' + panel).show();
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                obj.resize();
            } else {
                if (p.resizable) $('#layout_' + obj.name + '_resizer_' + panel).show();
                // resize
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '0'
                });
                $(obj.box).find(' > div > .w2ui-panel').css({
                    '-webkit-transition': '.2s',
                    '-moz-transition': '.2s',
                    '-ms-transition': '.2s',
                    '-o-transition': '.2s'
                });
                setTimeout(function() {
                    obj.resize();
                }, 1);
                // show
                setTimeout(function() {
                    $('#layout_' + obj.name + '_panel_' + panel).css({
                        'opacity': '1'
                    });
                }, 250);
                // clean
                setTimeout(function() {
                    $(obj.box).find(' > div > .w2ui-panel').css({
                        '-webkit-transition': '0s',
                        '-moz-transition': '0s',
                        '-ms-transition': '0s',
                        '-o-transition': '0s'
                    });
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    obj.resize();
                    $('#layout_' + obj.name + '_collapser_' + panel).hide();
                }, 500);
            }
            return true;
        },

        hide: function(panel, immediate) {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'hide',
                target: panel,
                object: this.get(panel),
                immediate: immediate
            });
            if (eventData.isCancelled === true) return;

            var p = obj.get(panel);
            if (p === null) return false;
            p.hidden = true;
            if (immediate === true) {
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '0'
                });
                $('#layout_' + obj.name + '_resizer_' + panel).hide();
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                obj.resize();
            } else {
                $('#layout_' + obj.name + '_resizer_' + panel).hide();
                // hide
                $(obj.box).find(' > div > .w2ui-panel').css({
                    '-webkit-transition': '.2s',
                    '-moz-transition': '.2s',
                    '-ms-transition': '.2s',
                    '-o-transition': '.2s'
                });
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '0'
                });
                setTimeout(function() {
                    obj.resize();
                }, 1);
                // clean
                setTimeout(function() {
                    $(obj.box).find(' > div > .w2ui-panel').css({
                        '-webkit-transition': '0s',
                        '-moz-transition': '0s',
                        '-ms-transition': '0s',
                        '-o-transition': '0s'
                    });
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));

                    $('#layout_' + obj.name + '_collapser_' + panel).show();
                    //$('#layout_' + obj.name + '_collapser_title').text(p.collapseTitle).css('-webkit-transform', 'rotate(-90deg)');
                    obj.resize();
                    $('#layout_' + obj.name + '_panel_main').css('left', '15px');
                }, 500);
            }
            return true;
        },

        toggle: function(panel, immediate) {
            var p = this.get(panel);
            if (p === null) return false;
            if (p.hidden) return this.show(panel, immediate);
            else return this.hide(panel, immediate);
        },

        set: function(panel, options) {
            var obj = this.get(panel, true);
            if (obj === null) return false;
            $.extend(this.panels[obj], options);
            if (typeof options['content'] != 'undefined') this.refresh(panel); // refresh only when content changed
            this.resize(); // resize is needed when panel size is changed
            return true;
        },

        setTitle: function(panel, title) {
            var obj = this.get(panel, true);
            if (obj === null) return false;
            var p = this.panels[obj];
            var pname = '#layout_' + this.name + '_panel_' + p.type;
            var tmp = $(this.box).find(pname + '> .w2ui-panel-title');
            if (title) {
                tmp.html(title).show();
            } else {
                tmp.html('').hide();
            }
        },

        get: function(panel, returnIndex) {
            for (var p in this.panels) {
                if (this.panels[p].type == panel) {
                    if (returnIndex === true) return p;
                    else return this.panels[p];
                }
            }
            return null;
        },

        el: function(panel) {
            var el = $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-content');
            if (el.length != 1) return null;
            return el[0];
        },

        hideToolbar: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.toolbar = false;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-toolbar').hide();
            this.resize();
        },

        showToolbar: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.toolbar = true;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-toolbar').show();
            this.resize();
        },

        toggleToolbar: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            if (pan.show.toolbar) this.hideToolbar(panel);
            else this.showToolbar(panel);
        },

        hideTabs: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.tabs = false;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-tabs').hide();
            this.resize();
        },

        showTabs: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.tabs = true;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-tabs').show();
            this.resize();
        },

        toggleTabs: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            if (pan.show.tabs) this.hideTabs(panel);
            else this.showTabs(panel);
        },

        render: function(box) {
            var obj = this;
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            var time = (new Date()).getTime();
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'render',
                target: obj.name,
                box: box
            });
            if (eventData.isCancelled === true) return;

            if (typeof box != 'undefined' && box !== null) {
                if ($(obj.box).find('#layout_' + obj.name + '_panel_main').length > 0) {
                    $(obj.box)
                        .removeAttr('name')
                        .removeClass('w2ui-layout')
                        .html('');
                }
                obj.box = box;
            }
            if (!obj.box) return false;
            $(obj.box)
                .attr('name', obj.name)
                .addClass('w2ui-layout')
                .html('<div></div>');
            if ($(obj.box).length > 0) $(obj.box)[0].style.cssText += obj.style;
            // create all panels
            for (var p1 in w2layout_panels) {
                p1 = w2layout_panels[p1];
                var pan = obj.get(p1);
                var html = '<div id="layout_' + obj.name + '_panel_' + p1 + '" class="w2ui-panel">' +
                    '    <div class="w2ui-panel-mini-toolbar"></div>' +
                    '    <div class="w2ui-panel-title"></div>' +
                    '    <div class="w2ui-panel-tabs"></div>' +
                    '    <div class="w2ui-panel-toolbar"></div>' +
                    '    <div class="w2ui-panel-content"></div>' +
                    '</div>' +
                    '<div id="layout_' + obj.name + '_resizer_' + p1 + '" class="w2ui-resizer"></div>' +
                    '<div id="layout_' + obj.name + '_collapser_' + p1 + '" class="w2ui-collapsed"></div>';
                $(obj.box).find(' > div').append(html);
                // tabs are rendered in refresh()
            }
            $(obj.box).find(' > div')
                .append('<div id="layout_' + obj.name + '_panel_css" style="position: absolute; top: 10000px;"></div');
            obj.refresh(); // if refresh is not called here, the layout will not be available right after initialization
            // process event
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // reinit events
            setTimeout(function() { // needed this timeout to allow browser to render first if there are tabs or toolbar
                initEvents();
                obj.resize();
            }, 0);
            return (new Date()).getTime() - time;

            function initEvents() {
                obj.tmp.events = {
                    resize: function(event) {
                        w2ui[obj.name].resize();
                    },
                    resizeStart: resizeStart,
                    mouseMove: resizeMove,
                    mouseUp: resizeStop
                };
                $(window).on('resize', obj.tmp.events.resize);
            }

            function resizeStart(type, evnt) {
                if (!obj.box) return;
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                $(document).off('mousemove', obj.tmp.events.mouseMove).on('mousemove', obj.tmp.events.mouseMove);
                $(document).off('mouseup', obj.tmp.events.mouseUp).on('mouseup', obj.tmp.events.mouseUp);
                obj.tmp.resize = {
                    type: type,
                    x: evnt.screenX,
                    y: evnt.screenY,
                    diff_x: 0,
                    diff_y: 0,
                    value: 0
                };
                // lock all panels
                for (var p1 in w2layout_panels) {
                    p1 = w2layout_panels[p1];
                    obj.lock(p1, {
                        opacity: 0
                    });
                }
                if (type == 'left' || type == 'right') {
                    obj.tmp.resize.value = parseInt($('#layout_' + obj.name + '_resizer_' + type)[0].style.left);
                }
                if (type == 'top' || type == 'preview' || type == 'bottom') {
                    obj.tmp.resize.value = parseInt($('#layout_' + obj.name + '_resizer_' + type)[0].style.top);
                }
            }

            function resizeStop(evnt) {
                if (!obj.box) return;
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                $(document).off('mousemove', obj.tmp.events.mouseMove);
                $(document).off('mouseup', obj.tmp.events.mouseUp);
                if (typeof obj.tmp.resize == 'undefined') return;
                // unlock all panels
                for (var p1 in w2layout_panels) {
                    obj.unlock(w2layout_panels[p1]);
                }
                // set new size
                if (obj.tmp.diff_x !== 0 || obj.tmp.resize.diff_y !== 0) { // only recalculate if changed
                    var ptop = obj.get('top');
                    var pbottom = obj.get('bottom');
                    var panel = obj.get(obj.tmp.resize.type);
                    var height = parseInt($(obj.box).height());
                    var width = parseInt($(obj.box).width());
                    var str = String(panel.size);
                    var ns, nd;
                    switch (obj.tmp.resize.type) {
                        case 'top':
                            ns = parseInt(panel.sizeCalculated) + obj.tmp.resize.diff_y;
                            nd = 0;
                            break;
                        case 'bottom':
                            ns = parseInt(panel.sizeCalculated) - obj.tmp.resize.diff_y;
                            nd = 0;
                            break;
                        case 'preview':
                            ns = parseInt(panel.sizeCalculated) - obj.tmp.resize.diff_y;
                            nd = (ptop && !ptop.hidden ? ptop.sizeCalculated : 0) +
                                (pbottom && !pbottom.hidden ? pbottom.sizeCalculated : 0);
                            break;
                        case 'left':
                            ns = parseInt(panel.sizeCalculated) + obj.tmp.resize.diff_x;
                            nd = 0;
                            break;
                        case 'right':
                            ns = parseInt(panel.sizeCalculated) - obj.tmp.resize.diff_x;
                            nd = 0;
                            break;
                    }
                    // set size
                    if (str.substr(str.length - 1) == '%') {
                        panel.size = Math.floor(ns * 100 /
                            (panel.type == 'left' || panel.type == 'right' ? width : height - nd) * 100) / 100 + '%';
                    } else {
                        panel.size = ns;
                    }
                    obj.resize();
                }
                $('#layout_' + obj.name + '_resizer_' + obj.tmp.resize.type).removeClass('active');
                delete obj.tmp.resize;
            }

            function resizeMove(evnt) {
                if (!obj.box) return;
                if (!evnt) evnt = window.event;
                if (typeof obj.tmp.resize == 'undefined') return;
                var panel = obj.get(obj.tmp.resize.type);
                // event before
                var tmp = obj.tmp.resize;
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'resizing',
                    target: obj.name,
                    object: panel,
                    originalEvent: evnt,
                    panel: tmp ? tmp.type : 'all',
                    diff_x: tmp ? tmp.diff_x : 0,
                    diff_y: tmp ? tmp.diff_y : 0
                });
                if (eventData.isCancelled === true) return;

                var p = $('#layout_' + obj.name + '_resizer_' + tmp.type);
                var resize_x = (evnt.screenX - tmp.x);
                var resize_y = (evnt.screenY - tmp.y);
                var mainPanel = obj.get('main');

                if (!p.hasClass('active')) p.addClass('active');

                switch (tmp.type) {
                    case 'left':
                        if (panel.minSize - resize_x > panel.width) {
                            resize_x = panel.minSize - panel.width;
                        }
                        if (panel.maxSize && (panel.width + resize_x > panel.maxSize)) {
                            resize_x = panel.maxSize - panel.width;
                        }
                        if (mainPanel.minSize + resize_x > mainPanel.width) {
                            resize_x = mainPanel.width - mainPanel.minSize;
                        }
                        break;

                    case 'right':
                        if (panel.minSize + resize_x > panel.width) {
                            resize_x = panel.width - panel.minSize;
                        }
                        if (panel.maxSize && (panel.width - resize_x > panel.maxSize)) {
                            resize_x = panel.width - panel.maxSize;
                        }
                        if (mainPanel.minSize - resize_x > mainPanel.width) {
                            resize_x = mainPanel.minSize - mainPanel.width;
                        }
                        break;

                    case 'top':
                        if (panel.minSize - resize_y > panel.height) {
                            resize_y = panel.minSize - panel.height;
                        }
                        if (panel.maxSize && (panel.height + resize_y > panel.maxSize)) {
                            resize_y = panel.maxSize - panel.height;
                        }
                        if (mainPanel.minSize + resize_y > mainPanel.height) {
                            resize_y = mainPanel.height - mainPanel.minSize;
                        }
                        break;

                    case 'preview':
                    case 'bottom':
                        if (panel.minSize + resize_y > panel.height) {
                            resize_y = panel.height - panel.minSize;
                        }
                        if (panel.maxSize && (panel.height - resize_y > panel.maxSize)) {
                            resize_y = panel.height - panel.maxSize;
                        }
                        if (mainPanel.minSize - resize_y > mainPanel.height) {
                            resize_y = mainPanel.minSize - mainPanel.height;
                        }
                        break;
                }
                tmp.diff_x = resize_x;
                tmp.diff_y = resize_y;

                switch (tmp.type) {
                    case 'top':
                    case 'preview':
                    case 'bottom':
                        tmp.diff_x = 0;
                        if (p.length > 0) p[0].style.top = (tmp.value + tmp.diff_y) + 'px';
                        break;

                    case 'left':
                    case 'right':
                        tmp.diff_y = 0;
                        if (p.length > 0) p[0].style.left = (tmp.value + tmp.diff_x) + 'px';
                        break;
                }
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        refresh: function(panel) {
            var obj = this;
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (typeof panel == 'undefined') panel = null;
            var time = (new Date()).getTime();
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'refresh',
                target: (typeof panel != 'undefined' ? panel : obj.name),
                object: obj.get(panel)
            });
            if (eventData.isCancelled === true) return;
            // obj.unlock(panel);
            if (typeof panel == 'string') {
                var p = obj.get(panel);
                if (p === null) return;
                var pname = '#layout_' + obj.name + '_panel_' + p.type;
                var rname = '#layout_' + obj.name + '_resizer_' + p.type;
                if (p.minibar) {
                    $(pname).find('.w2ui-panel-mini-toolbar').html('<i class="w2ui-icon-pin" onclick="w2ui[\'' + obj.name + '\'].toggle(\'' + p.type + '\')"></i>').show();
                } else {
                    $(pname).find('.w2ui-panel-mini-toolbar').hide();
                }
                // apply properties to the panel
                $(pname).css({
                    display: p.hidden ? 'none' : 'block'
                });
                if (p.resizable) $(rname).show();
                else $(rname).hide();
                // insert content
                if (typeof p.content == 'object' && typeof p.content.render === 'function') {
                    p.content.box = $(pname + '> .w2ui-panel-content')[0];
                    setTimeout(function() {
                        // need to remove unnecessary classes
                        if ($(pname + '> .w2ui-panel-content').length > 0) {
                            $(pname + '> .w2ui-panel-content')
                                .removeClass()
                                .removeAttr('name')
                                .addClass('w2ui-panel-content')
                                .css('overflow', p.overflow)[0].style.cssText += ';' + p.style;
                        }
                        p.content.render(); // do not do .render(box);
                    }, 1);
                } else {
                    // need to remove unnecessary classes
                    if ($(pname + '> .w2ui-panel-content').length > 0) {
                        $(pname + '> .w2ui-panel-content')
                            .removeClass()
                            .removeAttr('name')
                            .addClass('w2ui-panel-content')
                            .html(p.content)
                            .css('overflow', p.overflow)[0].style.cssText += ';' + p.style;
                    }
                }
                if (p.minibar) {
                    if ($(pname + '> .w2ui-panel-content').length > 0) {
                        $(pname + '> .w2ui-panel-content').css('top', '15px');
                    }
                }
                // if there are tabs and/or toolbar - render it
                var tmp = $(obj.box).find(pname + '> .w2ui-panel-tabs');

                if (p.show.tabs) {
                    if (tmp.find('[name=' + p.tabs.name + ']').length === 0 && p.tabs !== null) tmp.w2render(p.tabs);
                    else p.tabs.refresh();
                } else {
                    tmp.html('').removeClass('w2ui-tabs').hide();
                }
                tmp = $(obj.box).find(pname + '> .w2ui-panel-toolbar');
                if (p.show.toolbar) {
                    if (tmp.find('[name=' + p.toolbar.name + ']').length === 0 && p.toolbar !== null) tmp.w2render(p.toolbar);
                    else p.toolbar.refresh();
                } else {
                    tmp.html('').removeClass('w2ui-toolbar').hide();
                }
                // show title
                tmp = $(obj.box).find(pname + '> .w2ui-panel-title');
                if (p.title) {
                    tmp.html(p.title).show();
                } else {
                    tmp.html('').hide();
                }
            } else {
                if ($('#layout_' + obj.name + '_panel_main').length == 0) {
                    obj.render();
                    return;
                }
                obj.resize();
                // refresh all of them
                for (var p1 in this.panels) {
                    obj.refresh(this.panels[p1].type);
                }
            }
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        resize: function() {
            // if (window.getSelection) window.getSelection().removeAllRanges();    // clear selection
            if (!this.box) return false;
            var time = (new Date()).getTime();
            // event before
            var tmp = this.tmp.resize;
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name,
                panel: tmp ? tmp.type : 'all',
                diff_x: tmp ? tmp.diff_x : 0,
                diff_y: tmp ? tmp.diff_y : 0
            });
            if (eventData.isCancelled === true) return;
            if (this.padding < 0) this.padding = 0;

            // layout itself
            var width = parseInt($(this.box).width());
            var height = parseInt($(this.box).height());
            $(this.box).find(' > div').css({
                width: width + 'px',
                height: height + 'px'
            });
            var obj = this;
            // panels
            var pmain = this.get('main');
            var pprev = this.get('preview');
            var pleft = this.get('left');
            var pright = this.get('right');
            var ptop = this.get('top');
            var pbottom = this.get('bottom');
            var smain = true; // main always on
            var sprev = (pprev !== null && pprev.hidden !== true ? true : false);
            var sleft = (pleft !== null && pleft.hidden !== true ? true : false);
            var sright = (pright !== null && pright.hidden !== true ? true : false);
            var stop = (ptop !== null && ptop.hidden !== true ? true : false);
            var sbottom = (pbottom !== null && pbottom.hidden !== true ? true : false);
            var l, t, w, h, e;
            // calculate %
            for (var p in w2layout_panels) {
                p = w2layout_panels[p];
                if (p === 'main') continue;
                var tmp = this.get(p);
                if (!tmp) continue;
                var str = String(tmp.size || 0);
                if (str.substr(str.length - 1) == '%') {
                    var tmph = height;
                    if (tmp.type == 'preview') {
                        tmph = tmph -
                            (ptop && !ptop.hidden ? ptop.sizeCalculated : 0) -
                            (pbottom && !pbottom.hidden ? pbottom.sizeCalculated : 0);
                    }
                    tmp.sizeCalculated = parseInt((tmp.type == 'left' || tmp.type == 'right' ? width : tmph) * parseFloat(tmp.size) / 100);
                } else {
                    tmp.sizeCalculated = parseInt(tmp.size);
                }
                tmp.sizeCalculated = Math.max(tmp.sizeCalculated, parseInt(tmp.minSize));
            }
            // top if any
            if (ptop !== null && ptop.hidden !== true) {
                l = 0;
                t = 0;
                w = width;
                h = ptop.sizeCalculated;
                $('#layout_' + this.name + '_panel_top').css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                ptop.width = w;
                ptop.height = h;
                // resizer
                if (ptop.resizable) {
                    t = ptop.sizeCalculated - (this.padding === 0 ? this.resizer : 0);
                    h = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_top').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ns-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'top',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('top', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_top').hide();
            }
            // left if any
            if (pleft !== null && pleft.hidden !== true) {
                l = 0;
                t = 0 + (stop ? ptop.sizeCalculated + this.padding : 0);
                if (pleft.minibar) t = t + 15;
                w = pleft.sizeCalculated;
                h = height - (stop ? ptop.sizeCalculated + this.padding : 0) -
                    (sbottom ? pbottom.sizeCalculated + this.padding : 0);
                e = $('#layout_' + this.name + '_panel_left');
                if (window.navigator.userAgent.indexOf('MSIE') != -1 && e.length > 0 && e[0].clientHeight < e[0].scrollHeight) w += 17; // IE hack
                e.css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pleft.width = w;
                pleft.height = h;
                if (pleft.minibar) {
                    $('#layout_' + this.name + '_collapser_left').html('<div id="layout_' + this.name + '_collapser_title" class="w2ui-collapsed-title"><i class="w2ui-icon-send"></i></div>').css({
                        'display': 'none',
                        'left': '0px',
                        'top': (t - 15) + 'px',
                        'width': '15px',
                        'height': h + 'px'
                    }).off('mousedown').on('mousedown', function(event) {
                        w2ui[obj.name].show(pleft.type);
                    });
                }
                // resizer
                if (pleft.resizable) {
                    l = pleft.sizeCalculated - (this.padding === 0 ? this.resizer : 0);
                    w = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_left').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ew-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'left',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('left', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));

                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_left').hide();
                $('#layout_' + this.name + '_resizer_left').hide();
            }
            // right if any
            if (pright !== null && pright.hidden !== true) {
                l = width - pright.sizeCalculated;
                t = 0 + (stop ? ptop.sizeCalculated + this.padding : 0);
                w = pright.sizeCalculated;
                h = height - (stop ? ptop.sizeCalculated + this.padding : 0) -
                    (sbottom ? pbottom.sizeCalculated + this.padding : 0);
                $('#layout_' + this.name + '_panel_right').css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pright.width = w;
                pright.height = h;
                // resizer
                if (pright.resizable) {
                    l = l - this.padding;
                    w = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_right').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ew-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'right',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('right', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_right').hide();
            }
            // bottom if any
            if (pbottom !== null && pbottom.hidden !== true) {
                l = 0;
                t = height - pbottom.sizeCalculated;
                w = width;
                h = pbottom.sizeCalculated;
                $('#layout_' + this.name + '_panel_bottom').css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pbottom.width = w;
                pbottom.height = h;
                // resizer
                if (pbottom.resizable) {
                    t = t - (this.padding === 0 ? 0 : this.padding);
                    h = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_bottom').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ns-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'bottom',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('bottom', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_bottom').hide();
            }
            // main - always there
            l = 0 + (sleft ? pleft.sizeCalculated + this.padding : 0);
            t = 0 + (stop ? ptop.sizeCalculated + this.padding : 0);
            w = width - (sleft ? pleft.sizeCalculated + this.padding : 0) -
                (sright ? pright.sizeCalculated + this.padding : 0);
            h = height - (stop ? ptop.sizeCalculated + this.padding : 0) -
                (sbottom ? pbottom.sizeCalculated + this.padding : 0) -
                (sprev ? pprev.sizeCalculated + this.padding : 0);
            e = $('#layout_' + this.name + '_panel_main');
            if (window.navigator.userAgent.indexOf('MSIE') != -1 && e.length > 0 && e[0].clientHeight < e[0].scrollHeight) w += 17; // IE hack
            e.css({
                'display': 'block',
                'left': l + 'px',
                'top': t + 'px',
                'width': w + 'px',
                'height': h + 'px'
            });
            pmain.width = w;
            pmain.height = h;

            // preview if any
            if (pprev !== null && pprev.hidden !== true) {
                l = 0 + (sleft ? pleft.sizeCalculated + this.padding : 0);
                t = height - (sbottom ? pbottom.sizeCalculated + this.padding : 0) - pprev.sizeCalculated;
                w = width - (sleft ? pleft.sizeCalculated + this.padding : 0) -
                    (sright ? pright.sizeCalculated + this.padding : 0);
                h = pprev.sizeCalculated;
                e = $('#layout_' + this.name + '_panel_preview');
                if (window.navigator.userAgent.indexOf('MSIE') != -1 && e.length > 0 && e[0].clientHeight < e[0].scrollHeight) w += 17; // IE hack
                e.css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pprev.width = w;
                pprev.height = h;
                // resizer
                if (pprev.resizable) {
                    t = t - (this.padding === 0 ? 0 : this.padding);
                    h = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_preview').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ns-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'preview',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('preview', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_preview').hide();
            }

            // display tabs and toolbar if needed
            for (var p1 in w2layout_panels) {
                p1 = w2layout_panels[p1];
                var pan = this.get(p1);
                var tmp2 = '#layout_' + this.name + '_panel_' + p1 + ' > .w2ui-panel-';
                var tabHeight = 0;
                if (pan) {
                    if (pan.title) {
                        tabHeight += w2utils.getSize($(tmp2 + 'title').css({
                            top: tabHeight + 'px',
                            display: 'block'
                        }), 'height');
                    }
                    if (pan.show.tabs) {
                        if (pan.tabs !== null && w2ui[this.name + '_' + p1 + '_tabs']) w2ui[this.name + '_' + p1 + '_tabs'].resize();
                        tabHeight += w2utils.getSize($(tmp2 + 'tabs').css({
                            top: tabHeight + 'px',
                            display: 'block'
                        }), 'height');
                    }
                    if (pan.show.toolbar) {
                        if (pan.toolbar !== null && w2ui[this.name + '_' + p1 + '_toolbar']) w2ui[this.name + '_' + p1 + '_toolbar'].resize();
                        tabHeight += w2utils.getSize($(tmp2 + 'toolbar').css({
                            top: tabHeight + 'px',
                            display: 'block'
                        }), 'height');
                    }
                }
                $(tmp2 + 'content').css({
                    display: 'block'
                }).css({
                    top: tabHeight + 'px'
                });
            }
            // send resize to all objects
            clearTimeout(this._resize_timer);
            this._resize_timer = setTimeout(function() {
                for (var e in w2ui) {
                    if (typeof w2ui[e].resize == 'function') {
                        // sent to all none-layouts
                        if (w2ui[e].panels == 'undefined') w2ui[e].resize();
                        // only send to nested layouts
                        var parent = $(w2ui[e].box).parents('.w2ui-layout');
                        if (parent.length > 0 && parent.attr('name') == obj.name) w2ui[e].resize();
                    }
                }
            }, 100);
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'destroy',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            if (typeof w2ui[this.name] == 'undefined') return false;
            // clean up
            if ($(this.box).find('#layout_' + this.name + '_panel_main').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-layout')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            if (this.tmp.events && this.tmp.events.resize) $(window).off('resize', this.tmp.events.resize);
            return true;
        },

        lock: function(panel, msg, showSpinner) {
            if (w2layout_panels.indexOf(panel) == -1) {
                console.log('ERROR: First parameter needs to be the a valid panel name.');
                return;
            }
            var args = Array.prototype.slice.call(arguments, 0);
            args[0] = '#layout_' + this.name + '_panel_' + panel;
            w2utils.lock.apply(window, args);
        },

        unlock: function(panel) {
            if (w2layout_panels.indexOf(panel) == -1) {
                console.log('ERROR: First parameter needs to be the a valid panel name.');
                return;
            }
            var nm = '#layout_' + this.name + '_panel_' + panel;
            w2utils.unlock(nm);
        }
    };

    $.extend(w2layout.prototype, w2utils.event);
    w2obj.layout = w2layout;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2popup      - popup widget
 *        - $().w2popup  - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - transition should include title, body and buttons, not just body
 *
 ************************************************************************/

var w2popup = {};

(function() {

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2popup = function(method, options) {
        if (typeof method === 'undefined') {
            options = {};
            method = 'open';
        }
        if ($.isPlainObject(method)) {
            options = method;
            method = 'open';
        }
        method = method.toLowerCase();
        if (method === 'load' && typeof options === 'string') {
            options = $.extend({
                url: options
            }, arguments.length > 2 ? arguments[2] : {});
        }
        if (method === 'open' && options.url != null) method = 'load';
        options = options || {};
        // load options from markup
        var dlgOptions = {};
        if ($(this).length > 0) {
            if ($(this).find('div[rel=title], div[rel=body], div[rel=buttons]').length > 0) {
                if ($(this).find('div[rel=title]').length > 0) {
                    dlgOptions['title'] = $(this).find('div[rel=title]').html();
                }
                if ($(this).find('div[rel=body]').length > 0) {
                    dlgOptions['body'] = $(this).find('div[rel=body]').html();
                    dlgOptions['style'] = $(this).find('div[rel=body]')[0].style.cssText;
                }
                if ($(this).find('div[rel=buttons]').length > 0) {
                    dlgOptions['buttons'] = $(this).find('div[rel=buttons]').html();
                }
            } else {
                dlgOptions['title'] = '&nbsp;';
                dlgOptions['body'] = $(this).html();
            }
            if (parseInt($(this).css('width')) != 0) dlgOptions['width'] = parseInt($(this).css('width'));
            if (parseInt($(this).css('height')) != 0) dlgOptions['height'] = parseInt($(this).css('height'));
        }
        // show popup
        return w2popup[method]($.extend({}, dlgOptions, options));
    };

    // ====================================================
    // -- Implementation of core functionality (SINGELTON)

    w2popup = {
        defaults: {
            title: '',
            body: '',
            buttons: '',
            style: '',
            color: '#000',
            opacity: 0.4,
            speed: 0.3,
            modal: false,
            maximized: false,
            keyboard: true, // will close popup on esc if not modal
            width: 500,
            height: 300,
            showClose: true,
            showMax: false,
            transition: null
        },
        status: 'closed', // string that describes current status
        handlers: [],
        onOpen: null,
        onClose: null,
        onMax: null,
        onMin: null,
        onToggle: null,
        onKeydown: null,

        open: function(options) {
            var obj = this;
            if (w2popup.status == 'closing') {
                setTimeout(function() {
                    obj.open.call(obj, options);
                }, 100);
                return;
            }
            // get old options and merge them
            var old_options = $('#w2ui-popup').data('options');
            var options = $.extend({}, this.defaults, old_options, {
                title: '',
                body: '',
                buttons: ''
            }, options, {
                maximized: false
            });
            // need timer because popup might not be open
            setTimeout(function() {
                $('#w2ui-popup').data('options', options);
            }, 100);
            // if new - reset event handlers
            if ($('#w2ui-popup').length == 0) {
                w2popup.handlers = [];
                w2popup.onMax = null;
                w2popup.onMin = null;
                w2popup.onToggle = null;
                w2popup.onOpen = null;
                w2popup.onClose = null;
                w2popup.onKeydown = null;
            }
            if (options.onOpen) w2popup.onOpen = options.onOpen;
            if (options.onClose) w2popup.onClose = options.onClose;
            if (options.onMax) w2popup.onMax = options.onMax;
            if (options.onMin) w2popup.onMin = options.onMin;
            if (options.onToggle) w2popup.onToggle = options.onToggle;
            if (options.onKeydown) w2popup.onKeydown = options.onKeydown;

            if (window.innerHeight == undefined) {
                var width = document.documentElement.offsetWidth;
                var height = document.documentElement.offsetHeight;
                if (w2utils.engine === 'IE7') {
                    width += 21;
                    height += 4;
                }
            } else {
                var width = window.innerWidth;
                var height = window.innerHeight;
            }
            if (parseInt(width) - 10 < parseInt(options.width)) options.width = parseInt(width) - 10;
            if (parseInt(height) - 10 < parseInt(options.height)) options.height = parseInt(height) - 10;
            var top = parseInt(((parseInt(height) - parseInt(options.height)) / 2) * 0.6);
            var left = parseInt((parseInt(width) - parseInt(options.width)) / 2);
            // check if message is already displayed
            if ($('#w2ui-popup').length == 0) {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: false
                });
                if (eventData.isCancelled === true) return;
                w2popup.status = 'opening';
                // output message
                w2popup.lockScreen(options);
                var btn = '';
                if (options.showClose) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-close" onmousedown="event.stopPropagation()" onclick="w2popup.close()">Close</div>';
                }
                if (options.showMax) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-max" onmousedown="event.stopPropagation()" onclick="w2popup.toggle()">Max</div>';
                }
                var msg = '<div id="w2ui-popup" class="w2ui-popup" style="opacity: 0; left: ' + left + 'px; top: ' + top + 'px;' +
                    '     width: ' + parseInt(options.width) + 'px; height: ' + parseInt(options.height) + 'px; ' +
                    '    -webkit-transform: scale(0.8); -moz-transform: scale(0.8); -ms-transform: scale(0.8); -o-transform: scale(0.8); "' +
                    '>' +
                    '   <div class="w2ui-msg-title" style="' + (options.title == '' ? 'display: none' : '') + '">' + btn + options.title + '</div>' +
                    '   <div class="w2ui-box1" style="' + (options.title == '' ? 'top: 0px !important;' : '') +
                    (options.buttons == '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body' + (!options.title != '' ? ' w2ui-msg-no-title' : '') +
                    (!options.buttons != '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '">' + options.body + '</div>' +
                    '   </div>' +
                    '   <div class="w2ui-box2" style="' + (options.title == '' ? 'top: 0px !important;' : '') +
                    (options.buttons == '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body' + (!options.title != '' ? ' w2ui-msg-no-title' : '') +
                    (!options.buttons != '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '"></div>' +
                    '       </div>' +
                    '   <div class="w2ui-msg-buttons" style="' + (options.buttons == '' ? 'display: none' : '') + '">' + options.buttons + '</div>' +
                    '</div>';
                $('body').append(msg);
                // allow element to render
                setTimeout(function() {
                    $('#w2ui-popup .w2ui-box2').hide();
                    $('#w2ui-popup').css({
                        '-webkit-transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                        '-webkit-transform': 'scale(1)',
                        '-moz-transition': options.speed + 's opacity, ' + options.speed + 's -moz-transform',
                        '-moz-transform': 'scale(1)',
                        '-ms-transition': options.speed + 's opacity, ' + options.speed + 's -ms-transform',
                        '-ms-transform': 'scale(1)',
                        '-o-transition': options.speed + 's opacity, ' + options.speed + 's -o-transform',
                        '-o-transform': 'scale(1)',
                        'opacity': '1'
                    });
                }, 1);
                // clean transform
                setTimeout(function() {
                    $('#w2ui-popup').css({
                        '-webkit-transform': '',
                        '-moz-transform': '',
                        '-ms-transform': '',
                        '-o-transform': ''
                    });
                    // event after
                    w2popup.status = 'open';
                    setTimeout(function() {
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }, 100);
                }, options.speed * 1000);
            } else {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: true
                });
                if (eventData.isCancelled === true) return;
                // check if size changed
                w2popup.status = 'opening';
                if (typeof old_options == 'undefined' || old_options['width'] != options['width'] || old_options['height'] != options['height']) {
                    w2popup.resize(options.width, options.height);
                }
                if (typeof old_options != 'undefined') {
                    options.prevSize = options.width + ':' + options.height;
                    options.maximized = old_options.maximized;
                }
                // show new items
                var body = $('#w2ui-popup .w2ui-box2 > .w2ui-msg-body').html(options.body);
                if (body.length > 0) body[0].style.cssText = options.style;
                if (options.buttons != '') {
                    $('#w2ui-popup .w2ui-msg-buttons').show().html(options.buttons);
                    $('#w2ui-popup .w2ui-msg-body').removeClass('w2ui-msg-no-buttons');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('bottom', '');
                } else {
                    $('#w2ui-popup .w2ui-msg-buttons').hide().html('');
                    $('#w2ui-popup .w2ui-msg-body').addClass('w2ui-msg-no-buttons');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('bottom', '0px');
                }
                if (options.title != '') {
                    $('#w2ui-popup .w2ui-msg-title').show().html(
                        (options.showClose ? '<div class="w2ui-msg-button w2ui-msg-close" onmousedown="event.stopPropagation()" onclick="w2popup.close()">Close</div>' : '') +
                        (options.showMax ? '<div class="w2ui-msg-button w2ui-msg-max" onmousedown="event.stopPropagation()" onclick="w2popup.toggle()">Max</div>' : '') +
                        options.title);
                    $('#w2ui-popup .w2ui-msg-body').removeClass('w2ui-msg-no-title');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('top', '');
                } else {
                    $('#w2ui-popup .w2ui-msg-title').hide().html('');
                    $('#w2ui-popup .w2ui-msg-body').addClass('w2ui-msg-no-title');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('top', '0px');
                }
                // transition
                var div_old = $('#w2ui-popup .w2ui-box1')[0];
                var div_new = $('#w2ui-popup .w2ui-box2')[0];
                w2utils.transition(div_old, div_new, options.transition);
                div_new.className = 'w2ui-box1';
                div_old.className = 'w2ui-box2';
                $(div_new).addClass('w2ui-current-box');
                // remove max state
                $('#w2ui-popup').data('prev-size', null);
                // call event onChange
                setTimeout(function() {
                    w2popup.status = 'open';
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, 100);
            }
            // save new options
            options._last_w2ui_name = w2utils.keyboard.active();
            w2utils.keyboard.active(null);
            // keyboard events
            if (options.keyboard) $(document).on('keydown', this.keydown);

            // initialize move
            var tmp = {
                resizing: false,
                mvMove: mvMove,
                mvStop: mvStop
            };
            $('#w2ui-popup .w2ui-msg-title').on('mousedown', function(event) {
                mvStart(event);
            })

            // handlers
            function mvStart(evnt) {
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                w2popup.status = 'moving';
                tmp.resizing = true;
                tmp.x = evnt.screenX;
                tmp.y = evnt.screenY;
                tmp.pos_x = $('#w2ui-popup').position().left;
                tmp.pos_y = $('#w2ui-popup').position().top;
                w2popup.lock({
                    opacity: 0
                });
                $(document).on('mousemove', tmp.mvMove);
                $(document).on('mouseup', tmp.mvStop);
                if (evnt.stopPropagation) evnt.stopPropagation();
                else evnt.cancelBubble = true;
                if (evnt.preventDefault) evnt.preventDefault();
                else return false;
            }

            function mvMove(evnt) {
                if (tmp.resizing != true) return;
                if (!evnt) evnt = window.event;
                tmp.div_x = evnt.screenX - tmp.x;
                tmp.div_y = evnt.screenY - tmp.y;
                $('#w2ui-popup').css({
                    '-webkit-transition': 'none',
                    '-webkit-transform': 'translate3d(' + tmp.div_x + 'px, ' + tmp.div_y + 'px, 0px)',
                    '-moz-transition': 'none',
                    '-moz-transform': 'translate(' + tmp.div_x + 'px, ' + tmp.div_y + 'px)',
                    '-ms-transition': 'none',
                    '-ms-transform': 'translate(' + tmp.div_x + 'px, ' + tmp.div_y + 'px)',
                    '-o-transition': 'none',
                    '-o-transform': 'translate(' + tmp.div_x + 'px, ' + tmp.div_y + 'px)'
                });
            }

            function mvStop(evnt) {
                if (tmp.resizing != true) return;
                if (!evnt) evnt = window.event;
                w2popup.status = 'open';
                tmp.div_x = (evnt.screenX - tmp.x);
                tmp.div_y = (evnt.screenY - tmp.y);
                $('#w2ui-popup').css({
                    'left': (tmp.pos_x + tmp.div_x) + 'px',
                    'top': (tmp.pos_y + tmp.div_y) + 'px',
                    '-webkit-transition': 'none',
                    '-webkit-transform': 'translate3d(0px, 0px, 0px)',
                    '-moz-transition': 'none',
                    '-moz-transform': 'translate(0px, 0px)',
                    '-ms-transition': 'none',
                    '-ms-transform': 'translate(0px, 0px)',
                    '-o-transition': 'none',
                    '-o-transform': 'translate(0px, 0px)'
                });
                tmp.resizing = false;
                $(document).off('mousemove', tmp.mvMove);
                $(document).off('mouseup', tmp.mvStop);
                w2popup.unlock();
            }
            return this;
        },

        keydown: function(event) {
            var options = $('#w2ui-popup').data('options');
            if (!options || !options.keyboard) return;
            // trigger event
            var eventData = w2popup.trigger({
                phase: 'before',
                type: 'keydown',
                target: 'popup',
                options: options,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            switch (event.keyCode) {
                case 27:
                    event.preventDefault();
                    if ($('#w2ui-popup .w2ui-popup-message').length > 0) w2popup.message();
                    else w2popup.close();
                    break;
            }
            // event after
            w2popup.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        close: function(options) {
            var obj = this;
            var options = $.extend({}, $('#w2ui-popup').data('options'), options);
            if ($('#w2ui-popup').length == 0) return;
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'close',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2popup.status = 'closing';
            $('#w2ui-popup').css({
                '-webkit-transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                '-webkit-transform': 'scale(0.9)',
                '-moz-transition': options.speed + 's opacity, ' + options.speed + 's -moz-transform',
                '-moz-transform': 'scale(0.9)',
                '-ms-transition': options.speed + 's opacity, ' + options.speed + 's -ms-transform',
                '-ms-transform': 'scale(0.9)',
                '-o-transition': options.speed + 's opacity, ' + options.speed + 's -o-transform',
                '-o-transform': 'scale(0.9)',
                'opacity': '0'
            });
            w2popup.unlockScreen(options);
            setTimeout(function() {
                $('#w2ui-popup').remove();
                w2popup.status = 'closed';
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, options.speed * 1000);
            // restore active
            w2utils.keyboard.active(options._last_w2ui_name);
            // remove keyboard events
            if (options.keyboard) $(document).off('keydown', this.keydown);
        },

        toggle: function() {
            var obj = this;
            var options = $('#w2ui-popup').data('options');
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'toggle',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // defatul action
            if (options.maximized === true) w2popup.min();
            else w2popup.max();
            // event after
            setTimeout(function() {
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, (options.speed * 1000) + 50);
        },

        max: function() {
            var obj = this;
            var options = $('#w2ui-popup').data('options');
            if (options.maximized === true) return;
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'max',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2popup.status = 'resizing';
            options.prevSize = $('#w2ui-popup').css('width') + ':' + $('#w2ui-popup').css('height');
            // do resize
            w2popup.resize(10000, 10000, function() {
                w2popup.status = 'open';
                options.maximized = true;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            });
        },

        min: function() {
            var obj = this;
            var options = $('#w2ui-popup').data('options');
            if (options.maximized !== true) return;
            var size = options.prevSize.split(':');
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'min',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2popup.status = 'resizing';
            // do resize
            w2popup.resize(size[0], size[1], function() {
                w2popup.status = 'open';
                options.maximized = false;
                options.prevSize = null;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            });
        },

        get: function() {
            return $('#w2ui-popup').data('options');
        },

        set: function(options) {
            w2popup.open(options);
        },

        clear: function() {
            $('#w2ui-popup .w2ui-msg-title').html('');
            $('#w2ui-popup .w2ui-msg-body').html('');
            $('#w2ui-popup .w2ui-msg-buttons').html('');
        },

        reset: function() {
            w2popup.open(w2popup.defaults);
        },

        load: function(options) {
            w2popup.status = 'loading';
            if (String(options.url) == 'undefined') {
                console.log('ERROR: The url parameter is empty.');
                return;
            }
            var tmp = String(options.url).split('#');
            var url = tmp[0];
            var selector = tmp[1];
            if (String(options) == 'undefined') options = {};
            // load url
            var html = $('#w2ui-popup').data(url);
            if (typeof html != 'undefined' && html != null) {
                popup(html, selector);
            } else {
                $.get(url, function(data, status, obj) { // should always be $.get as it is template
                    popup(obj.responseText, selector);
                    $('#w2ui-popup').data(url, obj.responseText); // remember for possible future purposes
                });
            }

            function popup(html, selector) {
                delete options.url;
                $('body').append('<div id="w2ui-tmp" style="display: none">' + html + '</div>');
                if (typeof selector != 'undefined' && $('#w2ui-tmp #' + selector).length > 0) {
                    $('#w2ui-tmp #' + selector).w2popup(options);
                } else {
                    $('#w2ui-tmp > div').w2popup(options);
                }
                // link styles
                if ($('#w2ui-tmp > style').length > 0) {
                    var style = $('<div>').append($('#w2ui-tmp > style').clone()).html();
                    if ($('#w2ui-popup #div-style').length == 0) {
                        $('#w2ui-popup').append('<div id="div-style" style="position: absolute; left: -100; width: 1px"></div>');
                    }
                    $('#w2ui-popup #div-style').html(style);
                }
                $('#w2ui-tmp').remove();
            }
        },

        message: function(options) {
            $().w2tag(); // hide all tags
            if (!options) options = {
                width: 200,
                height: 100
            };
            if (parseInt(options.width) < 10) options.width = 10;
            if (parseInt(options.height) < 10) options.height = 10;
            if (typeof options.hideOnClick == 'undefined') options.hideOnClick = false;
            var poptions = $('#w2ui-popup').data('options') || {};
            if (typeof options.width == 'undefined' || options.width > poptions.width - 10) options.width = poptions.width - 10;
            if (typeof options.height == 'undefined' || options.height > poptions.height - 40) options.height = poptions.height - 40; // title is 30px or so

            var head = $('#w2ui-popup .w2ui-msg-title');
            var pwidth = parseInt($('#w2ui-popup').width());
            var msgCount = $('#w2ui-popup .w2ui-popup-message').length;
            // remove message
            if ($.trim(options.html) == '') {
                $('#w2ui-popup #w2ui-message' + (msgCount - 1)).css('z-Index', 250);
                var options = $('#w2ui-popup #w2ui-message' + (msgCount - 1)).data('options') || {};
                $('#w2ui-popup #w2ui-message' + (msgCount - 1)).remove();
                if (typeof options.onClose == 'function') options.onClose();
                if (msgCount == 1) {
                    w2popup.unlock();
                } else {
                    $('#w2ui-popup #w2ui-message' + (msgCount - 2)).show();
                }
            } else {
                // hide previous messages
                $('#w2ui-popup .w2ui-popup-message').hide();
                // add message
                $('#w2ui-popup .w2ui-box1')
                    .before('<div id="w2ui-message' + msgCount + '" class="w2ui-popup-message" style="display: none; ' +
                        (head.length == 0 ? 'top: 0px;' : 'top: ' + w2utils.getSize(head, 'height') + 'px;') +
                        (typeof options.width != 'undefined' ? 'width: ' + options.width + 'px; left: ' + ((pwidth - options.width) / 2) + 'px;' : 'left: 10px; right: 10px;') +
                        (typeof options.height != 'undefined' ? 'height: ' + options.height + 'px;' : 'bottom: 6px;') +
                        '-webkit-transition: .3s; -moz-transition: .3s; -ms-transition: .3s; -o-transition: .3s;"' +
                        (options.hideOnClick === true ? 'onclick="w2popup.message();"' : '') + '>' +
                        '</div>');
                $('#w2ui-popup #w2ui-message' + msgCount).data('options', options);
                var display = $('#w2ui-popup #w2ui-message' + msgCount).css('display');
                $('#w2ui-popup #w2ui-message' + msgCount).css({
                    '-webkit-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)'),
                    '-moz-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)'),
                    '-ms-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)'),
                    '-o-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)')
                });
                if (display == 'none') {
                    $('#w2ui-popup #w2ui-message' + msgCount).show().html(options.html);
                    // timer needs to animation
                    setTimeout(function() {
                        $('#w2ui-popup #w2ui-message' + msgCount).css({
                            '-webkit-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)'),
                            '-moz-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)'),
                            '-ms-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)'),
                            '-o-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)')
                        });
                    }, 1);
                    // timer for lock
                    setTimeout(function() {
                        $('#w2ui-popup #w2ui-message' + msgCount).css({
                            '-webkit-transition': '0s',
                            '-moz-transition': '0s',
                            '-ms-transition': '0s',
                            '-o-transition': '0s',
                            'z-Index': 1500
                        }); // has to be on top of lock
                        if (msgCount == 0) w2popup.lock();
                        if (typeof options.onOpen == 'function') options.onOpen();
                    }, 300);
                }
            }
        },

        lock: function(msg, showSpinner) {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift($('#w2ui-popup'));
            w2utils.lock.apply(window, args);
        },

        unlock: function() {
            w2utils.unlock($('#w2ui-popup'));
        },

        // --- INTERNAL FUNCTIONS

        lockScreen: function(options) {
            if ($('#w2ui-lock').length > 0) return false;
            if (typeof options == 'undefined') options = $('#w2ui-popup').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2popup.defaults, options);
            // show element
            $('body').append('<div id="w2ui-lock" ' +
                '    onmousewheel="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true; if (event.preventDefault) event.preventDefault(); else return false;"' +
                '    style="position: ' + (w2utils.engine == 'IE5' ? 'absolute' : 'fixed') + '; z-Index: 1199; left: 0px; top: 0px; ' +
                '           padding: 0px; margin: 0px; background-color: ' + options.color + '; width: 100%; height: 100%; opacity: 0;"></div>');
            // lock screen
            setTimeout(function() {
                $('#w2ui-lock').css({
                    '-webkit-transition': options.speed + 's opacity',
                    '-moz-transition': options.speed + 's opacity',
                    '-ms-transition': options.speed + 's opacity',
                    '-o-transition': options.speed + 's opacity',
                    'opacity': options.opacity
                });
            }, 1);
            // add events
            if (options.modal == true) {
                $('#w2ui-lock').on('mousedown', function() {
                    $('#w2ui-lock').css({
                        '-webkit-transition': '.1s',
                        '-moz-transition': '.1s',
                        '-ms-transition': '.1s',
                        '-o-transition': '.1s',
                        'opacity': '0.6'
                    });
                    // if (window.getSelection) window.getSelection().removeAllRanges();
                });
                $('#w2ui-lock').on('mouseup', function() {
                    setTimeout(function() {
                        $('#w2ui-lock').css({
                            '-webkit-transition': '.1s',
                            '-moz-transition': '.1s',
                            '-ms-transition': '.1s',
                            '-o-transition': '.1s',
                            'opacity': options.opacity
                        });
                    }, 100);
                    // if (window.getSelection) window.getSelection().removeAllRanges();
                });
            } else {
                $('#w2ui-lock').on('mouseup', function() {
                    w2popup.close();
                });
            }
            return true;
        },

        unlockScreen: function(options) {
            if ($('#w2ui-lock').length == 0) return false;
            if (typeof options == 'undefined') options = $('#w2ui-popup').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2popup.defaults, options);
            $('#w2ui-lock').css({
                '-webkit-transition': options.speed + 's opacity',
                '-moz-transition': options.speed + 's opacity',
                '-ms-transition': options.speed + 's opacity',
                '-o-transition': options.speed + 's opacity',
                'opacity': 0
            });
            setTimeout(function() {
                $('#w2ui-lock').remove();
            }, options.speed * 1000);
            return true;
        },

        resize: function(width, height, callBack) {
            var options = $('#w2ui-popup').data('options');
            // calculate new position
            if (parseInt($(window).width()) - 10 < parseInt(width)) width = parseInt($(window).width()) - 10;
            if (parseInt($(window).height()) - 10 < parseInt(height)) height = parseInt($(window).height()) - 10;
            var top = ((parseInt($(window).height()) - parseInt(height)) / 2) * 0.8;
            var left = (parseInt($(window).width()) - parseInt(width)) / 2;
            // resize there
            $('#w2ui-popup').css({
                '-webkit-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                '-moz-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                '-ms-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                '-o-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                'top': top,
                'left': left,
                'width': width,
                'height': height
            });
            setTimeout(function() {
                options.width = width;
                options.height = height;
                if (typeof callBack == 'function') callBack();
            }, (options.speed * 1000) + 50); // give extra 50 ms
        }
    }

    // merge in event handling
    $.extend(w2popup, w2utils.event);

})();

// ============================================
// --- Common dialogs

var w2alert = function(msg, title, callBack) {
    if (title == null) title = w2utils.lang('Notification');
    if ($('#w2ui-popup').length > 0 && w2popup.status != 'closing') {
        w2popup.message({
            width: 400,
            height: 170,
            html: '<div style="position: absolute; top: 0px; left: 0px; right: 0px; bottom: 45px; overflow: auto">' +
                '        <div class="w2ui-centered" style="font-size: 13px;">' + msg + '</div>' +
                '</div>' +
                '<div style="position: absolute; bottom: 7px; left: 0px; right: 0px; text-align: center; padding: 5px">' +
                '        <button onclick="w2popup.message();" class="w2ui-popup-btn btn">' + w2utils.lang('Ok') + '</button>' +
                '</div>',
            onClose: function() {
                if (typeof callBack == 'function') callBack();
            }
        });
    } else {
        w2popup.open({
            width: 450,
            height: 220,
            showMax: false,
            showClose: false,
            title: title,
            body: '<div class="w2ui-centered" style="font-size: 13px;">' + msg + '</div>',
            buttons: '<button onclick="w2popup.close();" class="w2ui-popup-btn btn">' + w2utils.lang('Ok') + '</button>',
            onClose: function() {
                if (typeof callBack == 'function') callBack();
            }
        });
    }
};

var w2confirm = function(msg, title, callBack) {
    var options = {};
    var defaults = {
        msg: '',
        title: w2utils.lang('Confirmation'),
        width: ($('#w2ui-popup').length > 0 ? 400 : 450),
        height: ($('#w2ui-popup').length > 0 ? 170 : 220),
        yes_text: 'Yes',
        yes_class: '',
        yes_style: '',
        yes_callBack: null,
        no_text: 'No',
        no_class: '',
        no_style: '',
        no_callBack: null,
        opt:false,
        opt_text: 'No',
        opt_class: '',
        opt_style: '',
        opt_callBack: null,
        callBack: null
    };
    if (arguments.length == 1 && typeof msg == 'object') {
        $.extend(options, defaults, msg);
    } else {
        if (typeof title == 'function') {
            $.extend(options, defaults, {
                msg: msg,
                callBack: title
            });
        } else {
            $.extend(options, defaults, {
                msg: msg,
                title: title,
                callBack: callBack
            });
        }
    }
    if ($('#w2ui-popup').length > 0 && w2popup.status != 'closing') {
        var opts = w2popup.get();
        if (opts) {
            if (options.width > opts.width) options.width = opts.width;
            if (options.height > (opts.height - 50)) options.height = opts.height - 50;
        }
        w2popup.message({
            width: options.width,
            height: options.height,
            html: '<div style="position: absolute; top: 0px; left: 0px; right: 0px; bottom: 40px; overflow: auto">' +
                '        <div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>' +
                '</div>' +
                '<div style="position: absolute; bottom: 7px; left: 0px; right: 0px; text-align: center; padding: 5px">' +
                '        <button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '        <button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>' +
                (options.opt?'<button id="Opt" class="w2ui-popup-btn btn ' + options.opt_class + '" style="' + options.opt_style + '">' + w2utils.lang(options.opt_text) + '</button>':'') +
                '</div>',
            onOpen: function() {
                $('#w2ui-popup .w2ui-popup-message .btn').on('click', function(event) {
                    w2popup.message();
                    if (typeof options.callBack == 'function') options.callBack(event.target.id);
                    if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack();
                    if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                    if (event.target.id == 'Opt' && typeof options.opt_callBack == 'function') options.opt_callBack();
                });
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack('Yes');
                        if (typeof options.yes_callBack == 'function') options.yes_callBack();
                        w2popup.message();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.message();
                        break;
                }
            }
        });

    } else {

        if (!w2utils.isInt(options.height)) options.height = options.height + 50;
        w2popup.open({
            width: options.width,
            height: options.height,
            title: options.title,
            modal: true,
            showClose: false,
            body: '<div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>',
            buttons: '<button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '<button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>'+
                (options.opt?'<button id="Opt" class="w2ui-popup-btn btn ' + options.opt_class + '" style="' + options.opt_style + '">' + w2utils.lang(options.opt_text) + '</button>':'') ,
            onOpen: function(event) {
                event.onComplete = function() {
                    $('#w2ui-popup .w2ui-popup-btn').on('click', function(event) {
                        w2popup.close();
                        if (typeof options.callBack == 'function') options.callBack(event.target.id);
                        if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack();
                        if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                        if (event.target.id == 'Opt' && typeof options.opt_callBack == 'function') options.opt_callBack();
                    });
                };
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack('Yes');
                        if (typeof options.yes_callBack == 'function') options.yes_callBack();
                        w2popup.close();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.close();
                        break;
                }
            }
        });
    }

    return {
        yes: function(fun) {
            options.yes_callBack = fun;
            return this;
        },
        no: function(fun) {
            options.no_callBack = fun;
            return this;
        },
        opt:function(fun){
            options.opt_callBack = fun;
            return this;
        }
    };


};

var w2prompt = function(msg, title, callBack) {
    var prompt;
    var options = {};
    var defaults = {
        msg: '',
        title: w2utils.lang('Confirmation'),
        width: ($('#w2ui-popup').length > 0 ? 400 : 450),
        height: ($('#w2ui-popup').length > 0 ? 170 : 220),
        yes_text: 'Yes',
        yes_class: 'btn-primary',
        yes_style: 'margin-right:15px;',
        yes_callBack: null,
        no_text: 'No',
        no_class: 'btn-default',
        no_style: '',
        no_callBack: null,
        callBack: null
    };
    if (arguments.length == 1 && typeof msg == 'object') {
        $.extend(options, defaults, msg);
    } else {
        if (typeof title == 'function') {
            $.extend(options, defaults, {
                msg: msg,
                callBack: title
            });
        } else {
            $.extend(options, defaults, {
                msg: msg,
                title: title,
                callBack: callBack
            });
        }
    }
    if ($('#w2ui-popup').length > 0 && w2popup.status != 'closing') {
        if (options.width > w2popup.get().width) options.width = w2popup.get().width;
        if (options.height > (w2popup.get().height - 50)) options.height = w2popup.get().height - 50;
        w2popup.message({
            width: options.width,
            height: options.height,
            html: '<div style="position: absolute; top: 0px; left: 0px; right: 0px; bottom: 40px; overflow: auto">' +
                '        <div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>' +
                '        <div class="w2ui-centered" style="font-size: 13px;margin-top:30px"><input type="text" id="w2promptInput" /></div>' +
                '</div>' +
                '<div style="position: absolute; bottom: 7px; left: 0px; right: 0px; text-align: center; padding: 5px">' +
                '        <button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '        <button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>' +
                '</div>',
            onOpen: function() {
                $('#w2ui-popup .w2ui-popup-message #w2promptInput').on('keyup', function(e) {
                    if (e.which !== 13)
                        prompt = $(e.target).val();
                });
                $('#w2ui-popup .w2ui-popup-message .btn').on('click', function(event) {
                    w2popup.message();
                    if (typeof options.callBack == 'function') options.callBack(prompt);
                    if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                    if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                });
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack(prompt);
                        if (typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                        w2popup.message();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.message();
                        break;
                }
            }
        });

    } else {

        if (!w2utils.isInt(options.height)) options.height = options.height + 50;
        w2popup.open({
            width: options.width,
            height: options.height,
            title: options.title,
            modal: true,
            showClose: false,
            body: '<div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>' +
                '        <div class="w2ui-centered" style="font-size: 13px;margin-top:30px;"><input type="text" id="w2promptInput" /></div>',
            buttons: '<button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '<button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>',
            onOpen: function(event) {
                event.onComplete = function() {
                    $('#w2ui-popup .w2ui-msg-body #w2promptInput').on('keyup', function(e) {
                        if (e.which !== 13)
                            prompt = $(e.target).val();
                    });
                    $('#w2ui-popup .w2ui-popup-btn').on('click', function(event) {
                        w2popup.close();
                        if (typeof options.callBack == 'function') options.callBack(prompt);
                        if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                        if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                    });
                };
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack(prompt);
                        if (typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                        w2popup.close();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.close();
                        break;
                }
            }
        });
    }

    return {
        yes: function(fun) {
            options.yes_callBack = fun;
            return this;
        },
        no: function(fun) {
            options.no_callBack = fun;
            return this;
        }
    };
};

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2panel      - popup widget
 *        - $().w2panel  - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - transition should include title, body and buttons, not just body
 *   - .message() should have same props (body, buttons, title?)
 *   - hide overlay on esc
 *   - make popup width/height in %
 *
 * == 1.5 changes
 *   - new: resizeMessages()
 *   - popup can be moved/resized/closed when locked or has messages
 *   - messages negative widht/height means margin
 *   - added btn_yes and btn_no
 *   - dismissed message will slide up - added parameter unlock(speed)
 *   - refactore -webkit-* -moz-* to a function
 *   - resize nested elements in popup for onMin, onMax
 *   - rename btn -> w2ui-btn and same for colored ones
 *   - added options.body and options.buttons for w2panel.message
 *
 ************************************************************************/

var w2panel = {};
//TODO: check name and assign one if not found
//
(function() {

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2panel = function(method, options) {
        //append taskbar for minimized windows
        if ($('#w2taskbar-container').length === 0) {
            if ($('#tb_footerToolbar_item_taskbar').length > 0)
                $('#tb_footerToolbar_item_taskbar').append('<div class="w2taskbar-toolbar" id="w2taskbar-container"></div>');
            else
                $('body').append('<div class="w2taskbar" id="w2taskbar-container"></div>');
            // $('body').on('mousedown', function(e) {
            //     e.stopPropagation();
            //     w2panel.focus('none');
            // });

        }
        if (typeof method === 'undefined') {
            options = {};
            method = 'open';
        }
        if ($.isPlainObject(method)) {
            options = method;
            method = 'open';
        }
        method = method.toLowerCase();
        if (method === 'load' && typeof options === 'string') {
            options = $.extend({
                url: options
            }, arguments.length > 2 ? arguments[2] : {});
        }
        if (method === 'open' && options.url) method = 'load';
        options = options || {};

        if (options.modal) {
            options.name = 'modal-'; //we don't want multiple modals - we give it a name to diferentiate from original popup
        } else if (!options.name) {
            options.name = 'panel1'; // for now we give it a default name and force user to provide for multiple windows
        }
        for (var i in w2ui.panels) {
            if (w2ui.panels[i].name === options.name) {
                console.log("ERROR: A panel with the same name is opened!");
                // if(w2ui.panels[i].minimized){
                    w2ui.panels[i].restoreMin();
                // }
                return;
            }
            if (w2ui.panels[i].get().modal) // not allow multiple panels in modal mode
                return;
        }
        // load options from markup
        var dlgOptions = {};
        if ($(this).length > 0) {
            var el = $(this);

            if (options.preserveContent && $('#parentTo' + options.name).length === 0) {
                el.wrap('<div id="parentTo' + options.name + '"></div>');
            }

            if (el.find('div[rel=title], div[rel=body], div[rel=buttons]').length > 0) {
                if (el.find('div[rel=title]').length > 0) {
                    dlgOptions.title = el.find('div[rel=title]').html();
                }
                if (el.find('div[rel=body]').length > 0) {
                    dlgOptions.body = el.find('div[rel=body]');
                    dlgOptions.style = el.find('div[rel=body]')[0].style.cssText;
                }
                if (el.find('div[rel=buttons]').length > 0) {
                    dlgOptions.buttons = el.find('div[rel=buttons]').html();
                }
            } else {
                dlgOptions.title = '&nbsp;';
                dlgOptions.body = el;
            }
            if (parseInt(el.css('width')) !== 0) dlgOptions.width = parseInt(el.css('width'));
            if (parseInt(el.css('height')) !== 0) dlgOptions.height = parseInt(el.css('height'));
        }

        //check if allready opened

        // show popup
        if (options.modal) {
            // //close other panels - multiple in modal mode is not supported
            // w2panel.destroyAll(function() {
            //     w2ui.panels = [];
            return w2panel[method]($.extend({}, dlgOptions, options));
            // });

        } else {
            var panel = $.extend({}, w2panel, options);
            return panel[method]($.extend({}, dlgOptions, options));
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2panel = {
        defaults: {
            title: '',
            body: '',
            buttons: '',
            name: '',
            style: '',
            color: '#000',
            opacity: 0.4,
            speed: 0.3,
            startZ: 1150,
            modal: false,
            maximized: false,
            minimized: false,
            keyboard: true, // will close popup on esc if not modal
            width: 500,
            height: 300,
            showClose: true,
            showMax: false,
            showMin: false,
            transition: null,
            
        },
        useraction:null,
        status: 'closed', // string that describes current status
        handlers: [],
        onOpen: null,
        onClose: null,
        onMax: null,
        onRestore: null,
        onMin: null,
        onToggle: null,
        onKeydown: null,

        init: function(options) {
            $.extend(this.defaults, options);
            return this;
        },

        open: function(options) {
            var obj = this;
            if(options.useraction){
                obj.useraction = options.useraction;
            }
            this.name = options.name; //handle here no name provided
            if (w2panel.status == 'closing') {
                setTimeout(function() {
                    obj.open.call(obj, options);
                }, 100);
                return;
            }
            // get old options and merge them
            var old_options = $('#' + this.name + 'w2ui-window').data('options');
            var options = $.extend({}, this.defaults, old_options, {
                title: '',
                body: '',
                buttons: ''
            }, options, {
                maximized: false,
                minimized: false
            });
            // need timer because popup might not be open
            setTimeout(function() {
                $('#' + obj.name + 'w2ui-window').data('options', options);
            }, 100);
            // if new - reset event handlers
            if ($('#' + obj.name + 'w2ui-window').length === 0) {
                w2panel.handlers = [];
                w2panel.onMax = null;
                w2panel.onMin = null;
                w2panel.onToggle = null;
                w2panel.onOpen = null;
                w2panel.onClose = null;
                w2panel.onKeydown = null;
            }
            if (options.onOpen) w2panel.onOpen = options.onOpen;
            if (options.onClose) w2panel.onClose = options.onClose;
            if (options.onMax) w2panel.onMax = options.onMax;
            if (options.onMin) w2panel.onMin = options.onMin;
            if (options.onToggle) w2panel.onToggle = options.onToggle;
            if (options.onKeydown) w2panel.onKeydown = options.onKeydown;
            if(options.toolbarButtons) w2panel.toolbarButtons = options.toolbarButtons;

            var width, height;
            if (window.innerHeight === undefined) {
                width = document.documentElement.offsetWidth;
                height = document.documentElement.offsetHeight;
                if (w2utils.engine === 'IE7') {
                    width += 21;
                    height += 4;
                }
            } else {
                width = window.innerWidth;
                height = window.innerHeight;
            }
            if (parseInt(width) - 10 < parseInt(options.width)) options.width = parseInt(width) - 10;
            if (parseInt(height) - 10 < parseInt(options.height)) options.height = parseInt(height) - 10;
            var top = parseInt(((parseInt(height) - parseInt(options.height)) / 2) * 0.6);
            var left = parseInt((parseInt(width) - parseInt(options.width)) / 2);
            // check if message is already displayed
            if ($('#' + obj.name + 'w2ui-window').length === 0) {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: false
                });
                if (eventData.isCancelled === true) return;
                w2panel.status = 'opening';
                // output message
                if (options.modal)
                    w2panel.lockScreen(options);
                var btn = '<div class="w2ui-window-buttons">';
                if (options.showClose) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-close" data-panel="' + obj.name + '" data-action="close" onmousedown="event.stopPropagation()" onclick="w2panel.action(event)">&nbsp;</div>';
                }
                if (options.showMax) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-max" data-panel="' + obj.name + '" data-action="toggle" onmousedown="event.stopPropagation()" onclick="w2panel.action(event)">&nbsp;</div>';
                }
                if (options.showMin) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-min" data-panel="' + obj.name + '" data-action="min" onmousedown="event.stopPropagation()" onclick="w2panel.action(event)">&nbsp;</div>';
                }
                if(options.toolbarButtons){
                  options.toolbarButtons.map(function(b){
                      btn += '<div class="w2ui-msg-button" style="background-position:25px;" data-panel="' + obj.name + '" data-action="'+b.id+'" onmousedown="event.stopPropagation()" onclick="w2panel.customaction(event)"><span style="color:#4BA05E;margin-top:-2px" class="w2ui-icon '+b.className+'"></span></div>';
                  });
                }
                btn += '</div>';
                var msg = '<div id="' + obj.name + 'w2ui-window" class="w2ui-window ' + (options.modal ? ' w2modal' : '') + '" style="opacity: 0; left: ' + left + 'px; top: ' + top + 'px;' +
                    '     width: ' + parseInt(options.width) + 'px; height: ' + parseInt(options.height) + 'px; ' +
                    //(options.resizable ? 'resize:both;' : '') +
                    w2utils.cssPrefix('transform', 'scale(0.8)', true) + '"' +
                    '>' +
                    '   <div class="w2ui-msg-title" style="' + (options.title === '' ? 'display: none' : '') + '">' + btn + options.title + '</div>' +
                    '   <div class="w2ui-box1" style="' + (options.title === '' ? 'top: 0px !important;' : '') +
                    (options.buttons === '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body w2panel-content-' + obj.name + (options.title === '' ? ' w2ui-msg-no-title' : '') +
                    (options.buttons === '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '">' /*+ options.body*/ + '</div>' +
                    '   </div>' +
                    '   <div class="w2ui-box2" style="' + (options.title === '' ? 'top: 0px !important;' : '') +
                    (options.buttons === '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body' + (options.title === '' ? ' w2ui-msg-no-title' : '') +
                    (options.buttons === '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '"></div>' +
                    '       </div>' +
                    '   <div class="w2ui-msg-buttons" style="' + (options.buttons === '' ? 'display: none' : '') + '">' + options.buttons + '</div>' +
                    (options.resizable ? '<div class="w2panel-resizer"><i class="w2ui-icon-resize"></i></div>' : '') +
                    '</div>';
                $('body').append(msg);
                //if (options.modal) {
                //   $(options.body).appendTo('.w2ui-msg-body');
                //} else {
                $(options.body).appendTo('.w2panel-content-' + obj.name);
                // $('<div>' + options.body + '</div>').appendTo('.w2panel-content-' + obj.name);
                //}

                // allow element to render
                setTimeout(function() {
                    $('#' + obj.name + 'w2ui-window .w2ui-box2').hide();
                    $('#' + obj.name + 'w2ui-window')
                        .css('opacity', '1')
                        .css(w2utils.cssPrefix({
                            'transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                            'transform': 'scale(1)'
                        }));
                }, 1);
                // clean transform
                setTimeout(function() {
                    $('#' + obj.name + 'w2ui-window').css(w2utils.cssPrefix('transform', ''));
                    // event after
                    w2panel.status = 'open';
                    setTimeout(function() {
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }, 100);
                }, options.speed * 1000);
            } else {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: true
                });
                if (eventData.isCancelled === true) return;
                // check if size changed
                w2panel.status = 'opening';
                if (typeof old_options != 'undefined') {
                    if (!old_options.maximized && (old_options['width'] !== options['width'] || old_options['height'] !== options['height'])) {
                        w2panel.resize({
                            width: options.width,
                            height: options.height
                        });
                    }
                    options.prevSize = options.width + 'px:' + options.height + 'px';
                    options.maximized = old_options.maximized;
                }
                // show new items
                var body = $('#' + obj.name + 'w2ui-window .w2ui-box2 > .w2ui-msg-body').html(options.body);
                if (body.length > 0) body[0].style.cssText = options.style;
                if (options.buttons !== '') {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-buttons').show().html(options.buttons);
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').removeClass('w2ui-msg-no-buttons');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('bottom', '');
                } else {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-buttons').hide().html('');
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').addClass('w2ui-msg-no-buttons');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('bottom', '0px');
                }
                if (options.title !== '') {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-title').show().html(
                        (options.showClose ? '<div class="w2ui-msg-button w2ui-msg-close" onmousedown="event.stopPropagation()" onclick="w2panel.close()">Close</div>' : '') +
                        (options.showMax ? '<div class="w2ui-msg-button w2ui-msg-max" onmousedown="event.stopPropagation()" onclick="w2panel.toggle()">Max</div>' : '') +
                        options.title);
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').removeClass('w2ui-msg-no-title');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('top', '');
                } else {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-title').hide().html('');
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').addClass('w2ui-msg-no-title');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('top', '0px');
                }
                // transition
                var div_old = $('#' + obj.name + 'w2ui-window .w2ui-box1')[0];
                var div_new = $('#' + obj.name + 'w2ui-window .w2ui-box2')[0];
                w2utils.transition(div_old, div_new, options.transition);
                div_new.className = 'w2ui-box1';
                div_old.className = 'w2ui-box2';
                $(div_new).addClass('w2ui-current-box');
                // remove max state
                $('#' + obj.name + 'w2ui-window').data('prev-size', null);
                // call event onChange
                setTimeout(function() {
                    w2panel.status = 'open';
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, 100);

            }
            // save new options
            options._last_w2ui_name = w2utils.keyboard.active();
            w2utils.keyboard.clear();
            // keyboard events
            if (options.keyboard) $(document).on('keydown', this.keydown);

            // initialize move and resize
            var tmp = {
                resizing: false,
                mvMove: mvMove,
                mvStop: mvStop,
                rsExpand: rsExpand,
                rsStop: rsStop
            };
            $('#' + obj.name + 'w2ui-window').on('click', function(event) {
                if (!obj.isActive) {
                    w2panel.setActive(obj.name);
                }
            });
            $('#' + obj.name + 'w2ui-window .w2ui-msg-title').on('mousedown', function(event) {
                // w2panel.setActive(obj.name);
                if (!w2panel.get().maximized && !w2panel.get().minimized) mvStart(event);
            });

            $('#' + obj.name + 'w2ui-window .w2panel-resizer').on('mousedown', function(event) {
                if (!w2panel.get().maximized && !w2panel.get().minimized) rsStart(event);
            });

            function rsStart(evnt) {
                if (!options.resizable) {
                    return;
                }
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }

                var el = $('#' + obj.name + 'w2ui-window');
                tmp.size_w = el.width();
                tmp.size_h = el.height();

                tmp.x = evnt.screenX;
                tmp.y = evnt.screenY;
                tmp.resizing = true;

                $(document).on('mousemove', tmp.rsExpand);
                $(document).on('mouseup', tmp.rsStop);
                if (evnt.stopPropagation) evnt.stopPropagation();
                else evnt.cancelBubble = true;
                if (evnt.preventDefault) evnt.preventDefault();
                else return false;
            }

            function rsExpand(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                tmp.div_w = tmp.size_w + evnt.screenX - tmp.x;
                tmp.div_h = tmp.size_h + evnt.screenY - tmp.y;
                $('#' + obj.name + 'w2ui-window').css({
                    'width': tmp.div_w,
                    'height': tmp.div_h
                });
                //var tmp_int = setInterval(function() {
                obj.resizeMessages();
                //}, 10);
            }

            function rsStop(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                w2panel.status = 'open';
                tmp.resizing = false;
                tmp.div_w = 0;
                tmp.div_h = 0;
                $(document).off('mousemove', tmp.rsExpand);
                $(document).off('mouseup', tmp.rsStop);
                if (!tmp.isLocked) {
                    w2panel.unlock();
                }
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) {
                        w2ui[name].resize();
                    }
                });
            }

            // handlers
            function mvStart(evnt) {
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                w2panel.status = 'moving';
                tmp.resizing = true;
                tmp.isLocked = $('#' + obj.name + 'w2ui-window > .w2ui-lock').length == 1 ? true : false;
                tmp.x = evnt.screenX;
                tmp.y = evnt.screenY;
                tmp.pos_x = $('#' + obj.name + 'w2ui-window').position().left;
                tmp.pos_y = $('#' + obj.name + 'w2ui-window').position().top;
                if (!tmp.isLocked) w2panel.lock({
                    opacity: 0
                });
                $(document).on('mousemove', tmp.mvMove);
                $(document).on('mouseup', tmp.mvStop);
                if (evnt.stopPropagation) evnt.stopPropagation();
                else evnt.cancelBubble = true;
                if (evnt.preventDefault) evnt.preventDefault();
                else return false;
            }

            function mvMove(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                tmp.div_x = evnt.screenX - tmp.x;
                tmp.div_y = evnt.screenY - tmp.y;
                $('#' + obj.name + 'w2ui-window').css(w2utils.cssPrefix({
                    'transition': 'none',
                    'transform': 'translate3d(' + tmp.div_x + 'px, ' + tmp.div_y + 'px, 0px)'
                }));
            }

            function mvStop(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                w2panel.status = 'open';
                tmp.div_x = (evnt.screenX - tmp.x);
                tmp.div_y = (evnt.screenY - tmp.y);
                $('#' + obj.name + 'w2ui-window').css({
                    'left': (tmp.pos_x + tmp.div_x) + 'px',
                    'top': (tmp.pos_y + tmp.div_y) + 'px'
                }).css(w2utils.cssPrefix({
                    'transition': 'none',
                    'transform': 'translate3d(0px, 0px, 0px)'
                }));
                tmp.resizing = false;
                $(document).off('mousemove', tmp.mvMove);
                $(document).off('mouseup', tmp.mvStop);
                if (!tmp.isLocked) w2panel.unlock();
            }
            if (!w2ui.panels) w2ui.panels = [];
            obj.isActive = true;
            obj.last_active = true;
            w2ui.panels.push(obj);
            w2panel.setActive(obj.name);
            if (obj.maximized) w2panel.max();
            return this;
        },

        action: function(e) {
            var el = $(e.currentTarget);
            var panelName = el.data('panel');
            var action = el.data('action');
            var panel = w2panel.setActive(panelName);
            switch (action) {
                case 'toggle':
                    w2panel.toggle(panel);
                    break;
                case 'close':
                    w2panel.destroy(panel.get());
                    break;
                case 'min':
                    // w2panel.lastFocus();
                    w2panel.minimize(panel);
                    break;
            }

        },
        customaction: function(e) {
            var el = $(e.currentTarget);
            var panelName = el.data('panel');
            var action = el.data('action');
            var panel = w2panel.setActive(panelName);
            panel.toolbarButtons.map(function(btn){
              if(btn.id === action){
                if(btn.click) btn.click(e);
              }
            });

        },

        keydown: function(event) {
            if ($('#w2ui-window').length > 0) {
                return; // we have a popup opened - it is suposed to be above - so it will handle the event
            }
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options');
            if (options && !options.keyboard) return;
            // trigger event
            var eventData = w2panel.trigger({
                phase: 'before',
                type: 'keydown',
                target: 'popup',
                options: options,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            switch (event.keyCode) {
                case 27:
                    event.preventDefault();
                    if ($('#' + obj.name + 'w2ui-window .w2ui-popup-message').length > 0) w2panel.message();
                    else w2panel.destroy();
                    break;
            }
            // event after
            w2panel.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        _getHighestIndex: function() {
            var highest_index = 1150;
            $(".w2ui-window").each(function() {
                // always use a radix when using parseInt
                var current_index = parseInt($(this).css("zIndex"), 10);
                if (current_index > current_index) {
                    highest_index = current_index;
                }
            });
            return highest_index;
        },

        focus: function(panel) {
            $(".w2ui-window").addClass('inactive');
            if (panel === 'none') {
                return;
            } else {
                var index_highest = w2panel._getHighestIndex();
                var index_current = parseInt($('#' + panel.name + 'w2ui-window').css('z-index'), 10);
                //add style and set index as highest
                $('#' + panel.name + 'w2ui-window').removeClass('inactive').css('z-index', index_highest + 1);
                // set the other under
                $(".w2ui-window").each(function() {
                    if ($(this).attr('id') !== panel.name + 'w2ui-window') {
                        var current_index = parseInt($(this).css("z-index"), 10);
                        $(this).css('z-index', (current_index - 1));
                    }
                });
            }

        },
        //public close function
        close: function() {
            event.preventDefault();
            var panelName = $(event.currentTarget).closest('.w2ui-window').attr('id').replace('w2ui-window', '');
            var panel = w2panel.setActive(panelName);
            w2panel.destroy(panel.get());
        },
        destroy: function(opts) {
            var obj;
            if (event && event.type === 'click') {
                var panelName = $(event.currentTarget).closest('.w2ui-window').attr('id').replace('w2ui-window', '');
                obj = w2panel.setActive(panelName);
            } else {
                obj = w2panel.getActive();
            }
            var options = $.extend({}, $('#' + obj.name + 'w2ui-window').data('options'), opts);
            if ($('#' + obj.name + 'w2ui-window').length === 0) return;
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'close',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'closing';
            $('#' + obj.name + 'w2ui-window')
                .css('opacity', '0')
                .css(w2utils.cssPrefix({
                    'transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                    'transform': 'scale(0.9)'
                }));
            w2panel.unlockScreen(options);
            setTimeout(function() {
                //revert to initial state
                if (options.preserveContent) {
                    $(options.body).appendTo('#parentTo' + obj.name);
                    $(options.body).unwrap();
                }
                $('#' + obj.name + 'w2ui-window').remove();
                w2ui.panels.splice(w2ui.panels.indexOf(obj), 1);
                w2panel.status = 'closed';
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                w2panel.lastFocus();
            }, options.speed * 1000);
            // restore active

            w2utils.keyboard.active(options._last_w2ui_name, {});
            // remove keyboard events
            if (options.keyboard) $(document).off('keydown', obj.keydown);
        },
        destroyAll: function(callBack) {
            for (var i in w2ui.panels) {
                var obj = w2ui.panels[i];
                var options = $.extend({}, $('#' + obj.name + 'w2ui-window').data('options'), {});
                if ($('#' + obj.name + 'w2ui-window').length === 0) return;
                // trigger event
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'close',
                    target: 'popup',
                    options: options
                });
                if (eventData.isCancelled === true) return;
                // default behavior
                w2panel.status = 'closing';
                $('#' + obj.name + 'w2ui-window')
                    .css('opacity', '0')
                    .css(w2utils.cssPrefix({
                        'transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                        'transform': 'scale(0.9)'
                    }));
                w2panel.unlockScreen(options);
                setTimeout(function() {
                    //revert to initial state
                    if (options.preserveContent) {
                        $(options.body).appendTo('#parentTo' + obj.name);
                        $(options.body).unwrap();
                    }
                    $('#' + obj.name + 'w2ui-window').remove();
                    w2panel.status = 'closed';
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    if (i === w2ui.panels.length) {
                        callBack.call();
                    }
                }, options.speed * 1000);
                // restore active

                w2utils.keyboard.active(options._last_w2ui_name, {});
                // remove keyboard events
                if (options.keyboard) $(document).off('keydown', obj.keydown);
            }

        },
        toggle: function(panel) {
            var name = panel.get().name;
            var options = $('#' + name + 'w2ui-window').data('options') || {
                speed: 0.2
            };
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'toggle',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // defatul action
            if (options.maximized === true) w2panel.restoreMax();
            else w2panel.max();
            // event after
            setTimeout(function() {
                panel.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, (options.speed * 1000) + 50);
        },

        max: function() {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            if (options.maximized === true) return;


            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'max',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'resizing';
            if (options.minimized) { //remove it from taskbar
                $('#' + obj.name + 'w2ui-window').appendTo('body');
                options.minimized = false;
            } else {
                options.prevPosition = $('#' + obj.name + 'w2ui-window').css('top') + ':' + $('#' + obj.name + 'w2ui-window').css('left');
                options.prevSize = $('#' + obj.name + 'w2ui-window').css('width') + ':' + $('#' + obj.name + 'w2ui-window').css('height');
            }
            // do resize
            w2panel.resize({
                width: 10000,
                height: 10000
            }, function() {
                w2panel.status = 'open';
                options.maximized = true;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                // resize gird, form, layout inside popup
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) w2ui[name].resize();
                });
            });
        },

        minimize: function(panel) {
            var obj = panel;
            if (!obj.isActive) return;
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'min',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            if (options.minimized === true) {
                w2panel.restoreMin();
            } else {
                w2panel.status = 'minimizing';
                if (options.maximized) {
                    options.maximized = false;
                } else {
                    options.prevSize = $('#' + obj.name + 'w2ui-window').css('width') + ':' + $('#' + obj.name + 'w2ui-window').css('height');
                    options.prevPosition = $('#' + obj.name + 'w2ui-window').css('top') + ':' + $('#' + obj.name + 'w2ui-window').css('left');
                }

                w2panel.resize({
                    width: 150,
                    height: 25
                }, function() {
                    $('#' + obj.name + 'w2ui-window').appendTo($('#w2taskbar-container'));
                    w2panel.status = 'open';
                    options.minimized = true;
                    w2panel.lastFocus();
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));

                });
            }

        },

        restoreMax: function() {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            if (options.maximized !== true) return;
            //TODO Check if maximized from mimized and backwards - we have to restore to original size
            var size = options.prevSize.split(':');
            var pos = options.prevPosition.split(':');

            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'restore',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'resizing';
            // do resize
            w2panel.resize({
                width: parseInt(size[0]),
                height: parseInt(size[1]),
                top: parseInt(pos[0]),
                left: parseInt(pos[1])
            }, function() {
                w2panel.status = 'open';
                options.maximized = false;
                options.prevSize = null;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));

                // resize gird, form, layout inside popup
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) w2ui[name].resize();
                });
            });
        },
        restoreMin: function() {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            if (options.minimized !== true) return;
            //TODO Check if maximized from mimized and backwards - we have to restore to original size
            var size = options.prevSize.split(':');
            var pos = options.prevPosition.split(':');
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'restore',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'resizing';
            // do resize
            if (options.minimized)
                $('#' + obj.name + 'w2ui-window').appendTo('body');
            w2panel.resize({
                width: parseInt(size[0]),
                height: parseInt(size[1]),
                top: parseInt(pos[0]),
                left: parseInt(pos[1])
            }, function() {
                w2panel.status = 'open';
                options.minimized = false;
                options.prevSize = null;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));

                // resize gird, form, layout inside popup
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) w2ui[name].resize();
                });
            });
        },
        get: function() {
            var panels = $.grep(w2ui.panels, function(panel) {
                return panel.isActive;
            });
            var obj = panels[0];
            return $('#' + obj.name + 'w2ui-window').data('options');
        },

        set: function(options) {
            w2panel.open(options);
        },

        getActive: function() {
            var panels = $.grep(w2ui.panels, function(panel) {
                return panel.isActive;
            });
            if (panels.length > 0) {
                return panels[0];
            }

        },

        // if (w2ui.panels[i]).isActive) {
        //
        lastFocus: function() {
            var index_highest = 0,
                el;
            // more effective to have a class for the div you want to search and
            // pass that to your selector
            $(".w2ui-window").each(function() {
                // always use a radix when using parseInt
                var index_current = parseInt($(this).css("zIndex"), 10);
                if (index_current > index_highest) {
                    el = $(this);
                }
            });
            if (el) {
                var elName = el.attr('id').replace('w2ui-window', '');
                w2panel.setActive(elName);
            }
        },
        setActive: function(panelName) {
            var panel;
            if (w2ui.panels.length > 0) {
                for (var i in w2ui.panels) {
                    if (w2ui.panels[i].name === panelName) {
                        w2ui.panels[i].isActive = true;
                        panel = w2ui.panels[i];
                        w2panel.focus(panel);
                    } else {
                        if (w2ui.panels[i].isActive) {
                            w2ui.panels[i].isActive = false;
                        }
                    }
                }
            }
            return panel;


        },
        clear: function() {
            var obj = w2panel.getActive();
            $('#' + obj.name + 'w2ui-window .w2ui-msg-title').html('');
            $('#' + obj.name + 'w2ui-window .w2ui-msg-body').html('');
            $('#' + obj.name + 'w2ui-window .w2ui-msg-buttons').html('');
        },

        reset: function() {
            w2panel.open(w2panel.defaults);
        },

        load: function(options) {
            w2panel.status = 'loading';
            if (String(options.url) == 'undefined') {
                console.log('ERROR: The url parameter is empty.');
                return;
            }
            var tmp = String(options.url).split('#');
            var url = tmp[0];
            var selector = tmp[1];
            if (String(options) == 'undefined') options = {};
            // load url
            var html = $('#' + options.name + 'w2ui-window').data(url);
            if (typeof html !== 'undefined' && html !== null) {
                popup(html, selector);
            } else {
                $.get(url, function(data, status, obj) { // should always be $.get as it is template
                    popup(obj.responseText, selector);
                    $('#' + options.name + 'w2ui-window').data(url, obj.responseText); // remember for possible future purposes
                });
            }

            function popup(html, selector) {
                delete options.url;
                $('body').append('<div id="w2ui-tmp' + options.name + '" style="display: none">' + html + '</div>');
                if (typeof selector != 'undefined' && $('#w2ui-tmp #' + selector).length > 0) {
                    $('#w2ui-tmp' + options.name + ' #' + selector).w2panel(options);
                } else {
                    $('#w2ui-tmp' + options.name).w2panel(options);
                }
                // link styles
                if ($('#w2ui-tmp' + options.name + ' > style').length > 0) {
                    var style = $('<div>').append($('#w2ui-tmp' + options.name + ' > style').clone()).html();
                    if ($('#' + options.name + 'w2ui-window #div-style').length == 0) {
                        $('#' + options.name + 'w2ui-window').append('<div id="div-style" style="position: absolute; left: -100; width: 1px"></div>');
                    }
                    $('#' + options.name + 'w2ui-window #div-style').html(style);
                }
                $('#w2ui-tmp' + options.name).remove();
            }
        },

        message: function(options) {
            var obj = w2panel.getActive();
            $().w2tag(); // hide all tags
            if (!options) options = {
                width: 200,
                height: 100
            };
            var pWidth = parseInt($('#' + obj.name + 'w2ui-window').width());
            var pHeight = parseInt($('#' + obj.name + 'w2ui-window').height());
            options.originalWidth = options.width;
            options.originalHeight = options.height;
            if (parseInt(options.width) < 10) options.width = 10;
            if (parseInt(options.height) < 10) options.height = 10;
            if (typeof options.hideOnClick == 'undefined') options.hideOnClick = false;
            var poptions = $('#' + obj.name + 'w2ui-window').data('options') || {};
            var titleHeight = parseInt($('#' + obj.name + 'w2ui-window > .w2ui-msg-title').css('height'));
            if (typeof options.width == 'undefined' || options.width > poptions.width - 10) {
                options.width = poptions.width - 10;
            }
            if (typeof options.height == 'undefined' || options.height > poptions.height - titleHeight - 5) {
                options.height = poptions.height - titleHeight - 5; // need margin from bottom only
            }
            // negative value means margin
            if (options.originalHeight < 0) options.height = pHeight + options.originalHeight - titleHeight;
            if (options.originalWidth < 0) options.width = pWidth + options.originalWidth * 2; // x 2 because there is left and right margin

            var head = $('#' + obj.name + 'w2ui-window .w2ui-msg-title');
            var msgCount = $('#' + obj.name + 'w2ui-window .w2ui-popup-message').length;
            // remove message
            if ($.trim(options.html) == '' && $.trim(options.body) == '' && $.trim(options.buttons) == '') {
                var $msg = $('#' + obj.name + 'w2ui-window #w2ui-message' + (msgCount - 1));
                var options = $msg.data('options') || {};
                $msg.css(w2utils.cssPrefix({
                    'transition': '0.15s',
                    'transform': 'translateY(-' + options.height + 'px)'
                }));
                if (msgCount == 1) {
                    w2panel.unlock(150);
                } else {
                    $('#' + obj.name + 'w2ui-window #w2ui-message' + (msgCount - 2)).css('z-index', 1500);
                }
                setTimeout(function() {
                    $msg.remove();
                    if (typeof options.onClose == 'function') options.onClose();
                }, 150);
            } else {
                if ($.trim(options.body) != '' || $.trim(options.buttons) != '') {
                    options.html = '<div class="w2ui-popup-message-body">' + options.body + '</div>' +
                        '<div class="w2ui-popup-message-buttons">' + options.buttons + '</div>';
                }
                // hide previous messages
                $('#' + obj.name + 'w2ui-window .w2ui-popup-message').css('z-index', 1390);
                head.css('z-index', 1501);
                // add message
                $('#' + obj.name + 'w2ui-window .w2ui-box1')
                    .before('<div id="w2ui-message' + msgCount + '" class="w2ui-popup-message" style="display: none; z-index: 1500; ' +
                        (head.length == 0 ? 'top: 0px;' : 'top: ' + w2utils.getSize(head, 'height') + 'px;') +
                        (typeof options.width != 'undefined' ? 'width: ' + options.width + 'px; left: ' + ((pWidth - options.width) / 2) + 'px;' : 'left: 10px; right: 10px;') +
                        (typeof options.height != 'undefined' ? 'height: ' + options.height + 'px;' : 'bottom: 6px;') +
                        w2utils.cssPrefix('transition', '.3s', true) + '"' +
                        (options.hideOnClick === true ? 'onclick="w2panel.message();"' : '') + '>' +
                        '</div>');
                $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).data('options', options);
                var display = $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css('display');
                $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css(w2utils.cssPrefix({
                    'transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)')
                }));
                if (display == 'none') {
                    $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).show().html(options.html);
                    // timer needs to animation
                    setTimeout(function() {
                        $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css(w2utils.cssPrefix({
                            'transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)')
                        }));
                    }, 1);
                    // timer for lock
                    if (msgCount == 0) w2panel.lock();
                    setTimeout(function() {
                        // has to be on top of lock
                        $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css(w2utils.cssPrefix({
                            'transition': '0s'
                        }));
                        if (typeof options.onOpen == 'function') options.onOpen();
                    }, 350);
                }
            }
        },

        lock: function(msg, showSpinner) {
            var obj = w2panel.getActive();
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift($('#' + obj.name + 'w2ui-window'));
            w2utils.lock.apply(window, args);
        },

        unlock: function(speed) {
            var obj = w2panel.getActive();
            w2utils.unlock($('#' + obj.name + 'w2ui-window'), speed);
        },

        // --- INTERNAL FUNCTIONS

        lockScreen: function(options) {
            if ($('#w2ui-lock').length > 0) return false;
            if (typeof options == 'undefined') options = $('#' + options.name + 'w2ui-window').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2panel.defaults, options);
            // show element
            $('body').append('<div id="w2ui-lock" ' +
                '    onmousewheel="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true; if (event.preventDefault) event.preventDefault(); else return false;"' +
                '    style="position: ' + (w2utils.engine == 'IE5' ? 'absolute' : 'fixed') + '; z-index: 1049; left: 0px; top: 0px; ' +
                '           padding: 0px; margin: 0px; background-color: ' + options.color + '; width: 100%; height: 100%; opacity: 0;"></div>');
            // lock screen
            setTimeout(function() {
                $('#w2ui-lock')
                    .css('opacity', options.opacity)
                    .css(w2utils.cssPrefix('transition', options.speed + 's opacity'));
            }, 1);
            // add events
            if (options.modal === true) {
                $('#w2ui-lock').on('mousedown', function() {
                    $('#w2ui-lock')
                        .css('opacity', '0.6')
                        .css(w2utils.cssPrefix('transition', '.1s'));
                });
                $('#w2ui-lock').on('mouseup', function() {
                    setTimeout(function() {
                        $('#w2ui-lock')
                            .css('opacity', options.opacity)
                            .css(w2utils.cssPrefix('transition', '.1s'));
                    }, 100);
                });
            } else {
                $('#w2ui-lock').on('mousedown', function() {
                    w2panel.destroy();
                });
            }
            return true;
        },

        unlockScreen: function(options) {
            if ($('#w2ui-lock').length == 0) return false;
            if (typeof options == 'undefined') options = $('#' + options.name + 'w2ui-window').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2panel.defaults, options);
            $('#w2ui-lock')
                .css('opacity', '0')
                .css(w2utils.cssPrefix('transition', options.speed + 's opacity'));
            setTimeout(function() {
                $('#w2ui-lock').remove();
            }, options.speed * 1000);
            return true;
        },

        resizeMessages: function() {
            var obj = this;
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            // see if there are messages and resize them
            $('#' + obj.name + 'w2ui-window .w2ui-popup-message').each(function() {
                var moptions = $(this).data('options');
                var $popup = $('#' + obj.name + 'w2ui-window');
                if (parseInt(moptions.width) < 10) moptions.width = 10;
                if (parseInt(moptions.height) < 10) moptions.height = 10;
                var titleHeight = parseInt($popup.find('> .w2ui-msg-title').css('height'));
                var pWidth = parseInt($popup.width());
                var pHeight = parseInt($popup.height());
                // recalc width
                moptions.width = moptions.originalWidth;
                if (moptions.width > pWidth - 10) {
                    moptions.width = pWidth - 10;
                }
                // recalc height
                moptions.height = moptions.originalHeight;
                if (moptions.height > pHeight - titleHeight - 5) {
                    moptions.height = pHeight - titleHeight - 5;
                }
                if (moptions.originalHeight < 0) moptions.height = pHeight + moptions.originalHeight - titleHeight;
                if (moptions.originalWidth < 0) moptions.width = pWidth + moptions.originalWidth * 2; // x 2 because there is left and right margin
                $(this).css({
                    left: ((pWidth - moptions.width) / 2) + 'px',
                    width: moptions.width + 'px',
                    height: moptions.height + 'px'
                });
            });
        },

        resize: function(matrix, callBack) {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            width = parseInt(matrix.width);
            height = parseInt(matrix.height);
            // calculate new position
            var top, left;
            if (matrix.top && matrix.left) {
                top = parseInt(matrix.top);
                left = parseInt(matrix.left);
            } else {
                if ($(window).width() - 10 < width) width = $(window).width() - 10;
                if ($(window).height() - 10 < height) height = $(window).height() - 10;
                top = ($(window).height() - height) / 2 * 0.8;
                left = ($(window).width() - width) / 2;
            }
            // resize there
            $('#' + obj.name + 'w2ui-window')
                .css(w2utils.cssPrefix({
                    'transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top'
                }))
                .css({
                    'top': top,
                    'left': left,
                    'width': width,
                    'height': height
                });
            var tmp_int = setInterval(function() {
                obj.resizeMessages();
            }, 10); // then messages resize nicely
            setTimeout(function() {
                clearInterval(tmp_int);
                options.width = width;
                options.height = height;
                obj.resizeMessages();
                if (typeof callBack == 'function') callBack();
            }, (options.speed * 1000) + 50); // give extra 50 ms
        }
    };

    // merge in event handling
    $.extend(w2panel, w2utils.event);

})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2tabs        - tabs widget
 *        - $().w2tabs    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - on overflow display << >>
 *
 ************************************************************************/

(function() {
    var w2tabs = function(options) {
        this.box = null; // DOM Element that holds the element
        this.name = null; // unique name for w2ui
        this.active = null;
        this.tabs = [];
        this.routeData = {}; // data for dynamic routes
        this.right = '';
        this.style = '';
        this.onClick = null;
        this.onClose = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;
        this.overflow = true;

        $.extend(this, {
            handlers: []
        });
        $.extend(true, this, w2obj.tabs, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2tabs = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2tabs')) return;
            // extend tabs
            var tabs = method.tabs || [];
            var object = new w2tabs(method);
            for (var i = 0; i < tabs.length; i++) {
                object.tabs[i] = $.extend({}, w2tabs.prototype.tab, tabs[i]);
            }
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            // register new object
            w2ui[object.name] = object;
            return object;
        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2tabs');
            return undefined;
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2tabs.prototype = {
        tab: {
            id: null, // command to be sent to all event handlers
            text: '',
            route: null,
            hidden: false,
            disabled: false,
            closable: false,
            hint: '',
            onClick: null,
            onRefresh: null,
            onClose: null
        },

        add: function(tab) {
            return this.insert(null, tab);
        },

        insert: function(id, tab) {
            if (!$.isArray(tab)) tab = [tab];
            // assume it is array
            for (var i = 0; i < tab.length; i++) {
                // checks
                if (typeof tab[i].id === 'undefined') {
                    console.log('ERROR: The parameter "id" is required but not supplied. (obj: ' + this.name + ')');
                    return;
                }
                if (!w2utils.checkUniqueId(tab[i].id, this.tabs, 'tabs', this.name)) return;
                // add tab
                var newTab = $.extend({}, w2tabs.prototype.tab, tab[i]);
                if (id === null || typeof id === 'undefined') {
                    this.tabs.push(newTab);
                } else {
                    var middle = this.get(id, true);
                    this.tabs = this.tabs.slice(0, middle).concat([newTab], this.tabs.slice(middle));
                }
                this.refresh(tab[i].id);
            }
        },

        remove: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab) return false;
                removed++;
                // remove from array
                this.tabs.splice(this.get(tab.id, true), 1);
                // remove from screen
                $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id)).remove();
            }
            return removed;
        },

        select: function(id) {
            if (this.active == id || this.get(id) === null) return false;
            this.active = id;
            this.refresh();
            return true;
        },

        set: function(id, tab) {
            var index = this.get(id, true);
            if (index === null) return false;
            $.extend(this.tabs[index], tab);
            this.refresh(id);
            return true;
        },

        get: function(id, returnIndex) {
            if (arguments.length === 0) {
                var all = [];
                for (var i1 = 0; i1 < this.tabs.length; i1++) {
                    if (this.tabs[i1].id != null) {
                        all.push(this.tabs[i1].id);
                    }
                }
                return all;
            } else {
                for (var i2 = 0; i2 < this.tabs.length; i2++) {
                    if (this.tabs[i2].id == id) { // need to be == since id can be numeric
                        return (returnIndex === true ? i2 : this.tabs[i2]);
                    }
                }
            }
            return null;
        },

        show: function() {
            var obj = this;
            var shown = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.hidden === false) continue;
                shown++;
                tab.hidden = false;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return shown;
        },

        hide: function() {
            var obj = this;
            var hidden = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.hidden === true) continue;
                hidden++;
                tab.hidden = true;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return hidden;
        },

        enable: function() {
            var obj = this;
            var enabled = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.disabled === false) continue;
                enabled++;
                tab.disabled = false;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return enabled;
        },

        disable: function() {
            var obj = this;
            var disabled = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.disabled === true) continue;
                disabled++;
                tab.disabled = true;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return disabled;
        },

        refresh: function(id) {
            var time = (new Date()).getTime();
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'refresh',
                target: (typeof id !== 'undefined' ? id : this.name),
                object: this.get(id)
            });
            if (eventData.isCancelled === true) return;
            if (typeof id === 'undefined') {
                // refresh all
                for (var i = 0; i < this.tabs.length; i++) this.refresh(this.tabs[i].id);
            } else {
                // create or refresh only one item
                var tab = this.get(id);
                if (tab === null) return false;
                if (typeof tab.caption !== 'undefined') tab.text = tab.caption;

                var jq_el = $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id));
                var tabHTML = (tab.closable ? '<div class="w2ui-tab-close" onclick="w2ui[\'' + this.name + '\'].animateClose(\'' + tab.id + '\', event);"></div>' : '') +
                    '    <div class="w2ui-tab' + (this.active === tab.id ? ' active' : '') + (tab.closable ? ' closable' : '') + '" ' +
                    '        title="' + (typeof tab.hint !== 'undefined' ? tab.hint : '') + '"' +
                    '        onclick="w2ui[\'' + this.name + '\'].click(\'' + tab.id + '\', event);">' + tab.text + '</div>';
                if (jq_el.length === 0) {
                    // does not exist - create it
                    var addStyle = '';
                    if (tab.hidden) {
                        addStyle += 'display: none;';
                    }
                    if (tab.disabled) {
                        addStyle += 'opacity: 0.2; -moz-opacity: 0.2; -webkit-opacity: 0.2; -o-opacity: 0.2; filter:alpha(opacity=20);';
                    }
                    var html = '<td id="tabs_' + this.name + '_tab_' + tab.id + '" style="' + addStyle + '" valign="middle">' + tabHTML + '</td>';
                    if (this.get(id, true) !== this.tabs.length - 1 && $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true)) + 1].id)).length > 0) {
                        $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true)) + 1].id)).before(html);
                    } else {
                        $(this.box).find('#tabs_' + this.name + '_right').before(html);
                    }
                } else {
                    // refresh
                    jq_el.html(tabHTML);
                    if (tab.hidden) {
                        jq_el.css('display', 'none');
                    } else {
                        jq_el.css('display', '');
                    }
                    if (tab.disabled) {
                        jq_el.css({
                            'opacity': '0.2',
                            '-moz-opacity': '0.2',
                            '-webkit-opacity': '0.2',
                            '-o-opacity': '0.2',
                            'filter': 'alpha(opacity=20)'
                        });
                    } else {
                        jq_el.css({
                            'opacity': '1',
                            '-moz-opacity': '1',
                            '-webkit-opacity': '1',
                            '-o-opacity': '1',
                            'filter': 'alpha(opacity=100)'
                        });
                    }
                }
            }
            // right html
            $('#tabs_' + this.name + '_right').html(this.right);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // var boxwidth = $(this.box).width() + 'px';
            // $('<div class="tabs-wrapper" style="width:' + boxwidth + ';overflow:auto"></div>').prependTo($(this.box));
            return (new Date()).getTime() - time;
        },

        render: function(box) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'render',
                target: this.name,
                box: box
            });
            if (eventData.isCancelled === true) return;
            // default action
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (typeof box !== 'undefined' && box !== null) {
                if ($(this.box).find('> table #tabs_' + this.name + '_right').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-tabs')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return false;
            // render all buttons
            var html = '<table cellspacing="0" cellpadding="1" width="100%">' +
                '    <tr><td width="100%" id="tabs_' + this.name + '_right" align="right">' + this.right + '</td></tr>' +
                '</table>';
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-tabs')
                .html(html);
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.refresh();
            return (new Date()).getTime() - time;
        },

        resize: function() {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name
            });
            if (eventData.isCancelled === true) return;

            // intentionaly blank

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'destroy',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            // clean up
            if ($(this.box).find('> table #tabs_' + this.name + '_right').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-tabs')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ===================================================
        // -- Internal Event Handlers

        click: function(id, event) {
            var tab = this.get(id);
            if (tab === null || tab.disabled) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'click',
                target: id,
                tab: tab,
                object: tab,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.active) + ' .w2ui-tab').removeClass('active');
            this.active = tab.id;
            // route processing
            if (tab.route) {
                var route = String('/' + tab.route).replace(/\/{2,}/g, '/');
                var info = w2utils.parseRoute(route);
                if (info.keys.length > 0) {
                    for (var k = 0; k < info.keys.length; k++) {
                        if (this.routeData[info.keys[k].name] == null) continue;
                        route = route.replace((new RegExp(':' + info.keys[k].name, 'g')), this.routeData[info.keys[k].name]);
                    }
                }
                setTimeout(function() {
                    window.location.hash = route;
                }, 1);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.refresh(id);
        },

        animateClose: function(id, event) {
            var tab = this.get(id);
            if (tab === null || tab.disabled) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'close',
                target: id,
                object: this.get(id),
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default action
            var obj = this;
            $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id)).css({
                '-webkit-transition': '.2s',
                '-moz-transition': '2s',
                '-ms-transition': '.2s',
                '-o-transition': '.2s',
                opacity: '0'
            });
            setTimeout(function() {
                var width = $(obj.box).find('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id)).width();
                $(obj.box).find('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id))
                    .html('<div style="width: ' + width + 'px; -webkit-transition: .2s; -moz-transition: .2s; -ms-transition: .2s; -o-transition: .2s"></div>');
                setTimeout(function() {
                    $(obj.box).find('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id)).find(':first-child').css({
                        'width': '0px'
                    });
                }, 50);
            }, 200);
            setTimeout(function() {
                obj.remove(id);
            }, 450);
            // event before
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.refresh();
        },

        animateInsert: function(id, tab) {
            if (this.get(id) === null) return;
            if (!$.isPlainObject(tab)) return;
            // check for unique
            if (!w2utils.checkUniqueId(tab.id, this.tabs, 'tabs', this.name)) return;
            // insert simple div
            var jq_el = $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id));
            if (jq_el.length !== 0) return; // already exists
            // measure width
            if (typeof tab.caption !== 'undefined') tab.text = tab.caption;
            var tmp = '<div id="_tmp_tabs" class="w2ui-reset w2ui-tabs" style="position: absolute; top: -1000px;">' +
                '<table cellspacing="0" cellpadding="1" width="100%"><tr>' +
                '<td id="_tmp_simple_tab" style="" valign="middle">' +
                (tab.closable ? '<div class="w2ui-tab-close"></div>' : '') +
                '    <div class="w2ui-tab ' + (this.active === tab.id ? 'active' : '') + '">' + tab.text + '</div>' +
                '</td></tr></table>' +
                '</div>';
            $('body').append(tmp);
            // create dummy element
            var tabHTML = '<div style="width: 1px; -webkit-transition: 0.2s; -moz-transition: 0.2s; -ms-transition: 0.2s; -o-transition: 0.2s;">&nbsp;</div>';
            var addStyle = '';
            if (tab.hidden) {
                addStyle += 'display: none;';
            }
            if (tab.disabled) {
                addStyle += 'opacity: 0.2; -moz-opacity: 0.2; -webkit-opacity: 0.2; -o-opacity: 0.2; filter:alpha(opacity=20);';
            }
            var html = '<td id="tabs_' + this.name + '_tab_' + tab.id + '" style="' + addStyle + '" valign="middle">' + tabHTML + '</td>';
            if (this.get(id, true) !== this.tabs.length && $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true))].id)).length > 0) {
                $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true))].id)).before(html);
            } else {
                $(this.box).find('#tabs_' + this.name + '_right').before(html);
            }
            // -- move
            var obj = this;
            setTimeout(function() {
                var width = $('#_tmp_simple_tab').width();
                $('#_tmp_tabs').remove();
                $('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id) + ' > div').css('width', width + 'px');
            }, 1);
            setTimeout(function() {
                // insert for real
                obj.insert(id, tab);
            }, 200);
        }
    };

    $.extend(w2tabs.prototype, w2utils.event);
    w2obj.tabs = w2tabs;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2toolbar        - toolbar widget
 *        - $().w2toolbar    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - on overflow display << >>
 *   - verticle toolbar
 *
 ************************************************************************/

(function() {
    var w2toolbar = function(options) {
        this.box = null; // DOM Element that holds the element
        this.name = null; // unique name for w2ui
        this.routeData = {}; // data for dynamic routes
        this.items = [];
        this.right = ''; // HTML text on the right of toolbar
        this.onClick = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;

        $.extend(true, this, w2obj.toolbar, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2toolbar = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2toolbar')) return;
            // extend items
            var items = method.items || [];
            var object = new w2toolbar(method);
            $.extend(object, {
                items: [],
                handlers: []
            });
            for (var i = 0; i < items.length; i++) {
                object.items[i] = $.extend({}, w2toolbar.prototype.item, items[i]);
            }
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            // register new object
            w2ui[object.name] = object;
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2toolbar');
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2toolbar.prototype = {
        item: {
            id: null, // command to be sent to all event handlers
            type: 'button', // button, check, radio, drop, menu, break, html, spacer
            text: '',
            route: null, // if not null, it is route to go
            html: '',
            img: null,
            icon: null,
            count: null,
            hidden: false,
            disabled: false,
            checked: false, // used for radio buttons
            arrow: true, // arrow down for drop/menu types
            hint: '',
            group: null, // used for radio buttons
            items: null, // for type menu it is an array of items in the menu
            overlay: {},
            onClick: null
        },

        add: function(items) {
            this.insert(null, items);
        },

        insert: function(id, items) {
            if (!$.isArray(items)) items = [items];
            for (var o = 0; o < items.length; o++) {
                // checks
                if (typeof items[o].type === 'undefined') {
                    console.log('ERROR: The parameter "type" is required but not supplied in w2toolbar.add() method.');
                    return;
                }
                if ($.inArray(String(items[o].type), ['button', 'check', 'radio', 'drop', 'menu', 'break', 'html', 'spacer']) === -1) {
                    console.log('ERROR: The parameter "type" should be one of the following [button, check, radio, drop, menu, break, html, spacer] ' +
                        'in w2toolbar.add() method.');
                    return;
                }
                if (typeof items[o].id === 'undefined') {
                    console.log('ERROR: The parameter "id" is required but not supplied in w2toolbar.add() method.');
                    return;
                }
                if (!w2utils.checkUniqueId(items[o].id, this.items, 'toolbar items', this.name)) return;
                // add item
                var it = $.extend({}, w2toolbar.prototype.item, items[o]);
                if (id == null) {
                    this.items.push(it);
                } else {
                    var middle = this.get(id, true);
                    this.items = this.items.slice(0, middle).concat([it], this.items.slice(middle));
                }
                this.refresh(it.id);
            }
        },

        remove: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                removed++;
                // remove from screen
                $(this.box).find('#tb_' + this.name + '_item_' + w2utils.escapeId(it.id)).remove();
                // remove from array
                var ind = this.get(it.id, true);
                if (ind) this.items.splice(ind, 1);
            }
            return removed;
        },

        set: function(id, item) {
            var index = this.get(id, true);
            if (index === null) return false;
            $.extend(this.items[index], item);
            this.refresh(id);
            return true;
        },

        get: function(id, returnIndex) {
            if (arguments.length === 0) {
                var all = [];
                for (var i1 = 0; i1 < this.items.length; i1++)
                    if (this.items[i1].id !== null) all.push(this.items[i1].id);
                return all;
            }
            for (var i2 = 0; i2 < this.items.length; i2++) {
                if (this.items[i2].id === id) {
                    if (returnIndex === true) return i2;
                    else return this.items[i2];
                }
            }
            return null;
        },

        show: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.hidden = false;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        hide: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.hidden = true;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        /**
         * modified : to enable and disable menu items recursevly
         * usage: Pass an array as param , first item: menu item id, second item: menu parent id
         */

        enable: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) {
                    if (typeof arguments[a] == 'object') {
                        var menu = this.get(arguments[a][1]);
                        if (menu.type === 'menu') {
                            for (var x = 0; x < menu.items.length; x++) {
                                var ix = menu.items[x];
                                if (!ix || ix.id !== arguments[a][0]) continue;
                                items++;
                                ix.disabled = false;
                                tmp.push(ix.id);
                            }
                        }
                        continue;
                    } else {
                        continue;
                    }
                    continue;
                }

                items++;
                it.disabled = false;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },
        disable: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) {
                    if (typeof arguments[a] == 'object') {
                        var menu = this.get(arguments[a][1]);
                        if (menu.type === 'menu') {
                            for (var x = 0; x < menu.items.length; x++) {
                                var ix = menu.items[x];
                                if (!ix || ix.id !== arguments[a][0]) continue;
                                items++;
                                ix.disabled = true;
                                tmp.push(ix.id);
                            }
                        }
                        continue;
                    } else {
                        continue;
                    }
                    continue;
                }

                items++;
                it.disabled = true;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        // enable: function() {
        //     var obj = this;
        //     var items = 0;
        //     var tmp = [];
        //     for (var a = 0; a < arguments.length; a++) {
        //         var it = this.get(arguments[a]);
        //         if (!it) continue;
        //         items++;
        //         it.disabled = false;
        //         tmp.push(it.id);
        //     }
        //     setTimeout(function() {
        //         for (var t in tmp) obj.refresh(tmp[t]);
        //     }, 15); // needs timeout 
        //     return items;
        // },

        // disable: function() {
        //     var obj = this;
        //     var items = 0;
        //     var tmp = [];
        //     for (var a = 0; a < arguments.length; a++) {
        //         var it = this.get(arguments[a]);
        //         if (!it) continue;
        //         items++;
        //         it.disabled = true;
        //         tmp.push(it.id);
        //     }
        //     setTimeout(function() {
        //         for (var t in tmp) obj.refresh(tmp[t]);
        //     }, 15); // needs timeout 
        //     return items;
        // },

        check: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.checked = true;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        uncheck: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.checked = false;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        render: function(box) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'render',
                target: this.name,
                box: box
            });
            if (eventData.isCancelled === true) return;

            if (box != null) {
                if ($(this.box).find('> table #tb_' + this.name + '_right').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-toolbar')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return;
            // render all buttons
            var html = '<table cellspacing="0" cellpadding="0" width="100%">' +
                '<tr>';
            for (var i = 0; i < this.items.length; i++) {
                var it = this.items[i];
                if (it.id == null) it.id = "item_" + i;
                if (it === null) continue;
                if (it.type === 'spacer') {
                    html += '<td width="100%" id="tb_' + this.name + '_item_' + it.id + '" align="right"></td>';
                } else {
                    html += '<td id="tb_' + this.name + '_item_' + it.id + '" style="' + (it.hidden ? 'display: none' : '') + '" ' +
                        '    class="' + (it.disabled ? 'disabled' : '') + '" valign="middle">' + this.getItemHTML(it) +
                        '</td>';
                }
            }
            html += '<td width="100%" id="tb_' + this.name + '_right" align="right">' + this.right + '</td>';
            html += '</tr>' +
                '</table>';
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-toolbar')
                .html(html);
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        refresh: function(id) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'refresh',
                target: (typeof id !== 'undefined' ? id : this.name),
                item: this.get(id)
            });
            if (eventData.isCancelled === true) return;

            if (id == null) {
                // refresh all
                for (var i = 0; i < this.items.length; i++) {
                    var it1 = this.items[i];
                    if (it1.id == null) it1.id = "item_" + i;
                    this.refresh(it1.id);
                }
            }
            // create or refresh only one item
            var it = this.get(id);
            if (it === null) return false;

            var el = $(this.box).find('#tb_' + this.name + '_item_' + w2utils.escapeId(it.id));
            var html = this.getItemHTML(it);
            if (el.length === 0) {
                // does not exist - create it
                if (it.type === 'spacer') {
                    html = '<td width="100%" id="tb_' + this.name + '_item_' + it.id + '" align="right"></td>';
                } else {
                    html = '<td id="tb_' + this.name + '_item_' + it.id + '" style="' + (it.hidden ? 'display: none' : '') + '" ' +
                        '    class="' + (it.disabled ? 'disabled' : '') + '" valign="middle">' + html +
                        '</td>';
                }
                if (this.get(id, true) === this.items.length - 1) {
                    $(this.box).find('#tb_' + this.name + '_right').before(html);
                } else {
                    $(this.box).find('#tb_' + this.name + '_item_' + w2utils.escapeId(this.items[parseInt(this.get(id, true)) + 1].id)).before(html);
                }
            } else {
                // refresh
                el.html(html);
                if (it.hidden) {
                    el.css('display', 'none');
                } else {
                    el.css('display', '');
                }
                if (it.disabled) {
                    el.addClass('disabled');
                } else {
                    el.removeClass('disabled');
                }
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        resize: function() {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name
            });
            if (eventData.isCancelled === true) return;

            // intentionaly blank

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'destroy',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            // clean up
            if ($(this.box).find('> table #tb_' + this.name + '_right').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-toolbar')
                    .html('');
            }
            $(this.box).html('').remove();
            delete w2ui[this.name];
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ========================================
        // --- Internal Functions

        getItemHTML: function(item) {
            var html = '';

            if (typeof item.caption !== 'undefined') item.text = item.caption;
            if (typeof item.hint === 'undefined') item.hint = '';
            if (typeof item.text === 'undefined') item.text = '';

            switch (item.type) {
                case 'menu':
                case 'button':
                case 'check':
                case 'radio':
                case 'drop':
                    var img = '<td>&nbsp;</td>';
                    if (item.img) img = '<td><div class="w2ui-tb-image w2ui-icon ' + item.img + '"></div></td>';
                    if (item.icon) img = '<td><div class="w2ui-tb-image"><span class="' + item.icon + '"></span></div></td>';
                    html += '<table cellpadding="0" cellspacing="0" title="' + item.hint + '" class="w2ui-button ' + (item.checked ? 'checked' : '') + '" ' +
                        '       onclick     = "var el=w2ui[\'' + this.name + '\']; if (el) el.click(\'' + item.id + '\', event);" ' +
                        '       onmouseover = "' + (!item.disabled ? "$(this).addClass('over');" + (item.submenu ? "var el=w2ui[\"" + this.name + "\"]; if (el) el.openSubmenu(\"" + item.id + "\", event);" : "") : "") + '"' +
                        '       onmouseout  = "' + (!item.disabled ? "$(this).removeClass('over').removeClass('down');" : "") + '"' +
                        '       onmousedown = "' + (!item.disabled ? "$(this).addClass('down');" : "") + '"' +
                        '       onmouseup   = "' + (!item.disabled ? "$(this).removeClass('down');" : "") + '"' +
                        '>' +
                        '<tr><td>' +
                        '  <table cellpadding="1" cellspacing="0">' +
                        '  <tr>' +
                        img +
                        (item.text !== '' ? '<td class="w2ui-tb-caption" nowrap>' + item.text + '</td>' : '') +
                        (item.count != null ? '<td class="w2ui-tb-count" nowrap><span>' + item.count + '</span></td>' : '') +
                        (((item.type === 'drop' || item.type === 'menu') && item.arrow !== false) ?
                            '<td class="w2ui-tb-down" nowrap><div></div></td>' : '') +
                        '  </tr></table>' +
                        '</td></tr></table>';
                    break;

                case 'break':
                    html += '<table cellpadding="0" cellspacing="0"><tr>' +
                        '    <td><div class="w2ui-break">&nbsp;</div></td>' +
                        '</tr></table>';
                    break;

                case 'html':
                    html += '<table cellpadding="0" cellspacing="0"><tr>' +
                        '    <td nowrap>' + item.html + '</td>' +
                        '</tr></table>';
                    break;
            }

            var newHTML = '';
            if (typeof item.onRender === 'function') newHTML = item.onRender.call(this, item.id, html);
            if (typeof this.onRender === 'function') newHTML = this.onRender(item.id, html);
            if (newHTML !== '' && newHTML != null) html = newHTML;
            return html;
        },
        openSubmenu: function(el, event) {
            alert(el);
        },

        menuClick: function(event) {
            var obj = this;
            if (event.item && !event.item.disabled) {
                // event before
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'click',
                    target: event.item.id + ':' + event.subItem.id,
                    item: event.item,
                    subItem: event.subItem,
                    originalEvent: event.originalEvent
                });
                if (eventData.isCancelled === true) return;

                // route processing
                var it = event.subItem;
                if (it.route) {
                    var route = String('/' + it.route).replace(/\/{2,}/g, '/');
                    var info = w2utils.parseRoute(route);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            if (obj.routeData[info.keys[k].name] == null) continue;
                            route = route.replace((new RegExp(':' + info.keys[k].name, 'g')), this.routeData[info.keys[k].name]);
                        }
                    }
                    setTimeout(function() {
                        window.location.hash = route;
                    }, 1);
                }

                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        click: function(id, event) {
            var obj = this;
            var it = this.get(id);
            if (it && !it.disabled) {
                // event before
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'click',
                    target: (typeof id !== 'undefined' ? id : this.name),
                    item: it,
                    object: it,
                    originalEvent: event
                });
                if (eventData.isCancelled === true) return;

                var btn = $('#tb_' + this.name + '_item_' + w2utils.escapeId(it.id) + ' table.w2ui-button');
                btn.removeClass('down');

                if (it.type === 'radio') {
                    for (var i = 0; i < this.items.length; i++) {
                        var itt = this.items[i];
                        if (itt == null || itt.id === it.id || itt.type !== 'radio') continue;
                        if (itt.group === it.group && itt.checked) {
                            itt.checked = false;
                            this.refresh(itt.id);
                        }
                    }
                    it.checked = true;
                    btn.addClass('checked');
                }

                if (it.type === 'drop' || it.type === 'menu') {
                    if (it.checked) {
                        // if it was already checked, second click will hide it
                        it.checked = false;
                    } else {
                        // show overlay
                        setTimeout(function() {
                            var el = $('#tb_' + obj.name + '_item_' + w2utils.escapeId(it.id));
                            if (!$.isPlainObject(it.overlay)) it.overlay = {};
                            var left = (el.width() - 50) / 2;
                            if (left > 19) left = 19;
                            if (it.type === 'drop') {
                                el.w2overlay(it.html, $.extend({
                                    left: left,
                                    top: 3
                                }, it.overlay));
                            }
                            if (it.type === 'menu') {
                                el.w2menu(it.items, $.extend({
                                    left: left,
                                    top: 3
                                }, it.overlay, {
                                    select: function(event) {
                                        obj.menuClick({
                                            item: it,
                                            subItem: event.item,
                                            originalEvent: event.originalEvent
                                        });
                                        hideDrop();
                                    }
                                }));
                            }
                            // window.click to hide it
                            $(document).on('click', hideDrop);

                            function hideDrop() {
                                $(document).off('click', hideDrop);
                                it.checked = false;
                                btn.removeClass('checked');
                            }
                        }, 1);
                    }
                }

                if (it.type === 'check' || it.type === 'drop' || it.type === 'menu') {
                    it.checked = !it.checked;
                    if (it.checked) {
                        btn.addClass('checked');
                    } else {
                        btn.removeClass('checked');
                    }
                }
                // route processing
                if (it.route) {
                    var route = String('/' + it.route).replace(/\/{2,}/g, '/');
                    var info = w2utils.parseRoute(route);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            route = route.replace((new RegExp(':' + info.keys[k].name, 'g')), this.routeData[info.keys[k].name]);
                        }
                    }
                    setTimeout(function() {
                        window.location.hash = route;
                    }, 1);
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        }
    };

    $.extend(w2toolbar.prototype, w2utils.event);
    w2obj.toolbar = w2toolbar;
})();

/************************************************************************
*   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
*   - Following objects defined
*        - w2sidebar        - sidebar widget
*        - $().w2sidebar    - jQuery wrapper
*   - Dependencies: jQuery, w2utils
*
* == NICE TO HAVE ==
*   - return ids of all subitems
*   - add find() method to find nodes by a specific criteria (I want all nodes for exampe)
*   - dbl click should be like it is in grid (with timer not HTML dbl click event)
*   - reorder with grag and drop
*   - add route property that would navigate to a #route
*   - node.style is missleading - should be there to apply color for example
*
************************************************************************/

(function () {
    var w2sidebar = function (options) {
        this.name          = null;
        this.box           = null;
        this.sidebar       = null;
        this.parent        = null;
        this.nodes         = [];        // Sidebar child nodes
        this.menu          = [];
        this.routeData     = {};        // data for dynamic routes
        this.selected      = null;      // current selected node (readonly)
        this.img           = null;
        this.icon          = null;
        this.style         = '';
        this.topHTML       = '';
        this.bottomHTML    = '';
        this.keyboard      = true;
        this.onClick       = null;      // Fire when user click on Node Text
        this.onDblClick    = null;      // Fire when user dbl clicks
        this.onContextMenu = null;
        this.onMenuClick   = null;      // when context menu item selected
        this.onExpand      = null;      // Fire when node Expands
        this.onCollapse    = null;      // Fire when node Colapses
        this.onKeydown     = null;
        this.onRender      = null;
        this.onRefresh     = null;
        this.onResize      = null;
        this.onDestroy     = null;

        $.extend(true, this, w2obj.sidebar, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2sidebar = function(method) {
        if (typeof method === 'object' || !method ) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2sidebar')) return;
            // extend items
            var nodes  = method.nodes;
            var object = new w2sidebar(method);
            $.extend(object, { handlers: [], nodes: [] });
            if (typeof nodes != 'undefined') {
                object.add(object, nodes);
            }
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            object.sidebar = object;
            // register new object
            w2ui[object.name] = object;
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' +  method + ' does not exist on jQuery.w2sidebar' );
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2sidebar.prototype = {

        node: {
            id              : null,
            text            : '',
            count           : null,
            img             : null,
            icon            : null,
            nodes           : [],
            style           : '',            // additional style for subitems
            route           : null,
            selected        : false,
            expanded        : false,
            hidden          : false,
            disabled        : false,
            group           : false,        // if true, it will build as a group
            groupShowHide   : true,
            plus            : false,        // if true, plus will be shown even if there is no sub nodes
            // events
            onClick         : null,
            onDblClick      : null,
            onContextMenu   : null,
            onExpand        : null,
            onCollapse      : null,
            // internal
            parent          : null,    // node object
            sidebar         : null
        },

        add: function (parent, nodes) {
            if (arguments.length == 1) {
                // need to be in reverse order
                nodes  = arguments[0];
                parent = this;
            }
            if (typeof parent == 'string') parent = this.get(parent);
            return this.insert(parent, null, nodes);
        },

        insert: function (parent, before, nodes) {
            var txt, ind, tmp, node, nd;
            if (arguments.length == 2) {
                // need to be in reverse order
                nodes  = arguments[1];
                before = arguments[0];
                ind    = this.get(before);
                if (ind === null) {
                    if (!$.isArray(nodes)) nodes = [nodes];
                    txt = (nodes[0].caption != null ? nodes[0].caption : nodes[0].text);
                    console.log('ERROR: Cannot insert node "'+ txt +'" because cannot find node "'+ before +'" to insert before.');
                    return null;
                }
                parent = this.get(before).parent;
            }
            if (typeof parent == 'string') parent = this.get(parent);
            if (!$.isArray(nodes)) nodes = [nodes];
            for (var o in nodes) {
                node = nodes[o];
                if (typeof node.id == null) {
                    txt = (node.caption != null ? node.caption : node.text);
                    console.log('ERROR: Cannot insert node "'+ txt +'" because it has no id.');
                    continue;
                }
                if (this.get(this, node.id) !== null) {
                    txt = (node.caption != null ? node.caption : node.text);
                    console.log('ERROR: Cannot insert node with id='+ node.id +' (text: '+ txt + ') because another node with the same id already exists.');
                    continue;
                }
                tmp = $.extend({}, w2sidebar.prototype.node, node);
                tmp.sidebar = this;
                tmp.parent  = parent;
                nd = tmp.nodes || [];
                tmp.nodes = []; // very important to re-init empty nodes array
                if (before === null) { // append to the end
                    parent.nodes.push(tmp);
                } else {
                    ind = this.get(parent, before, true);
                    if (ind === null) {
                        txt = (node.caption != null ? node.caption : node.text);
                        console.log('ERROR: Cannot insert node "'+ txt +'" because cannot find node "'+ before +'" to insert before.');
                        return null;
                }
                    parent.nodes.splice(ind, 0, tmp);
                }
                if (nd.length > 0) {
                    this.insert(tmp, null, nd);
                }
            }
            this.refresh(parent.id);
            return tmp;
        },

        remove: function () { // multiple arguments
            var deleted = 0;
            var tmp;
            for (var a = 0; a < arguments.length; a++) {
                tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                if (this.selected !== null && this.selected === tmp.id) {
                    this.selected = null;
                }
                var ind  = this.get(tmp.parent, arguments[a], true);
                if (ind === null) continue;
                if (tmp.parent.nodes[ind].selected)    tmp.sidebar.unselect(tmp.id);
                tmp.parent.nodes.splice(ind, 1);
                deleted++;
            }
            if (deleted > 0 && arguments.length == 1) this.refresh(tmp.parent.id); else this.refresh();
            return deleted;
        },

        set: function (parent, id, node) {
            if (arguments.length == 2) {
                // need to be in reverse order
                node    = id;
                id        = parent;
                parent    = this;
            }
            // searches all nested nodes
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return null;
            for (var i = 0; i < parent.nodes.length; i++) {
                if (parent.nodes[i].id === id) {
                    // make sure nodes inserted correctly
                    var nodes = node.nodes;
                    $.extend(parent.nodes[i], node, { nodes: [] });
                    if (nodes != null) {
                        this.add(parent.nodes[i], nodes);
                    }
                    this.refresh(id);
                    return true;
                } else {
                    var rv = this.set(parent.nodes[i], id, node);
                    if (rv) return true;
                }
            }
            return false;
        },

        get: function (parent, id, returnIndex) { // can be just called get(id) or get(id, true)
            if (arguments.length === 0) {
                var all = [];
                var tmp = this.find({});
                for (var t = 0; t < tmp.length; t++) {
                    if (tmp[t].id != null) all.push(tmp[t].id);
                }
                return all;
            } else {
                if (arguments.length == 1 || (arguments.length == 2 && id === true) ) {
                    // need to be in reverse order
                    returnIndex    = id;
                    id            = parent;
                    parent        = this;
                }
                // searches all nested nodes
                if (typeof parent == 'string') parent = this.get(parent);
                if (parent.nodes == null) return null;
                for (var i = 0; i < parent.nodes.length; i++) {
                    if (parent.nodes[i].id == id) {
                        if (returnIndex === true) return i; else return parent.nodes[i];
                    } else {
                        var rv = this.get(parent.nodes[i], id, returnIndex);
                        if (rv || rv === 0) return rv;
                    }
                }
                return null;
            }
        },

        find: function (parent, params, results) { // can be just called find({ selected: true })
            if (arguments.length == 1) {
                // need to be in reverse order
                params = parent;
                parent = this;
            }
            if (!results) results = [];
            // searches all nested nodes
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return results;
            for (var i = 0; i < parent.nodes.length; i++) {
                var match = true;
                for (var prop in params) {
                    if (parent.nodes[i][prop] != params[prop]) match = false;
                }
                if (match) results.push(parent.nodes[i]);
                if (parent.nodes[i].nodes.length > 0) results = this.find(parent.nodes[i], params, results);
            }
            return results;
        },

        hide: function () { // multiple arguments
            var hidden = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.hidden = true;
                hidden++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return hidden;
        },

        show: function () { // multiple arguments
            var shown = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.hidden = false;
                shown++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return shown;
        },

        disable: function () { // multiple arguments
            var disabled = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.disabled = true;
                if (tmp.selected) this.unselect(tmp.id);
                disabled++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return disabled;
        },

        enable: function () { // multiple arguments
            var enabled = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.disabled = false;
                enabled++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return enabled;
        },

        select: function (id) {
            var new_node = this.get(id);
            if (!new_node) return false;
            if (this.selected == id && new_node.selected) return false;
            this.unselect(this.selected);
            $(this.box).find('#node_'+ w2utils.escapeId(id))
                .addClass('w2ui-selected')
                .find('.w2ui-icon').addClass('w2ui-icon-selected');
            new_node.selected = true;
            this.selected = id;
            return true;
        },

        unselect: function (id) {
            var current = this.get(id);
            if (!current) return false;
            current.selected = false;
            $(this.box).find('#node_'+ w2utils.escapeId(id))
                .removeClass('w2ui-selected')
                .find('.w2ui-icon').removeClass('w2ui-icon-selected');
            if (this.selected == id) this.selected = null;
            return true;
        },

        toggle: function(id) {
            var nd = this.get(id);
            if (nd === null) return false;
            if (nd.plus) {
                this.set(id, { plus: false });
                this.expand(id);
                this.refresh(id);
                return;
            }
            if (nd.nodes.length === 0) return false;
            if (this.get(id).expanded) return this.collapse(id); else return this.expand(id);
        },

        collapse: function (id) {
            var obj = this;
            var nd  = this.get(id);
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'collapse', target: id, object: nd });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('#node_'+ w2utils.escapeId(id) +'_sub').slideUp(200);
            $(this.box).find('#node_'+ w2utils.escapeId(id) +' .w2ui-node-dots:first-child').html('<div class="w2ui-expand">+</div>');
            nd.expanded = false;
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            setTimeout(function () { obj.refresh(id); }, 200);
            return true;
        },

        collapseAll: function (parent) {
            if (typeof parent == 'undefined') parent = this;
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return false;
            for (var i = 0; i < parent.nodes.length; i++) {
                if (parent.nodes[i].expanded === true) parent.nodes[i].expanded = false;
                if (parent.nodes[i].nodes && parent.nodes[i].nodes.length > 0) this.collapseAll(parent.nodes[i]);
            }
            this.refresh(parent.id);
            return true;
        },

        expand: function (id) {
            var obj = this;
            var nd  = this.get(id);
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'expand', target: id, object: nd });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('#node_'+ w2utils.escapeId(id) +'_sub').slideDown(200);
            $(this.box).find('#node_'+ w2utils.escapeId(id) +' .w2ui-node-dots:first-child').html('<div class="w2ui-expand">-</div>');
            nd.expanded = true;
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            setTimeout(function () { obj.refresh(id); }, 200);
            return true;
        },

        expandAll: function (parent) {
            if (typeof parent == 'undefined') parent = this;
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return false;
            for (var i = 0; i < parent.nodes.length; i++) {
                if (parent.nodes[i].expanded === false) parent.nodes[i].expanded = true;
                if (parent.nodes[i].nodes && parent.nodes[i].nodes.length > 0) this.collapseAll(parent.nodes[i]);
            }
            this.refresh(parent.id);
        },

        expandParents: function (id) {
            var node = this.get(id);
            if (node === null) return false;
            if (node.parent) {
                node.parent.expanded = true;
                this.expandParents(node.parent.id);
            }
            this.refresh(id);
            return true;
        },

        click: function (id, event) {
            var obj = this;
            var nd  = this.get(id);
            if (nd === null) return;
            if (nd.disabled || nd.group) return; // should click event if already selected
            // unselect all previsously
            $(obj.box).find('.w2ui-node.w2ui-selected').each(function (index, el) {
                var oldID     = $(el).attr('id').replace('node_', '');
                var oldNode = obj.get(oldID);
                if (oldNode != null) oldNode.selected = false;
                $(el).removeClass('w2ui-selected').find('.w2ui-icon').removeClass('w2ui-icon-selected');
            });
            // select new one
            var newNode = $(obj.box).find('#node_'+ w2utils.escapeId(id));
            var oldNode = $(obj.box).find('#node_'+ w2utils.escapeId(obj.selected));
            newNode.addClass('w2ui-selected').find('.w2ui-icon').addClass('w2ui-icon-selected');
            // need timeout to allow rendering
            setTimeout(function () {
                // event before
                var eventData = obj.trigger({ phase: 'before', type: 'click', target: id, originalEvent: event, node: nd, object: nd });
                if (eventData.isCancelled === true) {
                    // restore selection
                    newNode.removeClass('w2ui-selected').find('.w2ui-icon').removeClass('w2ui-icon-selected');
                    oldNode.addClass('w2ui-selected').find('.w2ui-icon').addClass('w2ui-icon-selected');
                    return;
                }
                // default action
                if (oldNode !== null) oldNode.selected = false;
                obj.get(id).selected = true;
                obj.selected = id;
                // route processing
                if (nd.route) {
                    var route = String('/'+ nd.route).replace(/\/{2,}/g, '/');
                    var info  = w2utils.parseRoute(route);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            if (obj.routeData[info.keys[k].name] == null) continue;
                            route = route.replace((new RegExp(':'+ info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                        }
                    }
                    setTimeout(function () { window.location.hash = route; }, 1);
                }
                // event after
                obj.trigger($.extend(eventData, { phase: 'after' }));
            }, 1);
        },

        keydown: function (event) {
            var obj = this;
            var nd  = obj.get(obj.selected);
            if (!nd || obj.keyboard !== true) return;
            // trigger event
            var eventData = obj.trigger({ phase: 'before', type: 'keydown', target: obj.name, originalEvent: event });
            if (eventData.isCancelled === true) return;
            // default behaviour
            if (event.keyCode == 13 || event.keyCode == 32) { // enter or space
                if (nd.nodes.length > 0) obj.toggle(obj.selected);
            }
            if (event.keyCode == 37) { // left
                if (nd.nodes.length > 0 && nd.expanded) {
                    obj.collapse(obj.selected);
                } else {
                    selectNode(nd.parent);
                    if (!nd.parent.group) obj.collapse(nd.parent.id);
                }
            }
            if (event.keyCode == 39) { // right
                if ((nd.nodes.length > 0 || nd.plus) && !nd.expanded) obj.expand(obj.selected);
            }
            if (event.keyCode == 38) { // up
                selectNode(neighbor(nd, prev));
            }
            if (event.keyCode == 40) { // down
                selectNode(neighbor(nd, next));
            }
            // cancel event if needed
            if ($.inArray(event.keyCode, [13, 32, 37, 38, 39, 40]) != -1) {
                if (event.preventDefault) event.preventDefault();
                if (event.stopPropagation) event.stopPropagation();
            }
            // event after
            obj.trigger($.extend(eventData, { phase: 'after' }));

            function selectNode (node, event) {
                if (node !== null && !node.hidden && !node.disabled && !node.group) {
                    obj.click(node.id, event);
                    setTimeout(function () { obj.scrollIntoView(); }, 50);
                }
            }

            function neighbor (node, neighborFunc) {
                node = neighborFunc(node);
                while (node !== null && (node.hidden || node.disabled)) {
                    if (node.group) break; else node = neighborFunc(node);
                }
                return node;
            }

            function next (node, noSubs) {
                if (node === null) return null;
                var parent   = node.parent;
                var ind      = obj.get(node.id, true);
                var nextNode = null;
                // jump inside
                if (node.expanded && node.nodes.length > 0 && noSubs !== true) {
                    var t = node.nodes[0];
                    if (t.hidden || t.disabled || t.group) nextNode = next(t); else nextNode = t;
                } else {
                    if (parent && ind + 1 < parent.nodes.length) {
                        nextNode = parent.nodes[ind + 1];
                    } else {
                        nextNode = next(parent, true); // jump to the parent
                    }
                }
                if (nextNode !== null && (nextNode.hidden || nextNode.disabled || nextNode.group)) nextNode = next(nextNode);
                return nextNode;
            }

            function prev (node) {
                if (node === null) return null;
                var parent   = node.parent;
                var ind      = obj.get(node.id, true);
                var prevNode = (ind > 0) ? lastChild(parent.nodes[ind - 1]) : parent;
                if (prevNode !== null && (prevNode.hidden || prevNode.disabled || prevNode.group)) prevNode = prev(prevNode);
                return prevNode;
            }

            function lastChild (node) {
                if (node.expanded && node.nodes.length > 0) {
                    var t = node.nodes[node.nodes.length - 1];
                    if (t.hidden || t.disabled || t.group) return prev(t); else return lastChild(t);
                }
                return node;
            }
        },

        scrollIntoView: function (id) {
            if (typeof id == 'undefined') id = this.selected;
            var nd = this.get(id);
            if (nd === null) return;
            var body   = $(this.box).find('.w2ui-sidebar-div');
            var item   = $(this.box).find('#node_'+ w2utils.escapeId(id));
            var offset = item.offset().top - body.offset().top;
            if (offset + item.height() > body.height()) {
                body.animate({ 'scrollTop': body.scrollTop() + body.height() / 1.3 }, 250, 'linear');
            }
            if (offset <= 0) {
                body.animate({ 'scrollTop': body.scrollTop() - body.height() / 1.3 }, 250, 'linear');
            }
        },

        dblClick: function (id, event) {
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            var nd = this.get(id);
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'dblClick', target: id, originalEvent: event, object: nd });
            if (eventData.isCancelled === true) return;
            // default action
            this.toggle(id);
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
        },

        contextMenu: function (id, event) {
            var obj = this;
            var nd  = obj.get(id);
            if (id != obj.selected) obj.click(id);
            // need timeout to allow click to finish first
            setTimeout(function () {
                // event before
                var eventData = obj.trigger({ phase: 'before', type: 'contextMenu', target: id, originalEvent: event, object: nd });
                if (eventData.isCancelled === true) return;
                // default action
                if (nd.group || nd.disabled) return;
                if (obj.menu.length > 0) {
                    $(obj.box).find('#node_'+ w2utils.escapeId(id))
                        .w2menu(obj.menu, {
                            left    : (event ? event.offsetX || event.pageX : 50) - 25,
                            onSelect: function (event) { 
                                obj.menuClick(id, parseInt(event.index), event.originalEvent); 
                            }
                        }
                    );
                }
                // event after
                obj.trigger($.extend(eventData, { phase: 'after' }));
            }, 150); // need timer 150 for FF
        },

        menuClick: function (itemId, index, event) {
            var obj = this;
            // event before
            var eventData = obj.trigger({ phase: 'before', type: 'menuClick', target: itemId, originalEvent: event, menuIndex: index, menuItem: obj.menu[index] });
            if (eventData.isCancelled === true) return;
            // default action
            // -- empty
            // event after
            obj.trigger($.extend(eventData, { phase: 'after' }));
        },

        render: function (box) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'render', target: this.name, box: box });
            if (eventData.isCancelled === true) return;
            // default action
            if (typeof box != 'undefined' && box !== null) {
                if ($(this.box).find('> div > div.w2ui-sidebar-div').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-sidebar')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return;
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-sidebar')
                .html('<div>'+
                        '<div class="w2ui-sidebar-top"></div>' +
                        '<div class="w2ui-sidebar-div"></div>'+
                        '<div class="w2ui-sidebar-bottom"></div>'+
                    '</div>'
                );
            $(this.box).find('> div').css({
                width    : $(this.box).width() + 'px',
                height: $(this.box).height() + 'px'
            });
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // adjust top and bottom
            if (this.topHTML !== '') {
                $(this.box).find('.w2ui-sidebar-top').html(this.topHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('top', $(this.box).find('.w2ui-sidebar-top').height() + 'px');
            }
            if (this.bottomHTML !== '') {
                $(this.box).find('.w2ui-sidebar-bottom').html(this.bottomHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('bottom', $(this.box).find('.w2ui-sidebar-bottom').height() + 'px');
            }
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            // ---
            this.refresh();
            return (new Date()).getTime() - time;
        },

        refresh: function (id) {
            var time = (new Date()).getTime();
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'refresh', target: (typeof id != 'undefined' ? id : this.name) });
            if (eventData.isCancelled === true) return;
            // adjust top and bottom
            if (this.topHTML !== '') {
                $(this.box).find('.w2ui-sidebar-top').html(this.topHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('top', $(this.box).find('.w2ui-sidebar-top').height() + 'px');
            }
            if (this.bottomHTML !== '') {
                $(this.box).find('.w2ui-sidebar-bottom').html(this.bottomHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('bottom', $(this.box).find('.w2ui-sidebar-bottom').height() + 'px');
            }
            // default action
            $(this.box).find('> div').css({
                width : $(this.box).width() + 'px',
                height: $(this.box).height() + 'px'
            });
            var obj = this;
            var node, nd;
            var nm;
            if (typeof id == 'undefined') {
                node = this;
                nm   = '.w2ui-sidebar-div';
            } else {
                node = this.get(id);
                if (node === null) return;
                nm   = '#node_'+ w2utils.escapeId(node.id) + '_sub';
            }
            var nodeHTML;
            if (node !== this) {
                var tmp    = '#node_'+ w2utils.escapeId(node.id);
                nodeHTML    = getNodeHTML(node);
                $(this.box).find(tmp).before('<div id="sidebar_'+ this.name + '_tmp"></div>');
                $(this.box).find(tmp).remove();
                $(this.box).find(nm).remove();
                $('#sidebar_'+ this.name + '_tmp').before(nodeHTML);
                $('#sidebar_'+ this.name + '_tmp').remove();
            }
            // refresh sub nodes
            $(this.box).find(nm).html('');
            for (var i = 0; i < node.nodes.length; i++) {
                nd = node.nodes[i];
                nodeHTML = getNodeHTML(nd);
                $(this.box).find(nm).append(nodeHTML);
                if (nd.nodes.length !== 0) { this.refresh(nd.id); }
            }
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            return (new Date()).getTime() - time;

            function getNodeHTML(nd) {
                var html = '';
                var img  = nd.img;
                if (img === null) img = this.img;
                var icon = nd.icon;
                if (icon === null) icon = this.icon;
                // -- find out level
                var tmp   = nd.parent;
                var level = 0;
                while (tmp && tmp.parent !== null) {
                    if (tmp.group) level--;
                    tmp = tmp.parent;
                    level++;
                }
                if (typeof nd.caption != 'undefined') nd.text = nd.caption;
                if (nd.group) {
                    html =
                        '<div class="w2ui-node-group"  id="node_'+ nd.id +'"'+
                        '        onclick="w2ui[\''+ obj.name +'\'].toggle(\''+ nd.id +'\')"'+
                        '        onmouseout="$(this).find(\'span:nth-child(1)\').css(\'color\', \'transparent\')" '+
                        '        onmouseover="$(this).find(\'span:nth-child(1)\').css(\'color\', \'inherit\')">'+
                        (nd.groupShowHide ? '<span>'+ (!nd.hidden && nd.expanded ? w2utils.lang('Hide') : w2utils.lang('Show')) +'</span>' : '<span></span>') +
                        '    <span>'+ nd.text +'</span>'+
                        '</div>'+
                        '<div class="w2ui-node-sub" id="node_'+ nd.id +'_sub" style="'+ nd.style +';'+ (!nd.hidden && nd.expanded ? '' : 'display: none;') +'"></div>';
                } else {
                    if (nd.selected && !nd.disabled) obj.selected = nd.id;
                    tmp = '';
                    if (img) tmp = '<div class="w2ui-node-image w2ui-icon '+ img +    (nd.selected && !nd.disabled ? " w2ui-icon-selected" : "") +'"></div>';
                    if (icon) tmp = '<div class="w2ui-node-image"><span class="'+ icon +'"></span></div>';
                    html =
                    '<div class="w2ui-node '+ (nd.selected ? 'w2ui-selected' : '') +' '+ (nd.disabled ? 'w2ui-disabled' : '') +'" id="node_'+ nd.id +'" style="'+ (nd.hidden ? 'display: none;' : '') +'"'+
                        '    ondblclick="w2ui[\''+ obj.name +'\'].dblClick(\''+ nd.id +'\', event);"'+
                        '    oncontextmenu="w2ui[\''+ obj.name +'\'].contextMenu(\''+ nd.id +'\', event); '+
                        '        if (event.preventDefault) event.preventDefault();"'+
                        '    onClick="w2ui[\''+ obj.name +'\'].click(\''+ nd.id +'\', event); ">'+
                        '<table cellpadding="0" cellspacing="0" style="margin-left:'+ (level*18) +'px; padding-right:'+ (level*18) +'px"><tr>'+
                        '<td class="w2ui-node-dots" nowrap onclick="w2ui[\''+ obj.name +'\'].toggle(\''+ nd.id +'\'); '+
                        '        if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">'+
                        '    <div class="w2ui-expand">'    + (nd.nodes.length > 0 ? (nd.expanded ? '-' : '+') : (nd.plus ? '+' : '')) + '</div>' +
                        '</td>'+
                        '<td class="w2ui-node-data" nowrap>'+
                            tmp +
                            (nd.count || nd.count === 0 ? '<div class="w2ui-node-count">'+ nd.count +'</div>' : '') +
                            '<div class="w2ui-node-caption">'+ nd.text +'</div>'+
                        '</td>'+
                        '</tr></table>'+
                    '</div>'+
                    '<div class="w2ui-node-sub" id="node_'+ nd.id +'_sub" style="'+ nd.style +';'+ (!nd.hidden && nd.expanded ? '' : 'display: none;') +'"></div>';
                }
                return html;
            }
        },

        resize: function () {
            var time = (new Date()).getTime();
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'resize', target: this.name });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).css('overflow', 'hidden');    // container should have no overflow
            //$(this.box).find('.w2ui-sidebar-div').css('overflow', 'hidden');
            $(this.box).find('> div').css({
                width        : $(this.box).width() + 'px',
                height    : $(this.box).height() + 'px'
            });
            //$(this.box).find('.w2ui-sidebar-div').css('overflow', 'auto');
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            return (new Date()).getTime() - time;
        },

        destroy: function () {
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'destroy', target: this.name });
            if (eventData.isCancelled === true) return;
            // clean up
            if ($(this.box).find('> div > div.w2ui-sidebar-div').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-sidebar')
                    .html('');
            }
            delete w2ui[this.name];
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
        },

        lock: function (msg, showSpinner) {
            var box = $(this.box).find('> div:first-child');
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(box);
            w2utils.lock.apply(window, args);
        },

        unlock: function () {
            w2utils.unlock(this.box);
        }
    };

    $.extend(w2sidebar.prototype, w2utils.event);
    w2obj.sidebar = w2sidebar;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2field        - various field controls
 *        - $().w2field    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - upload (regular files)
 *   - BUG with prefix/postfix and arrows (test in different contexts)
 *   - prefix and suffix are slow (100ms or so)
 *   - multiple date selection
 *   - month selection, year selections
 *   - arrows no longer work (for int)
 *   - form to support custom types
 *   - bug: if input is hidden and then enum is applied, then when it becomes visible, it will be 110px
 *
 ************************************************************************/

(function($) {

    var w2field = function(options) {
        // public properties
        this.el = null;
        this.helpers = {}; // object or helper elements
        this.type = options.type || 'text';
        this.options = $.extend(true, {}, options);
        this.onSearch = options.onSearch || null;
        this.onRequest = options.onRequest || null;
        this.onLoad = options.onLoad || null;
        this.onError = options.onError || null;
        this.onChange = options.onChange || null;
        this.onClick = options.onClick || null;
        this.onAdd = options.onAdd || null;
        this.onNew = options.onNew || null;
        this.onRemove = options.onRemove || null;
        this.onMouseOver = options.onMouseOver || null;
        this.onMouseOut = options.onMouseOut || null;
        this.onIconClick = options.onIconClick || null;
        this.tmp = {}; // temp object
        // clean up some options
        delete this.options.type;
        delete this.options.onSearch;
        delete this.options.onRequest;
        delete this.options.onChange;
        delete this.options.onLoad;
        delete this.options.onError;
        delete this.options.onClick;
        delete this.options.onMouseOver;
        delete this.options.onMouseOut;
        delete this.options.onIconClick;
        // extend with defaults
        $.extend(true, this, w2obj.field);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2field = function(method, options) {
        // call direct
        if (this.length == 0) {
            var pr = w2field.prototype;
            if (pr[method]) {
                return pr[method].apply(pr, Array.prototype.slice.call(arguments, 1));
            }
        } else {
            // if without arguments - return the object
            if (arguments.length == 0) {
                var obj = $(this).data('w2field');
                return obj;
            }
            if (typeof method == 'string' && typeof options == 'object') {
                method = $.extend(true, {}, options, {
                    type: method
                });
            }
            if (typeof method == 'string' && typeof options == 'undefined') {
                method = {
                    type: method
                };
            }
            method.type = String(method.type).toLowerCase();
            return this.each(function(index, el) {
                var obj = $(el).data('w2field');
                // if object is not defined, define it
                if (typeof obj == 'undefined') {
                    var obj = new w2field(method);
                    $.extend(obj, {
                        handlers: []
                    });
                    if (el) obj.el = $(el)[0];
                    obj.init();
                    $(el).data('w2field', obj);
                    return obj;
                } else { // fully re-init
                    obj.clear();
                    if (method.type == 'clear') return;
                    var obj = new w2field(method);
                    $.extend(obj, {
                        handlers: []
                    });
                    if (el) obj.el = $(el)[0];
                    obj.init();
                    $(el).data('w2field', obj);
                    return obj;
                }
                return null;
            });
        }
    }

    // ====================================================
    // -- Implementation of core functionality

    /*     To add custom types
        $().w2field('addType', 'myType', function (options) {
            $(this.el).on('keypress', function (event) {
                if (event.metaKey || event.ctrlKey || event.altKey
                    || (event.charCode != event.keyCode && event.keyCode > 0)) return;
                var ch = String.fromCharCode(event.charCode);
                if (ch != 'a' && ch != 'b' && ch != 'c') {
                    if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;
                    return false;
                }
            });
            $(this.el).on('blur', function (event)  { // keyCode & charCode differ in FireFox
                var ch = this.value;
                if (ch != 'a' && ch != 'b' && ch != 'c') {
                    $(this).w2tag(w2utils.lang("Not a single charecter from the set of 'abc'"));
                }
            });
        });
    */

    w2field.prototype = {

        custom: {}, // map of custom types

        pallete: [
            ['000000', '444444', '666666', '999999', 'CCCCCC', 'EEEEEE', 'F3F3F3', 'FFFFFF'],
            ['FF011B', 'FF9838', 'FFFD59', '01FD55', '00FFFE', '0424F3', '9B24F4', 'FF21F5'],
            ['F4CCCC', 'FCE5CD', 'FFF2CC', 'D9EAD3', 'D0E0E3', 'CFE2F3', 'D9D1E9', 'EAD1DC'],
            ['EA9899', 'F9CB9C', 'FEE599', 'B6D7A8', 'A2C4C9', '9FC5E8', 'B4A7D6', 'D5A6BD'],
            ['E06666', 'F6B26B', 'FED966', '93C47D', '76A5AF', '6FA8DC', '8E7CC3', 'C27BA0'],
            ['CC0814', 'E69138', 'F1C232', '6AA84F', '45818E', '3D85C6', '674EA7', 'A54D79'],
            ['99050C', 'B45F17', 'BF901F', '37761D', '124F5C', '0A5394', '351C75', '741B47'],
            ['660205', '783F0B', '7F6011', '274E12', '0C343D', '063762', '20124D', '4C1030']
        ],

        addType: function(type, handler) {
            type = String(type).toLowerCase();
            this.custom[type] = handler;
            return true;
        },

        removeType: function(type) {
            type = String(type).toLowerCase();
            if (!this.custom[type]) return false;
            delete this.custom[type];
            return true
        },
        //init w2field
        init: function() {
            var obj = this;
            var options = this.options;
            var defaults;

            // Custom Types
            if (typeof this.custom[this.type] == 'function') {
                this.custom[this.type].call(this, options);
                return;
            }
            // only for INPUT or TEXTAREA
            if (['INPUT', 'TEXTAREA'].indexOf(this.el.tagName) == -1) {
                console.log('ERROR: w2field could only be applied to INPUT or TEXTAREA.', this.el);
                return;
            }

            switch (this.type) {
                case 'text':
                case 'int':
                case 'float':
                case 'money':
                case 'currency':
                case 'percent':
                case 'alphanumeric':
                case 'hex':
                    defaults = {
                        min: null,
                        max: null,
                        step: 1,
                        placeholder: '',
                        autoFormat: true,
                        currencyPrefix: w2utils.settings.currencyPrefix,
                        currencySuffix: w2utils.settings.currencySuffix,
                        currencyPrecision: w2utils.settings.currencyPrecision,
                        decimalSymbol: w2utils.settings.decimalSymbol,
                        groupSymbol: w2utils.settings.groupSymbol,
                        arrows: false,
                        keyboard: true,
                        precision: null,
                        silent: true,
                        prefix: '',
                        suffix: ''
                    };
                    this.options = $.extend(true, {}, defaults, options);
                    options = this.options; // since object is re-created, need to re-assign
                    options.numberRE = new RegExp('[' + options.groupSymbol + ']', 'g');
                    options.moneyRE = new RegExp('[' + options.currencyPrefix + options.currencySuffix + options.groupSymbol + ']', 'g');
                    options.percentRE = new RegExp('[' + options.groupSymbol + '%]', 'g');
                    // no keyboard support needed
                    if (['text', 'alphanumeric', 'hex'].indexOf(this.type) != -1) {
                        options.arrows = false;
                        options.keyboard = false;
                    }
                    this.addPrefix(); // only will add if needed
                    this.addSuffix();
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder);
                    break;

                case 'color':
                    defaults = {
                        prefix: '#',
                        suffix: '<div style="width: ' + (parseInt($(this.el).css('font-size')) || 12) + 'px">&nbsp;</div>',
                        placeholder: '',
                        arrows: false,
                        keyboard: false
                    };
                    $.extend(options, defaults);
                    this.addPrefix(); // only will add if needed
                    this.addSuffix(); // only will add if needed
                    // additional checks
                    $(this.el).attr('maxlength', 6);
                    if ($(this.el).val() != '') setTimeout(function() {
                        $(obj.el).change();
                    }, 1);
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder);
                    break;

                case 'date':
                    defaults = {
                        format: w2utils.settings.date_format, // date format
                        placeholder: '',
                        keyboard: true,
                        silent: true,
                        start: '', // string or jquery object
                        end: '', // string or jquery object
                        blocked: {}, // { '4/11/2011': 'yes' }
                        colored: {} // { '4/11/2011': 'red:white' }
                    };
                    this.options = $.extend(true, {}, defaults, options);
                    options = this.options; // since object is re-created, need to re-assign
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder ? options.placeholder : options.format);
                    break;

                case 'time':
                    defaults = {
                        format: w2utils.settings.time_format,
                        placeholder: '',
                        keyboard: true,
                        silent: true,
                        start: '',
                        end: ''
                    };
                    this.options = $.extend(true, {}, defaults, options);
                    options = this.options; // since object is re-created, need to re-assign
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder ? options.placeholder : (options.format == 'h12' ? 'hh:mi pm' : 'hh:mi'));
                    break;

                case 'datetime':
                    break;

                case 'list':
                case 'combo':
                    defaults = {
                        items: [],
                        selected: {},
                        placeholder: '',
                        url: null, // url to pull data from
                        postData: {},
                        minLength: 1,
                        cacheMax: 250,
                        maxDropHeight: 350, // max height for drop down menu
                        match: 'begins', // ['contains', 'is', 'begins', 'ends']
                        silent: true,
                        icon: null,
                        iconStyle: '',
                        onSearch: null, // when search needs to be performed
                        onChange: null,
                        onRequest: null, // when request is submitted
                        onLoad: null, // when data is received
                        onError: null, // when data fails to load due to server error or other failure modes
                        onIconClick: null,
                        renderDrop: null, // render function for drop down item
                        prefix: '',
                        suffix: '',
                        openOnFocus: false, // if to show overlay onclick or when typing
                        markSearch: false
                    };
                    if(typeof options.items === 'function')
                        options.items = options.items.call();
                    options.items = this.normMenu(options.items); // need to be first
                    if (this.type == 'list' || this.type == 'combo') {
                        // defaults.search = (options.items && options.items.length >= 10 ? true : false);
                        defaults.openOnFocus = true;
                        defaults.suffix = '<div class="arrow-down" style="margin-top: ' + ((parseInt($(this.el).height()) - 6) / 2) + 'px;"></div>';
                        //console.log(parseInt($(this.el).height()));
                        if (this.type == 'list') {
                            $(this.el).addClass('w2ui-select');

                            // if simple value - look it up
                            if (!$.isPlainObject(options.selected)) {
                                for (var i in options.items) {
                                    var item = options.items[i];
                                    if (item && item.id == options.selected) {
                                        options.selected = $.extend(true, {}, item);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    options = $.extend({}, defaults, options, {
                        align: 'both', // same width as control
                        altRows: true // alternate row color
                    });
                    this.options = options;
                    if (!$.isPlainObject(options.selected)) options.selected = {};
                    $(this.el).data('selected', options.selected);
                    if (options.url) this.request(0);
                    if (this.type == 'list') this.addFocus();
                    this.addPrefix();
                    this.addSuffix();
                    setTimeout(function() {
                        obj.refresh();
                    }, 10); // need this for icon refresh
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder).attr('autocomplete', 'off');
                    if (typeof options.selected.text != 'undefined') $(this.el).val(options.selected.text);
                    break;

                case 'enum':
                    defaults = {
                        items: [],
                        selected: [],
                        placeholder: '',
                        max: 0, // max number of selected items, 0 - unlim
                        url: null, // not implemented
                        postData: {},
                        minLength: 1,
                        cacheMax: 250,
                        maxWidth: 250, // max width for a single item
                        maxHeight: 350, // max height for input control to grow
                        maxDropHeight: 350, // max height for drop down menu
                        match: 'contains', // ['contains', 'is', 'begins', 'ends']
                        silent: true,
                        openOnFocus: false, // if to show overlay onclick or when typing
                        markSearch: true,
                        renderDrop: null, // render function for drop down item
                        renderItem: null, // render selected item
                        style: '', // style for container div
                        onSearch: null, // when search needs to be performed
                        onRequest: null, // when request is submitted
                        onLoad: null, // when data is received
                        onError: null, // when data fails to load due to server error or other failure modes
                        onClick: null, // when an item is clicked
                        onAdd: null, // when an item is added
                        onNew: null, // when new item should be added
                        onRemove: null, // when an item is removed
                        onMouseOver: null, // when an item is mouse over
                        onMouseOut: null // when an item is mouse out
                    };
                    options = $.extend({}, defaults, options, {
                        align: 'both', // same width as control
                        suffix: '',
                        altRows: true // alternate row color
                    });
                    options.items = this.normMenu(options.items);
                    options.selected = this.normMenu(options.selected);
                    this.options = options;
                    if (!$.isArray(options.selected)) options.selected = [];
                    $(this.el).data('selected', options.selected);
                    if (options.url) this.request(0);
                    this.addSuffix();
                    this.addMulti();
                    break;

                case 'file':
                    defaults = {
                        selected: [],
                        placeholder: w2utils.lang('Attach files by dragging and dropping or Click to Select'),
                        max: 0,
                        maxSize: 0, // max size of all files, 0 - unlim
                        maxFileSize: 0, // max size of a single file, 0 -unlim
                        maxWidth: 250, // max width for a single item
                        maxHeight: 350, // max height for input control to grow
                        maxDropHeight: 350, // max height for drop down menu
                        silent: true,
                        renderItem: null, // render selected item
                        style: '', // style for container div
                        onClick: null, // when an item is clicked
                        onAdd: null, // when an item is added
                        onRemove: null, // when an item is removed
                        onMouseOver: null, // when an item is mouse over
                        onMouseOut: null // when an item is mouse out
                    };
                    options = $.extend({}, defaults, options, {
                        align: 'both', // same width as control
                        altRows: true // alternate row color
                    });
                    this.options = options;
                    if (!$.isArray(options.selected)) options.selected = [];
                    $(this.el).data('selected', options.selected);
                    if ($(this.el).attr('placeholder')) options.placeholder = $(this.el).attr('placeholder');
                    this.addMulti();
                    break;
            }
            // attach events
            this.tmp = {
                onChange: function(event) {
                    obj.change.call(obj, event)
                },
                onClick: function(event) {
                    obj.click.call(obj, event)
                },
                onFocus: function(event) {
                    obj.focus.call(obj, event)
                },
                onBlur: function(event) {
                    obj.blur.call(obj, event)
                },
                onKeydown: function(event) {
                    obj.keyDown.call(obj, event)
                },
                onKeyup: function(event) {
                    obj.keyUp.call(obj, event)
                },
                onKeypress: function(event) {
                    obj.keyPress.call(obj, event)
                }
            }
            $(this.el)
                .addClass('w2field')
                .data('w2field', this)
                .on('change', this.tmp.onChange)
                .on('click', this.tmp.onClick) // ignore click because it messes overlays
                .on('focus', this.tmp.onFocus)
                .on('blur', this.tmp.onBlur)
                .on('keydown', this.tmp.onKeydown)
                .on('keyup', this.tmp.onKeyup)
                .on('keypress', this.tmp.onKeypress)
                .css({
                    'box-sizing': 'border-box',
                    '-webkit-box-sizing': 'border-box',
                    '-moz-box-sizing': 'border-box',
                    '-ms-box-sizing': 'border-box',
                    '-o-box-sizing': 'border-box'
                });
            // format initial value
            this.change($.Event('change'));
        },



        clear: function() {
            var obj = this;
            var options = this.options;
            // if money then clear value
            if (['money', 'currency'].indexOf(this.type) != -1) {
                $(this.el).val($(this.el).val().replace(options.moneyRE, ''));
            }
            if (this.type == 'percent') {
                $(this.el).val($(this.el).val().replace(/%/g, ''));
            }
            if (this.type == 'color') {
                $(this.el).removeAttr('maxlength');
            }
            if (this.type == 'list') {
                $(this.el).removeClass('w2ui-select');
            }
            if (['date', 'time'].indexOf(this.type) != -1) {
                if ($(this.el).attr('placeholder') == options.format) $(this.el).attr('placeholder', '');
            }
            this.type = 'clear';
            var tmp = $(this.el).data('tmp');
            if (!this.tmp) return;
            // restore paddings
            if (typeof tmp != 'undefined') {
                if (tmp && tmp['old-padding-left']) $(this.el).css('padding-left', tmp['old-padding-left']);
                if (tmp && tmp['old-padding-right']) $(this.el).css('padding-right', tmp['old-padding-right']);
            }
            // remove events and data
            $(this.el)
                .val(this.clean($(this.el).val()))
                .removeClass('w2field')
                .removeData() // removes all attached data
                .off('change', this.tmp.onChange)
                .off('click', this.tmp.onClick)
                .off('focus', this.tmp.onFocus)
                .off('blur', this.tmp.onBlur)
                .off('keydown', this.tmp.onKeydown)
                .off('keyup', this.tmp.onKeyup)
                .off('keypress', this.tmp.onKeypress);
            // remove helpers
            for (var h in this.helpers) $(this.helpers[h]).remove();
            this.helpers = {};
        },
        //REFRESH W2FIELD
        refresh: function() {
            var obj = this;
            var options = this.options;
            var selected = $(this.el).data('selected');
            var time = (new Date()).getTime();
            // enum
            if (['list'].indexOf(this.type) != -1) {
                $(obj.el).parent().css('white-space', 'nowrap'); // needs this for arrow alway to appear on the right side
                // hide focus and show text
                if (obj.helpers.prefix) obj.helpers.prefix.hide();
                setTimeout(function() {
                    if (!obj.helpers.focus) return;
                    // if empty show no icon
                    if (!$.isEmptyObject(selected) && options.icon) {
                        options.prefix = '<span class="w2ui-icon ' + options.icon + '"style="cursor: pointer; font-size: 14px;' +
                            ' display: inline-block; margin-top: -1px; color: #7F98AD;' + options.iconStyle + '">' +
                            '</span>';
                        obj.addPrefix();
                    } else {
                        options.prefix = '';
                        obj.addPrefix();
                    }
                    // focus helpder
                    var focus = obj.helpers.focus.find('input');
                    if ($(focus).val() == '') {

                        $(focus).css('opacity', 1).prev().css('opacity', 1);
                        if (!$.isPlainObject(selected)) {
                            for (var i in options.items) {
                                var item = options.items[i];
                                if (item && item.id == selected) {
                                    selected = $.extend(true, {}, item);
                                    break;
                                }
                            }
                        }
                        $(obj.el).val(selected && selected.text != null ? selected.text : '');
                        $(obj.el).attr('placeholder', options.placeholder || '');
                    } else {
                        $(focus).css('opacity', 1).prev().css('opacity', 1);
                        $(obj.el).val('');
                        $(obj.el).removeAttr('placeholder');
                        setTimeout(function() {
                            if (obj.helpers.prefix) obj.helpers.prefix.hide();
                            var tmp = 'position: absolute; opacity: 0; margin: 4px 0px 0px 2px; background-position: left !important;';
                            if (options.icon) {
                                $(focus).css('margin-left', '17px');
                                $(obj.helpers.focus).find('.icon-search').attr('style', tmp + 'width: 11px !important; opacity: 1');
                            } else {
                                $(focus).css('margin-left', '0px');
                                $(obj.helpers.focus).find('.icon-search').attr('style', tmp + 'width: 0px !important; opacity: 0');
                            }
                        }, 1);
                    }
                    // if readonly or disabled
                    if ($(obj.el).prop('readonly') || $(obj.el).prop('disabled')) {
                        setTimeout(function() {
                            $(obj.helpers.prefix).css('opacity', '0.6');
                            $(obj.helpers.suffix).css('opacity', '0.6');
                        }, 1);
                    } else {
                        setTimeout(function() {
                            $(obj.helpers.prefix).css('opacity', '1');
                            $(obj.helpers.suffix).css('opacity', '1');
                        }, 1);
                    }
                }, 1);
            }
            if (['enum', 'file'].indexOf(this.type) != -1) {
                var html = '';
                for (var s in selected) {
                    var it = selected[s];
                    var ren = '';
                    if (typeof options.renderItem == 'function') {
                        ren = options.renderItem(it, s, '<div class="w2ui-list-remove" title="' + w2utils.lang('Remove') + '" index="' + s + '">&nbsp;&nbsp;</div>');
                    } else {
                        ren = '<div class="w2ui-list-remove" title="' + w2utils.lang('Remove') + '" index="' + s + '">&nbsp;&nbsp;</div>' +
                            (obj.type == 'enum' ? it.text : it.name + '<span class="file-size"> - ' + w2utils.size(it.size) + '</span>');
                    }
                    html += '<li index="' + s + '" style="max-width: ' + parseInt(options.maxWidth) + 'px; ' + (it.style ? it.style : '') + '">' +
                        ren + '</li>';
                }
                var div = obj.helpers.multi;
                var ul = div.find('ul');
                div.attr('style', div.attr('style') + ';' + options.style);
                if ($(obj.el).prop('readonly') || $(obj.el).prop('disabled')) {
                    div.addClass('w2ui-readonly');
                    div.css('pointer-events', 'none').find('li').css('opacity', '0.6');
                    $(obj.helpers.multi).find('input').prop('readonly', true);
                } else {
                    div.removeClass('w2ui-readonly');
                    div.css('pointer-events', 'auto').find('li').css('opacity', '1');
                    $(obj.helpers.multi).find('input').prop('readonly', false);
                }
                // celan
                div.find('.w2ui-enum-placeholder').remove();
                ul.find('li').not('li.nomouse').remove();
                // add new list
                if (html != '') {
                    ul.prepend(html);
                } else if (typeof options.placeholder != 'undefined') {
                    var style =
                        'padding-top: ' + $(this.el).css('padding-top') + ';' +
                        'padding-left: ' + $(this.el).css('padding-left') + '; ' +
                        'box-sizing: ' + $(this.el).css('box-sizing') + '; ' +
                        'line-height: ' + $(this.el).css('line-height') + '; ' +
                        'font-size: ' + $(this.el).css('font-size') + '; ' +
                        'font-family: ' + $(this.el).css('font-family') + '; ';
                    div.prepend('<div class="w2ui-enum-placeholder" style="' + style + '">' + options.placeholder + '</div>');
                }
                // ITEMS events
                div.find('li')
                    .data('mouse', 'out')
                    .on('click', function(event) {
                        var item = selected[$(event.target).attr('index')];
                        if ($(event.target).hasClass('nomouse')) return;
                        event.stopPropagation();
                        // trigger event
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'click',
                            target: obj.el,
                            originalEvent: event.originalEvent,
                            item: item
                        });
                        if (eventData.isCancelled === true) return;
                        // default behavior
                        if ($(event.target).hasClass('w2ui-list-remove')) {
                            if ($(obj.el).attr('readonly') || $(obj.el).attr('disabled')) return;
                            // trigger event
                            var eventData = obj.trigger({
                                phase: 'before',
                                type: 'remove',
                                target: obj.el,
                                originalEvent: event.originalEvent,
                                item: item
                            });
                            if (eventData.isCancelled === true) return;
                            // default behavior
                            $().w2overlay();
                            selected.splice($(event.target).attr('index'), 1);
                            $(obj.el).trigger('change');
                            $(event.target).parent().fadeOut('fast');
                            setTimeout(function() {
                                obj.refresh();
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }, 300);
                        }
                        if (obj.type == 'file' && !$(event.target).hasClass('w2ui-list-remove')) {
                            var preview = '';
                            if ((/image/i).test(item.type)) { // image
                                preview = '<div style="padding: 3px;">' +
                                    '    <img src="' + (item.content ? 'data:' + item.type + ';base64,' + item.content : '') + '" style="max-width: 300px;" ' +
                                    '        onload="var w = $(this).width(); var h = $(this).height(); ' +
                                    '            if (w < 300 & h < 300) return; ' +
                                    '            if (w >= h && w > 300) $(this).width(300);' +
                                    '            if (w < h && h > 300) $(this).height(300);"' +
                                    '        onerror="this.style.display = \'none\'"' +
                                    '    >' +
                                    '</div>';
                            }
                            var td1 = 'style="padding: 3px; text-align: right; color: #777;"';
                            var td2 = 'style="padding: 3px"';
                            preview += '<div style="padding: 8px;">' +
                                '    <table cellpadding="2">' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Name') + ':</td><td ' + td2 + '>' + item.name + '</td></tr>' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Size') + ':</td><td ' + td2 + '>' + w2utils.size(item.size) + '</td></tr>' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Type') + ':</td><td ' + td2 + '>' +
                                '        <span style="width: 200px; display: block-inline; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">' + item.type + '</span>' +
                                '    </td></tr>' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Modified') + ':</td><td ' + td2 + '>' + w2utils.date(item.modified) + '</td></tr>' +
                                '    </table>' +
                                '</div>';
                            $(event.target).w2overlay(preview);
                        }
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    })
                    .on('mouseover', function(event) {
                        var tmp = event.target;
                        if (tmp.tagName != 'LI') tmp = tmp.parentNode;
                        if ($(tmp).hasClass('nomouse')) return;
                        if ($(tmp).data('mouse') == 'out') {
                            var item = selected[$(tmp).attr('index')];
                            // trigger event
                            var eventData = obj.trigger({
                                phase: 'before',
                                type: 'mouseOver',
                                target: obj.el,
                                originalEvent: event.originalEvent,
                                item: item
                            });
                            if (eventData.isCancelled === true) return;
                            // event after
                            obj.trigger($.extend(eventData, {
                                phase: 'after'
                            }));
                        }
                        $(tmp).data('mouse', 'over');
                    })
                    .on('mouseout', function(event) {
                        var tmp = event.target;
                        if (tmp.tagName != 'LI') tmp = tmp.parentNode;
                        if ($(tmp).hasClass('nomouse')) return;
                        $(tmp).data('mouse', 'leaving');
                        setTimeout(function() {
                            if ($(tmp).data('mouse') == 'leaving') {
                                $(tmp).data('mouse', 'out');
                                var item = selected[$(tmp).attr('index')];
                                // trigger event
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'f',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }
                        }, 0);
                    });
                // adjust height
                $(this.el).height('auto');
                var cntHeight = $(div).find('> div').height() + w2utils.getSize(div, '+height') * 2;
                if (cntHeight < 26) cntHeight = 26;
                if (cntHeight > options.maxHeight) cntHeight = options.maxHeight;
                if (div.length > 0) div[0].scrollTop = 1000;
                var inpHeight = w2utils.getSize($(this.el), 'height') - 2;
                if (inpHeight > cntHeight) cntHeight = inpHeight
                $(div).css({
                    'height': cntHeight + 'px',
                    overflow: (cntHeight == options.maxHeight ? 'auto' : 'hidden')
                });
                if (cntHeight < options.maxHeight) $(div).prop('scrollTop', 0);
                $(this.el).css({
                    'height': (cntHeight + 2) + 'px'
                });
            }
            return (new Date()).getTime() - time;
        },

        reset: function() {
            var obj = this;
            var type = this.type;
            this.clear();
            this.type = type;
            this.init();
        },

        clean: function(val) {
            var options = this.options;
            val = String(val).trim();
            // clean
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(this.type) != -1) {
                if (typeof val == 'string') val = val.replace(options.decimalSymbol, '.');
                if (options.autoFormat && ['money', 'currency'].indexOf(this.type) != -1) val = String(val).replace(options.moneyRE, '');
                if (options.autoFormat && this.type == 'percent') val = String(val).replace(options.percentRE, '');
                if (options.autoFormat && ['int', 'float'].indexOf(this.type) != -1) val = String(val).replace(options.numberRE, '');
                if (parseFloat(val) == val) {
                    if (options.min !== null && val < options.min) {
                        val = options.min;
                        $(this.el).val(options.min);
                    }
                    if (options.max !== null && val > options.max) {
                        val = options.max;
                        $(this.el).val(options.max);
                    }
                }
                if (val !== '' && w2utils.isFloat(val)) val = Number(val);
                else val = '';
            }
            return val;
        },

        format: function(val) {
            var options = this.options;
            // autoformat numbers or money
            if (options.autoFormat && val != '') {
                switch (this.type) {
                    case 'money':
                    case 'currency':
                        val = w2utils.formatNumber(Number(val).toFixed(options.currencyPrecision), options.groupSymbol);
                        if (val != '') val = options.currencyPrefix + val + options.currencySuffix;
                        break;
                    case 'percent':
                        val = w2utils.formatNumber(options.precision ? Number(val).toFixed(options.precision) : val, options.groupSymbol);
                        if (val != '') val += '%';
                        break;
                    case 'float':
                        val = w2utils.formatNumber(options.precision ? Number(val).toFixed(options.precision) : val, options.groupSymbol);
                        break;
                    case 'int':
                        val = w2utils.formatNumber(val, options.groupSymbol);
                        break;
                }
            }
            return val;
        },
        //field change event
        change: function(event) {
            var obj = this;
            var options = obj.options;
            // numeric
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(this.type) != -1) {
                // check max/min
                var val = $(this.el).val();
                var new_val = this.format(this.clean($(this.el).val()));
                // if was modified
                if (val != '' && val != new_val) {
                    $(this.el).val(new_val).change();
                    // cancel event
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
            }
            // color
            if (this.type == 'color') {
                var color = '#' + $(this.el).val();
                if ($(this.el).val().length != 6 && $(this.el).val().length != 3) color = '';
                $(this.el).next().find('div').css('background-color', color);
                if ($(obj.el).is(':focus')) this.updateOverlay();
            }
            // list, enum
            if (['list', 'combo'].indexOf(this.type) != -1) {
                if (options.cascadeTo) {
                    obj.cascadeTo(options.cascadeTo);
                }
            }
            if (['list', 'enum', 'file'].indexOf(this.type) != -1) {

                obj.refresh();
                // need time out to show icon indent properly
                setTimeout(function() {
                    obj.refresh();
                }, 5);
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'change',
                    target: obj.el,
                    originalEvent: event.originalEvent,
                    item: $(obj.el).data('selected')
                });
            }
            // date, time
            if (['date', 'time'].indexOf(this.type) != -1) {
                // convert linux timestamps
                var tmp = parseInt(obj.el.value);
                if (w2utils.isInt(obj.el.value) && tmp > 3000) {
                    if (this.type == 'time') $(obj.el).val(w2utils.formatTime(new Date(tmp), options.format)).change();
                    if (this.type == 'date') $(obj.el).val(w2utils.formatDate(new Date(tmp), options.format)).change();
                }
            }
        },

        click: function(event) {
            event.stopPropagation();
            // lists
            if (['list', 'combo', 'enum'].indexOf(this.type) != -1) {
                if (!$(this.el).is(':focus')) {
                    this.focus(event);
                }
            }
            // other fields with drops
            if (['date', 'time', 'color'].indexOf(this.type) != -1) {
                this.updateOverlay();
            }
        },

        focus: function(event) {
            var obj = this;
            var options = this.options;
            // color, date, time
            if (['color', 'date', 'time'].indexOf(obj.type) !== -1) {
                if ($(obj.el).attr('readonly') || $(obj.el).attr('disabled')) return;
                if ($("#w2ui-overlay").length > 0) {
                    $('#w2ui-overlay')[0].hide();
                }
                setTimeout(function() {
                    obj.updateOverlay();
                }, 150);
            }
            // menu
            if (['list', 'combo', 'enum'].indexOf(obj.type) != -1) {
                if ($(obj.el).attr('readonly') || $(obj.el).attr('disabled')) return;
                if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                setTimeout(function() {
                    if (obj.type == 'list' && $(obj.el).is(':focus')) {
                        $(obj.helpers.focus).find('input').focus();
                        //obj.request();
                        return;
                    }

                    setTimeout(function() {
                        //obj.request();
                        obj.updateOverlay();
                    }, 1);
                }, 1);
            }
            // file
            if (obj.type == 'file') {
                $(obj.helpers.multi).css({
                    'outline': 'auto 5px #7DB4F3',
                    'outline-offset': '-2px'
                });
            }
        },

        blur: function(event) {
            var obj = this;
            var options = obj.options;
            var val = $(obj.el).val().trim();
            // hide overlay
            if (['color', 'date', 'time', 'list', 'combo', 'enum'].indexOf(obj.type) != -1) {
                if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
            }
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(obj.type) != -1) {
                if (val !== '' && !obj.checkType(val)) {
                    $(obj.el).val('').change();
                    if (options.silent === false) {
                        $(obj.el).w2tag('Not a valid number');
                        setTimeout(function() {
                            $(obj.el).w2tag('');
                        }, 3000);
                    }
                }
            }
            // date or time
            if (['date', 'time'].indexOf(obj.type) != -1) {
                // check if in range
                if (val !== '' && !obj.inRange(obj.el.value)) {
                    $(obj.el).val('').removeData('selected').change();
                    if (options.silent === false) {
                        $(obj.el).w2tag('Not in range');
                        setTimeout(function() {
                            $(obj.el).w2tag('');
                        }, 3000);
                    }
                } else {
                    if (obj.type == 'date' && val !== '' && !w2utils.isDate(obj.el.value, options.format)) {
                        $(obj.el).val('').removeData('selected').change();
                        if (options.silent === false) {
                            $(obj.el).w2tag('Not a valid date');
                            setTimeout(function() {
                                $(obj.el).w2tag('');
                            }, 3000);
                        }
                    }
                    if (obj.type == 'time' && val !== '' && !w2utils.isTime(obj.el.value)) {
                        $(obj.el).val('').removeData('selected').change();
                        if (options.silent === false) {
                            $(obj.el).w2tag('Not a valid time');
                            setTimeout(function() {
                                $(obj.el).w2tag('');
                            }, 3000);
                        }
                    }
                }
            }
            // clear search input
            if (obj.type == 'enum') {
                $(obj.helpers.multi).find('input').val('').width(20);
            }
            // file
            if (obj.type == 'file') {
                $(obj.helpers.multi).css({
                    'outline': 'none'
                });
            }

        },

        keyPress: function(event) {
            var obj = this;
            var options = obj.options;
            // ignore wrong pressed key
            if (['int', 'float', 'money', 'currency', 'percent', 'hex', 'color', 'alphanumeric'].indexOf(obj.type) != -1) {
                // keyCode & charCode differ in FireFox
                if (event.metaKey || event.ctrlKey || event.altKey || (event.charCode != event.keyCode && event.keyCode > 0)) return;
                var ch = String.fromCharCode(event.charCode);
                if (!obj.checkType(ch, true) && event.keyCode != 13) {
                    event.preventDefault();
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                    return false;
                }
            }
            // update date popup
            if (['date', 'time'].indexOf(obj.type) != -1) {
                setTimeout(function() {
                    obj.updateOverlay();
                }, 1);
            }
        },

        keyDown: function(event, extra) {
            var obj = this;
            var options = obj.options;
            var key = event.keyCode || (extra && extra.keyCode);
            // numeric
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(obj.type) != -1) {
                if (!options.keyboard || $(obj.el).attr('readonly')) return;
                var cancel = false;
                var val = parseFloat($(obj.el).val().replace(options.moneyRE, '')) || 0;
                var inc = options.step;
                if (event.ctrlKey || event.metaKey) inc = 10;
                switch (key) {
                    case 38: // up
                        if (event.shiftKey) break; // no action if shift key is pressed
                        $(obj.el).val((val + inc <= options.max || options.max === null ? Number((val + inc).toFixed(12)) : options.max)).change();
                        cancel = true;
                        break;
                    case 40: // down
                        if (event.shiftKey) break; // no action if shift key is pressed
                        $(obj.el).val((val - inc >= options.min || options.min === null ? Number((val - inc).toFixed(12)) : options.min)).change();
                        cancel = true;
                        break;
                }
                if (cancel) {
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                    }, 0);
                }
            }
            // date
            if (obj.type == 'date') {
                if (!options.keyboard || $(obj.el).attr('readonly')) return;
                var cancel = false;
                var daymil = 24 * 60 * 60 * 1000;
                var inc = 1;
                if (event.ctrlKey || event.metaKey) inc = 10;
                var dt = w2utils.isDate($(obj.el).val(), options.format, true);
                if (!dt) {
                    dt = new Date();
                    daymil = 0;
                }
                switch (key) {
                    case 38: // up
                        if (event.shiftKey) break; // no action if shift key is pressed
                        var newDT = w2utils.formatDate(dt.getTime() + daymil, options.format);
                        if (inc == 10) newDT = w2utils.formatDate(new Date(dt.getFullYear(), dt.getMonth() + 1, dt.getDate()), options.format);
                        $(obj.el).val(newDT).change();
                        cancel = true;
                        break;
                    case 40: // down
                        if (event.shiftKey) break; // no action if shift key is pressed
                        var newDT = w2utils.formatDate(dt.getTime() - daymil, options.format);
                        if (inc == 10) newDT = w2utils.formatDate(new Date(dt.getFullYear(), dt.getMonth() - 1, dt.getDate()), options.format);
                        $(obj.el).val(newDT).change();
                        cancel = true;
                        break;
                }
                if (cancel) {
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                        obj.updateOverlay();
                    }, 0);
                }
            }
            // time
            if (obj.type == 'time') {
                if (!options.keyboard || $(obj.el).attr('readonly')) return;
                var cancel = false;
                var inc = (event.ctrlKey || event.metaKey ? 60 : 1);
                var val = $(obj.el).val();
                var time = obj.toMin(val) || obj.toMin((new Date()).getHours() + ':' + ((new Date()).getMinutes() - 1));
                switch (key) {
                    case 38: // up
                        if (event.shiftKey) break; // no action if shift key is pressed
                        time += inc;
                        cancel = true;
                        break;
                    case 40: // down
                        if (event.shiftKey) break; // no action if shift key is pressed
                        time -= inc;
                        cancel = true;
                        break;
                }
                if (cancel) {
                    $(obj.el).val(obj.fromMin(time)).change();
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                    }, 0);
                }
            }
            // color
            if (obj.type == 'color') {
                if ($(obj.el).attr('readonly')) return;
                // paste
                if (event.keyCode == 86 && (event.ctrlKey || event.metaKey)) {
                    $(obj.el).prop('maxlength', 7);
                    setTimeout(function() {
                        var val = $(obj).val();
                        if (val.substr(0, 1) == '#') val = val.substr(1);
                        if (!w2utils.isHex(val)) val = '';
                        $(obj).val(val).prop('maxlength', 6).change();
                    }, 20);
                }
                if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {
                    if (typeof obj.tmp.cind1 == 'undefined') {
                        obj.tmp.cind1 = -1;
                        obj.tmp.cind2 = -1;
                    } else {
                        switch (key) {
                            case 38: // up
                                obj.tmp.cind1--;
                                break;
                            case 40: // down
                                obj.tmp.cind1++;
                                break;
                            case 39: // right
                                obj.tmp.cind2++;
                                break;
                            case 37: // left
                                obj.tmp.cind2--;
                                break;
                        }
                        if (obj.tmp.cind1 < 0) obj.tmp.cind1 = 0;
                        if (obj.tmp.cind1 > this.pallete.length - 1) obj.tmp.cind1 = this.pallete.length - 1;
                        if (obj.tmp.cind2 < 0) obj.tmp.cind2 = 0;
                        if (obj.tmp.cind2 > this.pallete[0].length - 1) obj.tmp.cind2 = this.pallete[0].length - 1;
                    }
                    if ([37, 38, 39, 40].indexOf(key) != -1) {
                        $(obj.el).val(this.pallete[obj.tmp.cind1][obj.tmp.cind2]).change();
                        event.preventDefault();
                    }
                }
            }
            // list/select/combo
            if (['list', 'combo', 'enum'].indexOf(obj.type) != -1) {
                if ($(obj.el).attr('readonly')) return;
                var cancel = false;
                var selected = $(obj.el).data('selected');
                var focus = $(obj.helpers.focus).find('input');
                if (obj.type == 'list') {
                    if ([37, 38, 39, 40].indexOf(key) == -1) obj.refresh(); // arrows
                }
                // apply arrows
                switch (key) {
                    case 27: // escape
                        if (obj.type == 'list') {
                            if ($(focus).val() != '') $(focus).val('');
                            event.stopPropagation(); // escape in field should not close popup
                        }
                        break;
                    case 37: // left
                    case 39: // right
                        // cancel = true;
                        break;
                    case 13: // enter
                        if ($('#w2ui-overlay').length == 0) break; // no action if overlay not open
                        var item = options.items[options.index];
                        var multi = $(obj.helpers.multi).find('input');
                        if (obj.type == 'enum') {
                            if (item != null) {
                                // trigger event
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'add',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                item = eventData.item; // need to reassign because it could be recreated by user
                                // default behavior
                                if (selected.length >= options.max && options.max > 0) selected.pop();
                                delete item.hidden;
                                delete obj.tmp.force_open;
                                selected.push(item);
                                $(obj.el).change();
                                multi.val('').width(20);
                                obj.refresh();
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            } else {
                                // trigger event
                                item = {
                                    id: multi.val(),
                                    text: multi.val()
                                }
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'new',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                item = eventData.item; // need to reassign because it could be recreated by user
                                // default behavior
                                if (typeof obj.onNew == 'function') {
                                    if (selected.length >= options.max && options.max > 0) selected.pop();
                                    delete obj.tmp.force_open;
                                    selected.push(item);
                                    $(obj.el).change();
                                    multi.val('').width(20);
                                    obj.refresh();
                                }
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }
                        } else {
                            if (item) $(obj.el).data('selected', item).val(item.text).change();
                            if ($(obj.el).val() == '' && $(obj.el).data('selected')) $(obj.el).removeData('selected').val('').change();
                            if (obj.type == 'list') {
                                focus.val('');
                                obj.refresh();
                            }
                            // hide overlay
                            obj.tmp.force_hide = true;
                        }
                        break;
                    case 8: // backspace
                    case 46: // delete
                        if (obj.type == 'enum' && key == 8) {
                            if ($(obj.helpers.multi).find('input').val() == '' && selected.length > 0) {
                                var item = selected[selected.length - 1];
                                // trigger event
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'remove',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                // default behavior
                                selected.pop();
                                $(obj.el).trigger('change');
                                obj.refresh();
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }
                        }
                        if (obj.type == 'list' && $(focus).val() == '') {
                            $(obj.el).data('selected', {}).change();
                            obj.refresh();
                        }
                        break;
                    case 38: // up
                        options.index = w2utils.isInt(options.index) ? parseInt(options.index) : 0;
                        options.index--;
                        while (options.index > 0 && options.items[options.index].hidden) options.index--;
                        if (options.index == 0 && options.items[options.index].hidden) {
                            while (options.items[options.index] && options.items[options.index].hidden) options.index++;
                        }
                        cancel = true;
                        break;
                    case 40: // down
                        options.index = w2utils.isInt(options.index) ? parseInt(options.index) : -1;
                        options.index++;
                        while (options.index < options.items.length - 1 && options.items[options.index].hidden) options.index++;
                        if (options.index == options.items.length - 1 && options.items[options.index].hidden) {
                            while (options.items[options.index] && options.items[options.index].hidden) options.index--;
                        }
                        // show overlay if not shown
                        var input = obj.el;
                        if (['enum'].indexOf(obj.type) != -1) input = obj.helpers.multi.find('input');
                        if ($(input).val() == '' && $('#w2ui-overlay').length == 0) {
                            obj.tmp.force_open = true;
                        } else {
                            cancel = true;
                        }
                        break;
                }
                if (cancel) {
                    if (options.index < 0) options.index = 0;
                    if (options.index >= options.items.length) options.index = options.items.length - 1;
                    obj.updateOverlay();
                    // cancel event
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        if (obj.type == 'enum') {
                            var tmp = obj.helpers.multi.find('input').get(0);
                            tmp.setSelectionRange(tmp.value.length, tmp.value.length);
                        } else if (obj.type == 'list') {
                            var tmp = obj.helpers.focus.find('input').get(0);
                            tmp.setSelectionRange(tmp.value.length, tmp.value.length);
                        } else {
                            obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                        }
                    }, 0);
                    return;
                }
                // expand input
                if (obj.type == 'enum') {
                    var input = obj.helpers.multi.find('input');
                    var search = input.val();
                    input.width(((search.length + 2) * 8) + 'px');
                }
                // run search
                if ([16, 17, 18, 20, 37, 39, 91].indexOf(key) == -1) { // no refreah on crtl, shift, left/right arrows, etc
                    setTimeout(function() {
                        if (!obj.tmp.force_hide) obj.request();
                        obj.search();
                    }, 1);
                }
            }
        },

        keyUp: function(event) {
            if (this.type == 'color') {
                if (event.keyCode == 86 && (event.ctrlKey || event.metaKey)) $(this).prop('maxlength', 6);
            }
        },

        clearCache: function() {
            var options = this.options;
            options.items = [];
            this.tmp.xhr_loading = false;
            this.tmp.xhr_search = '';
            this.tmp.xhr_total = -1;
            this.search();
        },
        cascadeTo: function(els) {
            for (var i in els) {
                var el = els[i];
                try {
                    $(el).w2field().reinit();
                } catch (e) {
                    console.warn('There is no w2filed definition for el ' + el + '!\\nPlease define the field before call "cascadeTo"!');
                }
            }
        },
        reinit: function() {
            this.options.items = [];
            this.tmp.xhr_loading = false;
            this.tmp.xhr_search = '';
            this.tmp.xhr_total = -1;
            //this.clearCache();
            this.options.selected = {};
            this.minLength = this.options.minLength;
            $(this.el).data('selected', []);
            $(this.el).val('');
            if (this.type === 'enum') {
                var div = this.helpers.multi;
                if (div) {
                    div.find('ul').find('li:not(.nomouse)').remove();
                }
            }
            this.request();
        },

        request: function(interval) {
            var obj = this;
            var options = this.options;

            var search = $(obj.el).val() || '';
            // if no url - do nothing
            if (!options.url) return;
            if (typeof options.url === 'function')
                options.url = options.url.call();
            // --
            if (obj.type == 'enum') {
                var tmp = $(obj.helpers.multi).find('input');
                if (tmp.length == 0) search = '';
                else search = tmp.val();
            }
            if (obj.type == 'list') {
                var tmp = $(obj.helpers.focus).find('input');
                if (tmp.length == 0) search = '';
                else search = tmp.val();
            }
            if (options.minLength != 0 && search.length < options.minLength) {
                options.items = []; // need to empty the list
                this.updateOverlay();
                return;
            }
            if (typeof interval == 'undefined') interval = 350;
            if (typeof obj.tmp.xhr_search == 'undefined') obj.tmp.xhr_search = '';
            if (typeof obj.tmp.xhr_total == 'undefined') obj.tmp.xhr_total = -1;
            // check if need to search
            if (options.url && $(obj.el).prop('readonly') != true && (
                    (options.items.length === 0 && obj.tmp.xhr_total !== 0) ||
                    (obj.tmp.xhr_total == options.cacheMax && search.length > obj.tmp.xhr_search.length) ||
                    (search.length >= obj.tmp.xhr_search.length && search.substr(0, obj.tmp.xhr_search.length) != obj.tmp.xhr_search) ||
                    (search.length < obj.tmp.xhr_search.length)
                )) {
                // empty list
                obj.tmp.xhr_loading = true;
                obj.search();
                // timeout
                clearTimeout(obj.tmp.timeout);
                obj.tmp.timeout = setTimeout(function() {
                    // trigger event
                    var url = options.url;
                    var query;
                    var postData = {
                        search: search,
                        max: options.cacheMax
                    };
                    if (options.postData && typeof(options.postData) === 'function') {
                        query = options.postData.apply(this, arguments);
                    } else {
                        query = options.postData;
                    }
                    $.extend(postData, query);
                    var eventData = obj.trigger({
                        phase: 'before',
                        type: 'request',
                        target: obj.el,
                        url: url,
                        postData: postData
                    });
                    if (eventData.isCancelled === true) return;
                    url = eventData.url;
                    postData = eventData.postData;
                    // console.log('REMOTE SEARCH:', search);
                    if (obj.tmp.xhr) obj.tmp.xhr.abort();
                    var ajaxOptions = {
                        type: 'GET',
                        url: url,
                        data: postData,
                        dataType: 'JSON' // expected from server
                    };
                    if (w2utils.settings.dataType == 'JSON') {
                        ajaxOptions.type = 'POST';
                        ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                        ajaxOptions.contentType = 'application/json';
                    }
                    obj.tmp.xhr = $.ajax(ajaxOptions)
                        .done(function(data, status, xhr) {
                            // trigger event
                            var eventData2 = obj.trigger({
                                phase: 'before',
                                type: 'load',
                                target: obj.el,
                                search: postData.search,
                                data: data,
                                xhr: xhr
                            });
                            if (eventData2.isCancelled === true) return;
                            // default behavior
                            data = eventData2.data;
                            if (typeof data == 'string') data = JSON.parse(data);
                            if (data.status != 'success') {
                                console.log('ERROR: server did not return proper structure. It should return', {
                                    status: 'success',
                                    items: [{
                                        id: 1,
                                        text: 'item'
                                    }]
                                });
                                return;
                            }
                            // remove all extra items if more then needed for cache
                            if (data.items.length > options.cacheMax) data.items.splice(options.cacheMax, 100000);
                            // remember stats
                            obj.tmp.xhr_loading = false;
                            obj.tmp.xhr_search = search;
                            obj.tmp.xhr_total = data.items.length;
                            options.items = obj.normMenu(data.items);
                            if (search == '' && data.items.length == 0) obj.tmp.emptySet = true;
                            else obj.tmp.emptySet = false;
                            obj.search();
                            // console.log('-->', 'retrieved:', obj.tmp.xhr_total);
                            // event after
                            obj.trigger($.extend(eventData2, {
                                phase: 'after'
                            }));
                        })
                        .fail(function(xhr, status, error) {
                            // trigger event
                            var errorObj = {
                                status: status,
                                error: error,
                                rawResponseText: xhr.responseText
                            };
                            var eventData2 = obj.trigger({
                                phase: 'before',
                                type: 'error',
                                target: obj.el,
                                search: search,
                                error: errorObj,
                                xhr: xhr
                            });
                            if (eventData2.isCancelled === true) return;
                            // default behavior
                            if (status != 'abort') {
                                var data;
                                try {
                                    data = $.parseJSON(xhr.responseText)
                                } catch (e) {}
                                console.log('ERROR: Server communication failed.',
                                    '\n   EXPECTED:', {
                                        status: 'success',
                                        items: [{
                                            id: 1,
                                            text: 'item'
                                        }]
                                    },
                                    '\n         OR:', {
                                        status: 'error',
                                        message: 'error message'
                                    },
                                    '\n   RECEIVED:', typeof data == 'object' ? data : xhr.responseText);
                            }
                            // reset stats
                            obj.clearCache();
                            // event after
                            obj.trigger($.extend(eventData2, {
                                phase: 'after'
                            }));
                        });
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, interval);
            }
        },
        //FIELD SEARCH
        search: function() {
            var obj = this;
            var options = this.options;
            var search = $(obj.el).val();
            var target = obj.el;
            var ids = [];
            var selected = $(obj.el).data('selected');
            if (obj.type == 'enum') {
                target = $(obj.helpers.multi).find('input');
                search = target.val();
                for (var s in selected) {
                    if (selected[s]) ids.push(selected[s].id);
                }
            }
            if (obj.type == 'list') {
                target = $(obj.helpers.focus).find('input');
                search = target.val();
                for (var s in selected) {
                    if (selected[s]) ids.push(selected[s].id);
                }
            }
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'search',
                target: target,
                search: search
            });
            if (eventData.isCancelled === true) return;
            if (obj.tmp.xhr_loading !== true) {
                var shown = 0;
                for (var i in options.items) {
                    var item = options.items[i];
                    var prefix = '';
                    var suffix = '';
                    if (['is', 'begins'].indexOf(options.match) != -1) prefix = '^';
                    if (['is', 'ends'].indexOf(options.match) != -1) suffix = '$';
                    try {
                        var srch = w2utils.escapeRegExp(search);
                        var re = new RegExp(prefix + srch + suffix, 'i');
                        if (re.test(item.text) || item.text == '...') item.hidden = false;
                        else item.hidden = true;
                    } catch (e) {}
                    // do not show selected items
                    if (obj.type == 'enum' && $.inArray(item.id, ids) != -1) item.hidden = true;
                    if (item.hidden !== true) shown++;
                }
                if (obj.type != 'combo') { // don't preselect first for combo
                    options.index = 0;
                    while (options.items[options.index] && options.items[options.index].hidden) options.index++;
                } else {
                    options.index = -1;
                }
                if (shown <= 0) options.index = -1;
                options.spinner = false;
                obj.updateOverlay();
                setTimeout(function() {
                    var html = $('#w2ui-overlay').html() || '';
                    if (options.markSearch && html.indexOf('$.fn.w2menuHandler') != -1) { // do not highlight when no items
                        $('#w2ui-overlay').w2marker(search);
                    }
                }, 1);
            } else {
                options.items.splice(0, options.cacheMax);
                options.spinner = true;
                obj.updateOverlay();
            }
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        updateOverlay: function() {
            var obj = this;
            var options = this.options;
            // color
            if (this.type == 'color') {
                if ($(obj.el).attr('readonly')) return;
                if ($('#w2ui-overlay').length == 0) {
                    $(obj.el).w2overlay(obj.getColorHTML());
                } else {
                    $('#w2ui-overlay').html(obj.getColorHTML());
                }
                // bind events
                $('#w2ui-overlay .color')
                    .on('mousedown', function(event) {
                        var color = $(event.originalEvent.target).attr('name');
                        var index = $(event.originalEvent.target).attr('index').split(':');
                        obj.tmp.cind1 = index[0];
                        obj.tmp.cind2 = index[1];
                        $(obj.el).val(color).change();
                        $(this).html('&#149;');
                    })
                    .on('mouseup', function() {
                        setTimeout(function() {
                            if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay').removeData('keepOpen')[0].hide();
                        }, 10);
                    });
            }
            // date
            if (this.type == 'date') {
                if ($(obj.el).attr('readonly')) return;
                if ($('#w2ui-overlay').length == 0) {
                    $(obj.el).w2overlay('<div class="w2ui-reset w2ui-calendar" onclick="event.stopPropagation();"></div>', {
                        css: {
                            "background-color": "#f5f5f5"
                        }
                    });
                }
                var month, year;
                var dt = w2utils.isDate($(obj.el).val(), obj.options.format, true);
                if (dt) {
                    month = dt.getMonth() + 1;
                    year = dt.getFullYear();
                }
                (function refreshCalendar(month, year) {
                    $('#w2ui-overlay > div > div').html(obj.getMonthHTML(month, year));
                    $('#w2ui-overlay .w2ui-calendar-title')
                        .on('mousedown', function() {
                            if ($(this).next().hasClass('w2ui-calendar-jump')) {
                                $(this).next().remove();
                            } else {
                                var selYear, selMonth;
                                $(this).after('<div class="w2ui-calendar-jump" style=""></div>');
                                $(this).next().hide().html(obj.getYearHTML()).fadeIn(200);
                                setTimeout(function() {
                                    $('#w2ui-overlay .w2ui-calendar-jump')
                                        .find('.w2ui-jump-month, .w2ui-jump-year')
                                        .on('click', function() {
                                            if ($(this).hasClass('w2ui-jump-month')) {
                                                $(this).parent().find('.w2ui-jump-month').removeClass('selected');
                                                $(this).addClass('selected');
                                                selMonth = $(this).attr('name');
                                            }
                                            if ($(this).hasClass('w2ui-jump-year')) {
                                                $(this).parent().find('.w2ui-jump-year').removeClass('selected');
                                                $(this).addClass('selected');
                                                selYear = $(this).attr('name');
                                            }
                                            if (selYear != null && selMonth != null) {
                                                $('#w2ui-overlay .w2ui-calendar-jump').fadeOut(100);
                                                setTimeout(function() {
                                                    refreshCalendar(parseInt(selMonth) + 1, selYear);
                                                }, 100);
                                            }
                                        });
                                    $('#w2ui-overlay .w2ui-calendar-jump >:last-child').prop('scrollTop', 2000);
                                }, 1);
                            }
                        });
                    $('#w2ui-overlay .w2ui-date')
                        .on('mousedown', function() {
                            var day = $(this).attr('date');
                            $(obj.el).val(day).change();
                            $(this).css({
                                'background-color': '#B6D5FB',
                                'border-color': '#aaa'
                            });
                        })
                        .on('mouseup', function() {
                            setTimeout(function() {
                                if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay').removeData('keepOpen')[0].hide();
                            }, 10);
                        });
                    $('#w2ui-overlay .previous').on('mousedown', function() {
                        var tmp = obj.options.current.split('/');
                        tmp[0] = parseInt(tmp[0]) - 1;
                        refreshCalendar(tmp[0], tmp[1]);
                    });
                    $('#w2ui-overlay .next').on('mousedown', function() {
                        var tmp = obj.options.current.split('/');
                        tmp[0] = parseInt(tmp[0]) + 1;
                        refreshCalendar(tmp[0], tmp[1]);
                    });
                })(month, year);
            }
            // date
            if (this.type == 'time') {
                if ($(obj.el).attr('readonly')) return;
                if ($('#w2ui-overlay').length == 0) {
                    $(obj.el).w2overlay('<div class="w2ui-reset w2ui-calendar-time" onclick="event.stopPropagation();"></div>', {
                        css: {
                            "background-color": "#fff"
                        }
                    });
                }
                var h24 = (this.options.format == 'h24' ? true : false);
                $('#w2ui-overlay > div').html(obj.getHourHTML());
                $('#w2ui-overlay .w2ui-time')
                    .on('mousedown', function(event) {
                        $(this).css({
                            'background-color': '#B6D5FB',
                            'border-color': '#aaa'
                        });
                        var hour = $(this).attr('hour');
                        $(obj.el).val((hour > 12 && !h24 ? hour - 12 : hour) + ':00' + (!h24 ? (hour < 12 ? ' am' : ' pm') : '')).change();
                    })
                    .on('mouseup', function() {
                        var hour = $(this).attr('hour');
                        if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                        $(obj.el).w2overlay('<div class="w2ui-reset w2ui-calendar-time"></div>', {
                            css: {
                                "background-color": "#fff"
                            }
                        });
                        $('#w2ui-overlay > div').html(obj.getMinHTML(hour));
                        $('#w2ui-overlay .w2ui-time')
                            .on('mousedown', function() {
                                $(this).css({
                                    'background-color': '#B6D5FB',
                                    'border-color': '#aaa'
                                });
                                var min = $(this).attr('min');
                                $(obj.el).val((hour > 12 && !h24 ? hour - 12 : hour) + ':' + (min < 10 ? 0 : '') + min + (!h24 ? (hour < 12 ? ' am' : ' pm') : '')).change();
                            })
                            .on('mouseup', function() {
                                setTimeout(function() {
                                    if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay').removeData('keepOpen')[0].hide();
                                }, 10);
                            });
                    });
            }
            // list
            if (['list', 'combo', 'enum'].indexOf(this.type) != -1) {
                var el = this.el;
                var input = this.el;
                if (this.type == 'enum') {
                    el = $(this.helpers.multi);
                    input = $(el).find('input');
                }
                if (this.type == 'list') {
                    input = $(this.helpers.focus).find('input');
                }
                if ($(input).is(':focus')) {
                    if (options.openOnFocus === false && $(input).val() == '' && obj.tmp.force_open !== true) {
                        $().w2overlay();
                        return;
                    }
                    if (obj.tmp.force_hide) {
                        $().w2overlay();
                        setTimeout(function() {
                            delete obj.tmp.force_hide;
                        }, 1);
                        return;
                    }
                    if ($(input).val() != '') delete obj.tmp.force_open;
                    if ($('#w2ui-overlay').length == 0) options.index = 0;
                    var msgNoItems = w2utils.lang('No matches');
                    if (options.url != null && $(input).val().length < options.minLength && obj.tmp.emptySet !== true) msgNoItems = options.minLength + ' ' + w2utils.lang('letters or more...');
                    if (options.url != null && $(input).val() == '' && obj.tmp.emptySet !== true) msgNoItems = w2utils.lang('Type to search....');
                    //updateoverlay refresh menu
                    $(el).w2menu('refresh', $.extend(true, {}, options, {
                        search: false,
                        render: options.renderDrop,
                        maxHeight: options.maxDropHeight,
                        msgNoItems: msgNoItems,
                        // selected with mouse
                        onSelect: function(event) {
                            if (obj.type == 'enum') {
                                var selected = $(obj.el).data('selected');
                                if (event.item) {
                                    // trigger event
                                    var eventData = obj.trigger({
                                        phase: 'before',
                                        type: 'add',
                                        target: obj.el,
                                        originalEvent: event.originalEvent,
                                        item: event.item
                                    });
                                    if (eventData.isCancelled === true) return;
                                    // default behavior
                                    if (selected.length >= options.max && options.max > 0) selected.pop();
                                    delete event.item.hidden;
                                    selected.push(event.item);
                                    $(obj.el).data('selected', selected).change();
                                    $(obj.helpers.multi).find('input').val('').width(20);
                                    obj.refresh();
                                    if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                                    // event after
                                    obj.trigger($.extend(eventData, {
                                        phase: 'after'
                                    }));
                                }
                            } else {
                                var selected = $(obj.el).data('selected');
                                if(selected){
                                    if(!selected.id){//is not object
                                        if(selected===event.item.id){//no change
                                            $(obj.el).data('selected', event.item)
                                        }else{
                                            $(obj.el).data('selected', event.item).val(event.item.text).change();
                                        }
                                    }else{
                                        //selected is object
                                        if(selected.id === event.item.id && selected.text === event.item.text){
                                            //no change
                                        }else{
                                            $(obj.el).data('selected', event.item).val(event.item.text).change();
                                        }
                                    }
                                }
                                    
                                if (obj.helpers.focus) obj.helpers.focus.find('input').val('');
                            }
                        }
                    }));
                }
            }
        },

        inRange: function(str) {
            var inRange = false;
            if (this.type == 'date') {
                var dt = w2utils.isDate(str, this.options.format, true);
                if (dt) {
                    // enable range
                    if (this.options.start || this.options.end) {
                        var st = (typeof this.options.start == 'string' ? this.options.start : $(this.options.start).val());
                        var en = (typeof this.options.end == 'string' ? this.options.end : $(this.options.end).val());
                        var start = w2utils.isDate(st, this.options.format, true);
                        var end = w2utils.isDate(en, this.options.format, true);
                        var current = new Date(dt);
                        if (!start) start = current;
                        if (!end) end = current;
                        if (current >= start && current <= end) inRange = true;
                    } else {
                        inRange = true;
                    }
                    // block predefined dates
                    if (this.options.blocked && $.inArray(str, this.options.blocked) != -1) inRange = false;
                }
            }
            if (this.type == 'time') {
                if (this.options.start || this.options.end) {
                    var tm = this.toMin(str);
                    var tm1 = this.toMin(this.options.start);
                    var tm2 = this.toMin(this.options.end);
                    if (!tm1) tm1 = tm;
                    if (!tm2) tm2 = tm;
                    if (tm >= tm1 && tm <= tm2) inRange = true;
                } else {
                    inRange = true;
                }
            }
            return inRange;
        },

        /*
         *  INTERNAL FUNCTIONS
         */

        checkType: function(ch, loose) {
            var obj = this;
            switch (obj.type) {
                case 'int':
                    if (loose && ['-', obj.options.groupSymbol].indexOf(ch) != -1) return true;
                    return w2utils.isInt(ch.replace(obj.options.numberRE, ''));
                case 'percent':
                    ch = ch.replace(/%/g, '');
                case 'float':
                    if (loose && ['-', w2utils.settings.decimalSymbol, obj.options.groupSymbol].indexOf(ch) != -1) return true;
                    return w2utils.isFloat(ch.replace(obj.options.numberRE, ''));
                case 'money':
                case 'currency':
                    if (loose && ['-', obj.options.decimalSymbol, obj.options.groupSymbol, obj.options.currencyPrefix, obj.options.currencySuffix].indexOf(ch) != -1) return true;
                    return w2utils.isFloat(ch.replace(obj.options.moneyRE, ''));
                case 'hex':
                case 'color':
                    return w2utils.isHex(ch);
                case 'alphanumeric':
                    return w2utils.isAlphaNumeric(ch);
            }
            return true;
        },

        addPrefix: function() {
            var obj = this;
            setTimeout(function() {
                if (obj.type === 'clear') return;
                var helper;
                var tmp = $(obj.el).data('tmp') || {};
                if (tmp['old-padding-left']) $(obj.el).css('padding-left', tmp['old-padding-left']);
                tmp['old-padding-left'] = $(obj.el).css('padding-left');
                $(obj.el).data('tmp', tmp);
                // remove if already displaed
                if (obj.helpers.prefix) $(obj.helpers.prefix).remove();
                if (obj.options.prefix !== '') {
                    // add fresh
                    $(obj.el).before(
                        '<div class="w2ui-field-helper">' +
                        obj.options.prefix +
                        '</div>'
                    );
                    helper = $(obj.el).prev();
                    helper
                        .css({
                            'color': $(obj.el).css('color'),
                            'font-family': $(obj.el).css('font-family'),
                            'font-size': $(obj.el).css('font-size'),
                            'padding-top': $(obj.el).css('padding-top'),
                            'padding-bottom': $(obj.el).css('padding-bottom'),
                            'padding-left': $(obj.el).css('padding-left'),
                            'padding-right': 0,
                            'margin-top': (parseInt($(obj.el).css('margin-top'), 10) + 2) + 'px',
                            'margin-bottom': (parseInt($(obj.el).css('margin-bottom'), 10) + 1) + 'px',
                            'margin-left': $(obj.el).css('margin-left'),
                            'margin-right': 0
                        })
                        .on('click', function(event) {
                            if (obj.options.icon && typeof obj.onIconClick == 'function') {
                                // event before
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'iconClick',
                                    target: obj.el,
                                    el: $(this).find('span.w2ui-icon')[0]
                                });
                                if (eventData.isCancelled === true) return;

                                // intentionally empty

                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            } else {
                                if (obj.type == 'list') {
                                    $(obj.helpers.focus).find('input').focus();
                                } else {
                                    $(obj.el).focus();
                                }
                            }
                        });
                    $(obj.el).css('padding-left', (helper.width() + parseInt($(obj.el).css('padding-left'), 10)) + 'px');
                    // remember helper
                    obj.helpers.prefix = helper;
                }
            }, 1);
        },

        addSuffix: function() {
            var obj = this;
            var helper, pr;
            setTimeout(function() {
                if (obj.type === 'clear') return;
                var tmp = $(obj.el).data('tmp') || {};
                if (tmp['old-padding-right']) $(obj.el).css('padding-right', tmp['old-padding-right']);
                tmp['old-padding-right'] = $(obj.el).css('padding-right');
                $(obj.el).data('tmp', tmp);
                pr = parseInt($(obj.el).css('padding-right'), 10);
                if (obj.type === 'list' || obj.type === 'combo') {
                    $(obj.el).wrap('<span class="w2ui-select-arrow"></span>');
                    helper = $(obj.el).parent();
                    helper.on('click', function(event) {
                        if (obj.type == 'list') {
                            $(obj.helpers.focus).find('input').focus();
                        } else {
                            $(obj.el).focus();
                        }
                    });
                    obj.helpers.suffix = helper;

                } else {
                    if (obj.options.arrows) {
                        // remove if already displaed
                        if (obj.helpers.arrows) $(obj.helpers.arrows).remove();
                        // add fresh
                        $(obj.el).after(
                            '<div class="w2ui-field-helper" style="border: 1px solid transparent">&nbsp;' +
                            '    <div class="w2ui-field-up" type="up">' +
                            '        <div class="arrow-up" type="up"></div>' +
                            '    </div>' +
                            '    <div class="w2ui-field-down" type="down">' +
                            '        <div class="arrow-down" type="down"></div>' +
                            '    </div>' +
                            '</div>');
                        var height = w2utils.getSize(obj.el, 'height');
                        helper = $(obj.el).next();
                        helper.css({
                                'color': $(obj.el).css('color'),
                                'font-family': $(obj.el).css('font-family'),
                                'font-size': $(obj.el).css('font-size'),
                                'height': ($(obj.el).height() + parseInt($(obj.el).css('padding-top'), 10) + parseInt($(obj.el).css('padding-bottom'), 10)) + 'px',
                                'padding': 0,
                                'margin-top': (parseInt($(obj.el).css('margin-top'), 10) + 1) + 'px',
                                'margin-bottom': 0,
                                'border-left': '1px solid silver'
                            })
                            .css('margin-left', '-' + (helper.width() + parseInt($(obj.el).css('margin-right'), 10) + 12) + 'px')
                            .on('mousedown', function(event) {
                                $('body').on('mouseup', tmp);
                                $('body').data('_field_update_timer', setTimeout(update, 700));
                                update(false);
                                // timer function
                                function tmp() {
                                    clearTimeout($('body').data('_field_update_timer'));
                                    $('body').off('mouseup', tmp);
                                }
                                // update function

                                function update(notimer) {
                                    $(obj.el).focus();
                                    obj.keyDown($.Event("keydown"), {
                                        keyCode: ($(event.target).attr('type') == 'up' ? 38 : 40)
                                    });
                                    if (notimer !== false) $('body').data('_field_update_timer', setTimeout(update, 60));
                                }
                            });
                        pr += helper.width() + 12;
                        $(obj.el).css('padding-right', pr + 'px');
                        // remember helper
                        obj.helpers.arrows = helper;
                    }
                    if (obj.options.suffix !== '') {
                        // remove if already displaed
                        if (obj.helpers.suffix) $(obj.helpers.suffix).remove();
                        // add fresh

                        $(obj.el).after(
                            '<div class="w2ui-field-helper">' +
                            obj.options.suffix +
                            '</div>');
                        helper = $(obj.el).next();
                        helper
                            .css({
                                'color': $(obj.el).css('color'),
                                'font-family': $(obj.el).css('font-family'),
                                'font-size': $(obj.el).css('font-size'),
                                'padding-top': $(obj.el).css('padding-top'),
                                'padding-bottom': $(obj.el).css('padding-bottom'),
                                'padding-left': '3px',
                                'padding-right': $(obj.el).css('padding-right'),
                                'margin-top': (parseInt($(obj.el).css('margin-top'), 10) + 2) + 'px',
                                'margin-bottom': (parseInt($(obj.el).css('margin-bottom'), 10) + 1) + 'px'
                            })
                            .on('click', function(event) {
                                if (obj.type == 'list') {
                                    $(obj.helpers.focus).find('input').focus();
                                } else {
                                    $(obj.el).focus();
                                }
                            });

                        helper.css('margin-left', '-' + (w2utils.getSize(helper, 'width') + parseInt($(obj.el).css('margin-right'), 10) + 2) + 'px');
                        pr += helper.width() + 3;
                        $(obj.el).css('padding-right', pr + 'px');
                        // remember helper
                        obj.helpers.suffix = helper;
                    }
                }
            }, 1);
        },

        addFocus: function() {
            var obj = this;
            var options = this.options;
            var width = 0; // 11 - show search icon, 0 do not show
            // clean up & init
            $(obj.helpers.focus).remove();
            // build helper
            var html =
                '<div class="w2ui-field-helper">' +
                // '    <div class="w2ui-icon icon-search"></div>' +
                '    <input type="text" autocomplete="off">' +
                '<div>';
            $(obj.el).attr('tabindex', -1).before(html);
            var helper = $(obj.el).prev();
            obj.helpers.focus = helper;
            helper.css({
                    width: $(obj.el).width(),//'100%',
                    "margin-top": $(obj.el).css('margin-top'),
                    "margin-left": (parseInt($(obj.el).css('margin-left')) + parseInt($(obj.el).css('padding-left'))) + 'px',
                    "margin-bottom": $(obj.el).css('margin-bottom'),
                    "margin-right": $(obj.el).css('margin-right')
                })
                .find('input')
                .css({
                    cursor: 'default',
                    width: '100%',
                    outline: 'none',
                    opacity: 1,
                    margin: 0,
                    border: '1px solid transparent',
                    padding: $(obj.el).css('padding-top'),
                    "padding-left": 0,
                    "margin-left": (width > 0 ? width + 6 : 0),
                    "background-color": 'transparent'
                });
            // INPUT events
            helper.find('input')
                .on('click', function(event) {
                    if ($('#w2ui-overlay').length == 0) obj.focus(event);
                    event.stopPropagation();
                })
                .on('focus', function(event) {
                    $(obj.el).css({
                        'outline': 'auto 5px #7DB4F3',
                        'outline-offset': '-2px'
                    });
                    $(this).val('');
                    $(obj.el).triggerHandler('focus');
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                })
                .on('blur', function(event) {
                    $(obj.el).css('outline', 'none');
                    $(this).val('');
                    obj.refresh();
                    $(obj.el).triggerHandler('blur');
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                })
                .on('keyup', function(event) {
                    obj.keyUp(event)
                })
                .on('keydown', function(event) {
                    obj.keyDown(event)
                })
                .on('keypress', function(event) {
                    obj.keyPress(event);
                });
            // MAIN div
            helper.on('click', function(event) {
                $(this).find('input').focus();
            });
            obj.refresh();
        },

        addMulti: function() {
            var obj = this;
            var options = this.options;
            // clean up & init
            $(obj.helpers.multi).remove();
            // build helper
            var html = '';
            var margin =
                'margin-top     : 0px; ' +
                'margin-bottom  : 0px; ' +
                'margin-left    : ' + $(obj.el).css('margin-left') + '; ' +
                'margin-right   : ' + $(obj.el).css('margin-right') + '; ' +
                'width          : ' + (w2utils.getSize(obj.el, 'width') - parseInt($(obj.el).css('margin-left'), 10) - parseInt($(obj.el).css('margin-right'), 10)) + 'px;';
            if (obj.type == 'enum') {
                html = '<div class="w2ui-field-helper w2ui-list" style="' + margin + '; box-sizing: border-box">' +
                    '    <div style="padding: 0px; margin: 0px; margin-right: 20px; display: inline-block">' +
                    '    <ul>' +
                    '        <li style="padding-left: 0px; padding-right: 0px" class="nomouse">' +
                    '            <input type="text" style="width: 20px" autocomplete="off" ' + ($(obj.el).attr('readonly') ? 'readonly' : '') + '>' +
                    '        </li>'
                '    </ul>' +
                '    </div>' +
                '</div>';
            }
            if (obj.type == 'file') {
                html = '<div class="w2ui-field-helper w2ui-list" style="' + margin + '; box-sizing: border-box">' +
                    '    <div style="padding: 0px; margin: 0px; margin-right: 20px; display: inline-block">' +
                    '    <ul><li style="padding-left: 0px; padding-right: 0px" class="nomouse"></li></ul>' +
                    '    <input class="file-input" type="file" name="attachment" multiple style="display: none" tabindex="-1">'
                '    </div>' +
                '</div>';
            }
            $(obj.el)
                .before(html)
                .css({
                    'background-color': 'transparent',
                    'border-color': 'transparent'
                });

            var div = $(obj.el).prev();
            obj.helpers.multi = div;
            if (obj.type == 'enum') {
                $(obj.el).attr('tabindex', -1);
                // INPUT events
                div.find('input')
                    .on('click', function(event) {
                        if ($('#w2ui-overlay').length == 0) obj.focus(event);
                        $(obj.el).triggerHandler('click');
                    })
                    .on('focus', function(event) {
                        $(div).css({
                            'outline': 'auto 5px #7DB4F3',
                            'outline-offset': '-2px'
                        });
                        $(obj.el).triggerHandler('focus');
                        if (event.stopPropagation) event.stopPropagation();
                        else event.cancelBubble = true;
                    })
                    .on('blur', function(event) {
                        $(div).css('outline', 'none');
                        $(obj.el).triggerHandler('blur');
                        if (event.stopPropagation) event.stopPropagation();
                        else event.cancelBubble = true;
                    })
                    .on('keyup', function(event) {
                        obj.keyUp(event)
                    })
                    .on('keydown', function(event) {
                        obj.keyDown(event)
                    })
                    .on('keypress', function(event) {
                        div.find('.w2ui-enum-placeholder').remove();
                        obj.keyPress(event);
                    });
                // MAIN div
                div.on('click', function(event) {
                    $(this).find('input').focus();
                });
            }
            if (obj.type == 'file') {
                $(obj.el).css('outline', 'none');
                div.on('click', function(event) {
                        $(obj.el).focus();
                        if ($(obj.el).attr('readonly')) return;
                        obj.blur(event);
                        div.find('input').click();
                    })
                    .on('dragenter', function(event) {
                        if ($(obj.el).attr('readonly')) return;
                        $(div).addClass('w2ui-file-dragover');
                    })
                    .on('dragleave', function(event) {
                        if ($(obj.el).attr('readonly')) return;
                        var tmp = $(event.target).parents('.w2ui-field-helper');
                        if (tmp.length == 0) $(div).removeClass('w2ui-file-dragover');
                    })
                    .on('drop', function(event) {
                        if ($(obj.el).attr('readonly')) return;
                        $(div).removeClass('w2ui-file-dragover');
                        var files = event.originalEvent.dataTransfer.files;
                        for (var i = 0, l = files.length; i < l; i++) obj.addFile.call(obj, files[i]);
                        // cancel to stop browser behaviour
                        event.preventDefault();
                        event.stopPropagation();
                    })
                    .on('dragover', function(event) {
                        // cancel to stop browser behaviour
                        event.preventDefault();
                        event.stopPropagation();
                    });
                div.find('input')
                    .on('click', function(event) {
                        event.stopPropagation();
                    })
                    .on('change', function() {
                        if (typeof this.files !== "undefined") {
                            for (var i = 0, l = this.files.length; i < l; i++) {
                                obj.addFile.call(obj, this.files[i]);
                            }
                        }
                    });
            }
            obj.refresh();
        },

        addFile: function(file) {
            var obj = this;
            var options = this.options;
            var selected = $(obj.el).data('selected');
            var newItem = {
                name: file.name,
                type: file.type,
                modified: file.lastModifiedDate,
                size: file.size,
                content: null
            };
            var size = 0;
            var cnt = 0;
            var err;
            for (var s in selected) {
                // check for dups
                if (selected[s].name == file.name && selected[s].size == file.size) return;
                size += selected[s].size;
                cnt++;
            }
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'add',
                target: obj.el,
                file: newItem,
                total: cnt,
                totalSize: size
            });
            if (eventData.isCancelled === true) return;
            // check params
            if (options.maxFileSize !== 0 && newItem.size > options.maxFileSize) {
                err = 'Maximum file size is ' + w2utils.size(options.maxFileSize);
                if (options.silent === false) $(obj.el).w2tag(err);
                console.log('ERROR: ' + err);
                return;
            }
            if (options.maxSize !== 0 && size + newItem.size > options.maxSize) {
                err = 'Maximum total size is ' + w2utils.size(options.maxSize);
                if (options.silent === false) $(obj.el).w2tag(err);
                console.log('ERROR: ' + err);
                return;
            }
            if (options.max !== 0 && cnt >= options.max) {
                err = 'Maximum number of files is ' + options.max;
                if (options.silent === false) $(obj.el).w2tag(err);
                console.log('ERROR: ' + err);
                return;
            }
            selected.push(newItem);
            // read file as base64
            if (typeof FileReader !== "undefined") {
                var reader = new FileReader();
                // need a closure
                reader.onload = (function() {
                    return function(event) {
                        var fl = event.target.result;
                        var ind = fl.indexOf(',');
                        newItem.content = fl.substr(ind + 1);
                        obj.refresh();
                        $(obj.el).trigger('change');
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    };
                })();
                reader.readAsDataURL(file);
            } else {
                obj.refresh();
                $(obj.el).trigger('change');
            }
        },

        normMenu: function(menu) {
            if ($.isArray(menu)) {
                for (var m = 0; m < menu.length; m++) {
                    if (typeof menu[m] == 'string') {
                        menu[m] = {
                            id: menu[m],
                            text: menu[m]
                        };
                    } else {
                        if (typeof menu[m].text != 'undefined' && typeof menu[m].id == 'undefined') menu[m].id = menu[m].text;
                        if (typeof menu[m].text == 'undefined' && typeof menu[m].id != 'undefined') menu[m].text = menu[m].id;
                        if (typeof menu[m].caption != 'undefined') menu[m].text = menu[m].caption;
                    }
                }
                return menu;
            } else if (typeof menu == 'object') {
                var tmp = []
                for (var m in menu) tmp.push({
                    id: m,
                    text: menu[m]
                });
                return tmp;
            }
        },

        getColorHTML: function() {
            var html = '<div class="w2ui-color">' +
                '<table cellspacing="5">';
            for (var i = 0; i < 8; i++) {
                html += '<tr>';
                for (var j = 0; j < 8; j++) {
                    html += '<td>' +
                        '    <div class="color" style="background-color: #' + this.pallete[i][j] + ';" name="' + this.pallete[i][j] + '" index="' + i + ':' + j + '">' +
                        '        ' + ($(this.el).val() == this.pallete[i][j] ? '&#149;' : '&nbsp;') +
                        '    </div>' +
                        '</td>';
                }
                html += '</tr>';
                if (i < 2) html += '<tr><td style="height: 8px" colspan="8"></td></tr>';
            }
            html += '</table></div>';
            return html;
        },

        getMonthHTML: function(month, year) {
            var td = new Date();
            var months = w2utils.settings.fullmonths;
            var days = w2utils.settings.fulldays;
            var daysCount = ['31', '28', '31', '30', '31', '30', '31', '31', '30', '31', '30', '31'];
            var today = td.getFullYear() + '/' + (Number(td.getMonth()) + 1) + '/' + td.getDate();
            // normalize date
            year = w2utils.isInt(year) ? parseInt(year) : td.getFullYear();
            month = w2utils.isInt(month) ? parseInt(month) : td.getMonth() + 1;
            if (month > 12) {
                month -= 12;
                year++;
            }
            if (month < 1 || month === 0) {
                month += 12;
                year--;
            }
            if (year / 4 == Math.floor(year / 4)) {
                daysCount[1] = '29';
            } else {
                daysCount[1] = '28';
            }
            this.options.current = month + '/' + year;

            // start with the required date
            td = new Date(year, month - 1, 1);
            var weekDay = td.getDay();
            var tabDays = w2utils.settings.shortdays;
            var dayTitle = '';
            for (var i = 0, len = tabDays.length; i < len; i++) {
                dayTitle += '<td>' + tabDays[i] + '</td>';
            }
            var html =
                '<div class="w2ui-calendar-title title">' +
                '    <div class="w2ui-calendar-previous previous"> <div></div> </div>' +
                '    <div class="w2ui-calendar-next next"> <div></div> </div> ' +
                months[month - 1] + ', ' + year +
                '</div>' +
                '<table class="w2ui-calendar-days" cellspacing="0">' +
                '    <tr class="w2ui-day-title">' + dayTitle + '</tr>' +
                '    <tr>';

            var day = 1;
            for (var ci = 1; ci < 43; ci++) {
                if (weekDay === 0 && ci == 1) {
                    for (var ti = 0; ti < 6; ti++) html += '<td class="w2ui-day-empty">&nbsp;</td>';
                    ci += 6;
                } else {
                    if (ci < weekDay || day > daysCount[month - 1]) {
                        html += '<td class="w2ui-day-empty">&nbsp;</td>';
                        if ((ci) % 7 === 0) html += '</tr><tr>';
                        continue;
                    }
                }
                var dt = year + '/' + month + '/' + day;

                var className = '';
                if (ci % 7 == 6) className = ' w2ui-saturday';
                if (ci % 7 === 0) className = ' w2ui-sunday';
                if (dt == today) className += ' w2ui-today';

                var dspDay = day;
                var col = '';
                var bgcol = '';
                var tmp_dt = w2utils.formatDate(dt, this.options.format);
                if (this.options.colored && this.options.colored[tmp_dt] !== undefined) { // if there is predefined colors for dates
                    tmp = this.options.colored[tmp_dt].split(':');
                    bgcol = 'background-color: ' + tmp[0] + ';';
                    col = 'color: ' + tmp[1] + ';';
                }
                html += '<td class="' + (this.inRange(tmp_dt) ? 'w2ui-date ' : 'w2ui-blocked') + className + '" style="' + col + bgcol + '" date="' + tmp_dt + '">' +
                    dspDay +
                    '</td>';
                if (ci % 7 === 0 || (weekDay === 0 && ci == 1)) html += '</tr><tr>';
                day++;
            }
            html += '</tr></table>';
            return html;
        },

        getYearHTML: function() {
            var months = w2utils.settings.shortmonths;
            var mhtml = '';
            var yhtml = '';
            for (var m in months) {
                mhtml += '<div class="w2ui-jump-month" name="' + m + '">' + months[m] + '</div>';
            }
            for (var y = 1950; y <= 2020; y++) {
                yhtml += '<div class="w2ui-jump-year" name="' + y + '">' + y + '</div>'
            }
            return '<div>' + mhtml + '</div><div>' + yhtml + '</div>';
        },

        getHourHTML: function() {
            var tmp = [];
            var h24 = (this.options.format == 'h24' ? true : false);
            for (var a = 0; a < 24; a++) {
                var time = (a >= 12 && !h24 ? a - 12 : a) + ':00' + (!h24 ? (a < 12 ? ' am' : ' pm') : '');
                if (a == 12 && !h24) time = '12:00 pm';
                if (!tmp[Math.floor(a / 8)]) tmp[Math.floor(a / 8)] = '';
                var tm1 = this.fromMin(this.toMin(time));
                var tm2 = this.fromMin(this.toMin(time) + 59);
                tmp[Math.floor(a / 8)] += '<div class="' + (this.inRange(tm1) || this.inRange(tm2) ? 'w2ui-time ' : 'w2ui-blocked') + '" hour="' + a + '">' + time + '</div>';
            }
            var html =
                '<div class="w2ui-calendar-time"><table><tr>' +
                '    <td>' + tmp[0] + '</td>' +
                '    <td>' + tmp[1] + '</td>' +
                '    <td>' + tmp[2] + '</td>' +
                '</tr></table></div>';
            return html;
        },

        getMinHTML: function(hour) {
            if (typeof hour == 'undefined') hour = 0;
            var h24 = (this.options.format == 'h24' ? true : false);
            var tmp = [];
            for (var a = 0; a < 60; a += 5) {
                var time = (hour > 12 && !h24 ? hour - 12 : hour) + ':' + (a < 10 ? 0 : '') + a + ' ' + (!h24 ? (hour < 12 ? 'am' : 'pm') : '');
                var ind = a < 20 ? 0 : (a < 40 ? 1 : 2);
                if (!tmp[ind]) tmp[ind] = '';
                tmp[ind] += '<div class="' + (this.inRange(time) ? 'w2ui-time ' : 'w2ui-blocked') + '" min="' + a + '">' + time + '</div>';
            }
            var html =
                '<div class="w2ui-calendar-time"><table><tr>' +
                '    <td>' + tmp[0] + '</td>' +
                '    <td>' + tmp[1] + '</td>' +
                '    <td>' + tmp[2] + '</td>' +
                '</tr></table></div>';
            return html;
        },

        toMin: function(str) {
            if (typeof str != 'string') return null;
            var tmp = str.split(':');
            if (tmp.length == 2) {
                tmp[0] = parseInt(tmp[0]);
                tmp[1] = parseInt(tmp[1]);
                if (str.indexOf('pm') != -1 && tmp[0] != 12) tmp[0] += 12;
            } else {
                return null;
            }
            return tmp[0] * 60 + tmp[1];
        },

        fromMin: function(time) {
            var ret = '';
            if (time >= 24 * 60) time = time % (24 * 60);
            if (time < 0) time = 24 * 60 + time;
            var hour = Math.floor(time / 60);
            var min = ((time % 60) < 10 ? '0' : '') + (time % 60);
            if (this.options.format.indexOf('h24') != -1) {
                ret = hour + ':' + min;
            } else {
                ret = (hour <= 12 ? hour : hour - 12) + ':' + min + ' ' + (hour >= 12 ? 'pm' : 'am');
            }
            return ret;
        },
        enable: function() {
            $(this.el).attr('disabled', null);
        },
        disable: function() {
            $(this.el).attr('disabled', true);
        }
    }

    $.extend(w2field.prototype, w2utils.event);
    w2obj.field = w2field;

})(jQuery);

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2form      - form widget
 *        - $().w2form  - jQuery wrapper
 *   - Dependencies: jQuery, w2utils, w2fields, w2tabs, w2toolbar, w2alert
 *
 * == NICE TO HAVE ==
 *   - refresh(field) - would refresh only one field
 *   - include delta on save
 *   - create an example how to do cascadic dropdown
 *   - form should read <select> <options> into items
 *   - two way data bindings
 *   - verify validation of fields
 *   - when field is blank, set record.field = null
 *   - show/hide a field
 *   - added getChanges() - not complete
 *
 ************************************************************************/


(function() {
    var w2form = function(options) {
        // public properties
        this.name = null;
        this.header = '';
        this.box = null; // HTML element that hold this element
        this.url = '';
        this.routeData = {}; // data for dynamic routes
        this.formURL = ''; // url where to get form HTML
        this.formHTML = ''; // form HTML (might be loaded from the url)
        this.page = 0; // current page
        this.recid = 0; // can be null or 0
        this.fields = [];
        this.actions = {};
        this.record = {};
        this.original = {};
        this.postData = {};
        this.toolbar = {}; // if not empty, then it is toolbar
        this.tabs = {}; // if not empty, then it is tabs object

        this.style = '';
        this.focus = 0; // focus first or other element
        this.msgNotJSON = w2utils.lang('Return data is not in JSON format.');
        this.msgAJAXerror = w2utils.lang('AJAX error. See console for more details.');
        this.msgRefresh = w2utils.lang('Refreshing...');
        this.msgSaving = w2utils.lang('Saving...');

        // events
        this.onRequest = null;
        this.onLoad = null;
        this.onValidate = null;
        this.onSubmit = null;
        this.onSave = null;
        this.onChange = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;
        this.onAction = null;
        this.onToolbar = null;
        this.onError = null;

        // internal
        this.isGenerated = false;
        this.last = {
            xhr: null // jquery xhr requests
        }

        $.extend(true, this, w2obj.form, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2form = function(method) {
        if (typeof method === 'object' || !method) {
            var obj = this;
            // check name parameter
            if (!w2utils.checkName(method, 'w2form')) return;
            // remember items
            var record = method.record;
            var original = method.original;
            var fields = method.fields;
            var toolbar = method.toolbar;
            var tabs = method.tabs;
            // extend items
            var object = new w2form(method);
            $.extend(object, {
                record: {},
                original: {},
                fields: [],
                tabs: {},
                toolbar: {},
                handlers: []
            });
            if ($.isArray(tabs)) {
                $.extend(true, object.tabs, {
                    tabs: []
                });
                for (var t in tabs) {
                    var tmp = tabs[t];
                    if (typeof tmp === 'object') object.tabs.tabs.push(tmp);
                    else object.tabs.tabs.push({
                        id: tmp,
                        caption: tmp
                    });
                }
            } else {
                $.extend(true, object.tabs, tabs);
            }
            $.extend(true, object.toolbar, toolbar);
            // reassign variables
            for (var p in fields) {
                var field = $.extend(true, {}, fields[p]);
                if (typeof field.name == 'undefined' && typeof field.field != 'undefined') field.name = field.field;
                if (typeof field.field == 'undefined' && typeof field.name != 'undefined') field.field = field.name;
                object.fields[p] = field;
            }
            for (var p in record) {
                if ($.isPlainObject(record[p])) {
                    object.record[p] = $.extend(true, {}, record[p]);
                } else {
                    object.record[p] = record[p];
                }
            }
            for (var p in original) {
                if ($.isPlainObject(original[p])) {
                    object.original[p] = $.extend(true, {}, original[p]);
                } else {
                    object.original[p] = original[p];
                }
            }
            if (obj.length > 0) object.box = obj[0];
            // render if necessary
            if (object.formURL != '') {
                $.get(object.formURL, function(data) { // should always be $.get as it is template
                    object.formHTML = data;
                    object.isGenerated = true;
                    if ($(object.box).length != 0 || data.length != 0) {
                        $(object.box).html(data);
                        object.render(object.box);
                    }
                });
            } else if (object.formHTML != '') {
                // it is already loaded into formHTML
            } else if ($(this).length != 0 && $.trim($(this).html()) != '') {
                object.formHTML = $(this).html();
            } else { // try to generate it
                object.formHTML = object.generateHTML();
            }
            // register new object
            w2ui[object.name] = object;
            // render if not loaded from url
            if (object.formURL == '') {
                if (String(object.formHTML).indexOf('w2ui-page') == -1) {
                    object.formHTML = '<div class="w2ui-page page-0">' + object.formHTML + '</div>';
                }
                $(object.box).html(object.formHTML);
                object.isGenerated = true;
                object.render(object.box);
            }
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2form');
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2form.prototype = {

        get: function(field, returnIndex) {
            if (arguments.length === 0) {
                var all = [];
                for (var f1 in this.fields) {
                    if (this.fields[f1].name != null) all.push(this.fields[f1].name);
                }
                return all;
            } else {
                for (var f2 in this.fields) {
                    if (this.fields[f2].name == field) {
                        if (returnIndex === true) return f2;
                        else return this.fields[f2];
                    }
                }
                return null;
            }
        },

        set: function(field, obj) {
            for (var f in this.fields) {
                if (this.fields[f].name == field) {
                    $.extend(this.fields[f], obj);
                    this.refresh();
                    return true;
                }
            }
            return false;
        },

        reload: function(callBack) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url && this.recid != 0) {
                // this.clear();
                this.request(callBack);
            } else {
                // this.refresh(); // no need to refresh
                if (typeof callBack == 'function') callBack();
            }
        },

        clear: function() {
            this.recid = 0;
            this.record = {};
            $().w2tag();
            this.refresh();
        },

        error: function(msg) {
            var obj = this;
            // let the management of the error outside of the grid
            var eventData = this.trigger({
                target: this.name,
                type: 'error',
                message: msg,
                xhr: this.last.xhr
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack();
                return;
            }
            // need a time out because message might be already up)
            setTimeout(function() {
                w2alert(msg, 'Error');
            }, 1);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        validate: function(showErrors) {
            if (typeof showErrors == 'undefined') showErrors = true;
            $().w2tag(); // hide all tags before validating
            // validate before saving
            var errors = [];
            for (var f in this.fields) {
                var field = this.fields[f];
                if (this.record[field.name] == null) this.record[field.name] = '';
                switch (field.type) {
                    case 'int':
                        if (this.record[field.name] && !w2utils.isInt(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not an integer')
                            });
                        }
                        break;
                    case 'float':
                        if (this.record[field.name] && !w2utils.isFloat(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a float')
                            });
                        }
                        break;
                    case 'money':
                        if (this.record[field.name] && !w2utils.isMoney(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not in money format')
                            });
                        }
                        break;
                    case 'color':
                    case 'hex':
                        if (this.record[field.name] && !w2utils.isHex(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a hex number')
                            });
                        }
                        break;
                    case 'email':
                        if (this.record[field.name] && !w2utils.isEmail(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a valid email')
                            });
                        }
                        break;
                    case 'checkbox':
                        // convert true/false
                        if (this.record[field.name] == true) this.record[field.name] = 1;
                        else this.record[field.name] = 0;
                        break;
                    case 'date':
                        // format date before submit
                        if (!field.options.format) field.options.format = w2utils.settings.date_format;
                        if (this.record[field.name] && !w2utils.isDate(this.record[field.name], field.options.format)) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a valid date') + ': ' + field.options.format
                            });
                        } else {}
                        break;
                    case 'list':
                    case 'combo':
                        break;
                    case 'enum':
                        break;
                }
                // === check required - if field is '0' it should be considered not empty
                var val = this.record[field.name];
                if (field.required && (val === '' || ($.isArray(val) && val.length == 0) || ($.isPlainObject(val) && $.isEmptyObject(val)))) {
                    errors.push({
                        field: field,
                        error: w2utils.lang('Required field')
                    });
                }
                if (field.equalto && this.record[field.name] != this.record[field.equalto]) {
                    errors.push({
                        field: field,
                        error: w2utils.lang('Field should be equal to ') + field.equalto
                    });
                }
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'validate',
                errors: errors
            });
            if (eventData.isCancelled === true) return;
            // show error
            if (showErrors)
                for (var e in eventData.errors) {
                    var err = eventData.errors[e];
                    if (err.field.type == 'radio') { // for radio and checkboxes
                        $($(err.field.el).parents('div')[0]).w2tag(err.error, {
                            "class": 'w2ui-error'
                        });
                    } else if (['enum', 'file'].indexOf(err.field.type) != -1) {
                        (function(err) {
                            setTimeout(function() {
                                var fld = $(err.field.el).data('w2field').helpers.multi;
                                $(err.field.el).w2tag(err.error);
                                $(fld).addClass('w2ui-error');
                            }, 1);
                        })(err);
                    } else {
                        $(err.field.el).w2tag(err.error, {
                            "class": 'w2ui-error'
                        });
                    }
                    this.goto(errors[0].field.page);
                }
                // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return errors;
        },

        getChanges: function() {
            var differ = function(record, original, result) {
                for (var i in record) {
                    if (typeof record[i] == "object") {
                        result[i] = differ(record[i], original[i] || {}, {});
                        if (!result[i] || $.isEmptyObject(result[i])) delete result[i];
                    } else if (record[i] != original[i]) {
                        result[i] = record[i];
                    }
                }
                return result;
            }
            return differ(this.record, this.original, {});
        },

        request: function(postData, callBack) { // if (1) param then it is call back if (2) then postData and callBack
            var obj = this;
            // check for multiple params
            if (typeof postData == 'function') {
                callBack = postData;
                postData = null;
            }
            if (typeof postData == 'undefined' || postData == null) postData = {};
            if (!this.url || (typeof this.url == 'object' && !this.url.get)) return;
            if (this.recid == null || typeof this.recid == 'undefined') this.recid = 0;
            // build parameters list
            var params = {};
            // add list params
            params['cmd'] = 'get-record';
            params['recid'] = this.recid;
            // append other params
            $.extend(params, this.postData);
            $.extend(params, postData);
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'request',
                target: this.name,
                url: this.url,
                postData: params
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            // default action
            this.record = {};
            this.original = {};
            // call server to get data
            this.lock(this.msgRefresh);
            var url = eventData.url;
            if (typeof eventData.url == 'object' && eventData.url.get) url = eventData.url.get;
            if (this.last.xhr) try {
                this.last.xhr.abort();
            } catch (e) {};
            // process url with routeData
            if (!$.isEmptyObject(obj.routeData)) {
                var info = w2utils.parseRoute(url);
                if (info.keys.length > 0) {
                    for (var k = 0; k < info.keys.length; k++) {
                        if (obj.routeData[info.keys[k].name] == null) continue;
                        url = url.replace((new RegExp(':' + info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                    }
                }
            }
            var ajaxOptions = {
                type: 'POST',
                url: url,
                data: eventData.postData,
                dataType: 'text' // expected from server
            };
            if (w2utils.settings.dataType == 'HTTP') {
                ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
            }
            if (w2utils.settings.dataType == 'RESTFULL') {
                ajaxOptions.type = 'GET';
                ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
            }
            if (w2utils.settings.dataType == 'JSON') {
                ajaxOptions.type = 'POST';
                ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                ajaxOptions.contentType = 'application/json';
            }
            this.last.xhr = $.ajax(ajaxOptions)
                .done(function(data, status, xhr) {
                    obj.unlock();
                    // event before
                    var eventData = obj.trigger({
                        phase: 'before',
                        target: obj.name,
                        type: 'load',
                        xhr: xhr
                    });
                    if (eventData.isCancelled === true) {
                        if (typeof callBack == 'function') callBack({
                            status: 'error',
                            message: 'Request aborted.'
                        });
                        return;
                    }
                    // parse server response
                    var data;
                    var responseText = obj.last.xhr.responseText;
                    if (status != 'error') {
                        // default action
                        if (typeof responseText != 'undefined' && responseText != '') {
                            // check if the onLoad handler has not already parsed the data
                            if (typeof responseText == "object") {
                                data = responseText;
                            } else {
                                // $.parseJSON or $.getJSON did not work because those expect perfect JSON data - where everything is in double quotes
                                //
                                // TODO: avoid (potentially malicious) code injection from the response.
                                try {
                                    eval('data = ' + responseText);
                                } catch (e) {}
                            }
                            if (typeof data == 'undefined') {
                                data = {
                                    status: 'error',
                                    message: obj.msgNotJSON,
                                    responseText: responseText
                                }
                            }
                            if (data['status'] == 'error') {
                                obj.error(data['message']);
                            } else {
                                obj.record = $.extend({}, data.record);
                                obj.original = $.extend({}, data.record);
                            }
                        }
                    } else {
                        obj.error('AJAX Error ' + xhr.status + ': ' + xhr.statusText);
                        data = {
                            status: 'error',
                            message: obj.msgAJAXerror,
                            responseText: responseText
                        };
                    }
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    obj.refresh();
                    // call back
                    if (typeof callBack == 'function') callBack(data);
                })
                .fail(function(xhr, status, error) {
                    // trigger event
                    var errorObj = {
                        status: status,
                        error: error,
                        rawResponseText: xhr.responseText
                    };
                    var eventData2 = obj.trigger({
                        phase: 'before',
                        type: 'error',
                        error: errorObj,
                        xhr: xhr
                    });
                    if (eventData2.isCancelled === true) return;
                    // default behavior
                    if (status != 'abort') {
                        var data;
                        try {
                            data = $.parseJSON(xhr.responseText)
                        } catch (e) {}
                        console.log('ERROR: Server communication failed.',
                            '\n   EXPECTED:', {
                                status: 'success',
                                items: [{
                                    id: 1,
                                    text: 'item'
                                }]
                            },
                            '\n         OR:', {
                                status: 'error',
                                message: 'error message'
                            },
                            '\n   RECEIVED:', typeof data == 'object' ? data : xhr.responseText);
                    }
                    // event after
                    obj.trigger($.extend(eventData2, {
                        phase: 'after'
                    }));
                });
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        submit: function(postData, callBack) {
            return this.save(postData, callBack);
        },

        save: function(postData, callBack) {
            var obj = this;
            $(this.box).find(':focus').change(); // trigger onchange
            // check for multiple params
            if (typeof postData == 'function') {
                callBack = postData;
                postData = null;
            }
            // validation
            var errors = obj.validate(true);
            if (errors.length !== 0) return;
            // submit save
            if (typeof postData == 'undefined' || postData == null) postData = {};
            if (!obj.url || (typeof obj.url == 'object' && !obj.url.save)) {
                console.log("ERROR: Form cannot be saved because no url is defined.");
                return;
            }
            obj.lock(obj.msgSaving + ' <span id="' + obj.name + '_progress"></span>');
            // need timer to allow to lock
            setTimeout(function() {
                // build parameters list
                var params = {};
                // add list params
                params['cmd'] = 'save-record';
                params['recid'] = obj.recid;
                // append other params
                $.extend(params, obj.postData);
                $.extend(params, postData);
                params.record = $.extend(true, {}, obj.record);
                // event before
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'submit',
                    target: obj.name,
                    url: obj.url,
                    postData: params
                });
                if (eventData.isCancelled === true) return;
                // default action
                var url = eventData.url;
                if (typeof eventData.url == 'object' && eventData.url.save) url = eventData.url.save;
                if (obj.last.xhr) try {
                    obj.last.xhr.abort();
                } catch (e) {};
                // process url with routeData
                if (!$.isEmptyObject(obj.routeData)) {
                    var info = w2utils.parseRoute(url);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            if (obj.routeData[info.keys[k].name] == null) continue;
                            url = url.replace((new RegExp(':' + info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                        }
                    }
                }
                var ajaxOptions = {
                    type: 'POST',
                    url: url,
                    data: eventData.postData,
                    dataType: 'text', // expected from server
                    xhr: function() {
                        var xhr = new window.XMLHttpRequest();
                        // upload
                        xhr.upload.addEventListener("progress", function(evt) {
                            if (evt.lengthComputable) {
                                var percent = Math.round(evt.loaded / evt.total * 100);
                                $('#' + obj.name + '_progress').text('' + percent + '%');
                            }
                        }, false);
                        return xhr;
                    }
                };
                if (w2utils.settings.dataType == 'HTTP') {
                    ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
                }
                if (w2utils.settings.dataType == 'RESTFULL') {
                    if (obj.recid != 0) ajaxOptions.type = 'PUT';
                    ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
                }
                if (w2utils.settings.dataType == 'JSON') {
                    ajaxOptions.type = 'POST';
                    ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                    ajaxOptions.contentType = 'application/json';
                }

                obj.last.xhr = $.ajax(ajaxOptions)
                    .done(function(data, status, xhr) {
                        obj.unlock();
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            target: obj.name,
                            type: 'save',
                            xhr: xhr,
                            status: status
                        });
                        if (eventData.isCancelled === true) return;
                        // parse server response
                        var data;
                        var responseText = xhr.responseText;
                        if (status != 'error') {
                            // default action
                            if (typeof responseText != 'undefined' && responseText != '') {
                                // check if the onLoad handler has not already parsed the data
                                if (typeof responseText == "object") {
                                    data = responseText;
                                } else {
                                    // $.parseJSON or $.getJSON did not work because those expect perfect JSON data - where everything is in double quotes
                                    //
                                    // TODO: avoid (potentially malicious) code injection from the response.
                                    try {
                                        eval('data = ' + responseText);
                                    } catch (e) {}
                                }
                                if (typeof data == 'undefined') {
                                    data = {
                                        status: 'error',
                                        message: obj.msgNotJSON,
                                        responseText: responseText
                                    }
                                }
                                if (data['status'] == 'error') {
                                    obj.error(data['message']);
                                } else {
                                    obj.original = $.extend({}, obj.record);
                                }
                            }
                        } else {
                            obj.error('AJAX Error ' + xhr.status + ': ' + xhr.statusText);
                            data = {
                                status: 'error',
                                message: obj.msgAJAXerror,
                                responseText: responseText
                            };
                        }
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        obj.refresh();
                        // call back
                        if (data.status == 'success' && typeof callBack == 'function') callBack(data);
                    })
                    .fail(function(xhr, status, error) {
                        // trigger event
                        var errorObj = {
                            status: status,
                            error: error,
                            rawResponseText: xhr.responseText
                        };
                        var eventData2 = obj.trigger({
                            phase: 'before',
                            type: 'error',
                            error: errorObj,
                            xhr: xhr
                        });
                        if (eventData2.isCancelled === true) return;
                        // default behavior
                        console.log('ERROR: server communication failed. The server should return', {
                                status: 'success'
                            }, 'OR', {
                                status: 'error',
                                message: 'error message'
                            },
                            ', instead the AJAX request produced this: ', errorObj);
                        // event after
                        obj.trigger($.extend(eventData2, {
                            phase: 'after'
                        }));
                    });
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, 50);
        },

        lock: function(msg, showSpinner) {
            var box = $(this.box).find('> div:first-child');
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(box);
            w2utils.lock.apply(window, args);
        },

        unlock: function() {
            var obj = this;
            setTimeout(function() {
                w2utils.unlock(obj.box);
            }, 25); // needed timer so if server fast, it will not flash
        },

        goto: function(page) {
            if (typeof page != 'undefined') this.page = page;
            // if it was auto size, resize it
            if ($(this.box).data('auto-size') === true) $(this.box).height(0);
            this.refresh();
        },

        generateHTML: function() {
            var pages = []; // array for each page
            var group = '';
            var page;
            for (var f in this.fields) {
                var html = '';
                var field = this.fields[f];
                if (typeof field.html == 'undefined') field.html = {};
                field.html = $.extend(true, {
                    caption: '',
                    span: 6,
                    attr: '',
                    text: '',
                    page: 0
                }, field.html);
                if (typeof page == 'undefined') page = field.html.page;
                if (field.html.caption == '') field.html.caption = field.name;
                var input = '<input name="' + field.name + '" type="text" ' + field.html.attr + '/>';
                if ((field.type === 'pass') || (field.type === 'password')) {
                    input = '<input name="' + field.name + '" type = "password" ' + field.html.attr + '/>';
                }
                if (field.type == 'checkbox') input = '<input name="' + field.name + '" type="checkbox" ' + field.html.attr + '/>';
                if (field.type == 'textarea') input = '<textarea name="' + field.name + '" ' + field.html.attr + '></textarea>';
                if (field.type == 'toggle') input = '<input name="' + field.name + '" type="checkbox" ' + field.html.attr + ' class="w2ui-toggle"/><div><div></div></div>';
                if (field.html.group) {
                    if (group != '') html += '\n   </div>';
                    html += '\n   <div class="w2ui-group-title">' + field.html.group + '</div>\n   <div class="w2ui-group">';
                    group = field.html.group;
                }
                if (field.html.page != page && group != '') {
                    pages[pages.length - 1] += '\n   </div>';
                    group = '';
                }
                html += '\n      <div class="w2ui-field ' + (typeof field.html.span != 'undefined' ? 'w2ui-span' + field.html.span : '') + '">' +
                    '\n         <label>' + w2utils.lang(field.html.caption) + '</label>' +
                    '\n         <div>' + input + w2utils.lang(field.html.text) + '</div>' +
                    '\n      </div>';
                if (typeof pages[field.html.page] == 'undefined') pages[field.html.page] = '';
                pages[field.html.page] += html;
                page = field.html.page;
            }
            if (group != '') pages[pages.length - 1] += '\n   </div>';
            if (this.tabs.tabs) {
                for (var i = 0; i < this.tabs.tabs.length; i++)
                    if (typeof pages[i] == 'undefined') pages[i] = '';
            }
            for (var p in pages) pages[p] = '<div class="w2ui-page page-' + p + '">' + pages[p] + '\n</div>';
            // buttons if any
            var buttons = '';
            if (!$.isEmptyObject(this.actions)) {
                var addClass = '';
                buttons += '\n<div class="w2ui-buttons">';
                for (var a in this.actions) {
                    if (['save', 'update', 'create'].indexOf(a.toLowerCase()) != -1) addClass = 'btn-green';
                    else addClass = '';
                    buttons += '\n    <button name="' + a + '" class="btn ' + addClass + '">' + w2utils.lang(a) + '</button>';
                }
                buttons += '\n</div>';
            }
            return pages.join('') + buttons;
        },

        action: function(action, event) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: action,
                type: 'action',
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default actions
            if (typeof(this.actions[action]) == 'function') {
                this.actions[action].call(this, event);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        resize: function() {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'resize'
            });
            if (eventData.isCancelled === true) return;
            // default behaviour
            var main = $(this.box).find('> div');
            var header = $(this.box).find('> div .w2ui-form-header');
            var toolbar = $(this.box).find('> div .w2ui-form-toolbar');
            var tabs = $(this.box).find('> div .w2ui-form-tabs');
            var page = $(this.box).find('> div .w2ui-page');
            var cpage = $(this.box).find('> div .w2ui-page.page-' + this.page);
            var dpage = $(this.box).find('> div .w2ui-page.page-' + this.page + ' > div');
            var buttons = $(this.box).find('> div .w2ui-buttons');
            // if no height, calculate it
            resizeElements();
            if (parseInt($(this.box).height()) == 0 || $(this.box).data('auto-size') === true) {
                $(this.box).height(
                    (header.length > 0 ? w2utils.getSize(header, 'height') : 0) +
                    ((typeof this.tabs === 'object' && $.isArray(this.tabs.tabs) && this.tabs.tabs.length > 0) ? w2utils.getSize(tabs, 'height') : 0) +
                    ((typeof this.toolbar == 'object' && $.isArray(this.toolbar.items) && this.toolbar.items.length > 0) ? w2utils.getSize(toolbar, 'height') : 0) +
                    (page.length > 0 ? w2utils.getSize(dpage, 'height') + w2utils.getSize(cpage, '+height') + 12 : 0) + // why 12 ???
                    (buttons.length > 0 ? w2utils.getSize(buttons, 'height') : 0)
                );
                $(this.box).data('auto-size', true);
            }
            resizeElements();
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));

            function resizeElements() {
                // resize elements
                main.width($(obj.box).width()).height($(obj.box).height());
                toolbar.css('top', (obj.header != '' ? w2utils.getSize(header, 'height') : 0));
                tabs.css('top', (obj.header != '' ? w2utils.getSize(header, 'height') : 0) + ((typeof obj.toolbar == 'object' && $.isArray(obj.toolbar.items) && obj.toolbar.items.length > 0) ? w2utils.getSize(toolbar, 'height') : 0));
                page.css('top', (obj.header != '' ? w2utils.getSize(header, 'height') : 0) + ((typeof obj.toolbar == 'object' && $.isArray(obj.toolbar.items) && obj.toolbar.items.length > 0) ? w2utils.getSize(toolbar, 'height') + 5 : 0) + ((typeof obj.tabs === 'object' && $.isArray(obj.tabs.tabs) && obj.tabs.tabs.length > 0) ? w2utils.getSize(tabs, 'height') + 5 : 0));
                page.css('bottom', (buttons.length > 0 ? w2utils.getSize(buttons, 'height') : 0));
            }
        },

        refresh: function() {
            var time = (new Date()).getTime();
            var obj = this;
            if (!this.box) return;
            if (!this.isGenerated || typeof $(this.box).html() == 'undefined') return;
            // update what page field belongs
            $(this.box).find('input, textarea, select').each(function(index, el) {
                var name = (typeof $(el).attr('name') != 'undefined' ? $(el).attr('name') : $(el).attr('id'));
                var field = obj.get(name);
                if (field) {
                    // find page
                    var div = $(el).parents('.w2ui-page');
                    if (div.length > 0) {
                        for (var i = 0; i < 100; i++) {
                            if (div.hasClass('page-' + i)) {
                                field.page = i;
                                break;
                            }
                        }
                    }
                }
            });
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'refresh',
                page: this.page
            })
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('.w2ui-page').hide();
            $(this.box).find('.w2ui-page.page-' + this.page).show();
            $(this.box).find('.w2ui-form-header').html(this.header);
            // refresh tabs if needed
            if (typeof this.tabs === 'object' && $.isArray(this.tabs.tabs) && this.tabs.tabs.length > 0) {
                $('#form_' + this.name + '_tabs').show();
                this.tabs.active = this.tabs.tabs[this.page].id;
                this.tabs.refresh();
            } else {
                $('#form_' + this.name + '_tabs').hide();
            }
            // refresh tabs if needed
            if (typeof this.toolbar == 'object' && $.isArray(this.toolbar.items) && this.toolbar.items.length > 0) {
                $('#form_' + this.name + '_toolbar').show();
                this.toolbar.refresh();
            } else {
                $('#form_' + this.name + '_toolbar').hide();
            }
            // refresh values of all fields
            for (var f in this.fields) {
                var field = this.fields[f];
                if (typeof field.name == 'undefined' && typeof field.field != 'undefined') field.name = field.field;
                if (typeof field.field == 'undefined' && typeof field.name != 'undefined') field.field = field.name;
                field.$el = $(this.box).find('[name="' + String(field.name).replace(/\\/g, '\\\\') + '"]');
                field.el = field.$el[0];
                if (typeof field.el == 'undefined') {
                    console.log('ERROR: Cannot associate field "' + field.name + '" with html control. Make sure html control exists with the same name.');
                    //return;
                }
                if (field.el) field.el.id = field.name;
                var tmp = $(field).data('w2field');
                if (tmp) tmp.clear();
                $(field.$el).off('change').on('change', function() {
                    var value_new = this.value;
                    var value_previous = obj.record[this.name] ? obj.record[this.name] : '';
                    var field = obj.get(this.name);
                    if (['list', 'enum', 'file'].indexOf(field.type) != -1 && $(this).data('selected')) {
                        var nv = $(this).data('selected');
                        var cv = obj.record[this.name];
                        if ($.isArray(nv)) {
                            value_new = [];
                            for (var i in nv) value_new[i] = $.extend(true, {}, nv[i]); // clone array
                        }
                        if ($.isPlainObject(nv)) {
                            value_new = $.extend(true, {}, nv); // clone object
                        }
                        if ($.isArray(cv)) {
                            value_previous = [];
                            for (var i in cv) value_previous[i] = $.extend(true, {}, cv[i]); // clone array
                        }
                        if ($.isPlainObject(cv)) {
                            value_previous = $.extend(true, {}, cv); // clone object
                        }
                    }
                    if (field.type == 'toggle') value_new = ($(this).prop('checked') ? 1 : 0);
                    // clean extra chars
                    if (['int', 'float', 'percent', 'money', 'currency'].indexOf(field.type) != -1) {
                        value_new = $(this).data('w2field').clean(value_new);
                    }
                    if (value_new === value_previous) return;
                    // event before
                    var eventData = obj.trigger({
                        phase: 'before',
                        target: this.name,
                        type: 'change',
                        value_new: value_new,
                        value_previous: value_previous
                    });
                    if (eventData.isCancelled === true) {
                        $(this).val(obj.record[this.name]); // return previous value
                        return;
                    }
                    // default action
                    var val = this.value;
                    if (this.type == 'select') val = this.value;
                    if (this.type == 'checkbox') val = this.checked ? true : false;
                    if (this.type == 'radio') {
                        field.$el.each(function(index, el) {
                            if (el.checked) val = el.value;
                        });
                    }
                    if (['int', 'float', 'percent', 'money', 'currency', 'list', 'combo', 'enum', 'file', 'toggle'].indexOf(field.type) != -1) {
                        val = value_new;
                    }
                    if (['enum', 'file'].indexOf(field.type) != -1) {
                        if (val.length > 0) {
                            var fld = $(field.el).data('w2field').helpers.multi;
                            $(fld).removeClass('w2ui-error');
                        }
                    }
                    obj.record[this.name] = val;
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                });
                if (field.required) {
                    $(field.el).parent().parent().addClass('w2ui-required');
                } else {
                    $(field.el).parent().parent().removeClass('w2ui-required');
                }
            }
            // attach actions on buttons
            $(this.box).find('button, input[type=button]').each(function(index, el) {
                $(el).off('click').on('click', function(event) {
                    var action = this.value;
                    if (this.id) action = this.id;
                    if (this.name) action = this.name;
                    obj.action(action, event);
                });
            });
            // init controls with record
            for (var f in this.fields) {
                var field = this.fields[f];
                var value = (typeof this.record[field.name] != 'undefined' ? this.record[field.name] : '');
                if (!field.el) continue;
                field.type = String(field.type).toLowerCase();
                if (!field.options) field.options = {};
                switch (field.type) {
                    case 'text':
                    case 'textarea':
                    case 'email':
                    case 'pass':
                    case 'password':
                        field.el.value = value;
                        break;
                    case 'int':
                    case 'float':
                    case 'money':
                    case 'currency':
                    case 'percent':
                    case 'hex':
                    case 'alphanumeric':
                    case 'color':
                    case 'date':
                    case 'time':
                        field.el.value = value;
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type
                        }));
                        break;
                    case 'toggle':
                        if (w2utils.isFloat(value)) value = parseFloat(value);
                        $(field.el).prop('checked', (value ? true : false));
                        this.record[field.name] = (value ? 1 : 0);
                        break;
                        // enums
                    case 'list':
                    case 'combo':
                        if (field.type == 'list') {
                            var tmp_value = ($.isPlainObject(value) ? value.id : value);
                            // normalized options
                            var items = field.options.items;
                            if ($.isArray(items) && items.length > 0 && !$.isPlainObject(items[0])) {
                                field.options.items = w2obj.field.prototype.normMenu(items);
                            }
                            // find value from items 
                            for (var i in field.options.items) {
                                var item = field.options.items[i];
                                if (item.id == tmp_value) {
                                    value = $.extend(true, {}, item);
                                    obj.record[field.name] = value;
                                    break;
                                }
                            }
                        } else if (field.type == 'combo' && !$.isPlainObject(value)) {
                            field.el.value = value;
                        } else if ($.isPlainObject(value) && typeof value.text != 'undefined') {
                            field.el.value = value.text;
                        } else {
                            field.el.value = '';
                        }
                        if (!$.isPlainObject(value)) value = {};
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type,
                            selected: value
                        }));
                        break;
                    case 'enum':
                    case 'file':
                        if (!$.isArray(value)) value = [];
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type,
                            selected: value
                        }));
                        break;

                        // standard HTML
                    case 'select':
                        // generate options
                        var items = field.options.items;
                        if (typeof items != 'undefined' && items.length > 0) {
                            items = w2obj.field.prototype.normMenu(items);
                            $(field.el).html('');
                            for (var it in items) {
                                $(field.el).append('<option value="' + items[it].id + '">' + items[it].text + '</option');
                            }
                        }
                        $(field.el).val(value);
                        break;
                    case 'radio':
                        $(field.$el).prop('checked', false).each(function(index, el) {
                            if ($(el).val() == value) $(el).prop('checked', true);
                        });
                        break;
                    case 'checkbox':
                        $(field.el).prop('checked', value ? true : false);
                        break;
                    default:
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type
                        }));
                        break;
                }
            }
            // wrap pages in div
            var tmp = $(this.box).find('.w2ui-page');
            for (var i = 0; i < tmp.length; i++) {
                if ($(tmp[i]).find('> *').length > 1) $(tmp[i]).wrapInner('<div></div>');
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.resize();
            return (new Date()).getTime() - time;
        },

        render: function(box) {
            var time = (new Date()).getTime();
            var obj = this;
            if (typeof box == 'object') {
                // remove from previous box
                if ($(this.box).find('#form_' + this.name + '_tabs').length > 0) {
                    $(this.box).removeAttr('name')
                        .removeClass('w2ui-reset w2ui-form')
                        .html('');
                }
                this.box = box;
            }
            if (!this.isGenerated) return;
            if (!this.box) return;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'render',
                box: (typeof box != 'undefined' ? box : this.box)
            });
            if (eventData.isCancelled === true) return;
            // default actions
            if ($.isEmptyObject(this.original) && !$.isEmptyObject(this.record)) {
                this.original = $.extend(true, {}, this.record);
            }
            var html = '<div>' +
                (this.header != '' ? '<div class="w2ui-form-header">' + this.header + '</div>' : '') +
                '    <div id="form_' + this.name + '_toolbar" class="w2ui-form-toolbar"></div>' +
                '    <div id="form_' + this.name + '_tabs" class="w2ui-form-tabs"></div>' +
                this.formHTML +
                '</div>';
            $(this.box).attr('name', this.name)
                .addClass('w2ui-reset w2ui-form')
                .html(html);
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;

            // init toolbar regardless it is defined or not
            if (typeof this.toolbar.render !== 'function') {
                this.toolbar = $().w2toolbar($.extend({}, this.toolbar, {
                    name: this.name + '_toolbar',
                    owner: this
                }));
                this.toolbar.on('click', function(event) {
                    var eventData = obj.trigger({
                        phase: 'before',
                        type: 'toolbar',
                        target: event.target,
                        originalEvent: event
                    });
                    if (eventData.isCancelled === true) return;
                    // no default action
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                });
            }
            if (typeof this.toolbar == 'object' && typeof this.toolbar.render == 'function') {
                this.toolbar.render($('#form_' + this.name + '_toolbar')[0]);
            }
            // init tabs regardless it is defined or not
            if (typeof this.tabs.render !== 'function') {
                this.tabs = $().w2tabs($.extend({}, this.tabs, {
                    name: this.name + '_tabs',
                    owner: this
                }));
                this.tabs.on('click', function(event) {
                    obj.goto(this.get(event.target, true));
                });
            }
            if (typeof this.tabs == 'object' && typeof this.tabs.render == 'function') {
                this.tabs.render($('#form_' + this.name + '_tabs')[0]);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // after render actions
            this.resize();
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url && this.recid != 0) {
                this.request();
            } else {
                this.refresh();
            }
            // attach to resize event
            if ($('.w2ui-layout').length == 0) { // if there is layout, it will send a resize event
                this.tmp_resize = function(event) {
                    w2ui[obj.name].resize();
                }
                $(window).off('resize', 'body').on('resize', 'body', this.tmp_resize);
            }
            setTimeout(function() {
                obj.resize();
                obj.refresh();
            }, 150); // need timer because resize is on timer
            // focus on load
            function focusEl() {
                var inputs = $(obj.box).find('input, select, textarea');
                if (inputs.length > obj.focus) inputs[obj.focus].focus();
            }
            if (this.focus >= 0) setTimeout(focusEl, 500); // need timeout to allow form to render
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'destroy'
            });
            if (eventData.isCancelled === true) return;
            // clean up
            if (typeof this.toolbar == 'object' && this.toolbar.destroy) this.toolbar.destroy();
            if (typeof this.tabs == 'object' && this.tabs.destroy) this.tabs.destroy();
            if ($(this.box).find('#form_' + this.name + '_tabs').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-form')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            $(window).off('resize', 'body')
        }
    };

    $.extend(w2form.prototype, w2utils.event);
    w2obj.form = w2form;
})();
// if (module) {
//     module.exports = {
//         w2ui: w2ui,
//         w2utils: w2utils,
//         w2obj: w2obj,
//         w2popup: w2popup,
//         w2panel: w2panel,
//         w2alert: w2alert,
//         w2confirm: w2confirm,
//         w2prompt: w2prompt
//     }
// }

/* NicEdit - Micro Inline WYSIWYG
 * Copyright 2007-2008 Brian Kirchoff
 *
 * NicEdit is distributed under the terms of the MIT license
 * For more information visit http://nicedit.com/
 * Do not remove this copyright message
 */
var bkExtend = function() {
    var args = arguments;
    if (args.length == 1) args = [this, args[0]];
    for (var prop in args[1]) args[0][prop] = args[1][prop];
    return args[0];
};

function bkClass() {}
bkClass.prototype.construct = function() {};
bkClass.extend = function(def) {
    var classDef = function() {
        if (arguments[0] !== bkClass) {
            return this.construct.apply(this, arguments);
        }
    };
    var proto = new this(bkClass);
    bkExtend(proto, def);
    classDef.prototype = proto;
    classDef.extend = this.extend;
    return classDef;
};

var bkElement = bkClass.extend({
    construct: function(elm, d) {
        if (typeof(elm) == "string") {
            elm = (d || document).createElement(elm);
        }
        elm = $BK(elm);
        return elm;
    },

    appendTo: function(elm) {
        elm.appendChild(this);
        return this;
    },

    appendBefore: function(elm) {
        elm.parentNode.insertBefore(this, elm);
        return this;
    },

    addEvent: function(type, fn) {
        bkLib.addEvent(this, type, fn);
        return this;
    },

    setContent: function(c) {
        this.innerHTML = c;
        return this;
    },

    pos: function() {
        var curleft = curtop = 0;
        var o = obj = this;
        if (obj.offsetParent) {
            do {
                curleft += obj.offsetLeft;
                curtop += obj.offsetTop;
            } while (obj = obj.offsetParent);
        }
        var b = (!window.opera) ? parseInt(this.getStyle('border-width') || this.style.border) || 0 : 0;
        return [curleft + b, curtop + b + this.offsetHeight];
    },

    noSelect: function() {
        bkLib.noSelect(this);
        return this;
    },

    parentTag: function(t) {
        var elm = this;
        do {
            if (elm && elm.nodeName && elm.nodeName.toUpperCase() == t) {
                return elm;
            }
            elm = elm.parentNode;
        } while (elm);
        return false;
    },

    hasClass: function(cls) {
        return this.className.match(new RegExp('(\\s|^)nicEdit-' + cls + '(\\s|$)'));
    },

    addClass: function(cls) {
        if (!this.hasClass(cls)) {
            this.className += " nicEdit-" + cls
        };
        return this;
    },

    removeClass: function(cls) {
        if (this.hasClass(cls)) {
            this.className = this.className.replace(new RegExp('(\\s|^)nicEdit-' + cls + '(\\s|$)'), ' ');
        }
        return this;
    },
    inserthtml: function(markup) {
        this.innerHTML = markup;
        return this;
    },
    setStyle: function(st) {
        var elmStyle = this.style;
        for (var itm in st) {
            switch (itm) {
                case 'float':
                    elmStyle['cssFloat'] = elmStyle['styleFloat'] = st[itm];
                    break;
                case 'opacity':
                    elmStyle.opacity = st[itm];
                    elmStyle.filter = "alpha(opacity=" + Math.round(st[itm] * 100) + ")";
                    break;
                case 'className':
                    this.className = st[itm];
                    break;
                default:
                    //if(document.compatMode || itm != "cursor") { // Nasty Workaround for IE 5.5
                    elmStyle[itm] = st[itm];
                    //}     
            }
        }
        return this;
    },

    getStyle: function(cssRule, d) {
        var doc = (!d) ? document.defaultView : d;
        if (this.nodeType == 1)
            return (doc && doc.getComputedStyle) ? doc.getComputedStyle(this, null).getPropertyValue(cssRule) : this.currentStyle[bkLib.camelize(cssRule)];
    },

    remove: function() {
        this.parentNode.removeChild(this);
        return this;
    },

    setAttributes: function(at) {
        for (var itm in at) {
            this[itm] = at[itm];
        }
        return this;
    }
});

var bkLib = {
    isMSIE: (navigator.appVersion.indexOf("MSIE") != -1),

    addEvent: function(obj, type, fn) {
        (obj.addEventListener) ? obj.addEventListener(type, fn, false): obj.attachEvent("on" + type, fn);
    },

    toArray: function(iterable) {
        var length = iterable.length,
            results = new Array(length);
        while (length--) {
            results[length] = iterable[length]
        };
        return results;
    },

    noSelect: function(element) {
        if (element.setAttribute && element.nodeName.toLowerCase() != 'input' && element.nodeName.toLowerCase() != 'textarea') {
            element.setAttribute('unselectable', 'on');
        }
        for (var i = 0; i < element.childNodes.length; i++) {
            bkLib.noSelect(element.childNodes[i]);
        }
    },
    camelize: function(s) {
        return s.replace(/\-(.)/g, function(m, l) {
            return l.toUpperCase()
        });
    },
    inArray: function(arr, item) {
        return (bkLib.search(arr, item) != null);
    },
    search: function(arr, itm) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == itm)
                return i;
        }
        return null;
    },
    cancelEvent: function(e) {
        e = e || window.event;
        if (e.preventDefault && e.stopPropagation) {
            e.preventDefault();
            e.stopPropagation();
        }
        return false;
    },
    domLoad: [],
    domLoaded: function() {
        if (arguments.callee.done) return;
        arguments.callee.done = true;
        for (i = 0; i < bkLib.domLoad.length; i++) bkLib.domLoad[i]();
    },
    onDomLoaded: function(fireThis) {
        this.domLoad.push(fireThis);
        if (document.addEventListener) {
            document.addEventListener("DOMContentLoaded", bkLib.domLoaded, null);
        } else if (bkLib.isMSIE) {
            document.write("<style>.nicEdit-main p { margin: 0; }</style><scr" + "ipt id=__ie_onload defer " + ((location.protocol == "https:") ? "src='javascript:void(0)'" : "src=//0") + "><\/scr" + "ipt>");
            $BK("__ie_onload").onreadystatechange = function() {
                if (this.readyState == "complete") {
                    bkLib.domLoaded();
                }
            };
        }
        window.onload = bkLib.domLoaded;
    }
};

function $BK(elm) {
    if (typeof(elm) == "string") {
        elm = document.getElementById(elm);
    }
    return (elm && !elm.appendTo) ? bkExtend(elm, bkElement.prototype) : elm;
}

var bkEvent = {
    addEvent: function(evType, evFunc) {
        if (evFunc) {
            this.eventList = this.eventList || {};
            this.eventList[evType] = this.eventList[evType] || [];
            this.eventList[evType].push(evFunc);
        }
        return this;
    },
    fireEvent: function() {
        var args = bkLib.toArray(arguments),
            evType = args.shift();
        if (this.eventList && this.eventList[evType]) {
            for (var i = 0; i < this.eventList[evType].length; i++) {
                this.eventList[evType][i].apply(this, args);
            }
        }
    }
};

function __(s) {
    return s;
}

Function.prototype.closure = function() {
    var __method = this,
        args = bkLib.toArray(arguments),
        obj = args.shift();
    return function() {
        if (typeof(bkLib) != 'undefined') {
            return __method.apply(obj, args.concat(bkLib.toArray(arguments)));
        }
    };
}

Function.prototype.closureListener = function() {
    var __method = this,
        args = bkLib.toArray(arguments),
        object = args.shift();
    return function(e) {
        e = e || window.event;
        if (e.target) {
            var target = e.target;
        } else {
            var target = e.srcElement
        };
        return __method.apply(object, [e, target].concat(args));
    };
}


/* START CONFIG */

var nicEditorConfig = bkClass.extend({
    buttons: {
        'bold': {
            name: __('Click to Bold'),
            command: 'Bold',
            tags: ['B', 'STRONG'],
            css: {
                'font-weight': 'bold'
            },
            key: 'b'
        },
        'italic': {
            name: __('Click to Italic'),
            command: 'Italic',
            tags: ['EM', 'I'],
            css: {
                'font-style': 'italic'
            },
            key: 'i'
        },
        'underline': {
            name: __('Click to Underline'),
            command: 'Underline',
            tags: ['U'],
            css: {
                'text-decoration': 'underline'
            },
            key: 'u'
        },
        'left': {
            name: __('Left Align'),
            command: 'justifyleft',
            noActive: true
        },
        'center': {
            name: __('Center Align'),
            command: 'justifycenter',
            noActive: true
        },
        'right': {
            name: __('Right Align'),
            command: 'justifyright',
            noActive: true
        },
        'justify': {
            name: __('Justify Align'),
            command: 'justifyfull',
            noActive: true
        },
        'ol': {
            name: __('Insert Ordered List'),
            command: 'insertorderedlist',
            tags: ['OL']
        },
        'ul': {
            name: __('Insert Unordered List'),
            command: 'insertunorderedlist',
            tags: ['UL']
        },
        'subscript': {
            name: __('Click to Subscript'),
            command: 'subscript',
            tags: ['SUB']
        },
        'superscript': {
            name: __('Click to Superscript'),
            command: 'superscript',
            tags: ['SUP']
        },
        'strikethrough': {
            name: __('Click to Strike Through'),
            command: 'strikeThrough',
            css: {
                'text-decoration': 'line-through'
            }
        },
        'removeformat': {
            name: __('Remove Formatting'),
            command: 'removeformat',
            noActive: true
        },
        'indent': {
            name: __('Indent Text'),
            command: 'indent',
            noActive: true
        },
        'outdent': {
            name: __('Remove Indent'),
            command: 'outdent',
            noActive: true
        },
        'hr': {
            name: __('Horizontal Rule'),
            command: 'insertHorizontalRule',
            noActive: true
        }
    },
    iconsPath: '../nicEditorIcons.gif',
    buttonList: ['save', 'bold', 'italic', 'underline', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'indent', 'outdent', 'image', 'upload', 'link', 'unlink', 'forecolor', 'bgcolor'],
    iconList: {
        "bgcolor": "w2ui-icon-adn",
        "forecolor": "w2ui-icon-font",
        "bold": "w2ui-icon-bold",
        "center": "w2ui-icon-align-center",
        "hr": 5,
        "indent": "w2ui-icon-indent",
        "italic": "w2ui-icon-italic",
        "justify": "w2ui-icon-align-justify",
        "left": "w2ui-icon-align-left",
        "ol": "w2ui-icon-list-ol",
        "outdent": "w2ui-icon-outdent",
        "removeformat": "w2ui-icon-ban",
        "right": "w2ui-icon-align-right",
        "save": "w2ui-icon-save",
        "strikethrough": 15,
        "subscript": "w2ui-icon-subscript",
        "superscript": "w2ui-icon-superscript",
        "ul": "w2ui-icon-list-ul",
        "underline": "w2ui-icon-underline",
        "image": "w2ui-icon-file-image-o",
        "link": "w2ui-icon-link",
        "unlink": 22,
        "close": "w2ui-icon-cross",
        "arrow": "w2ui-icon-caret-down"
    }

});
/* END CONFIG */


var nicEditors = {
    nicPlugins: [],
    editors: [],

    registerPlugin: function(plugin, options) {
        this.nicPlugins.push({
            p: plugin,
            o: options
        });
    },

    // allTextAreas : function(nicOptions) {
    //  var textareas = document.getElementsByTagName("textarea");
    //  for(var i=0;i<textareas.length;i++) {
    //      nicEditors.editors.push(new nicEditor(nicOptions).panelInstance(textareas[i]));
    //  }
    //  return nicEditors.editors;
    // },

    findEditor: function(e) {
        var editors = nicEditors.editors;
        for (var i = 0; i < editors.length; i++) {
            if (editors[i].instanceById(e)) {
                return editors[i].instanceById(e);
            }
        }
    }
};


var nicEditor = bkClass.extend({
    construct: function(o) {
        this.options = new nicEditorConfig();
        bkExtend(this.options, o);
        this.nicInstances = new Array();
        this.loadedPlugins = new Array();

        var plugins = nicEditors.nicPlugins;
        for (var i = 0; i < plugins.length; i++) {
            this.loadedPlugins.push(new plugins[i].p(this, plugins[i].o));
        }
        nicEditors.editors.push(this);
        bkLib.addEvent(document.body, 'mousedown', this.selectCheck.closureListener(this));
    },

    panelInstance: function(e, o) {
        e = this.checkReplace($BK(e));
        if (e) {
            var panelElm = new bkElement('DIV').setStyle({
                width: (parseInt(e.getStyle('width')) || e.clientWidth) + 'px'
            }).appendBefore(e);
            this.setPanel(panelElm);
            return this.addInstance(e, o);
        }
    },

    checkReplace: function(e) {
        var r = nicEditors.findEditor(e);
        if (r) {
            r.removeInstance(e);
            r.removePanel();
        }
        return e;
    },

    addInstance: function(e, o) {
        e = this.checkReplace($BK(e));
        if (e.contentEditable || !!window.opera) {
            var newInstance = new nicEditorInstance(e, o, this);
        } else {
            var newInstance = new nicEditorIFrameInstance(e, o, this);
        }
        this.nicInstances.push(newInstance);
        return this;
    },

    removeInstance: function(e) {
        e = $BK(e);
        var instances = this.nicInstances;
        for (var i = 0; i < instances.length; i++) {
            if (instances[i].e == e) {
                instances[i].remove();
                this.nicInstances.splice(i, 1);
            }
        }
    },

    removePanel: function(e) {
        if (this.nicPanel) {
            this.nicPanel.remove();
            this.nicPanel = null;
        }
    },

    instanceById: function(e) {
        e = $BK(e);
        var instances = this.nicInstances;
        for (var i = 0; i < instances.length; i++) {
            if (instances[i].e == e) {
                return instances[i];
            }
        }
    },

    setPanel: function(e) {
        this.nicPanel = new nicEditorPanel($BK(e), this.options, this);
        this.fireEvent('panel', this.nicPanel);
        return this;
    },

    nicCommand: function(cmd, args) {
        if (this.selectedInstance) {
            this.selectedInstance.nicCommand(cmd, args);
        }
    },

    getIcon: function(iconName, options) {
        var icon = this.options.iconList[iconName];
        //var file = (options.iconFiles) ? options.iconFiles[iconName] : '';
        // return {
        //     backgroundImage: "url('" + ((icon) ? this.options.iconsPath : file) + "')",
        //     backgroundPosition: ((icon) ? ((icon - 1) * -18) : 0) + 'px 0px'
        // };
        return '<i class="' + icon + '"></i>';
    },

    selectCheck: function(e, t) {
        var found = false;
        do {
            if (t.className && t.className.indexOf('nicEdit') != -1) {
                return false;
            }
        } while (t = t.parentNode);
        this.fireEvent('blur', this.selectedInstance, t);
        this.lastSelectedInstance = this.selectedInstance;
        this.selectedInstance = null;
        return false;
    }

});
nicEditor = nicEditor.extend(bkEvent);


var nicEditorInstance = bkClass.extend({
    isSelected: false,

    construct: function(e, options, nicEditor) {
        this.ne = nicEditor;
        this.elm = this.e = e;
        this.options = options || {};

        newX = parseInt(e.getStyle('width')) || e.clientWidth;
        newY = parseInt(e.getStyle('height')) || e.clientHeight;
        this.initialHeight = newY - 8;

        var isTextarea = (e.nodeName.toLowerCase() == "textarea");
        if (isTextarea || this.options.hasPanel) {
            var ie7s = (bkLib.isMSIE && !((typeof document.body.style.maxHeight != "undefined") && document.compatMode == "CSS1Compat"))
            var s = {
                width: newX + 'px',
                border: '1px solid #ccc',
                borderTop: 0,
                overflowY: 'auto',
                overflowX: 'hidden'
            };
            s[(ie7s) ? 'height' : 'maxHeight'] = (this.ne.options.maxHeight) ? this.ne.options.maxHeight + 'px' : null;
            this.editorContain = new bkElement('DIV').setStyle(s).appendBefore(e);
            var editorElm = new bkElement('DIV').setStyle({
                width: (newX - 8) + 'px',
                margin: '4px',
                minHeight: newY + 'px'
            }).addClass('main').appendTo(this.editorContain);

            e.setStyle({
                display: 'none'
            });

            editorElm.innerHTML = e.innerHTML;
            if (isTextarea) {
                editorElm.setContent(e.value);
                this.copyElm = e;
                var f = e.parentTag('FORM');
                if (f) {
                    bkLib.addEvent(f, 'submit', this.saveContent.closure(this));
                }
            }
            editorElm.setStyle((ie7s) ? {
                height: newY + 'px'
            } : {
                overflow: 'hidden'
            });
            this.elm = editorElm;
        }
        this.ne.addEvent('blur', this.blur.closure(this));

        this.init();
        this.blur();
    },

    init: function() {
        this.elm.setAttribute('contentEditable', 'true');
        if (this.getContent() == "") {
            this.setContent('<br />');
        }
        this.instanceDoc = document.defaultView;
        this.elm.addEvent('mousedown', this.selected.closureListener(this)).addEvent('keypress', this.keyDown.closureListener(this)).addEvent('focus', this.selected.closure(this)).addEvent('blur', this.blur.closure(this)).addEvent('keyup', this.selected.closure(this));
        this.ne.fireEvent('add', this);
    },

    remove: function() {
        this.saveContent();
        if (this.copyElm || this.options.hasPanel) {
            this.editorContain.remove();
            this.e.setStyle({
                'display': 'block'
            });
            this.ne.removePanel();
        }
        this.disable();
        this.ne.fireEvent('remove', this);
    },

    disable: function() {
        this.elm.setAttribute('contentEditable', 'false');
    },

    getSel: function() {
        return (window.getSelection) ? window.getSelection() : document.selection;
    },

    getRng: function() {
        var s = this.getSel();
        if (!s || s.rangeCount === 0) {
            return;
        }
        return (s.rangeCount > 0) ? s.getRangeAt(0) : s.createRange();
    },

    selRng: function(rng, s) {
        if (window.getSelection) {
            s.removeAllRanges();
            s.addRange(rng);
        } else {
            rng.select();
        }
    },

    selElm: function() {
        var r = this.getRng();
        if (!r) {
            return;
        }
        if (r.startContainer) {
            var contain = r.startContainer;
            if (r.cloneContents().childNodes.length == 1) {
                for (var i = 0; i < contain.childNodes.length; i++) {
                    var rng = contain.childNodes[i].ownerDocument.createRange();
                    rng.selectNode(contain.childNodes[i]);
                    if (r.compareBoundaryPoints(Range.START_TO_START, rng) != 1 &&
                        r.compareBoundaryPoints(Range.END_TO_END, rng) != -1) {
                        return $BK(contain.childNodes[i]);
                    }
                }
            }
            return $BK(contain);
        } else {
            return $BK((this.getSel().type == "Control") ? r.item(0) : r.parentElement());
        }
    },

    saveRng: function() {
        this.savedRange = this.getRng();
        this.savedSel = this.getSel();
    },

    restoreRng: function() {
        if (this.savedRange) {
            this.selRng(this.savedRange, this.savedSel);
        }
    },

    keyDown: function(e, t) {
        if (e.ctrlKey) {
            this.ne.fireEvent('key', this, e);
        }
    },

    selected: function(e, t) {
        if (!t && !(t = this.selElm)) {
            t = this.selElm();
        }
        if (!e.ctrlKey) {
            var selInstance = this.ne.selectedInstance;
            if (selInstance != this) {
                if (selInstance) {
                    this.ne.fireEvent('blur', selInstance, t);
                }
                this.ne.selectedInstance = this;
                this.ne.fireEvent('focus', selInstance, t);
            }
            this.ne.fireEvent('selected', selInstance, t);
            this.isFocused = true;
            this.elm.addClass('selected');
        }
        return false;
    },

    blur: function() {
        this.isFocused = false;
        this.elm.removeClass('selected');
    },

    saveContent: function() {
        if (this.copyElm || this.options.hasPanel) {
            this.ne.fireEvent('save', this);
            (this.copyElm) ? this.copyElm.value = this.getContent(): this.e.innerHTML = this.getContent();
        }
    },

    getElm: function() {
        return this.elm;
    },

    getContent: function() {
        this.content = this.getElm().innerHTML;
        this.ne.fireEvent('get', this);
        return this.content;
    },

    setContent: function(e) {
        this.content = e;
        this.ne.fireEvent('set', this);
        this.elm.innerHTML = this.content;
    },

    nicCommand: function(cmd, args) {
        document.execCommand(cmd, false, args);
    }
});

var nicEditorIFrameInstance = nicEditorInstance.extend({
    savedStyles: [],

    init: function() {
        var c = this.elm.innerHTML.replace(/^\s+|\s+$/g, '');
        this.elm.innerHTML = '';
        (!c) ? c = "<br />": c;
        this.initialContent = c;

        this.elmFrame = new bkElement('iframe').setAttributes({
            'src': 'javascript:;',
            'frameBorder': 0,
            'allowTransparency': 'true',
            'scrolling': 'no'
        }).setStyle({
            height: '100px',
            width: '100%'
        }).addClass('frame').appendTo(this.elm);

        if (this.copyElm) {
            this.elmFrame.setStyle({
                width: (this.elm.offsetWidth - 4) + 'px'
            });
        }

        var styleList = ['font-size', 'font-family', 'font-weight', 'color'];
        for (itm in styleList) {
            this.savedStyles[bkLib.camelize(itm)] = this.elm.getStyle(itm);
        }

        setTimeout(this.initFrame.closure(this), 50);
    },

    disable: function() {
        this.elm.innerHTML = this.getContent();
    },

    initFrame: function() {
        var fd = $BK(this.elmFrame.contentWindow.document);
        fd.designMode = "on";
        fd.open();
        var css = this.ne.options.externalCSS;
        fd.write('<html><head>' + ((css) ? '<link href="' + css + '" rel="stylesheet" type="text/css" />' : '') + '</head><body id="nicEditContent" style="margin: 0 !important; background-color: transparent !important;">' + this.initialContent + '</body></html>');
        fd.close();
        this.frameDoc = fd;

        this.frameWin = $BK(this.elmFrame.contentWindow);
        this.frameContent = $BK(this.frameWin.document.body).setStyle(this.savedStyles);
        this.instanceDoc = this.frameWin.document.defaultView;

        this.heightUpdate();
        this.frameDoc.addEvent('mousedown', this.selected.closureListener(this)).addEvent('keyup', this.heightUpdate.closureListener(this)).addEvent('keydown', this.keyDown.closureListener(this)).addEvent('keyup', this.selected.closure(this));
        this.ne.fireEvent('add', this);
    },

    getElm: function() {
        return this.frameContent;
    },

    setContent: function(c) {
        this.content = c;
        this.ne.fireEvent('set', this);
        this.frameContent.innerHTML = this.content;
        this.heightUpdate();
    },

    getSel: function() {
        return (this.frameWin) ? this.frameWin.getSelection() : this.frameDoc.selection;
    },

    heightUpdate: function() {
        this.elmFrame.style.height = Math.max(this.frameContent.offsetHeight, this.initialHeight) + 'px';
    },

    nicCommand: function(cmd, args) {
        this.frameDoc.execCommand(cmd, false, args);
        setTimeout(this.heightUpdate.closure(this), 100);
    }


});
var nicEditorPanel = bkClass.extend({
    construct: function(e, options, nicEditor) {
        this.elm = e;
        this.options = options;
        this.ne = nicEditor;
        this.panelButtons = new Array();
        this.buttonList = bkExtend([], this.ne.options.buttonList);

        this.panelContain = new bkElement('DIV').setStyle({
            overflow: 'hidden',
            width: '100%',
            border: '1px solid #cccccc',
            backgroundColor: '#efefef'
        }).addClass('panelContain');
        this.panelElm = new bkElement('DIV').setStyle({
            margin: '2px',
            marginTop: '0px',
            zoom: 1,
            overflow: 'hidden'
        }).addClass('panel').appendTo(this.panelContain);
        this.panelContain.appendTo(e);

        var opt = this.ne.options;
        var buttons = opt.buttons;
        for (button in buttons) {
            this.addButton(button, opt, true);
        }
        this.reorder();
        e.noSelect();
    },

    addButton: function(buttonName, options, noOrder) {
        var button = options.buttons[buttonName];
        var type = (button['type']) ? eval('(typeof(' + button['type'] + ') == "undefined") ? null : ' + button['type'] + ';') : nicEditorButton;
        var hasButton = bkLib.inArray(this.buttonList, buttonName);
        if (type && (hasButton || this.ne.options.fullPanel)) {
            this.panelButtons.push(new type(this.panelElm, buttonName, options, this.ne));
            if (!hasButton) {
                this.buttonList.push(buttonName);
            }
        }
    },

    findButton: function(itm) {
        for (var i = 0; i < this.panelButtons.length; i++) {
            if (this.panelButtons[i].name == itm)
                return this.panelButtons[i];
        }
    },

    reorder: function() {
        var bl = this.buttonList;
        for (var i = 0; i < bl.length; i++) {
            var button = this.findButton(bl[i]);
            if (button) {
                this.panelElm.appendChild(button.margin);
            }
        }
    },

    remove: function() {
        this.elm.remove();
    }
});
var nicEditorButton = bkClass.extend({

    construct: function(e, buttonName, options, nicEditor) {
        this.options = options.buttons[buttonName];
        this.name = buttonName;
        this.ne = nicEditor;
        this.elm = e;

        this.margin = new bkElement('DIV').setStyle({
            'float': 'left',
            marginTop: '2px'
        }).appendTo(e);
        this.contain = new bkElement('DIV').setStyle({
            width: '20px',
            height: '20px',
            'text-align': 'center'
        }).addClass('buttonContain').appendTo(this.margin);
        this.border = new bkElement('DIV').setStyle({
            backgroundColor: '#efefef',
            border: '1px solid #efefef'
        }).appendTo(this.contain);
        this.button = new bkElement('DIV').setStyle({
            width: '18px',
            height: '18px',
            overflow: 'hidden',
            zoom: 1,
            cursor: 'pointer'
        }).addClass('button').inserthtml(this.ne.getIcon(buttonName, options)).appendTo(this.border);
        this.button.addEvent('mouseover', this.hoverOn.closure(this)).addEvent('mouseout', this.hoverOff.closure(this)).addEvent('mousedown', this.mouseClick.closure(this)).noSelect();

        if (!window.opera) {
            this.button.onmousedown = this.button.onclick = bkLib.cancelEvent;
        }

        nicEditor.addEvent('selected', this.enable.closure(this)).addEvent('blur', this.disable.closure(this)).addEvent('key', this.key.closure(this));

        this.disable();
        this.init();
    },

    init: function() {},

    hide: function() {
        this.contain.setStyle({
            display: 'none'
        });
    },

    updateState: function() {
        if (this.isDisabled) {
            this.setBg();
        } else if (this.isHover) {
            this.setBg('hover');
        } else if (this.isActive) {
            this.setBg('active');
        } else {
            this.setBg();
        }
    },

    setBg: function(state) {
        switch (state) {
            case 'hover':
                var stateStyle = {
                    border: '1px solid #666',
                    backgroundColor: '#ddd'
                };
                break;
            case 'active':
                var stateStyle = {
                    border: '1px solid #666',
                    backgroundColor: '#ccc'
                };
                break;
            default:
                var stateStyle = {
                    border: '1px solid #efefef',
                    backgroundColor: '#efefef'
                };
        }
        this.border.setStyle(stateStyle).addClass('button-' + state);
    },

    checkNodes: function(e) {
        var elm = e;
        do {
            if (this.options.tags && bkLib.inArray(this.options.tags, elm.nodeName)) {
                this.activate();
                return true;
            }
        } while (elm = elm.parentNode && elm.className != "nicEdit");
        elm = $BK(e);
        while (elm.nodeType == 3) {
            elm = $BK(elm.parentNode);
        }
        if (this.options.css) {
            for (itm in this.options.css) {
                if (elm.getStyle(itm, this.ne.selectedInstance.instanceDoc) == this.options.css[itm]) {
                    this.activate();
                    return true;
                }
            }
        }
        this.deactivate();
        return false;
    },

    activate: function() {
        if (!this.isDisabled) {
            this.isActive = true;
            this.updateState();
            this.ne.fireEvent('buttonActivate', this);
        }
    },

    deactivate: function() {
        this.isActive = false;
        this.updateState();
        if (!this.isDisabled) {
            this.ne.fireEvent('buttonDeactivate', this);
        }
    },

    enable: function(ins, t) {
        this.isDisabled = false;
        this.contain.setStyle({
            'opacity': 1
        }).addClass('buttonEnabled');
        this.updateState();
        this.checkNodes(t);
    },

    disable: function(ins, t) {
        this.isDisabled = true;
        this.contain.setStyle({
            'opacity': 0.6
        }).removeClass('buttonEnabled');
        this.updateState();
    },

    toggleActive: function() {
        (this.isActive) ? this.deactivate(): this.activate();
    },

    hoverOn: function() {
        if (!this.isDisabled) {
            this.isHover = true;
            this.updateState();
            this.ne.fireEvent("buttonOver", this);
        }
    },

    hoverOff: function() {
        this.isHover = false;
        this.updateState();
        this.ne.fireEvent("buttonOut", this);
    },

    mouseClick: function() {
        if (this.options.command) {
            this.ne.nicCommand(this.options.command, this.options.commandArgs);
            if (!this.options.noActive) {
                this.toggleActive();
            }
        }
        this.ne.fireEvent("buttonClick", this);
    },

    key: function(nicInstance, e) {
        if (this.options.key && e.ctrlKey && String.fromCharCode(e.keyCode || e.charCode).toLowerCase() == this.options.key) {
            this.mouseClick();
            if (e.preventDefault) e.preventDefault();
        }
    }

});


var nicPlugin = bkClass.extend({

    construct: function(nicEditor, options) {
        this.options = options;
        this.ne = nicEditor;
        this.ne.addEvent('panel', this.loadPanel.closure(this));

        this.init();
    },

    loadPanel: function(np) {
        var buttons = this.options.buttons;
        for (var button in buttons) {
            np.addButton(button, this.options);
        }
        np.reorder();
    },

    init: function() {}
});




/* START CONFIG */
var nicPaneOptions = {};
/* END CONFIG */

var nicEditorPane = bkClass.extend({
    construct: function(elm, nicEditor, options, openButton) {
        this.ne = nicEditor;
        this.elm = elm;
        this.pos = elm.pos();

        this.contain = new bkElement('div').setStyle({
            zIndex: '99999',
            overflow: 'hidden',
            position: 'absolute',
            left: this.pos[0] + 'px',
            top: this.pos[1] + 'px'
        })
        this.pane = new bkElement('div').setStyle({
            fontSize: '12px',
            border: '1px solid #ccc',
            'overflow': 'hidden',
            padding: '4px',
            textAlign: 'left',
            backgroundColor: '#ffffc9'
        }).addClass('pane').setStyle(options).appendTo(this.contain);

        if (openButton && !openButton.options.noClose) {
            this.close = new bkElement('div').setStyle({
                'float': 'right',
                height: '16px',
                width: '16px',
                cursor: 'pointer'
            }).inserthtml(this.ne.getIcon('close', nicPaneOptions)).addEvent('mousedown', openButton.removePane.closure(this)).appendTo(this.pane);
        }

        this.contain.noSelect().appendTo(document.body);

        this.position();
        this.init();
    },

    init: function() {},

    position: function() {
        if (this.ne.nicPanel) {
            var panelElm = this.ne.nicPanel.elm;
            var panelPos = panelElm.pos();
            var newLeft = panelPos[0] + parseInt(panelElm.getStyle('width')) - (parseInt(this.pane.getStyle('width')) + 8);
            if (newLeft < this.pos[0]) {
                this.contain.setStyle({
                    left: newLeft + 'px'
                });
            }
        }
    },

    toggle: function() {
        this.isVisible = !this.isVisible;
        this.contain.setStyle({
            display: ((this.isVisible) ? 'block' : 'none')
        });
    },

    remove: function() {
        if (this.contain) {
            this.contain.remove();
            this.contain = null;
        }
    },

    append: function(c) {
        c.appendTo(this.pane);
    },

    setContent: function(c) {
        this.pane.setContent(c);
    }

});



var nicEditorAdvancedButton = nicEditorButton.extend({

    init: function() {
        this.ne.addEvent('selected', this.removePane.closure(this)).addEvent('blur', this.removePane.closure(this));
    },

    mouseClick: function() {
        if (!this.isDisabled) {
            if (this.pane && this.pane.pane) {
                this.removePane();
            } else {
                this.pane = new nicEditorPane(this.contain, this.ne, {
                    width: (this.width || '270px'),
                    backgroundColor: '#fff'
                }, this);
                this.addPane();
                this.ne.selectedInstance.saveRng();
            }
        }
    },

    addForm: function(f, elm) {
        this.form = new bkElement('form').addEvent('submit', this.submit.closureListener(this));
        this.pane.append(this.form);
        this.inputs = {};

        for (itm in f) {
            var field = f[itm];
            var val = '';
            if (elm) {
                val = elm.getAttribute(itm);
            }
            if (!val) {
                val = field['value'] || '';
            }
            var type = f[itm].type;

            if (type == 'title') {
                new bkElement('div').setContent(field.txt).setStyle({
                    fontSize: '14px',
                    fontWeight: 'bold',
                    padding: '0px',
                    margin: '2px 0'
                }).appendTo(this.form);
            } else {
                var contain = new bkElement('div').setStyle({
                    overflow: 'hidden',
                    clear: 'both'
                }).appendTo(this.form);
                if (field.txt) {
                    new bkElement('label').setAttributes({
                        'for': itm
                    }).setContent(field.txt).setStyle({
                        margin: '2px 4px',
                        fontSize: '13px',
                        width: '50px',
                        lineHeight: '20px',
                        textAlign: 'right',
                        'float': 'left'
                    }).appendTo(contain);
                }

                switch (type) {
                    case 'text':
                        this.inputs[itm] = new bkElement('input').setAttributes({
                            id: itm,
                            'value': val,
                            'type': 'text'
                        }).setStyle({
                            margin: '2px 0',
                            fontSize: '13px',
                            'float': 'left',
                            height: '20px',
                            border: '1px solid #ccc',
                            overflow: 'hidden'
                        }).setStyle(field.style).appendTo(contain);
                        break;
                    case 'select':
                        this.inputs[itm] = new bkElement('select').setAttributes({
                            id: itm
                        }).setStyle({
                            border: '1px solid #ccc',
                            'float': 'left',
                            margin: '2px 0'
                        }).appendTo(contain);
                        for (opt in field.options) {
                            var o = new bkElement('option').setAttributes({
                                value: opt,
                                selected: (opt == val) ? 'selected' : ''
                            }).setContent(field.options[opt]).appendTo(this.inputs[itm]);
                        }
                        break;
                    case 'content':
                        this.inputs[itm] = new bkElement('textarea').setAttributes({
                            id: itm
                        }).setStyle({
                            border: '1px solid #ccc',
                            'float': 'left'
                        }).setStyle(field.style).appendTo(contain);
                        this.inputs[itm].value = val;
                }
            }
        }
        new bkElement('input').setAttributes({
            'type': 'submit'
        }).setStyle({
            backgroundColor: '#efefef',
            border: '1px solid #ccc',
            margin: '3px 0',
            'float': 'left',
            'clear': 'both'
        }).appendTo(this.form);
        this.form.onsubmit = bkLib.cancelEvent;
    },

    submit: function() {},

    findElm: function(tag, attr, val) {
        var list = this.ne.selectedInstance.getElm().getElementsByTagName(tag);
        for (var i = 0; i < list.length; i++) {
            if (list[i].getAttribute(attr) == val) {
                return $BK(list[i]);
            }
        }
    },

    removePane: function() {
        if (this.pane) {
            this.pane.remove();
            this.pane = null;
            this.ne.selectedInstance.restoreRng();
        }
    }
});


var nicButtonTips = bkClass.extend({
    construct: function(nicEditor) {
        this.ne = nicEditor;
        nicEditor.addEvent('buttonOver', this.show.closure(this)).addEvent('buttonOut', this.hide.closure(this));

    },

    show: function(button) {
        this.timer = setTimeout(this.create.closure(this, button), 400);
    },

    create: function(button) {
        this.timer = null;
        if (!this.pane) {
            this.pane = new nicEditorPane(button.button, this.ne, {
                fontSize: '12px',
                marginTop: '5px'
            });
            this.pane.setContent(button.options.name);
        }
    },

    hide: function(button) {
        if (this.timer) {
            clearTimeout(this.timer);
        }
        if (this.pane) {
            this.pane = this.pane.remove();
        }
    }
});
nicEditors.registerPlugin(nicButtonTips);



/* START CONFIG */
var nicSelectOptions = {
    buttons: {
        'fontSize': {
            name: __('Select Font Size'),
            type: 'nicEditorFontSizeSelect',
            command: 'fontsize'
        },
        'fontFamily': {
            name: __('Select Font Family'),
            type: 'nicEditorFontFamilySelect',
            command: 'fontname'
        },
        'fontFormat': {
            name: __('Select Font Format'),
            type: 'nicEditorFontFormatSelect',
            command: 'formatBlock'
        }
    }
};
/* END CONFIG */
var nicEditorSelect = bkClass.extend({

    construct: function(e, buttonName, options, nicEditor) {
        this.options = options.buttons[buttonName];
        this.elm = e;
        this.ne = nicEditor;
        this.name = buttonName;
        this.selOptions = new Array();

        this.margin = new bkElement('div').setStyle({
            'float': 'left',
            margin: '2px 1px 0 1px'
        }).appendTo(this.elm);
        this.contain = new bkElement('div').setStyle({
            width: '90px',
            height: '20px',
            cursor: 'pointer',
            overflow: 'hidden'
        }).addClass('selectContain').addEvent('click', this.toggle.closure(this)).appendTo(this.margin);
        this.items = new bkElement('div').setStyle({
            overflow: 'hidden',
            zoom: 1,
            border: '1px solid #ccc',
            paddingLeft: '3px',
            backgroundColor: '#fff'
        }).appendTo(this.contain);
        this.control = new bkElement('div').setStyle({
            overflow: 'hidden',
            'float': 'right',
            height: '18px',
            width: '16px'
        }).addClass('selectControl').inserthtml(this.ne.getIcon('arrow', options)).appendTo(this.items);
        this.txt = new bkElement('div').setStyle({
            overflow: 'hidden',
            'float': 'left',
            width: '66px',
            height: '14px',
            marginTop: '1px',
            fontFamily: 'sans-serif',
            textAlign: 'center',
            fontSize: '12px'
        }).addClass('selectTxt').appendTo(this.items);

        if (!window.opera) {
            this.contain.onmousedown = this.control.onmousedown = this.txt.onmousedown = bkLib.cancelEvent;
        }

        this.margin.noSelect();

        this.ne.addEvent('selected', this.enable.closure(this)).addEvent('blur', this.disable.closure(this));

        this.disable();
        this.init();
    },

    disable: function() {
        this.isDisabled = true;
        this.close();
        this.contain.setStyle({
            opacity: 0.6
        });
    },

    enable: function(t) {
        this.isDisabled = false;
        this.close();
        this.contain.setStyle({
            opacity: 1
        });
    },

    setDisplay: function(txt) {
        this.txt.setContent(txt);
    },

    toggle: function() {
        if (!this.isDisabled) {
            (this.pane) ? this.close(): this.open();
        }
    },

    open: function() {
        this.pane = new nicEditorPane(this.items, this.ne, {
            width: '88px',
            padding: '0px',
            borderTop: 0,
            borderLeft: '1px solid #ccc',
            borderRight: '1px solid #ccc',
            borderBottom: '0px',
            backgroundColor: '#fff'
        });

        for (var i = 0; i < this.selOptions.length; i++) {
            var opt = this.selOptions[i];
            var itmContain = new bkElement('div').setStyle({
                overflow: 'hidden',
                borderBottom: '1px solid #ccc',
                width: '88px',
                textAlign: 'left',
                overflow: 'hidden',
                cursor: 'pointer'
            });
            var itm = new bkElement('div').setStyle({
                padding: '0px 4px'
            }).setContent(opt[1]).appendTo(itmContain).noSelect();
            itm.addEvent('click', this.update.closure(this, opt[0])).addEvent('mouseover', this.over.closure(this, itm)).addEvent('mouseout', this.out.closure(this, itm)).setAttributes('id', opt[0]);
            this.pane.append(itmContain);
            if (!window.opera) {
                itm.onmousedown = bkLib.cancelEvent;
            }
        }
    },

    close: function() {
        if (this.pane) {
            this.pane = this.pane.remove();
        }
    },

    over: function(opt) {
        opt.setStyle({
            backgroundColor: '#ccc'
        });
    },

    out: function(opt) {
        opt.setStyle({
            backgroundColor: '#fff'
        });
    },


    add: function(k, v) {
        this.selOptions.push(new Array(k, v));
    },

    update: function(elm) {
        this.ne.nicCommand(this.options.command, elm);
        this.close();
    }
});

var nicEditorFontSizeSelect = nicEditorSelect.extend({
    sel: {
        1: '1&nbsp;(8pt)',
        2: '2&nbsp;(10pt)',
        3: '3&nbsp;(12pt)',
        4: '4&nbsp;(14pt)',
        5: '5&nbsp;(18pt)',
        6: '6&nbsp;(24pt)'
    },
    init: function() {
        this.setDisplay('Font&nbsp;Size...');
        for (itm in this.sel) {
            this.add(itm, '<font size="' + itm + '">' + this.sel[itm] + '</font>');
        }
    }
});

var nicEditorFontFamilySelect = nicEditorSelect.extend({
    sel: {
        'arial': 'Arial',
        'comic sans ms': 'Comic Sans',
        'courier new': 'Courier New',
        'georgia': 'Georgia',
        'helvetica': 'Helvetica',
        'impact': 'Impact',
        'times new roman': 'Times',
        'trebuchet ms': 'Trebuchet',
        'verdana': 'Verdana'
    },

    init: function() {
        this.setDisplay('Font&nbsp;Family...');
        for (itm in this.sel) {
            this.add(itm, '<font face="' + itm + '">' + this.sel[itm] + '</font>');
        }
    }
});

var nicEditorFontFormatSelect = nicEditorSelect.extend({
    sel: {
        'p': 'Paragraph',
        'pre': 'Pre',
        'h6': 'Heading&nbsp;6',
        'h5': 'Heading&nbsp;5',
        'h4': 'Heading&nbsp;4',
        'h3': 'Heading&nbsp;3',
        'h2': 'Heading&nbsp;2',
        'h1': 'Heading&nbsp;1'
    },

    init: function() {
        this.setDisplay('Font&nbsp;Format...');
        for (itm in this.sel) {
            var tag = itm.toUpperCase();
            this.add('<' + tag + '>', '<' + itm + ' style="padding: 0px; margin: 0px;">' + this.sel[itm] + '</' + tag + '>');
        }
    }
});

nicEditors.registerPlugin(nicPlugin, nicSelectOptions);



/* START CONFIG */
var nicLinkOptions = {
    buttons: {
        'link': {
            name: 'Add Link',
            type: 'nicLinkButton',
            tags: ['A']
        },
        'unlink': {
            name: 'Remove Link',
            command: 'unlink',
            noActive: true
        }
    }
};
/* END CONFIG */

var nicLinkButton = nicEditorAdvancedButton.extend({
    addPane: function() {
        this.ln = this.ne.selectedInstance.selElm().parentTag('A');
        this.addForm({
            '': {
                type: 'title',
                txt: 'Add/Edit Link'
            },
            'href': {
                type: 'text',
                txt: 'URL',
                value: 'http://',
                style: {
                    width: '150px'
                }
            },
            'title': {
                type: 'text',
                txt: 'Title'
            },
            'target': {
                type: 'select',
                txt: 'Open In',
                options: {
                    '': 'Current Window',
                    '_blank': 'New Window'
                },
                style: {
                    width: '100px'
                }
            }
        }, this.ln);
    },

    submit: function(e) {
        var url = this.inputs['href'].value;
        if (url == "http://" || url == "") {
            alert("You must enter a URL to Create a Link");
            return false;
        }
        this.removePane();

        if (!this.ln) {
            var tmp = 'javascript:nicTemp();';
            this.ne.nicCommand("createlink", tmp);
            this.ln = this.findElm('A', 'href', tmp);
        }
        if (this.ln) {
            this.ln.setAttributes({
                href: this.inputs['href'].value,
                title: this.inputs['title'].value,
                target: this.inputs['target'].options[this.inputs['target'].selectedIndex].value
            });
        }
    }
});

nicEditors.registerPlugin(nicPlugin, nicLinkOptions);



/* START CONFIG */
var nicColorOptions = {
    buttons: {
        'forecolor': {
            name: __('Change Text Color'),
            type: 'nicEditorColorButton',
            noClose: true
        },
        'bgcolor': {
            name: __('Change Background Color'),
            type: 'nicEditorBgColorButton',
            noClose: true
        }
    }
};
/* END CONFIG */

var nicEditorColorButton = nicEditorAdvancedButton.extend({
    addPane: function() {
        var colorList = {
            0: '00',
            1: '33',
            2: '66',
            3: '99',
            4: 'CC',
            5: 'FF'
        };
        var colorItems = new bkElement('DIV').setStyle({
            width: '270px'
        });

        for (var r in colorList) {
            for (var b in colorList) {
                for (var g in colorList) {
                    var colorCode = '#' + colorList[r] + colorList[g] + colorList[b];

                    var colorSquare = new bkElement('DIV').setStyle({
                        'cursor': 'pointer',
                        'height': '15px',
                        'float': 'left'
                    }).appendTo(colorItems);
                    var colorBorder = new bkElement('DIV').setStyle({
                        border: '2px solid ' + colorCode
                    }).appendTo(colorSquare);
                    var colorInner = new bkElement('DIV').setStyle({
                        backgroundColor: colorCode,
                        overflow: 'hidden',
                        width: '11px',
                        height: '11px'
                    }).addEvent('click', this.colorSelect.closure(this, colorCode)).addEvent('mouseover', this.on.closure(this, colorBorder)).addEvent('mouseout', this.off.closure(this, colorBorder, colorCode)).appendTo(colorBorder);

                    if (!window.opera) {
                        colorSquare.onmousedown = colorInner.onmousedown = bkLib.cancelEvent;
                    }

                }
            }
        }
        this.pane.append(colorItems.noSelect());
    },

    colorSelect: function(c) {
        this.ne.nicCommand('foreColor', c);
        this.removePane();
    },

    on: function(colorBorder) {
        colorBorder.setStyle({
            border: '2px solid #000'
        });
    },

    off: function(colorBorder, colorCode) {
        colorBorder.setStyle({
            border: '2px solid ' + colorCode
        });
    }
});

var nicEditorBgColorButton = nicEditorColorButton.extend({
    colorSelect: function(c) {
        this.ne.nicCommand('hiliteColor', c);
        this.removePane();
    }
});

nicEditors.registerPlugin(nicPlugin, nicColorOptions);



/* START CONFIG */
var nicImageOptions = {
    buttons: {
        'image': {
            name: 'Add Image',
            type: 'nicImageButton',
            tags: ['IMG']
        }
    }

};
/* END CONFIG */

var nicImageButton = nicEditorAdvancedButton.extend({
    addPane: function() {
        this.im = this.ne.selectedInstance.selElm().parentTag('IMG');
        this.addForm({
            '': {
                type: 'title',
                txt: 'Add/Edit Image'
            },
            'src': {
                type: 'text',
                txt: 'URL',
                'value': 'http://',
                style: {
                    width: '150px'
                }
            },
            'alt': {
                type: 'text',
                txt: 'Alt Text',
                style: {
                    width: '100px'
                }
            },
            'align': {
                type: 'select',
                txt: 'Align',
                options: {
                    none: 'Default',
                    'left': 'Left',
                    'right': 'Right'
                }
            }
        }, this.im);
    },

    submit: function(e) {
        var src = this.inputs['src'].value;
        if (src == "" || src == "http://") {
            alert("You must enter a Image URL to insert");
            return false;
        }
        this.removePane();

        if (!this.im) {
            var tmp = 'javascript:nicImTemp();';
            this.ne.nicCommand("insertImage", tmp);
            this.im = this.findElm('IMG', 'src', tmp);
        }
        if (this.im) {
            this.im.setAttributes({
                src: this.inputs['src'].value,
                alt: this.inputs['alt'].value,
                align: this.inputs['align'].value
            });
        }
    }
});

nicEditors.registerPlugin(nicPlugin, nicImageOptions);




/* START CONFIG */
var nicSaveOptions = {
    buttons: {
        'save': {
            name: __('Save this content'),
            type: 'nicEditorSaveButton'
        }
    }
};
/* END CONFIG */

var nicEditorSaveButton = nicEditorButton.extend({
    init: function() {
        if (!this.ne.options.onSave) {
            this.margin.setStyle({
                'display': 'none'
            });
        }
    },
    mouseClick: function() {
        var onSave = this.ne.options.onSave;
        var selectedInstance = this.ne.selectedInstance;
        onSave(selectedInstance.getContent(), selectedInstance.elm.id, selectedInstance);
    }
});

nicEditors.registerPlugin(nicPlugin, nicSaveOptions);

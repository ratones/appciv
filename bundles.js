/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var arr = [];

var document = window.document;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "2.2.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isPlainObject: function( obj ) {
		var key;

		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Not own constructor property must be Object
		if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {

			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf( "use strict" ) === 1 ) {
				script = document.createElement( "script" );
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {

				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval

				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {

						// Inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE9-10 only
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	register: function( owner, initial ) {
		var value = initial || {};

		// If it is a node unlikely to be stringify-ed or looped over
		// use plain assignment
		if ( owner.nodeType ) {
			owner[ this.expando ] = value;

		// Otherwise secure it in a non-enumerable, non-writable property
		// configurability must be true to allow the property to be
		// deleted with the delete operator
		} else {
			Object.defineProperty( owner, this.expando, {
				value: value,
				writable: true,
				configurable: true
			} );
		}
		return owner[ this.expando ];
	},
	cache: function( owner ) {

		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return an empty object.
		if ( !acceptData( owner ) ) {
			return {};
		}

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ prop ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :
			owner[ this.expando ] && owner[ this.expando ][ key ];
	},
	access: function( owner, key, value ) {
		var stored;

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase( key ) );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key === undefined ) {
			this.register( owner );

		} else {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );

				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;

			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <= 35-45+
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://code.google.com/p/chromium/issues/detail?id=378607
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data, camelKey;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// with the key as-is
				data = dataUser.get( elem, key ) ||

					// Try to find dashed key if it exists (gh-2779)
					// This is for 2.2.x only
					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

				if ( data !== undefined ) {
					return data;
				}

				camelKey = jQuery.camelCase( key );

				// Attempt to get data from the cache
				// with the key camelized
				data = dataUser.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			camelKey = jQuery.camelCase( key );
			this.each( function() {

				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = dataUser.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				dataUser.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
					dataUser.set( this, key, value );
				}
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE9
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE9-11+
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0-4.3, Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
			"screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {
	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {
		div.style.cssText =

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );
	}

	jQuery.extend( support, {
		pixelPosition: function() {

			// This test is executed only once but we still do memoizing
			// since we can use the boxSizingReliable pre-computing.
			// No need to check if the test was already performed, though.
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
			// since that compresses better and they're computed together anyway.
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		},
		reliableMarginRight: function() {

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// This support function is only executed once so no memoizing is needed.
			var ret,
				marginDiv = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			marginDiv.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;box-sizing:content-box;" +
				"display:block;margin:0;border:0;padding:0";
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			documentElement.appendChild( container );

			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

			documentElement.removeChild( container );
			div.removeChild( marginDiv );

			return ret;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );
	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

	// Support: Opera 12.1x only
	// Fall back to style even without computed
	// computed is undefined for elems on document fragments
	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
		ret = jQuery.style( elem, name );
	}

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE9-11+
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = dataPriv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = dataPriv.access(
					elem,
					"olddisplay",
					defaultDisplay( elem.nodeName )
				);
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				dataPriv.set(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = dataPriv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;

			dataPriv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
		opt.duration : opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE8-11+
			// IE throws exception if url is malformed, e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE8-11+
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


jQuery.expr.filters.hidden = function( elem ) {
	return !jQuery.expr.filters.visible( elem );
};
jQuery.expr.filters.visible = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	// Use OR instead of AND as the element is not visible if either is true
	// See tickets #10406 and #13132
	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE9
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE9
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		box = elem.getBoundingClientRect();
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},
	size: function() {
		return this.length;
	}
} );

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));

//     Underscore.js 1.9.2
//     https://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.2';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

//     Backbone.js 1.2.3

//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(factory) {

  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.
  // We use `self` instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self == self && self) ||
            (typeof global == 'object' && global.global == global && global);

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore'), $;
    try { $ = require('jquery'); } catch(e) {}
    factory(root, exports, _, $);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create a local reference to a common array method we'll want to use later.
  var slice = Array.prototype.slice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.2.3';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... this will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Proxy Backbone class methods to Underscore functions, wrapping the model's
  // `attributes` object or collection's `models` array behind the scenes.
  //
  // collection.filter(function(model) { return model.get('age') > 10 });
  // collection.each(this.addView);
  //
  // `Function#apply` can be slow so we use the method's arg count, if we know it.
  var addMethod = function(length, method, attribute) {
    switch (length) {
      case 1: return function() {
        return _[method](this[attribute]);
      };
      case 2: return function(value) {
        return _[method](this[attribute], value);
      };
      case 3: return function(iteratee, context) {
        return _[method](this[attribute], cb(iteratee, this), context);
      };
      case 4: return function(iteratee, defaultVal, context) {
        return _[method](this[attribute], cb(iteratee, this), defaultVal, context);
      };
      default: return function() {
        var args = slice.call(arguments);
        args.unshift(this[attribute]);
        return _[method].apply(_, args);
      };
    }
  };
  var addUnderscoreMethods = function(Class, methods, attribute) {
    _.each(methods, function(length, method) {
      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);
    });
  };

  // Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.
  var cb = function(iteratee, instance) {
    if (_.isFunction(iteratee)) return iteratee;
    if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
    if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };
    return iteratee;
  };
  var modelMatcher = function(attrs) {
    var matcher = _.matches(attrs);
    return function(model) {
      return matcher(model.attributes);
    };
  };

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // a custom event channel. You may bind a callback to an event with `on` or
  // remove with `off`; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {};

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Iterates over the standard `event, callback` (as well as the fancy multiple
  // space-separated events `"change blur", callback` and jQuery-style event
  // maps `{event: callback}`).
  var eventsApi = function(iteratee, events, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
      // Handle event maps.
      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
      for (names = _.keys(name); i < names.length ; i++) {
        events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
      }
    } else if (name && eventSplitter.test(name)) {
      // Handle space separated event names by delegating them individually.
      for (names = name.split(eventSplitter); i < names.length; i++) {
        events = iteratee(events, names[i], callback, opts);
      }
    } else {
      // Finally, standard events.
      events = iteratee(events, name, callback, opts);
    }
    return events;
  };

  // Bind an event to a `callback` function. Passing `"all"` will bind
  // the callback to all events fired.
  Events.on = function(name, callback, context) {
    return internalOn(this, name, callback, context);
  };

  // Guard the `listening` argument from the public API.
  var internalOn = function(obj, name, callback, context, listening) {
    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {
        context: context,
        ctx: obj,
        listening: listening
    });

    if (listening) {
      var listeners = obj._listeners || (obj._listeners = {});
      listeners[listening.id] = listening;
    }

    return obj;
  };

  // Inversion-of-control versions of `on`. Tell *this* object to listen to
  // an event in another object... keeping track of what it's listening to
  // for easier unbinding later.
  Events.listenTo =  function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = listeningTo[id];

    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));
      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};
    }

    // Bind callbacks on obj, and keep track of them on listening.
    internalOn(obj, name, callback, this, listening);
    return this;
  };

  // The reducing API that adds a callback to the `events` object.
  var onApi = function(events, name, callback, options) {
    if (callback) {
      var handlers = events[name] || (events[name] = []);
      var context = options.context, ctx = options.ctx, listening = options.listening;
      if (listening) listening.count++;

      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });
    }
    return events;
  };

  // Remove one or many callbacks. If `context` is null, removes all
  // callbacks with that function. If `callback` is null, removes all
  // callbacks for the event. If `name` is null, removes all bound
  // callbacks for all events.
  Events.off =  function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
    });
    return this;
  };

  // Tell this object to stop listening to either specific events ... or
  // to every object it's currently listening to.
  Events.stopListening =  function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;

    var ids = obj ? [obj._listenId] : _.keys(listeningTo);

    for (var i = 0; i < ids.length; i++) {
      var listening = listeningTo[ids[i]];

      // If listening doesn't exist, this object is not currently
      // listening to obj. Break out early.
      if (!listening) break;

      listening.obj.off(name, callback, this);
    }
    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;

    return this;
  };

  // The reducing API that removes a callback from the `events` object.
  var offApi = function(events, name, callback, options) {
    if (!events) return;

    var i = 0, listening;
    var context = options.context, listeners = options.listeners;

    // Delete all events listeners and "drop" events.
    if (!name && !callback && !context) {
      var ids = _.keys(listeners);
      for (; i < ids.length; i++) {
        listening = listeners[ids[i]];
        delete listeners[listening.id];
        delete listening.listeningTo[listening.objId];
      }
      return;
    }

    var names = name ? [name] : _.keys(events);
    for (; i < names.length; i++) {
      name = names[i];
      var handlers = events[name];

      // Bail out if there are no events stored.
      if (!handlers) break;

      // Replace events if there are any remaining.  Otherwise, clean up.
      var remaining = [];
      for (var j = 0; j < handlers.length; j++) {
        var handler = handlers[j];
        if (
          callback && callback !== handler.callback &&
            callback !== handler.callback._callback ||
              context && context !== handler.context
        ) {
          remaining.push(handler);
        } else {
          listening = handler.listening;
          if (listening && --listening.count === 0) {
            delete listeners[listening.id];
            delete listening.listeningTo[listening.objId];
          }
        }
      }

      // Update tail event if the list has any events.  Otherwise, clean up.
      if (remaining.length) {
        events[name] = remaining;
      } else {
        delete events[name];
      }
    }
    if (_.size(events)) return events;
  };

  // Bind an event to only be triggered a single time. After the first time
  // the callback is invoked, its listener will be removed. If multiple events
  // are passed in using the space-separated syntax, the handler will fire
  // once for each event, not once for a combination of all events.
  Events.once =  function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));
    return this.on(events, void 0, context);
  };

  // Inversion-of-control versions of `once`.
  Events.listenToOnce =  function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));
    return this.listenTo(obj, events);
  };

  // Reduces the event callbacks into a map of `{event: onceWrapper}`.
  // `offer` unbinds the `onceWrapper` after it has been called.
  var onceMap = function(map, name, callback, offer) {
    if (callback) {
      var once = map[name] = _.once(function() {
        offer(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
    }
    return map;
  };

  // Trigger one or many events, firing all bound callbacks. Callbacks are
  // passed the same arguments as `trigger` is, apart from the event name
  // (unless you're listening on `"all"`, which will cause your callback to
  // receive the true name of the event as the first argument).
  Events.trigger =  function(name) {
    if (!this._events) return this;

    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];

    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
  };

  // Handles triggering the appropriate event callbacks.
  var triggerApi = function(objEvents, name, cb, args) {
    if (objEvents) {
      var events = objEvents[name];
      var allEvents = objEvents.all;
      if (events && allEvents) allEvents = allEvents.slice();
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, [name].concat(args));
    }
    return objEvents;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Special-cased proxy to underscore's `_.matches` method.
    matches: function(attrs) {
      return !!_.iteratee(attrs, this)(this.attributes);
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      var unset      = options.unset;
      var silent     = options.silent;
      var changes    = [];
      var changing   = this._changing;
      this._changing = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }

      var current = this.attributes;
      var changed = this.changed;
      var prev    = this._previousAttributes;

      // For each `set` attribute, update or delete the current value.
      for (var attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          changed[attr] = val;
        } else {
          delete changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Update the `id`.
      this.id = this.get(this.idAttribute);

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0; i < changes.length; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      var changed = {};
      for (var attr in diff) {
        var val = diff[attr];
        if (_.isEqual(old[attr], val)) continue;
        changed[attr] = val;
      }
      return _.size(changed) ? changed : false;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server, merging the response with the model's
    // local attributes. Any changed attributes will trigger a "change" event.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (!model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      // Handle both `"key", value` and `{key: value}` -style arguments.
      var attrs;
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true, parse: true}, options);
      var wait = options.wait;

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      var model = this;
      var success = options.success;
      var attributes = this.attributes;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = options.parse ? model.parse(resp, options) : resp;
        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);
        if (serverAttrs && !model.set(serverAttrs, options)) return false;
        if (success) success.call(options.context, model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      // Set temporary attributes if `{wait: true}` to properly find new ids.
      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);

      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch' && !options.attrs) options.attrs = attrs;
      var xhr = this.sync(method, this, options);

      // Restore attributes.
      this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;
      var wait = options.wait;

      var destroy = function() {
        model.stopListening();
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (wait) destroy();
        if (success) success.call(options.context, model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      var xhr = false;
      if (this.isNew()) {
        _.defer(options.success);
      } else {
        wrapError(this, options);
        xhr = this.sync('delete', this, options);
      }
      if (!wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      var id = this.get(this.idAttribute);
      return base.replace(/[^\/]$/, '$&/') + encodeURIComponent(id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.defaults({validate: true}, options));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model, mapped to the
  // number of arguments they take.
  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,
      omit: 0, chain: 1, isEmpty: 1 };

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  addUnderscoreMethods(Model, modelMethods, 'attributes');

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analogous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Splices `insert` into `array` at index `at`.
  var splice = function(array, insert, at) {
    at = Math.min(Math.max(at, 0), array.length);
    var tail = Array(array.length - at);
    var length = insert.length;
    for (var i = 0; i < tail.length; i++) tail[i] = array[i + at];
    for (i = 0; i < length; i++) array[i + at] = insert[i];
    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];
  };

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model) { return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set. `models` may be Backbone
    // Models or raw JavaScript objects to be converted to Models, or any
    // combination of the two.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      options = _.extend({}, options);
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      var removed = this._removeModels(models, options);
      if (!options.silent && removed) this.trigger('update', this, options);
      return singular ? removed[0] : removed;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      if (models == null) return;

      options = _.defaults({}, options, setOptions);
      if (options.parse && !this._isModel(models)) models = this.parse(models, options);

      var singular = !_.isArray(models);
      models = singular ? [models] : models.slice();

      var at = options.at;
      if (at != null) at = +at;
      if (at < 0) at += this.length + 1;

      var set = [];
      var toAdd = [];
      var toRemove = [];
      var modelMap = {};

      var add = options.add;
      var merge = options.merge;
      var remove = options.remove;

      var sort = false;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      var model;
      for (var i = 0; i < models.length; i++) {
        model = models[i];

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        var existing = this.get(model);
        if (existing) {
          if (merge && model !== existing) {
            var attrs = this._isModel(model) ? model.attributes : model;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort) sort = existing.hasChanged(sortAttr);
          }
          if (!modelMap[existing.cid]) {
            modelMap[existing.cid] = true;
            set.push(existing);
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(model, options);
          if (model) {
            toAdd.push(model);
            this._addReference(model, options);
            modelMap[model.cid] = true;
            set.push(model);
          }
        }
      }

      // Remove stale models.
      if (remove) {
        for (i = 0; i < this.length; i++) {
          model = this.models[i];
          if (!modelMap[model.cid]) toRemove.push(model);
        }
        if (toRemove.length) this._removeModels(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      var orderChanged = false;
      var replace = !sortable && add && remove;
      if (set.length && replace) {
        orderChanged = this.length != set.length || _.some(this.models, function(model, index) {
          return model !== set[index];
        });
        this.models.length = 0;
        splice(this.models, set, 0);
        this.length = this.models.length;
      } else if (toAdd.length) {
        if (sortable) sort = true;
        splice(this.models, toAdd, at == null ? this.length : at);
        this.length = this.models.length;
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0; i < toAdd.length; i++) {
          if (at != null) options.index = at + i;
          model = toAdd[i];
          model.trigger('add', model, this, options);
        }
        if (sort || orderChanged) this.trigger('sort', this, options);
        if (toAdd.length || toRemove.length) this.trigger('update', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options = options ? _.clone(options) : {};
      for (var i = 0; i < this.models.length; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      return this.remove(model, options);
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      return this.remove(model, options);
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);
      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      if (index < 0) index += this.length;
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      return this[first ? 'find' : 'filter'](attrs);
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      var comparator = this.comparator;
      if (!comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      var length = comparator.length;
      if (_.isFunction(comparator)) comparator = _.bind(comparator, this);

      // Run sort based on type of `comparator`.
      if (length === 1 || _.isString(comparator)) {
        this.models = this.sortBy(comparator);
      } else {
        this.models.sort(comparator);
      }
      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = _.extend({parse: true}, options);
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success.call(options.context, collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      var wait = options.wait;
      model = this._prepareModel(model, options);
      if (!model) return false;
      if (!wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp, callbackOpts) {
        if (wait) collection.add(model, callbackOpts);
        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models, {
        model: this.model,
        comparator: this.comparator
      });
    },

    // Define how to uniquely identify models in the collection.
    modelId: function (attrs) {
      return attrs[this.model.prototype.idAttribute || 'id'];
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (this._isModel(attrs)) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method called by both remove and set.
    _removeModels: function(models, options) {
      var removed = [];
      for (var i = 0; i < models.length; i++) {
        var model = this.get(models[i]);
        if (!model) continue;

        var index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;

        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }

        removed.push(model);
        this._removeReference(model, options);
      }
      return removed.length ? removed : false;
    },

    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function (model) {
      return model instanceof Model;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      var id = this.modelId(model.attributes);
      if (id != null) this._byId[id] = model;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      delete this._byId[model.cid];
      var id = this.modelId(model.attributes);
      if (id != null) delete this._byId[id];
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (event === 'change') {
        var prevId = this.modelId(model.previousAttributes());
        var id = this.modelId(model.attributes);
        if (prevId !== id) {
          if (prevId != null) delete this._byId[prevId];
          if (id != null) this._byId[id] = model;
        }
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,
      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,
      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,
      contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,
      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,
      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,
      isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,
      sortBy: 3, indexBy: 3};

  // Mix in each Underscore method as a proxy to `Collection#models`.
  addUnderscoreMethods(Collection, collectionMethods, 'models');

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be set as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this._removeElement();
      this.stopListening();
      return this;
    },

    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
      this.$el.remove();
    },

    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
      this.undelegateEvents();
      this._setElement(element);
      this.delegateEvents();
      return this;
    },

    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);
      this.el = this.$el[0];
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
      events || (events = _.result(this, 'events'));
      if (!events) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[method];
        if (!method) continue;
        var match = key.match(delegateEventSplitter);
        this.delegate(match[1], match[2], _.bind(method, this));
      }
      return this;
    },

    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      if (this.$el) this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
      return this;
    },

    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
      return document.createElement(tagName);
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        this.setElement(this._createElement(_.result(this, 'tagName')));
        this._setAttributes(attrs);
      } else {
        this.setElement(_.result(this, 'el'));
      }
    },

    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
      this.$el.attr(attributes);
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // Pass along `textStatus` and `errorThrown` from jQuery.
    var error = options.error;
    options.error = function(xhr, textStatus, errorThrown) {
      options.textStatus = textStatus;
      options.errorThrown = errorThrown;
      if (error) error.call(options.context, xhr, textStatus, errorThrown);
    };

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        if (router.execute(callback, args, name) !== false) {
          router.trigger.apply(router, ['route:' + name].concat(args));
          router.trigger('route', name, args);
          Backbone.history.trigger('route', router, name, args);
        }
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args, name) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    this.checkUrl = _.bind(this.checkUrl, this);

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      var path = this.location.pathname.replace(/[^\/]$/, '$&/');
      return path === this.root && !this.getSearch();
    },

    // Does the pathname match the root?
    matchRoot: function() {
      var path = this.decodeFragment(this.location.pathname);
      var root = path.slice(0, this.root.length - 1) + '/';
      return root === this.root;
    },

    // Unicode characters in `location.pathname` are percent encoded so they're
    // decoded for comparison. `%25` should not be decoded since it may be part
    // of an encoded parameter.
    decodeFragment: function(fragment) {
      return decodeURI(fragment.replace(/%25/g, '%2525'));
    },

    // In IE6, the hash fragment and search params are incorrect if the
    // fragment contains `?`.
    getSearch: function() {
      var match = this.location.href.replace(/#.*/, '').match(/\?.+/);
      return match ? match[0] : '';
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the pathname and search params, without the root.
    getPath: function() {
      var path = this.decodeFragment(
        this.location.pathname + this.getSearch()
      ).slice(this.root.length - 1);
      return path.charAt(0) === '/' ? path.slice(1) : path;
    },

    // Get the cross-browser normalized URL fragment from the path or hash.
    getFragment: function(fragment) {
      if (fragment == null) {
        if (this._usePushState || !this._wantsHashChange) {
          fragment = this.getPath();
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error('Backbone.history has already been started');
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);
      this._useHashChange   = this._wantsHashChange && this._hasHashChange;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.history && this.history.pushState);
      this._usePushState    = this._wantsPushState && this._hasPushState;
      this.fragment         = this.getFragment();

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          var root = this.root.slice(0, -1) || '/';
          this.location.replace(root + '#' + this.getPath());
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot()) {
          this.navigate(this.getHash(), {replace: true});
        }

      }

      // Proxy an iframe to handle location events if the browser doesn't
      // support the `hashchange` event, HTML5 history, or the user wants
      // `hashChange` but not `pushState`.
      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {
        this.iframe = document.createElement('iframe');
        this.iframe.src = 'javascript:0';
        this.iframe.style.display = 'none';
        this.iframe.tabIndex = -1;
        var body = document.body;
        // Using `appendChild` will throw on IE < 9 if the document is not ready.
        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;
        iWindow.document.open();
        iWindow.document.close();
        iWindow.location.hash = '#' + this.fragment;
      }

      // Add a cross-platform `addEventListener` shim for older browsers.
      var addEventListener = window.addEventListener || function (eventName, listener) {
        return attachEvent('on' + eventName, listener);
      };

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._usePushState) {
        addEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        addEventListener('hashchange', this.checkUrl, false);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      // Add a cross-platform `removeEventListener` shim for older browsers.
      var removeEventListener = window.removeEventListener || function (eventName, listener) {
        return detachEvent('on' + eventName, listener);
      };

      // Remove window listeners.
      if (this._usePushState) {
        removeEventListener('popstate', this.checkUrl, false);
      } else if (this._useHashChange && !this.iframe) {
        removeEventListener('hashchange', this.checkUrl, false);
      }

      // Clean up the iframe if necessary.
      if (this.iframe) {
        document.body.removeChild(this.iframe);
        this.iframe = null;
      }

      // Some environments will throw when clearing an undefined interval.
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();

      // If the user pressed the back button, the iframe's hash will have
      // changed and we should use that for comparison.
      if (current === this.fragment && this.iframe) {
        current = this.getHash(this.iframe.contentWindow);
      }

      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      // If the root doesn't match, no routes can match either.
      if (!this.matchRoot()) return false;
      fragment = this.fragment = this.getFragment(fragment);
      return _.some(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      // Normalize the fragment.
      fragment = this.getFragment(fragment || '');

      // Don't include a trailing slash on the root.
      var root = this.root;
      if (fragment === '' || fragment.charAt(0) === '?') {
        root = root.slice(0, -1) || '/';
      }
      var url = root + fragment;

      // Strip the hash and decode for matching.
      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._usePushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {
          var iWindow = this.iframe.contentWindow;

          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if (!options.replace) {
            iWindow.document.open();
            iWindow.document.close();
          }

          this._updateHash(iWindow.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent` constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error.call(options.context, model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

// Backbone.BabySitter
// -------------------
// v0.1.10
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.babysitter

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  'use strict';

  var previousChildViewContainer = Backbone.ChildViewContainer;

  // BabySitter.ChildViewContainer
  // -----------------------------
  //
  // Provide a container to store, retrieve and
  // shut down child views.
  
  Backbone.ChildViewContainer = (function (Backbone, _) {
  
    // Container Constructor
    // ---------------------
  
    var Container = function(views){
      this._views = {};
      this._indexByModel = {};
      this._indexByCustom = {};
      this._updateLength();
  
      _.each(views, this.add, this);
    };
  
    // Container Methods
    // -----------------
  
    _.extend(Container.prototype, {
  
      // Add a view to this container. Stores the view
      // by `cid` and makes it searchable by the model
      // cid (and model itself). Optionally specify
      // a custom key to store an retrieve the view.
      add: function(view, customIndex){
        var viewCid = view.cid;
  
        // store the view
        this._views[viewCid] = view;
  
        // index it by model
        if (view.model){
          this._indexByModel[view.model.cid] = viewCid;
        }
  
        // index by custom
        if (customIndex){
          this._indexByCustom[customIndex] = viewCid;
        }
  
        this._updateLength();
        return this;
      },
  
      // Find a view by the model that was attached to
      // it. Uses the model's `cid` to find it.
      findByModel: function(model){
        return this.findByModelCid(model.cid);
      },
  
      // Find a view by the `cid` of the model that was attached to
      // it. Uses the model's `cid` to find the view `cid` and
      // retrieve the view using it.
      findByModelCid: function(modelCid){
        var viewCid = this._indexByModel[modelCid];
        return this.findByCid(viewCid);
      },
  
      // Find a view by a custom indexer.
      findByCustom: function(index){
        var viewCid = this._indexByCustom[index];
        return this.findByCid(viewCid);
      },
  
      // Find by index. This is not guaranteed to be a
      // stable index.
      findByIndex: function(index){
        return _.values(this._views)[index];
      },
  
      // retrieve a view by its `cid` directly
      findByCid: function(cid){
        return this._views[cid];
      },
  
      // Remove a view
      remove: function(view){
        var viewCid = view.cid;
  
        // delete model index
        if (view.model){
          delete this._indexByModel[view.model.cid];
        }
  
        // delete custom index
        _.any(this._indexByCustom, function(cid, key) {
          if (cid === viewCid) {
            delete this._indexByCustom[key];
            return true;
          }
        }, this);
  
        // remove the view from the container
        delete this._views[viewCid];
  
        // update the length
        this._updateLength();
        return this;
      },
  
      // Call a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.call`.
      call: function(method){
        this.apply(method, _.tail(arguments));
      },
  
      // Apply a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.apply`.
      apply: function(method, args){
        _.each(this._views, function(view){
          if (_.isFunction(view[method])){
            view[method].apply(view, args || []);
          }
        });
      },
  
      // Update the `.length` attribute on this container
      _updateLength: function(){
        this.length = _.size(this._views);
      }
    });
  
    // Borrowing this code from Backbone.Collection:
    // http://backbonejs.org/docs/backbone.html#section-106
    //
    // Mix in methods from Underscore, for iteration, and other
    // collection related features.
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck', 'reduce'];
  
    _.each(methods, function(method) {
      Container.prototype[method] = function() {
        var views = _.values(this._views);
        var args = [views].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  
    // return the public API
    return Container;
  })(Backbone, _);
  

  Backbone.ChildViewContainer.VERSION = '0.1.10';

  Backbone.ChildViewContainer.noConflict = function () {
    Backbone.ChildViewContainer = previousChildViewContainer;
    return this;
  };

  return Backbone.ChildViewContainer;

}));

// Backbone.Wreqr (Backbone.Marionette)
// ----------------------------------
// v1.3.5
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.wreqr


(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  "use strict";

  var previousWreqr = Backbone.Wreqr;

  var Wreqr = Backbone.Wreqr = {};

  Backbone.Wreqr.VERSION = '1.3.5';

  Backbone.Wreqr.noConflict = function () {
    Backbone.Wreqr = previousWreqr;
    return this;
  };

  // Handlers
  // --------
  // A registry of functions to call, given a name
  
  Wreqr.Handlers = (function(Backbone, _){
    "use strict";
    
    // Constructor
    // -----------
  
    var Handlers = function(options){
      this.options = options;
      this._wreqrHandlers = {};
      
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    Handlers.extend = Backbone.Model.extend;
  
    // Instance Members
    // ----------------
  
    _.extend(Handlers.prototype, Backbone.Events, {
  
      // Add multiple handlers using an object literal configuration
      setHandlers: function(handlers){
        _.each(handlers, function(handler, name){
          var context = null;
  
          if (_.isObject(handler) && !_.isFunction(handler)){
            context = handler.context;
            handler = handler.callback;
          }
  
          this.setHandler(name, handler, context);
        }, this);
      },
  
      // Add a handler for the given name, with an
      // optional context to run the handler within
      setHandler: function(name, handler, context){
        var config = {
          callback: handler,
          context: context
        };
  
        this._wreqrHandlers[name] = config;
  
        this.trigger("handler:add", name, handler, context);
      },
  
      // Determine whether or not a handler is registered
      hasHandler: function(name){
        return !! this._wreqrHandlers[name];
      },
  
      // Get the currently registered handler for
      // the specified name. Throws an exception if
      // no handler is found.
      getHandler: function(name){
        var config = this._wreqrHandlers[name];
  
        if (!config){
          return;
        }
  
        return function(){
          return config.callback.apply(config.context, arguments);
        };
      },
  
      // Remove a handler for the specified name
      removeHandler: function(name){
        delete this._wreqrHandlers[name];
      },
  
      // Remove all handlers from this registry
      removeAllHandlers: function(){
        this._wreqrHandlers = {};
      }
    });
  
    return Handlers;
  })(Backbone, _);
  
  // Wreqr.CommandStorage
  // --------------------
  //
  // Store and retrieve commands for execution.
  Wreqr.CommandStorage = (function(){
    "use strict";
  
    // Constructor function
    var CommandStorage = function(options){
      this.options = options;
      this._commands = {};
  
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    // Instance methods
    _.extend(CommandStorage.prototype, Backbone.Events, {
  
      // Get an object literal by command name, that contains
      // the `commandName` and the `instances` of all commands
      // represented as an array of arguments to process
      getCommands: function(commandName){
        var commands = this._commands[commandName];
  
        // we don't have it, so add it
        if (!commands){
  
          // build the configuration
          commands = {
            command: commandName, 
            instances: []
          };
  
          // store it
          this._commands[commandName] = commands;
        }
  
        return commands;
      },
  
      // Add a command by name, to the storage and store the
      // args for the command
      addCommand: function(commandName, args){
        var command = this.getCommands(commandName);
        command.instances.push(args);
      },
  
      // Clear all commands for the given `commandName`
      clearCommands: function(commandName){
        var command = this.getCommands(commandName);
        command.instances = [];
      }
    });
  
    return CommandStorage;
  })();
  
  // Wreqr.Commands
  // --------------
  //
  // A simple command pattern implementation. Register a command
  // handler and execute it.
  Wreqr.Commands = (function(Wreqr, _){
    "use strict";
  
    return Wreqr.Handlers.extend({
      // default storage type
      storageType: Wreqr.CommandStorage,
  
      constructor: function(options){
        this.options = options || {};
  
        this._initializeStorage(this.options);
        this.on("handler:add", this._executeCommands, this);
  
        Wreqr.Handlers.prototype.constructor.apply(this, arguments);
      },
  
      // Execute a named command with the supplied args
      execute: function(name){
        name = arguments[0];
        var args = _.rest(arguments);
  
        if (this.hasHandler(name)){
          this.getHandler(name).apply(this, args);
        } else {
          this.storage.addCommand(name, args);
        }
  
      },
  
      // Internal method to handle bulk execution of stored commands
      _executeCommands: function(name, handler, context){
        var command = this.storage.getCommands(name);
  
        // loop through and execute all the stored command instances
        _.each(command.instances, function(args){
          handler.apply(context, args);
        });
  
        this.storage.clearCommands(name);
      },
  
      // Internal method to initialize storage either from the type's
      // `storageType` or the instance `options.storageType`.
      _initializeStorage: function(options){
        var storage;
  
        var StorageType = options.storageType || this.storageType;
        if (_.isFunction(StorageType)){
          storage = new StorageType();
        } else {
          storage = StorageType;
        }
  
        this.storage = storage;
      }
    });
  
  })(Wreqr, _);
  
  // Wreqr.RequestResponse
  // ---------------------
  //
  // A simple request/response implementation. Register a
  // request handler, and return a response from it
  Wreqr.RequestResponse = (function(Wreqr, _){
    "use strict";
  
    return Wreqr.Handlers.extend({
      request: function(name){
        if (this.hasHandler(name)) {
          return this.getHandler(name).apply(this, _.rest(arguments));
        }
      }
    });
  
  })(Wreqr, _);
  
  // Event Aggregator
  // ----------------
  // A pub-sub object that can be used to decouple various parts
  // of an application through event-driven architecture.
  
  Wreqr.EventAggregator = (function(Backbone, _){
    "use strict";
    var EA = function(){};
  
    // Copy the `extend` function used by Backbone's classes
    EA.extend = Backbone.Model.extend;
  
    // Copy the basic Backbone.Events on to the event aggregator
    _.extend(EA.prototype, Backbone.Events);
  
    return EA;
  })(Backbone, _);
  
  // Wreqr.Channel
  // --------------
  //
  // An object that wraps the three messaging systems:
  // EventAggregator, RequestResponse, Commands
  Wreqr.Channel = (function(Wreqr){
    "use strict";
  
    var Channel = function(channelName) {
      this.vent        = new Backbone.Wreqr.EventAggregator();
      this.reqres      = new Backbone.Wreqr.RequestResponse();
      this.commands    = new Backbone.Wreqr.Commands();
      this.channelName = channelName;
    };
  
    _.extend(Channel.prototype, {
  
      // Remove all handlers from the messaging systems of this channel
      reset: function() {
        this.vent.off();
        this.vent.stopListening();
        this.reqres.removeAllHandlers();
        this.commands.removeAllHandlers();
        return this;
      },
  
      // Connect a hash of events; one for each messaging system
      connectEvents: function(hash, context) {
        this._connect('vent', hash, context);
        return this;
      },
  
      connectCommands: function(hash, context) {
        this._connect('commands', hash, context);
        return this;
      },
  
      connectRequests: function(hash, context) {
        this._connect('reqres', hash, context);
        return this;
      },
  
      // Attach the handlers to a given message system `type`
      _connect: function(type, hash, context) {
        if (!hash) {
          return;
        }
  
        context = context || this;
        var method = (type === 'vent') ? 'on' : 'setHandler';
  
        _.each(hash, function(fn, eventName) {
          this[type][method](eventName, _.bind(fn, context));
        }, this);
      }
    });
  
  
    return Channel;
  })(Wreqr);
  
  // Wreqr.Radio
  // --------------
  //
  // An object that lets you communicate with many channels.
  Wreqr.radio = (function(Wreqr, _){
    "use strict";
  
    var Radio = function() {
      this._channels = {};
      this.vent = {};
      this.commands = {};
      this.reqres = {};
      this._proxyMethods();
    };
  
    _.extend(Radio.prototype, {
  
      channel: function(channelName) {
        if (!channelName) {
          throw new Error('Channel must receive a name');
        }
  
        return this._getChannel( channelName );
      },
  
      _getChannel: function(channelName) {
        var channel = this._channels[channelName];
  
        if(!channel) {
          channel = new Wreqr.Channel(channelName);
          this._channels[channelName] = channel;
        }
  
        return channel;
      },
  
      _proxyMethods: function() {
        _.each(['vent', 'commands', 'reqres'], function(system) {
          _.each( messageSystems[system], function(method) {
            this[system][method] = proxyMethod(this, system, method);
          }, this);
        }, this);
      }
    });
  
  
    var messageSystems = {
      vent: [
        'on',
        'off',
        'trigger',
        'once',
        'stopListening',
        'listenTo',
        'listenToOnce'
      ],
  
      commands: [
        'execute',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ],
  
      reqres: [
        'request',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ]
    };
  
    var proxyMethod = function(radio, system, method) {
      return function(channelName) {
        var messageSystem = radio._getChannel(channelName)[system];
  
        return messageSystem[method].apply(messageSystem, _.rest(arguments));
      };
    };
  
    return new Radio();
  
  })(Wreqr, _);
  

  return Backbone.Wreqr;

}));

// MarionetteJS (Backbone.Marionette)
// ----------------------------------
// v2.4.4
//
// Copyright (c)2015 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://marionettejs.com

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define(['backbone', 'underscore', 'backbone.wreqr', 'backbone.babysitter'], function(Backbone, _) {
      return (root.Marionette = root.Mn = factory(root, Backbone, _));
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    var Wreqr = require('backbone.wreqr');
    var BabySitter = require('backbone.babysitter');
    module.exports = factory(root, Backbone, _);
  } else {
    root.Marionette = root.Mn = factory(root, root.Backbone, root._);
  }

}(this, function(root, Backbone, _) {
  'use strict';

  var previousMarionette = root.Marionette;
  var previousMn = root.Mn;

  var Marionette = Backbone.Marionette = {};

  Marionette.VERSION = '2.4.4';

  Marionette.noConflict = function() {
    root.Marionette = previousMarionette;
    root.Mn = previousMn;
    return this;
  };

  // Get the Deferred creator for later use
  Marionette.Deferred = Backbone.$.Deferred;

  Marionette.FEATURES = {
  };
  
  Marionette.isEnabled = function(name) {
    return !!Marionette.FEATURES[name];
  };
  
  /* jshint unused: false *//* global console */
  
  // Helpers
  // -------
  
  // Marionette.extend
  // -----------------
  
  // Borrow the Backbone `extend` method so we can use it as needed
  Marionette.extend = Backbone.Model.extend;
  
  // Marionette.isNodeAttached
  // -------------------------
  
  // Determine if `el` is a child of the document
  Marionette.isNodeAttached = function(el) {
    return Backbone.$.contains(document.documentElement, el);
  };
  
  // Merge `keys` from `options` onto `this`
  Marionette.mergeOptions = function(options, keys) {
    if (!options) { return; }
    _.extend(this, _.pick(options, keys));
  };
  
  // Marionette.getOption
  // --------------------
  
  // Retrieve an object, function or other value from a target
  // object or its `options`, with `options` taking precedence.
  Marionette.getOption = function(target, optionName) {
    if (!target || !optionName) { return; }
    if (target.options && (target.options[optionName] !== undefined)) {
      return target.options[optionName];
    } else {
      return target[optionName];
    }
  };
  
  // Proxy `Marionette.getOption`
  Marionette.proxyGetOption = function(optionName) {
    return Marionette.getOption(this, optionName);
  };
  
  // Similar to `_.result`, this is a simple helper
  // If a function is provided we call it with context
  // otherwise just return the value. If the value is
  // undefined return a default value
  Marionette._getValue = function(value, context, params) {
    if (_.isFunction(value)) {
      value = params ? value.apply(context, params) : value.call(context);
    }
    return value;
  };
  
  // Marionette.normalizeMethods
  // ----------------------
  
  // Pass in a mapping of events => functions or function names
  // and return a mapping of events => functions
  Marionette.normalizeMethods = function(hash) {
    return _.reduce(hash, function(normalizedHash, method, name) {
      if (!_.isFunction(method)) {
        method = this[method];
      }
      if (method) {
        normalizedHash[name] = method;
      }
      return normalizedHash;
    }, {}, this);
  };
  
  // utility method for parsing @ui. syntax strings
  // into associated selector
  Marionette.normalizeUIString = function(uiString, ui) {
    return uiString.replace(/@ui\.[a-zA-Z_$0-9]*/g, function(r) {
      return ui[r.slice(4)];
    });
  };
  
  // allows for the use of the @ui. syntax within
  // a given key for triggers and events
  // swaps the @ui with the associated selector.
  // Returns a new, non-mutated, parsed events hash.
  Marionette.normalizeUIKeys = function(hash, ui) {
    return _.reduce(hash, function(memo, val, key) {
      var normalizedKey = Marionette.normalizeUIString(key, ui);
      memo[normalizedKey] = val;
      return memo;
    }, {});
  };
  
  // allows for the use of the @ui. syntax within
  // a given value for regions
  // swaps the @ui with the associated selector
  Marionette.normalizeUIValues = function(hash, ui, properties) {
    _.each(hash, function(val, key) {
      if (_.isString(val)) {
        hash[key] = Marionette.normalizeUIString(val, ui);
      } else if (_.isObject(val) && _.isArray(properties)) {
        _.extend(val, Marionette.normalizeUIValues(_.pick(val, properties), ui));
        /* Value is an object, and we got an array of embedded property names to normalize. */
        _.each(properties, function(property) {
          var propertyVal = val[property];
          if (_.isString(propertyVal)) {
            val[property] = Marionette.normalizeUIString(propertyVal, ui);
          }
        });
      }
    });
    return hash;
  };
  
  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-121
  Marionette.actAsCollection = function(object, listProperty) {
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck'];
  
    _.each(methods, function(method) {
      object[method] = function() {
        var list = _.values(_.result(this, listProperty));
        var args = [list].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  };
  
  var deprecate = Marionette.deprecate = function(message, test) {
    if (_.isObject(message)) {
      message = (
        message.prev + ' is going to be removed in the future. ' +
        'Please use ' + message.next + ' instead.' +
        (message.url ? ' See: ' + message.url : '')
      );
    }
  
    if ((test === undefined || !test) && !deprecate._cache[message]) {
      deprecate._warn('Deprecation warning: ' + message);
      deprecate._cache[message] = true;
    }
  };
  
  deprecate._warn = typeof console !== 'undefined' && (console.warn || console.log) || function() {};
  deprecate._cache = {};
  
  /* jshint maxstatements: 14, maxcomplexity: 7 */
  
  // Trigger Method
  // --------------
  
  Marionette._triggerMethod = (function() {
    // split the event name on the ":"
    var splitter = /(^|:)(\w)/gi;
  
    // take the event section ("section1:section2:section3")
    // and turn it in to uppercase name
    function getEventName(match, prefix, eventName) {
      return eventName.toUpperCase();
    }
  
    return function(context, event, args) {
      var noEventArg = arguments.length < 3;
      if (noEventArg) {
        args = event;
        event = args[0];
      }
  
      // get the method name from the event name
      var methodName = 'on' + event.replace(splitter, getEventName);
      var method = context[methodName];
      var result;
  
      // call the onMethodName if it exists
      if (_.isFunction(method)) {
        // pass all args, except the event name
        result = method.apply(context, noEventArg ? _.rest(args) : args);
      }
  
      // trigger the event, if a trigger method exists
      if (_.isFunction(context.trigger)) {
        if (noEventArg + args.length > 1) {
          context.trigger.apply(context, noEventArg ? args : [event].concat(_.drop(args, 0)));
        } else {
          context.trigger(event);
        }
      }
  
      return result;
    };
  })();
  
  // Trigger an event and/or a corresponding method name. Examples:
  //
  // `this.triggerMethod("foo")` will trigger the "foo" event and
  // call the "onFoo" method.
  //
  // `this.triggerMethod("foo:bar")` will trigger the "foo:bar" event and
  // call the "onFooBar" method.
  Marionette.triggerMethod = function(event) {
    return Marionette._triggerMethod(this, arguments);
  };
  
  // triggerMethodOn invokes triggerMethod on a specific context
  //
  // e.g. `Marionette.triggerMethodOn(view, 'show')`
  // will trigger a "show" event or invoke onShow the view.
  Marionette.triggerMethodOn = function(context) {
    var fnc = _.isFunction(context.triggerMethod) ?
                  context.triggerMethod :
                  Marionette.triggerMethod;
  
    return fnc.apply(context, _.rest(arguments));
  };
  
  // DOM Refresh
  // -----------
  
  // Monitor a view's state, and after it has been rendered and shown
  // in the DOM, trigger a "dom:refresh" event every time it is
  // re-rendered.
  
  Marionette.MonitorDOMRefresh = function(view) {
    if (view._isDomRefreshMonitored) { return; }
    view._isDomRefreshMonitored = true;
  
    // track when the view has been shown in the DOM,
    // using a Marionette.Region (or by other means of triggering "show")
    function handleShow() {
      view._isShown = true;
      triggerDOMRefresh();
    }
  
    // track when the view has been rendered
    function handleRender() {
      view._isRendered = true;
      triggerDOMRefresh();
    }
  
    // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
    function triggerDOMRefresh() {
      if (view._isShown && view._isRendered && Marionette.isNodeAttached(view.el)) {
        Marionette.triggerMethodOn(view, 'dom:refresh', view);
      }
    }
  
    view.on({
      show: handleShow,
      render: handleRender
    });
  };
  
  /* jshint maxparams: 5 */
  
  // Bind Entity Events & Unbind Entity Events
  // -----------------------------------------
  //
  // These methods are used to bind/unbind a backbone "entity" (e.g. collection/model)
  // to methods on a target object.
  //
  // The first parameter, `target`, must have the Backbone.Events module mixed in.
  //
  // The second parameter is the `entity` (Backbone.Model, Backbone.Collection or
  // any object that has Backbone.Events mixed in) to bind the events from.
  //
  // The third parameter is a hash of { "event:name": "eventHandler" }
  // configuration. Multiple handlers can be separated by a space. A
  // function can be supplied instead of a string handler name.
  
  (function(Marionette) {
    'use strict';
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function bindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
  
        var method = target[methodName];
        if (!method) {
          throw new Marionette.Error('Method "' + methodName +
            '" was configured as an event handler, but does not exist.');
        }
  
        target.listenTo(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function bindToFunction(target, entity, evt, method) {
      target.listenTo(entity, evt, method);
    }
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function unbindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
        var method = target[methodName];
        target.stopListening(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function unbindToFunction(target, entity, evt, method) {
      target.stopListening(entity, evt, method);
    }
  
    // generic looping function
    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
      if (!entity || !bindings) { return; }
  
      // type-check bindings
      if (!_.isObject(bindings)) {
        throw new Marionette.Error({
          message: 'Bindings must be an object or function.',
          url: 'marionette.functions.html#marionettebindentityevents'
        });
      }
  
      // allow the bindings to be a function
      bindings = Marionette._getValue(bindings, target);
  
      // iterate the bindings and bind them
      _.each(bindings, function(methods, evt) {
  
        // allow for a function as the handler,
        // or a list of event names as a string
        if (_.isFunction(methods)) {
          functionCallback(target, entity, evt, methods);
        } else {
          stringCallback(target, entity, evt, methods);
        }
  
      });
    }
  
    // Export Public API
    Marionette.bindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
    };
  
    Marionette.unbindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
    };
  
    // Proxy `bindEntityEvents`
    Marionette.proxyBindEntityEvents = function(entity, bindings) {
      return Marionette.bindEntityEvents(this, entity, bindings);
    };
  
    // Proxy `unbindEntityEvents`
    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
      return Marionette.unbindEntityEvents(this, entity, bindings);
    };
  })(Marionette);
  

  // Error
  // -----
  
  var errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];
  
  Marionette.Error = Marionette.extend.call(Error, {
    urlRoot: 'http://marionettejs.com/docs/v' + Marionette.VERSION + '/',
  
    constructor: function(message, options) {
      if (_.isObject(message)) {
        options = message;
        message = options.message;
      } else if (!options) {
        options = {};
      }
  
      var error = Error.call(this, message);
      _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));
  
      this.captureStackTrace();
  
      if (options.url) {
        this.url = this.urlRoot + options.url;
      }
    },
  
    captureStackTrace: function() {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, Marionette.Error);
      }
    },
  
    toString: function() {
      return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');
    }
  });
  
  Marionette.Error.extend = Marionette.extend;
  
  // Callbacks
  // ---------
  
  // A simple way of managing a collection of callbacks
  // and executing them at a later point in time, using jQuery's
  // `Deferred` object.
  Marionette.Callbacks = function() {
    this._deferred = Marionette.Deferred();
    this._callbacks = [];
  };
  
  _.extend(Marionette.Callbacks.prototype, {
  
    // Add a callback to be executed. Callbacks added here are
    // guaranteed to execute, even if they are added after the
    // `run` method is called.
    add: function(callback, contextOverride) {
      var promise = _.result(this._deferred, 'promise');
  
      this._callbacks.push({cb: callback, ctx: contextOverride});
  
      promise.then(function(args) {
        if (contextOverride) { args.context = contextOverride; }
        callback.call(args.context, args.options);
      });
    },
  
    // Run all registered callbacks with the context specified.
    // Additional callbacks can be added after this has been run
    // and they will still be executed.
    run: function(options, context) {
      this._deferred.resolve({
        options: options,
        context: context
      });
    },
  
    // Resets the list of callbacks to be run, allowing the same list
    // to be run multiple times - whenever the `run` method is called.
    reset: function() {
      var callbacks = this._callbacks;
      this._deferred = Marionette.Deferred();
      this._callbacks = [];
  
      _.each(callbacks, function(cb) {
        this.add(cb.cb, cb.ctx);
      }, this);
    }
  });
  
  // Controller
  // ----------
  
  // A multi-purpose object to use as a controller for
  // modules and routers, and as a mediator for workflow
  // and coordination of other objects, views, and more.
  Marionette.Controller = function(options) {
    this.options = options || {};
  
    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
  };
  
  Marionette.Controller.extend = Marionette.extend;
  
  // Controller Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Controller.prototype, Backbone.Events, {
    destroy: function() {
      Marionette._triggerMethod(this, 'before:destroy', arguments);
      Marionette._triggerMethod(this, 'destroy', arguments);
  
      this.stopListening();
      this.off();
      return this;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption
  
  });
  
  // Object
  // ------
  
  // A Base Class that other Classes should descend from.
  // Object borrows many conventions and utilities from Backbone.
  Marionette.Object = function(options) {
    this.options = _.extend({}, _.result(this, 'options'), options);
  
    this.initialize.apply(this, arguments);
  };
  
  Marionette.Object.extend = Marionette.extend;
  
  // Object Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Object.prototype, Backbone.Events, {
  
    //this is a noop method intended to be overridden by classes that extend from this base
    initialize: function() {},
  
    destroy: function(options) {
      options = options || {};
  
      this.triggerMethod('before:destroy', options);
      this.triggerMethod('destroy', options);
      this.stopListening();
  
      return this;
    },
  
    // Import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // A handy way to merge options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  /* jshint maxcomplexity: 16, maxstatements: 45, maxlen: 120 */
  
  // Region
  // ------
  
  // Manage the visual regions of your composite application. See
  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/
  
  Marionette.Region = Marionette.Object.extend({
    constructor: function(options) {
  
      // set options temporarily so that we can get `el`.
      // options will be overriden by Object.constructor
      this.options = options || {};
      this.el = this.getOption('el');
  
      // Handle when this.el is passed in as a $ wrapped element.
      this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
  
      if (!this.el) {
        throw new Marionette.Error({
          name: 'NoElError',
          message: 'An "el" must be specified for a region.'
        });
      }
  
      this.$el = this.getEl(this.el);
      Marionette.Object.call(this, options);
    },
  
    // Displays a backbone view instance inside of the region.
    // Handles calling the `render` method for you. Reads content
    // directly from the `el` attribute. Also calls an optional
    // `onShow` and `onDestroy` method on your view, just after showing
    // or just before destroying the view, respectively.
    // The `preventDestroy` option can be used to prevent a view from
    // the old view being destroyed on show.
    // The `forceShow` option can be used to force a view to be
    // re-rendered if it's already shown in the region.
    show: function(view, options) {
      if (!this._ensureElement()) {
        return;
      }
  
      this._ensureViewIsIntact(view);
      Marionette.MonitorDOMRefresh(view);
  
      var showOptions     = options || {};
      var isDifferentView = view !== this.currentView;
      var preventDestroy  = !!showOptions.preventDestroy;
      var forceShow       = !!showOptions.forceShow;
  
      // We are only changing the view if there is a current view to change to begin with
      var isChangingView = !!this.currentView;
  
      // Only destroy the current view if we don't want to `preventDestroy` and if
      // the view given in the first argument is different than `currentView`
      var _shouldDestroyView = isDifferentView && !preventDestroy;
  
      // Only show the view given in the first argument if it is different than
      // the current view or if we want to re-show the view. Note that if
      // `_shouldDestroyView` is true, then `_shouldShowView` is also necessarily true.
      var _shouldShowView = isDifferentView || forceShow;
  
      if (isChangingView) {
        this.triggerMethod('before:swapOut', this.currentView, this, options);
      }
  
      if (this.currentView) {
        delete this.currentView._parent;
      }
  
      if (_shouldDestroyView) {
        this.empty();
  
      // A `destroy` event is attached to the clean up manually removed views.
      // We need to detach this event when a new view is going to be shown as it
      // is no longer relevant.
      } else if (isChangingView && _shouldShowView) {
        this.currentView.off('destroy', this.empty, this);
      }
  
      if (_shouldShowView) {
  
        // We need to listen for if a view is destroyed
        // in a way other than through the region.
        // If this happens we need to remove the reference
        // to the currentView since once a view has been destroyed
        // we can not reuse it.
        view.once('destroy', this.empty, this);
  
        // make this region the view's parent,
        // It's important that this parent binding happens before rendering
        // so that any events the child may trigger during render can also be
        // triggered on the child's ancestor views
        view._parent = this;
        this._renderView(view);
  
        if (isChangingView) {
          this.triggerMethod('before:swap', view, this, options);
        }
  
        this.triggerMethod('before:show', view, this, options);
        Marionette.triggerMethodOn(view, 'before:show', view, this, options);
  
        if (isChangingView) {
          this.triggerMethod('swapOut', this.currentView, this, options);
        }
  
        // An array of views that we're about to display
        var attachedRegion = Marionette.isNodeAttached(this.el);
  
        // The views that we're about to attach to the document
        // It's important that we prevent _getNestedViews from being executed unnecessarily
        // as it's a potentially-slow method
        var displayedViews = [];
  
        var attachOptions = _.extend({
          triggerBeforeAttach: this.triggerBeforeAttach,
          triggerAttach: this.triggerAttach
        }, showOptions);
  
        if (attachedRegion && attachOptions.triggerBeforeAttach) {
          displayedViews = this._displayedViews(view);
          this._triggerAttach(displayedViews, 'before:');
        }
  
        this.attachHtml(view);
        this.currentView = view;
  
        if (attachedRegion && attachOptions.triggerAttach) {
          displayedViews = this._displayedViews(view);
          this._triggerAttach(displayedViews);
        }
  
        if (isChangingView) {
          this.triggerMethod('swap', view, this, options);
        }
  
        this.triggerMethod('show', view, this, options);
        Marionette.triggerMethodOn(view, 'show', view, this, options);
  
        return this;
      }
  
      return this;
    },
  
    triggerBeforeAttach: true,
    triggerAttach: true,
  
    _triggerAttach: function(views, prefix) {
      var eventName = (prefix || '') + 'attach';
      _.each(views, function(view) {
        Marionette.triggerMethodOn(view, eventName, view, this);
      }, this);
    },
  
    _displayedViews: function(view) {
      return _.union([view], _.result(view, '_getNestedViews') || []);
    },
  
    _renderView: function(view) {
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'before:render', view);
      }
      view.render();
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'render', view);
      }
    },
  
    _ensureElement: function() {
      if (!_.isObject(this.el)) {
        this.$el = this.getEl(this.el);
        this.el = this.$el[0];
      }
  
      if (!this.$el || this.$el.length === 0) {
        if (this.getOption('allowMissingEl')) {
          return false;
        } else {
          throw new Marionette.Error('An "el" ' + this.$el.selector + ' must exist in DOM');
        }
      }
      return true;
    },
  
    _ensureViewIsIntact: function(view) {
      if (!view) {
        throw new Marionette.Error({
          name: 'ViewNotValid',
          message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'
        });
      }
  
      if (view.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + view.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },
  
    // Override this method to change how the region finds the DOM
    // element that it manages. Return a jQuery selector object scoped
    // to a provided parent el or the document if none exists.
    getEl: function(el) {
      return Backbone.$(el, Marionette._getValue(this.options.parentEl, this));
    },
  
    // Override this method to change how the new view is
    // appended to the `$el` that the region is managing
    attachHtml: function(view) {
      this.$el.contents().detach();
  
      this.el.appendChild(view.el);
    },
  
    // Destroy the current view, if there is one. If there is no
    // current view, it does nothing and returns immediately.
    empty: function(options) {
      var view = this.currentView;
  
      var emptyOptions = options || {};
      var preventDestroy  = !!emptyOptions.preventDestroy;
      // If there is no view in the region
      // we should not remove anything
      if (!view) { return this; }
  
      view.off('destroy', this.empty, this);
      this.triggerMethod('before:empty', view);
      if (!preventDestroy) {
        this._destroyView();
      }
      this.triggerMethod('empty', view);
  
      // Remove region pointer to the currentView
      delete this.currentView;
  
      if (preventDestroy) {
        this.$el.contents().detach();
      }
  
      return this;
    },
  
    // call 'destroy' or 'remove', depending on which is found
    // on the view (if showing a raw Backbone view or a Marionette View)
    _destroyView: function() {
      var view = this.currentView;
      if (view.isDestroyed) { return; }
  
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'before:destroy', view);
      }
      if (view.destroy) {
        view.destroy();
      } else {
        view.remove();
  
        // appending isDestroyed to raw Backbone View allows regions
        // to throw a ViewDestroyedError for this view
        view.isDestroyed = true;
      }
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'destroy', view);
      }
    },
  
    // Attach an existing view to the region. This
    // will not call `render` or `onShow` for the new view,
    // and will not replace the current HTML for the `el`
    // of the region.
    attachView: function(view) {
      if (this.currentView) {
        delete this.currentView._parent;
      }
      view._parent = this;
      this.currentView = view;
      return this;
    },
  
    // Checks whether a view is currently present within
    // the region. Returns `true` if there is and `false` if
    // no view is present.
    hasView: function() {
      return !!this.currentView;
    },
  
    // Reset the region by destroying any existing view and
    // clearing out the cached `$el`. The next time a view
    // is shown via this region, the region will re-query the
    // DOM for the region's `el`.
    reset: function() {
      this.empty();
  
      if (this.$el) {
        this.el = this.$el.selector;
      }
  
      delete this.$el;
      return this;
    }
  
  },
  
  // Static Methods
  {
  
    // Build an instance of a region by passing in a configuration object
    // and a default region class to use if none is specified in the config.
    //
    // The config object should either be a string as a jQuery DOM selector,
    // a Region class directly, or an object literal that specifies a selector,
    // a custom regionClass, and any options to be supplied to the region:
    //
    // ```js
    // {
    //   selector: "#foo",
    //   regionClass: MyCustomRegion,
    //   allowMissingEl: false
    // }
    // ```
    //
    buildRegion: function(regionConfig, DefaultRegionClass) {
      if (_.isString(regionConfig)) {
        return this._buildRegionFromSelector(regionConfig, DefaultRegionClass);
      }
  
      if (regionConfig.selector || regionConfig.el || regionConfig.regionClass) {
        return this._buildRegionFromObject(regionConfig, DefaultRegionClass);
      }
  
      if (_.isFunction(regionConfig)) {
        return this._buildRegionFromRegionClass(regionConfig);
      }
  
      throw new Marionette.Error({
        message: 'Improper region configuration type.',
        url: 'marionette.region.html#region-configuration-types'
      });
    },
  
    // Build the region from a string selector like '#foo-region'
    _buildRegionFromSelector: function(selector, DefaultRegionClass) {
      return new DefaultRegionClass({el: selector});
    },
  
    // Build the region from a configuration object
    // ```js
    // { selector: '#foo', regionClass: FooRegion, allowMissingEl: false }
    // ```
    _buildRegionFromObject: function(regionConfig, DefaultRegionClass) {
      var RegionClass = regionConfig.regionClass || DefaultRegionClass;
      var options = _.omit(regionConfig, 'selector', 'regionClass');
  
      if (regionConfig.selector && !options.el) {
        options.el = regionConfig.selector;
      }
  
      return new RegionClass(options);
    },
  
    // Build the region directly from a given `RegionClass`
    _buildRegionFromRegionClass: function(RegionClass) {
      return new RegionClass();
    }
  });
  
  // Region Manager
  // --------------
  
  // Manage one or more related `Marionette.Region` objects.
  Marionette.RegionManager = Marionette.Controller.extend({
    constructor: function(options) {
      this._regions = {};
      this.length = 0;
  
      Marionette.Controller.call(this, options);
  
      this.addRegions(this.getOption('regions'));
    },
  
    // Add multiple regions using an object literal or a
    // function that returns an object literal, where
    // each key becomes the region name, and each value is
    // the region definition.
    addRegions: function(regionDefinitions, defaults) {
      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);
  
      return _.reduce(regionDefinitions, function(regions, definition, name) {
        if (_.isString(definition)) {
          definition = {selector: definition};
        }
        if (definition.selector) {
          definition = _.defaults({}, definition, defaults);
        }
  
        regions[name] = this.addRegion(name, definition);
        return regions;
      }, {}, this);
    },
  
    // Add an individual region to the region manager,
    // and return the region instance
    addRegion: function(name, definition) {
      var region;
  
      if (definition instanceof Marionette.Region) {
        region = definition;
      } else {
        region = Marionette.Region.buildRegion(definition, Marionette.Region);
      }
  
      this.triggerMethod('before:add:region', name, region);
  
      region._parent = this;
      this._store(name, region);
  
      this.triggerMethod('add:region', name, region);
      return region;
    },
  
    // Get a region by name
    get: function(name) {
      return this._regions[name];
    },
  
    // Gets all the regions contained within
    // the `regionManager` instance.
    getRegions: function() {
      return _.clone(this._regions);
    },
  
    // Remove a region by name
    removeRegion: function(name) {
      var region = this._regions[name];
      this._remove(name, region);
  
      return region;
    },
  
    // Empty all regions in the region manager, and
    // remove them
    removeRegions: function() {
      var regions = this.getRegions();
      _.each(this._regions, function(region, name) {
        this._remove(name, region);
      }, this);
  
      return regions;
    },
  
    // Empty all regions in the region manager, but
    // leave them attached
    emptyRegions: function() {
      var regions = this.getRegions();
      _.invoke(regions, 'empty');
      return regions;
    },
  
    // Destroy all regions and shut down the region
    // manager entirely
    destroy: function() {
      this.removeRegions();
      return Marionette.Controller.prototype.destroy.apply(this, arguments);
    },
  
    // internal method to store regions
    _store: function(name, region) {
      if (!this._regions[name]) {
        this.length++;
      }
  
      this._regions[name] = region;
    },
  
    // internal method to remove a region
    _remove: function(name, region) {
      this.triggerMethod('before:remove:region', name, region);
      region.empty();
      region.stopListening();
  
      delete region._parent;
      delete this._regions[name];
      this.length--;
      this.triggerMethod('remove:region', name, region);
    }
  });
  
  Marionette.actAsCollection(Marionette.RegionManager.prototype, '_regions');
  

  // Template Cache
  // --------------
  
  // Manage templates stored in `<script>` blocks,
  // caching them for faster access.
  Marionette.TemplateCache = function(templateId) {
    this.templateId = templateId;
  };
  
  // TemplateCache object-level methods. Manage the template
  // caches from these method calls instead of creating
  // your own TemplateCache instances
  _.extend(Marionette.TemplateCache, {
    templateCaches: {},
  
    // Get the specified template by id. Either
    // retrieves the cached version, or loads it
    // from the DOM.
    get: function(templateId, options) {
      var cachedTemplate = this.templateCaches[templateId];
  
      if (!cachedTemplate) {
        cachedTemplate = new Marionette.TemplateCache(templateId);
        this.templateCaches[templateId] = cachedTemplate;
      }
  
      return cachedTemplate.load(options);
    },
  
    // Clear templates from the cache. If no arguments
    // are specified, clears all templates:
    // `clear()`
    //
    // If arguments are specified, clears each of the
    // specified templates from the cache:
    // `clear("#t1", "#t2", "...")`
    clear: function() {
      var i;
      var args = _.toArray(arguments);
      var length = args.length;
  
      if (length > 0) {
        for (i = 0; i < length; i++) {
          delete this.templateCaches[args[i]];
        }
      } else {
        this.templateCaches = {};
      }
    }
  });
  
  // TemplateCache instance methods, allowing each
  // template cache object to manage its own state
  // and know whether or not it has been loaded
  _.extend(Marionette.TemplateCache.prototype, {
  
    // Internal method to load the template
    load: function(options) {
      // Guard clause to prevent loading this template more than once
      if (this.compiledTemplate) {
        return this.compiledTemplate;
      }
  
      // Load the template and compile it
      var template = this.loadTemplate(this.templateId, options);
      this.compiledTemplate = this.compileTemplate(template, options);
  
      return this.compiledTemplate;
    },
  
    // Load a template from the DOM, by default. Override
    // this method to provide your own template retrieval
    // For asynchronous loading with AMD/RequireJS, consider
    // using a template-loader plugin as described here:
    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
    loadTemplate: function(templateId, options) {
      var $template = Backbone.$(templateId);
  
      if (!$template.length) {
        throw new Marionette.Error({
          name: 'NoTemplateError',
          message: 'Could not find template: "' + templateId + '"'
        });
      }
      return $template.html();
    },
  
    // Pre-compile the template before caching it. Override
    // this method if you do not need to pre-compile a template
    // (JST / RequireJS for example) or if you want to change
    // the template engine used (Handebars, etc).
    compileTemplate: function(rawTemplate, options) {
      return _.template(rawTemplate, options);
    }
  });
  
  // Renderer
  // --------
  
  // Render a template with data by passing in the template
  // selector and the data to render.
  Marionette.Renderer = {
  
    // Render a template with data. The `template` parameter is
    // passed to the `TemplateCache` object to retrieve the
    // template function. Override this method to provide your own
    // custom rendering and template handling for all of Marionette.
    render: function(template, data) {
      if (!template) {
        throw new Marionette.Error({
          name: 'TemplateNotFoundError',
          message: 'Cannot render the template since its false, null or undefined.'
        });
      }
  
      var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);
  
      return templateFunc(data);
    }
  };
  

  /* jshint maxlen: 114, nonew: false */
  // View
  // ----
  
  // The core view class that other Marionette views extend from.
  Marionette.View = Backbone.View.extend({
    isDestroyed: false,
    supportsRenderLifecycle: true,
    supportsDestroyLifecycle: true,
  
    constructor: function(options) {
      this.render = _.bind(this.render, this);
  
      options = Marionette._getValue(options, this);
  
      // this exposes view options to the view initializer
      // this is a backfill since backbone removed the assignment
      // of this.options
      // at some point however this may be removed
      this.options = _.extend({}, _.result(this, 'options'), options);
  
      this._behaviors = Marionette.Behaviors(this);
  
      Backbone.View.call(this, this.options);
  
      Marionette.MonitorDOMRefresh(this);
    },
  
    // Get the template for this view
    // instance. You can set a `template` attribute in the view
    // definition or pass a `template: "whatever"` parameter in
    // to the constructor options.
    getTemplate: function() {
      return this.getOption('template');
    },
  
    // Serialize a model by returning its attributes. Clones
    // the attributes to allow modification.
    serializeModel: function(model) {
      return model.toJSON.apply(model, _.rest(arguments));
    },
  
    // Mix in template helper methods. Looks for a
    // `templateHelpers` attribute, which can either be an
    // object literal, or a function that returns an object
    // literal. All methods and attributes from this object
    // are copies to the object passed in.
    mixinTemplateHelpers: function(target) {
      target = target || {};
      var templateHelpers = this.getOption('templateHelpers');
      templateHelpers = Marionette._getValue(templateHelpers, this);
      return _.extend(target, templateHelpers);
    },
  
    // normalize the keys of passed hash with the views `ui` selectors.
    // `{"@ui.foo": "bar"}`
    normalizeUIKeys: function(hash) {
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIKeys(hash, uiBindings || _.result(this, 'ui'));
    },
  
    // normalize the values of passed hash with the views `ui` selectors.
    // `{foo: "@ui.bar"}`
    normalizeUIValues: function(hash, properties) {
      var ui = _.result(this, 'ui');
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIValues(hash, uiBindings || ui, properties);
    },
  
    // Configure `triggers` to forward DOM events to view
    // events. `triggers: {"click .foo": "do:foo"}`
    configureTriggers: function() {
      if (!this.triggers) { return; }
  
      // Allow `triggers` to be configured as a function
      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));
  
      // Configure the triggers, prevent default
      // action and stop propagation of DOM events
      return _.reduce(triggers, function(events, value, key) {
        events[key] = this._buildViewTrigger(value);
        return events;
      }, {}, this);
    },
  
    // Overriding Backbone.View's delegateEvents to handle
    // the `triggers`, `modelEvents`, and `collectionEvents` configuration
    delegateEvents: function(events) {
      this._delegateDOMEvents(events);
      this.bindEntityEvents(this.model, this.getOption('modelEvents'));
      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));
  
      _.each(this._behaviors, function(behavior) {
        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);
  
      return this;
    },
  
    // internal method to delegate DOM events and triggers
    _delegateDOMEvents: function(eventsArg) {
      var events = Marionette._getValue(eventsArg || this.events, this);
  
      // normalize ui keys
      events = this.normalizeUIKeys(events);
      if (_.isUndefined(eventsArg)) {this.events = events;}
  
      var combinedEvents = {};
  
      // look up if this view has behavior events
      var behaviorEvents = _.result(this, 'behaviorEvents') || {};
      var triggers = this.configureTriggers();
      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};
  
      // behavior events will be overriden by view events and or triggers
      _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);
  
      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
    },
  
    // Overriding Backbone.View's undelegateEvents to handle unbinding
    // the `triggers`, `modelEvents`, and `collectionEvents` config
    undelegateEvents: function() {
      Backbone.View.prototype.undelegateEvents.apply(this, arguments);
  
      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));
      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));
  
      _.each(this._behaviors, function(behavior) {
        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));
        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));
      }, this);
  
      return this;
    },
  
    // Internal helper method to verify whether the view hasn't been destroyed
    _ensureViewIsIntact: function() {
      if (this.isDestroyed) {
        throw new Marionette.Error({
          name: 'ViewDestroyedError',
          message: 'View (cid: "' + this.cid + '") has already been destroyed and cannot be used.'
        });
      }
    },
  
    // Default `destroy` implementation, for removing a view from the
    // DOM and unbinding it. Regions will call this method
    // for you. You can specify an `onDestroy` method in your view to
    // add custom code that is called after the view is destroyed.
    destroy: function() {
      if (this.isDestroyed) { return this; }
  
      var args = _.toArray(arguments);
  
      this.triggerMethod.apply(this, ['before:destroy'].concat(args));
  
      // mark as destroyed before doing the actual destroy, to
      // prevent infinite loops within "destroy" event handlers
      // that are trying to destroy other views
      this.isDestroyed = true;
      this.triggerMethod.apply(this, ['destroy'].concat(args));
  
      // unbind UI elements
      this.unbindUIElements();
  
      this.isRendered = false;
  
      // remove the view from the DOM
      this.remove();
  
      // Call destroy on each behavior after
      // destroying the view.
      // This unbinds event listeners
      // that behaviors have registered for.
      _.invoke(this._behaviors, 'destroy', args);
  
      return this;
    },
  
    bindUIElements: function() {
      this._bindUIElements();
      _.invoke(this._behaviors, this._bindUIElements);
    },
  
    // This method binds the elements specified in the "ui" hash inside the view's code with
    // the associated jQuery selectors.
    _bindUIElements: function() {
      if (!this.ui) { return; }
  
      // store the ui hash in _uiBindings so they can be reset later
      // and so re-rendering the view will be able to find the bindings
      if (!this._uiBindings) {
        this._uiBindings = this.ui;
      }
  
      // get the bindings result, as a function or otherwise
      var bindings = _.result(this, '_uiBindings');
  
      // empty the ui so we don't have anything to start with
      this.ui = {};
  
      // bind each of the selectors
      _.each(bindings, function(selector, key) {
        this.ui[key] = this.$(selector);
      }, this);
    },
  
    // This method unbinds the elements specified in the "ui" hash
    unbindUIElements: function() {
      this._unbindUIElements();
      _.invoke(this._behaviors, this._unbindUIElements);
    },
  
    _unbindUIElements: function() {
      if (!this.ui || !this._uiBindings) { return; }
  
      // delete all of the existing ui bindings
      _.each(this.ui, function($el, name) {
        delete this.ui[name];
      }, this);
  
      // reset the ui element to the original bindings configuration
      this.ui = this._uiBindings;
      delete this._uiBindings;
    },
  
    // Internal method to create an event handler for a given `triggerDef` like
    // 'click:foo'
    _buildViewTrigger: function(triggerDef) {
  
      var options = _.defaults({}, triggerDef, {
        preventDefault: true,
        stopPropagation: true
      });
  
      var eventName = _.isObject(triggerDef) ? options.event : triggerDef;
  
      return function(e) {
        if (e) {
          if (e.preventDefault && options.preventDefault) {
            e.preventDefault();
          }
  
          if (e.stopPropagation && options.stopPropagation) {
            e.stopPropagation();
          }
        }
  
        var args = {
          view: this,
          model: this.model,
          collection: this.collection
        };
  
        this.triggerMethod(eventName, args);
      };
    },
  
    setElement: function() {
      var ret = Backbone.View.prototype.setElement.apply(this, arguments);
  
      // proxy behavior $el to the view's $el.
      // This is needed because a view's $el proxy
      // is not set until after setElement is called.
      _.invoke(this._behaviors, 'proxyViewProperties', this);
  
      return ret;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: function() {
      var ret = Marionette._triggerMethod(this, arguments);
  
      this._triggerEventOnBehaviors(arguments);
      this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));
  
      return ret;
    },
  
    _triggerEventOnBehaviors: function(args) {
      var triggerMethod = Marionette._triggerMethod;
      var behaviors = this._behaviors;
      // Use good ol' for as this is a very hot function
      for (var i = 0, length = behaviors && behaviors.length; i < length; i++) {
        triggerMethod(behaviors[i], args);
      }
    },
  
    _triggerEventOnParentLayout: function(eventName, args) {
      var layoutView = this._parentLayoutView();
      if (!layoutView) {
        return;
      }
  
      // invoke triggerMethod on parent view
      var eventPrefix = Marionette.getOption(layoutView, 'childViewEventPrefix');
      var prefixedEventName = eventPrefix + ':' + eventName;
      var callArgs = [this].concat(args);
  
      Marionette._triggerMethod(layoutView, prefixedEventName, callArgs);
  
      // call the parent view's childEvents handler
      var childEvents = Marionette.getOption(layoutView, 'childEvents');
  
      // since childEvents can be an object or a function use Marionette._getValue
      // to handle the abstaction for us.
      childEvents = Marionette._getValue(childEvents, layoutView);
      var normalizedChildEvents = layoutView.normalizeMethods(childEvents);
  
      if (normalizedChildEvents && _.isFunction(normalizedChildEvents[eventName])) {
        normalizedChildEvents[eventName].apply(layoutView, callArgs);
      }
    },
  
    // This method returns any views that are immediate
    // children of this view
    _getImmediateChildren: function() {
      return [];
    },
  
    // Returns an array of every nested view within this view
    _getNestedViews: function() {
      var children = this._getImmediateChildren();
  
      if (!children.length) { return children; }
  
      return _.reduce(children, function(memo, view) {
        if (!view._getNestedViews) { return memo; }
        return memo.concat(view._getNestedViews());
      }, children);
    },
  
    // Walk the _parent tree until we find a layout view (if one exists).
    // Returns the parent layout view hierarchically closest to this view.
    _parentLayoutView: function() {
      var parent  = this._parent;
  
      while (parent) {
        if (parent instanceof Marionette.LayoutView) {
          return parent;
        }
        parent = parent._parent;
      }
    },
  
    // Imports the "normalizeMethods" to transform hashes of
    // events=>function references/names to a hash of events=>function references
    normalizeMethods: Marionette.normalizeMethods,
  
    // A handy way to merge passed-in options onto the instance
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `bindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Item View
  // ---------
  
  // A single item view implementation that contains code for rendering
  // with underscore.js templates, serializing the view's model or collection,
  // and calling several methods on extended views, such as `onRender`.
  Marionette.ItemView = Marionette.View.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.View.prototype.constructor which allows overriding
    constructor: function() {
      Marionette.View.apply(this, arguments);
    },
  
    // Serialize the model or collection for the view. If a model is
    // found, the view's `serializeModel` is called. If a collection is found,
    // each model in the collection is serialized by calling
    // the view's `serializeCollection` and put into an `items` array in
    // the resulting data. If both are found, defaults to the model.
    // You can override the `serializeData` method in your own view definition,
    // to provide custom serialization for your view's data.
    serializeData: function() {
      if (!this.model && !this.collection) {
        return {};
      }
  
      var args = [this.model || this.collection];
      if (arguments.length) {
        args.push.apply(args, arguments);
      }
  
      if (this.model) {
        return this.serializeModel.apply(this, args);
      } else {
        return {
          items: this.serializeCollection.apply(this, args)
        };
      }
    },
  
    // Serialize a collection by serializing each of its models.
    serializeCollection: function(collection) {
      return collection.toJSON.apply(collection, _.rest(arguments));
    },
  
    // Render the view, defaulting to underscore.js templates.
    // You can override this in your view definition to provide
    // a very specific rendering for your view. In general, though,
    // you should override the `Marionette.Renderer` object to
    // change how Marionette renders views.
    render: function() {
      this._ensureViewIsIntact();
  
      this.triggerMethod('before:render', this);
  
      this._renderTemplate();
      this.isRendered = true;
      this.bindUIElements();
  
      this.triggerMethod('render', this);
  
      return this;
    },
  
    // Internal method to render the template with the serialized data
    // and template helpers via the `Marionette.Renderer` object.
    // Throws an `UndefinedTemplateError` error if the template is
    // any falsely value but literal `false`.
    _renderTemplate: function() {
      var template = this.getTemplate();
  
      // Allow template-less item views
      if (template === false) {
        return;
      }
  
      if (!template) {
        throw new Marionette.Error({
          name: 'UndefinedTemplateError',
          message: 'Cannot render the template since it is null or undefined.'
        });
      }
  
      // Add in entity data and template helpers
      var data = this.mixinTemplateHelpers(this.serializeData());
  
      // Render and add to el
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);
  
      return this;
    },
  
    // Attaches the content of a given view.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    }
  });
  
  /* jshint maxstatements: 20, maxcomplexity: 7 */
  
  // Collection View
  // ---------------
  
  // A view that iterates over a Backbone.Collection
  // and renders an individual child view for each model.
  Marionette.CollectionView = Marionette.View.extend({
  
    // used as the prefix for child view events
    // that are forwarded through the collectionview
    childViewEventPrefix: 'childview',
  
    // flag for maintaining the sorted order of the collection
    sort: true,
  
    // constructor
    // option to pass `{sort: false}` to prevent the `CollectionView` from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    //
    // option to pass `{comparator: compFunction()}` to allow the `CollectionView`
    // to use a custom sort order for the collection.
    constructor: function(options) {
      this.once('render', this._initialEvents);
      this._initChildViewStorage();
  
      Marionette.View.apply(this, arguments);
  
      this.on({
        'before:show':   this._onBeforeShowCalled,
        'show':          this._onShowCalled,
        'before:attach': this._onBeforeAttachCalled,
        'attach':        this._onAttachCalled
      });
      this.initRenderBuffer();
    },
  
    // Instead of inserting elements one by one into the page,
    // it's much more performant to insert elements into a document
    // fragment and then insert that document fragment into the page
    initRenderBuffer: function() {
      this._bufferedChildren = [];
    },
  
    startBuffering: function() {
      this.initRenderBuffer();
      this.isBuffering = true;
    },
  
    endBuffering: function() {
      // Only trigger attach if already shown and attached, otherwise Region#show() handles this.
      var canTriggerAttach = this._isShown && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      this.isBuffering = false;
  
      if (this._isShown) {
        this._triggerMethodMany(this._bufferedChildren, this, 'before:show');
      }
      if (canTriggerAttach && this._triggerBeforeAttach) {
        nestedViews = this._getNestedViews();
        this._triggerMethodMany(nestedViews, this, 'before:attach');
      }
  
      this.attachBuffer(this, this._createBuffer());
  
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getNestedViews();
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      if (this._isShown) {
        this._triggerMethodMany(this._bufferedChildren, this, 'show');
      }
      this.initRenderBuffer();
    },
  
    _triggerMethodMany: function(targets, source, eventName) {
      var args = _.drop(arguments, 3);
  
      _.each(targets, function(target) {
        Marionette.triggerMethodOn.apply(target, [target, eventName, target, source].concat(args));
      });
    },
  
    // Configured the initial events that the collection view
    // binds to.
    _initialEvents: function() {
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this.render);
  
        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Handle a child added to the collection
    _onCollectionAdd: function(child, collection, opts) {
      // `index` is present when adding with `at` since BB 1.2; indexOf fallback for < 1.2
      var index = opts.at !== undefined && (opts.index || collection.indexOf(child));
  
      // When filtered or when there is no initial index, calculate index.
      if (this.getOption('filter') || index === false) {
        index = _.indexOf(this._filteredSortedModels(index), child);
      }
  
      if (this._shouldAddChild(child, index)) {
        this.destroyEmptyView();
        var ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }
    },
  
    // get the child view by model it holds, and remove it
    _onCollectionRemove: function(model) {
      var view = this.children.findByModel(model);
      this.removeChildView(view);
      this.checkEmpty();
    },
  
    _onBeforeShowCalled: function() {
      // Reset attach event flags at the top of the Region#show() event lifecycle; if the Region's
      // show() options permit onBeforeAttach/onAttach events, these flags will be set true again.
      this._triggerBeforeAttach = this._triggerAttach = false;
      this.children.each(function(childView) {
        Marionette.triggerMethodOn(childView, 'before:show', childView);
      });
    },
  
    _onShowCalled: function() {
      this.children.each(function(childView) {
        Marionette.triggerMethodOn(childView, 'show', childView);
      });
    },
  
    // If during Region#show() onBeforeAttach was fired, continue firing it for child views
    _onBeforeAttachCalled: function() {
      this._triggerBeforeAttach = true;
    },
  
    // If during Region#show() onAttach was fired, continue firing it for child views
    _onAttachCalled: function() {
      this._triggerAttach = true;
    },
  
    // Render children views. Override this method to
    // provide your own implementation of a render function for
    // the collection view.
    render: function() {
      this._ensureViewIsIntact();
      this.triggerMethod('before:render', this);
      this._renderChildren();
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },
  
    // Reorder DOM after sorting. When your element's rendering
    // do not use their index, you can pass reorderOnSort: true
    // to only reorder the DOM after a sort instead of rendering
    // all the collectionView
    reorder: function() {
      var children = this.children;
      var models = this._filteredSortedModels();
      var anyModelsAdded = _.some(models, function(model) {
        return !children.findByModel(model);
      });
  
      // If there are any new models added due to filtering
      // We need to add child views
      // So render as normal
      if (anyModelsAdded) {
        this.render();
      } else {
        // get the DOM nodes in the same order as the models
        var elsToReorder = _.map(models, function(model, index) {
          var view = children.findByModel(model);
          view._index = index;
          return view.el;
        });
  
        // find the views that were children before but arent in this new ordering
        var filteredOutViews = children.filter(function(view) {
          return !_.contains(elsToReorder, view.el);
        });
  
        this.triggerMethod('before:reorder');
  
        // since append moves elements that are already in the DOM,
        // appending the elements will effectively reorder them
        this._appendReorderedChildren(elsToReorder);
  
        // remove any views that have been filtered out
        _.each(filteredOutViews, this.removeChildView, this);
        this.checkEmpty();
  
        this.triggerMethod('reorder');
      }
    },
  
    // Render view after sorting. Override this method to
    // change how the view renders after a `sort` on the collection.
    // An example of this would be to only `renderChildren` in a `CompositeView`
    // rather than the full view.
    resortView: function() {
      if (Marionette.getOption(this, 'reorderOnSort')) {
        this.reorder();
      } else {
        this.render();
      }
    },
  
    // Internal method. This checks for any changes in the order of the collection.
    // If the index of any view doesn't match, it will render.
    _sortViews: function() {
      var models = this._filteredSortedModels();
  
      // check for any changes in sort order of views
      var orderChanged = _.find(models, function(item, index) {
        var view = this.children.findByModel(item);
        return !view || view._index !== index;
      }, this);
  
      if (orderChanged) {
        this.resortView();
      }
    },
  
    // Internal reference to what index a `emptyView` is.
    _emptyViewIndex: -1,
  
    // Internal method. Separated so that CompositeView can append to the childViewContainer
    // if necessary
    _appendReorderedChildren: function(children) {
      this.$el.append(children);
    },
  
    // Internal method. Separated so that CompositeView can have
    // more control over events being triggered, around the rendering
    // process
    _renderChildren: function() {
      this.destroyEmptyView();
      this.destroyChildren({checkEmpty: false});
  
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      } else {
        this.triggerMethod('before:render:collection', this);
        this.startBuffering();
        this.showCollection();
        this.endBuffering();
        this.triggerMethod('render:collection', this);
  
        // If we have shown children and none have passed the filter, show the empty view
        if (this.children.isEmpty() && this.getOption('filter')) {
          this.showEmptyView();
        }
      }
    },
  
    // Internal method to loop through collection and show each child view.
    showCollection: function() {
      var ChildView;
  
      var models = this._filteredSortedModels();
  
      _.each(models, function(child, index) {
        ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }, this);
    },
  
    // Allow the collection to be sorted by a custom view comparator
    _filteredSortedModels: function(addedAt) {
      var viewComparator = this.getViewComparator();
      var models = this.collection.models;
      addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);
  
      if (viewComparator) {
        var addedModel;
        // Preserve `at` location, even for a sorted view
        if (addedAt) {
          addedModel = models[addedAt];
          models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));
        }
        models = this._sortModelsBy(models, viewComparator);
        if (addedModel) {
          models.splice(addedAt, 0, addedModel);
        }
      }
  
      // Filter after sorting in case the filter uses the index
      if (this.getOption('filter')) {
        models = _.filter(models, function(model, index) {
          return this._shouldAddChild(model, index);
        }, this);
      }
  
      return models;
    },
  
    _sortModelsBy: function(models, comparator) {
      if (typeof comparator === 'string') {
        return _.sortBy(models, function(model) {
          return model.get(comparator);
        }, this);
      } else if (comparator.length === 1) {
        return _.sortBy(models, comparator, this);
      } else {
        return models.sort(_.bind(comparator, this));
      }
    },
  
    // Internal method to show an empty view in place of
    // a collection of child views, when the collection is empty
    showEmptyView: function() {
      var EmptyView = this.getEmptyView();
  
      if (EmptyView && !this._showingEmptyView) {
        this.triggerMethod('before:render:empty');
  
        this._showingEmptyView = true;
        var model = new Backbone.Model();
        this.addEmptyView(model, EmptyView);
  
        this.triggerMethod('render:empty');
      }
    },
  
    // Internal method to destroy an existing emptyView instance
    // if one exists. Called when a collection view has been
    // rendered empty, and then a child is added to the collection.
    destroyEmptyView: function() {
      if (this._showingEmptyView) {
        this.triggerMethod('before:remove:empty');
  
        this.destroyChildren();
        delete this._showingEmptyView;
  
        this.triggerMethod('remove:empty');
      }
    },
  
    // Retrieve the empty view class
    getEmptyView: function() {
      return this.getOption('emptyView');
    },
  
    // Render and show the emptyView. Similar to addChild method
    // but "add:child" events are not fired, and the event from
    // emptyView are not forwarded
    addEmptyView: function(child, EmptyView) {
      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
      // Region#show() handles this.
      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      // get the emptyViewOptions, falling back to childViewOptions
      var emptyViewOptions = this.getOption('emptyViewOptions') ||
                            this.getOption('childViewOptions');
  
      if (_.isFunction(emptyViewOptions)) {
        emptyViewOptions = emptyViewOptions.call(this, child, this._emptyViewIndex);
      }
  
      // build the empty view
      var view = this.buildChildView(child, EmptyView, emptyViewOptions);
  
      view._parent = this;
  
      // Proxy emptyView events
      this.proxyChildEvents(view);
  
      view.once('render', function() {
        // trigger the 'before:show' event on `view` if the collection view has already been shown
        if (this._isShown) {
          Marionette.triggerMethodOn(view, 'before:show', view);
        }
  
        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
        // to public method `renderChildView()`.
        if (canTriggerAttach && this._triggerBeforeAttach) {
          nestedViews = this._getViewAndNested(view);
          this._triggerMethodMany(nestedViews, this, 'before:attach');
        }
      }, this);
  
      // Store the `emptyView` like a `childView` so we can properly remove and/or close it later
      this.children.add(view);
      this.renderChildView(view, this._emptyViewIndex);
  
      // Trigger `attach`
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getViewAndNested(view);
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      // call the 'show' method if the collection view has already been shown
      if (this._isShown) {
        Marionette.triggerMethodOn(view, 'show', view);
      }
    },
  
    // Retrieve the `childView` class, either from `this.options.childView`
    // or from the `childView` in the object definition. The "options"
    // takes precedence.
    // This method receives the model that will be passed to the instance
    // created from this `childView`. Overriding methods may use the child
    // to determine what `childView` class to return.
    getChildView: function(child) {
      var childView = this.getOption('childView');
  
      if (!childView) {
        throw new Marionette.Error({
          name: 'NoChildViewError',
          message: 'A "childView" must be specified'
        });
      }
  
      return childView;
    },
  
    // Render the child's view and add it to the
    // HTML for the collection view at a given index.
    // This will also update the indices of later views in the collection
    // in order to keep the children in sync with the collection.
    addChild: function(child, ChildView, index) {
      var childViewOptions = this.getOption('childViewOptions');
      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);
  
      var view = this.buildChildView(child, ChildView, childViewOptions);
  
      // increment indices of views after this one
      this._updateIndices(view, true, index);
  
      this.triggerMethod('before:add:child', view);
      this._addChildView(view, index);
      this.triggerMethod('add:child', view);
  
      view._parent = this;
  
      return view;
    },
  
    // Internal method. This decrements or increments the indices of views after the
    // added/removed view to keep in sync with the collection.
    _updateIndices: function(view, increment, index) {
      if (!this.getOption('sort')) {
        return;
      }
  
      if (increment) {
        // assign the index to the view
        view._index = index;
      }
  
      // update the indexes of views after this one
      this.children.each(function(laterView) {
        if (laterView._index >= view._index) {
          laterView._index += increment ? 1 : -1;
        }
      });
    },
  
    // Internal Method. Add the view to children and render it at
    // the given index.
    _addChildView: function(view, index) {
      // Only trigger attach if already shown, attached, and not buffering, otherwise endBuffer() or
      // Region#show() handles this.
      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);
      var nestedViews;
  
      // set up the child view event forwarding
      this.proxyChildEvents(view);
  
      view.once('render', function() {
        // trigger the 'before:show' event on `view` if the collection view has already been shown
        if (this._isShown && !this.isBuffering) {
          Marionette.triggerMethodOn(view, 'before:show', view);
        }
  
        // Trigger `before:attach` following `render` to avoid adding logic and event triggers
        // to public method `renderChildView()`.
        if (canTriggerAttach && this._triggerBeforeAttach) {
          nestedViews = this._getViewAndNested(view);
          this._triggerMethodMany(nestedViews, this, 'before:attach');
        }
      }, this);
  
      // Store the child view itself so we can properly remove and/or destroy it later
      this.children.add(view);
      this.renderChildView(view, index);
  
      // Trigger `attach`
      if (canTriggerAttach && this._triggerAttach) {
        nestedViews = this._getViewAndNested(view);
        this._triggerMethodMany(nestedViews, this, 'attach');
      }
      // Trigger `show`
      if (this._isShown && !this.isBuffering) {
        Marionette.triggerMethodOn(view, 'show', view);
      }
    },
  
    // render the child view
    renderChildView: function(view, index) {
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'before:render', view);
      }
      view.render();
      if (!view.supportsRenderLifecycle) {
        Marionette.triggerMethodOn(view, 'render', view);
      }
      this.attachHtml(this, view, index);
      return view;
    },
  
    // Build a `childView` for a model in the collection.
    buildChildView: function(child, ChildViewClass, childViewOptions) {
      var options = _.extend({model: child}, childViewOptions);
      var childView = new ChildViewClass(options);
      Marionette.MonitorDOMRefresh(childView);
      return childView;
    },
  
    // Remove the child view and destroy it.
    // This function also updates the indices of
    // later views in the collection in order to keep
    // the children in sync with the collection.
    removeChildView: function(view) {
      if (!view) { return view; }
  
      this.triggerMethod('before:remove:child', view);
  
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'before:destroy', view);
      }
      // call 'destroy' or 'remove', depending on which is found
      if (view.destroy) {
        view.destroy();
      } else {
        view.remove();
      }
      if (!view.supportsDestroyLifecycle) {
        Marionette.triggerMethodOn(view, 'destroy', view);
      }
  
      delete view._parent;
      this.stopListening(view);
      this.children.remove(view);
      this.triggerMethod('remove:child', view);
  
      // decrement the index of views after this one
      this._updateIndices(view, false);
  
      return view;
    },
  
    // check if the collection is empty
    isEmpty: function() {
      return !this.collection || this.collection.length === 0;
    },
  
    // If empty, show the empty view
    checkEmpty: function() {
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      }
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(collectionView, buffer) {
      collectionView.$el.append(buffer);
    },
  
    // Create a fragment buffer from the currently buffered children
    _createBuffer: function() {
      var elBuffer = document.createDocumentFragment();
      _.each(this._bufferedChildren, function(b) {
        elBuffer.appendChild(b.el);
      });
      return elBuffer;
    },
  
    // Append the HTML to the collection's `el`.
    // Override this method to do something other
    // than `.append`.
    attachHtml: function(collectionView, childView, index) {
      if (collectionView.isBuffering) {
        // buffering happens on reset events and initial renders
        // in order to reduce the number of inserts into the
        // document, which are expensive.
        collectionView._bufferedChildren.splice(index, 0, childView);
      } else {
        // If we've already rendered the main collection, append
        // the new child into the correct order if we need to. Otherwise
        // append to the end.
        if (!collectionView._insertBefore(childView, index)) {
          collectionView._insertAfter(childView);
        }
      }
    },
  
    // Internal method. Check whether we need to insert the view into
    // the correct position.
    _insertBefore: function(childView, index) {
      var currentView;
      var findPosition = this.getOption('sort') && (index < this.children.length - 1);
      if (findPosition) {
        // Find the view after this one
        currentView = this.children.find(function(view) {
          return view._index === index + 1;
        });
      }
  
      if (currentView) {
        currentView.$el.before(childView.el);
        return true;
      }
  
      return false;
    },
  
    // Internal method. Append a view to the end of the $el
    _insertAfter: function(childView) {
      this.$el.append(childView.el);
    },
  
    // Internal method to set up the `children` object for
    // storing all of the child views
    _initChildViewStorage: function() {
      this.children = new Backbone.ChildViewContainer();
    },
  
    // Handle cleanup and other destroying needs for the collection of views
    destroy: function() {
      if (this.isDestroyed) { return this; }
  
      this.triggerMethod('before:destroy:collection');
      this.destroyChildren({checkEmpty: false});
      this.triggerMethod('destroy:collection');
  
      return Marionette.View.prototype.destroy.apply(this, arguments);
    },
  
    // Destroy the child views that this collection view
    // is holding on to, if any
    destroyChildren: function(options) {
      var destroyOptions = options || {};
      var shouldCheckEmpty = true;
      var childViews = this.children.map(_.identity);
  
      if (!_.isUndefined(destroyOptions.checkEmpty)) {
        shouldCheckEmpty = destroyOptions.checkEmpty;
      }
  
      this.children.each(this.removeChildView, this);
  
      if (shouldCheckEmpty) {
        this.checkEmpty();
      }
      return childViews;
    },
  
    // Return true if the given child should be shown
    // Return false otherwise
    // The filter will be passed (child, index, collection)
    // Where
    //  'child' is the given model
    //  'index' is the index of that model in the collection
    //  'collection' is the collection referenced by this CollectionView
    _shouldAddChild: function(child, index) {
      var filter = this.getOption('filter');
      return !_.isFunction(filter) || filter.call(this, child, index, this.collection);
    },
  
    // Set up the child view event forwarding. Uses a "childview:"
    // prefix in front of all forwarded events.
    proxyChildEvents: function(view) {
      var prefix = this.getOption('childViewEventPrefix');
  
      // Forward all child view events through the parent,
      // prepending "childview:" to the event name
      this.listenTo(view, 'all', function() {
        var args = _.toArray(arguments);
        var rootEvent = args[0];
        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));
  
        args[0] = prefix + ':' + rootEvent;
        args.splice(1, 0, view);
  
        // call collectionView childEvent if defined
        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {
          childEvents[rootEvent].apply(this, args.slice(1));
        }
  
        this.triggerMethod.apply(this, args);
      });
    },
  
    _getImmediateChildren: function() {
      return _.values(this.children._views);
    },
  
    _getViewAndNested: function(view) {
      // This will not fail on Backbone.View which does not have #_getNestedViews.
      return [view].concat(_.result(view, '_getNestedViews') || []);
    },
  
    getViewComparator: function() {
      return this.getOption('viewComparator');
    }
  });
  
  /* jshint maxstatements: 17, maxlen: 117 */
  
  // Composite View
  // --------------
  
  // Used for rendering a branch-leaf, hierarchical structure.
  // Extends directly from CollectionView and also renders an
  // a child view as `modelView`, for the top leaf
  Marionette.CompositeView = Marionette.CollectionView.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.CollectionView.prototype.constructor which allows overriding
    // option to pass '{sort: false}' to prevent the CompositeView from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    constructor: function() {
      Marionette.CollectionView.apply(this, arguments);
    },
  
    // Configured the initial events that the composite view
    // binds to. Override this method to prevent the initial
    // events, or to add your own initial events.
    _initialEvents: function() {
  
      // Bind only after composite view is rendered to avoid adding child views
      // to nonexistent childViewContainer
  
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this._renderChildren);
  
        if (this.getOption('sort')) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Retrieve the `childView` to be used when rendering each of
    // the items in the collection. The default is to return
    // `this.childView` or Marionette.CompositeView if no `childView`
    // has been defined
    getChildView: function(child) {
      var childView = this.getOption('childView') || this.constructor;
  
      return childView;
    },
  
    // Serialize the model for the view.
    // You can override the `serializeData` method in your own view
    // definition, to provide custom serialization for your view's data.
    serializeData: function() {
      var data = {};
  
      if (this.model) {
        data = _.partial(this.serializeModel, this.model).apply(this, arguments);
      }
  
      return data;
    },
  
    // Renders the model and the collection.
    render: function() {
      this._ensureViewIsIntact();
      this._isRendering = true;
      this.resetChildViewContainer();
  
      this.triggerMethod('before:render', this);
  
      this._renderTemplate();
      this._renderChildren();
  
      this._isRendering = false;
      this.isRendered = true;
      this.triggerMethod('render', this);
      return this;
    },
  
    _renderChildren: function() {
      if (this.isRendered || this._isRendering) {
        Marionette.CollectionView.prototype._renderChildren.call(this);
      }
    },
  
    // Render the root template that the children
    // views are appended to
    _renderTemplate: function() {
      var data = {};
      data = this.serializeData();
      data = this.mixinTemplateHelpers(data);
  
      this.triggerMethod('before:render:template');
  
      var template = this.getTemplate();
      var html = Marionette.Renderer.render(template, data, this);
      this.attachElContent(html);
  
      // the ui bindings is done here and not at the end of render since they
      // will not be available until after the model is rendered, but should be
      // available before the collection is rendered.
      this.bindUIElements();
      this.triggerMethod('render:template');
    },
  
    // Attaches the content of the root.
    // This method can be overridden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(compositeView, buffer) {
      var $container = this.getChildViewContainer(compositeView);
      $container.append(buffer);
    },
  
    // Internal method. Append a view to the end of the $el.
    // Overidden from CollectionView to ensure view is appended to
    // childViewContainer
    _insertAfter: function(childView) {
      var $container = this.getChildViewContainer(this, childView);
      $container.append(childView.el);
    },
  
    // Internal method. Append reordered childView'.
    // Overidden from CollectionView to ensure reordered views
    // are appended to childViewContainer
    _appendReorderedChildren: function(children) {
      var $container = this.getChildViewContainer(this);
      $container.append(children);
    },
  
    // Internal method to ensure an `$childViewContainer` exists, for the
    // `attachHtml` method to use.
    getChildViewContainer: function(containerView, childView) {
      if (!!containerView.$childViewContainer) {
        return containerView.$childViewContainer;
      }
  
      var container;
      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');
      if (childViewContainer) {
  
        var selector = Marionette._getValue(childViewContainer, containerView);
  
        if (selector.charAt(0) === '@' && containerView.ui) {
          container = containerView.ui[selector.substr(4)];
        } else {
          container = containerView.$(selector);
        }
  
        if (container.length <= 0) {
          throw new Marionette.Error({
            name: 'ChildViewContainerMissingError',
            message: 'The specified "childViewContainer" was not found: ' + containerView.childViewContainer
          });
        }
  
      } else {
        container = containerView.$el;
      }
  
      containerView.$childViewContainer = container;
      return container;
    },
  
    // Internal method to reset the `$childViewContainer` on render
    resetChildViewContainer: function() {
      if (this.$childViewContainer) {
        this.$childViewContainer = undefined;
      }
    }
  });
  
  // Layout View
  // -----------
  
  // Used for managing application layoutViews, nested layoutViews and
  // multiple regions within an application or sub-application.
  //
  // A specialized view class that renders an area of HTML and then
  // attaches `Region` instances to the specified `regions`.
  // Used for composite view management and sub-application areas.
  Marionette.LayoutView = Marionette.ItemView.extend({
    regionClass: Marionette.Region,
  
    options: {
      destroyImmediate: false
    },
  
    // used as the prefix for child view events
    // that are forwarded through the layoutview
    childViewEventPrefix: 'childview',
  
    // Ensure the regions are available when the `initialize` method
    // is called.
    constructor: function(options) {
      options = options || {};
  
      this._firstRender = true;
      this._initializeRegions(options);
  
      Marionette.ItemView.call(this, options);
    },
  
    // LayoutView's render will use the existing region objects the
    // first time it is called. Subsequent calls will destroy the
    // views that the regions are showing and then reset the `el`
    // for the regions to the newly rendered DOM elements.
    render: function() {
      this._ensureViewIsIntact();
  
      if (this._firstRender) {
        // if this is the first render, don't do anything to
        // reset the regions
        this._firstRender = false;
      } else {
        // If this is not the first render call, then we need to
        // re-initialize the `el` for each region
        this._reInitializeRegions();
      }
  
      return Marionette.ItemView.prototype.render.apply(this, arguments);
    },
  
    // Handle destroying regions, and then destroy the view itself.
    destroy: function() {
      if (this.isDestroyed) { return this; }
      // #2134: remove parent element before destroying the child views, so
      // removing the child views doesn't retrigger repaints
      if (this.getOption('destroyImmediate') === true) {
        this.$el.remove();
      }
      this.regionManager.destroy();
      return Marionette.ItemView.prototype.destroy.apply(this, arguments);
    },
  
    showChildView: function(regionName, view, options) {
      var region = this.getRegion(regionName);
      return region.show.apply(region, _.rest(arguments));
    },
  
    getChildView: function(regionName) {
      return this.getRegion(regionName).currentView;
    },
  
    // Add a single region, by name, to the layoutView
    addRegion: function(name, definition) {
      var regions = {};
      regions[name] = definition;
      return this._buildRegions(regions)[name];
    },
  
    // Add multiple regions as a {name: definition, name2: def2} object literal
    addRegions: function(regions) {
      this.regions = _.extend({}, this.regions, regions);
      return this._buildRegions(regions);
    },
  
    // Remove a single region from the LayoutView, by name
    removeRegion: function(name) {
      delete this.regions[name];
      return this.regionManager.removeRegion(name);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this.regionManager.get(region);
    },
  
    // Get all regions
    getRegions: function() {
      return this.regionManager.getRegions();
    },
  
    // internal method to build regions
    _buildRegions: function(regions) {
      var defaults = {
        regionClass: this.getOption('regionClass'),
        parentEl: _.partial(_.result, this, 'el')
      };
  
      return this.regionManager.addRegions(regions, defaults);
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on this layoutView.
    _initializeRegions: function(options) {
      var regions;
      this._initRegionManager();
  
      regions = Marionette._getValue(this.regions, this, [options]) || {};
  
      // Enable users to define `regions` as instance options.
      var regionOptions = this.getOption.call(options, 'regions');
  
      // enable region options to be a function
      regionOptions = Marionette._getValue(regionOptions, this, [options]);
  
      _.extend(regions, regionOptions);
  
      // Normalize region selectors hash to allow
      // a user to use the @ui. syntax.
      regions = this.normalizeUIValues(regions, ['selector', 'el']);
  
      this.addRegions(regions);
    },
  
    // Internal method to re-initialize all of the regions by updating the `el` that
    // they point to
    _reInitializeRegions: function() {
      this.regionManager.invoke('reset');
    },
  
    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the region manager
    // and all regions in it
    _initRegionManager: function() {
      this.regionManager = this.getRegionManager();
      this.regionManager._parent = this;
  
      this.listenTo(this.regionManager, 'before:add:region', function(name) {
        this.triggerMethod('before:add:region', name);
      });
  
      this.listenTo(this.regionManager, 'add:region', function(name, region) {
        this[name] = region;
        this.triggerMethod('add:region', name, region);
      });
  
      this.listenTo(this.regionManager, 'before:remove:region', function(name) {
        this.triggerMethod('before:remove:region', name);
      });
  
      this.listenTo(this.regionManager, 'remove:region', function(name, region) {
        delete this[name];
        this.triggerMethod('remove:region', name, region);
      });
    },
  
    _getImmediateChildren: function() {
      return _.chain(this.regionManager.getRegions())
        .pluck('currentView')
        .compact()
        .value();
    }
  });
  

  // Behavior
  // --------
  
  // A Behavior is an isolated set of DOM /
  // user interactions that can be mixed into any View.
  // Behaviors allow you to blackbox View specific interactions
  // into portable logical chunks, keeping your views simple and your code DRY.
  
  Marionette.Behavior = Marionette.Object.extend({
    constructor: function(options, view) {
      // Setup reference to the view.
      // this comes in handle when a behavior
      // wants to directly talk up the chain
      // to the view.
      this.view = view;
      this.defaults = _.result(this, 'defaults') || {};
      this.options  = _.extend({}, this.defaults, options);
      // Construct an internal UI hash using
      // the views UI hash and then the behaviors UI hash.
      // This allows the user to use UI hash elements
      // defined in the parent view as well as those
      // defined in the given behavior.
      this.ui = _.extend({}, _.result(view, 'ui'), _.result(this, 'ui'));
  
      Marionette.Object.apply(this, arguments);
    },
  
    // proxy behavior $ method to the view
    // this is useful for doing jquery DOM lookups
    // scoped to behaviors view.
    $: function() {
      return this.view.$.apply(this.view, arguments);
    },
  
    // Stops the behavior from listening to events.
    // Overrides Object#destroy to prevent additional events from being triggered.
    destroy: function() {
      this.stopListening();
  
      return this;
    },
  
    proxyViewProperties: function(view) {
      this.$el = view.$el;
      this.el = view.el;
    }
  });
  
  /* jshint maxlen: 143 */
  // Behaviors
  // ---------
  
  // Behaviors is a utility class that takes care of
  // gluing your behavior instances to their given View.
  // The most important part of this class is that you
  // **MUST** override the class level behaviorsLookup
  // method for things to work properly.
  
  Marionette.Behaviors = (function(Marionette, _) {
    // Borrow event splitter from Backbone
    var delegateEventSplitter = /^(\S+)\s*(.*)$/;
  
    function Behaviors(view, behaviors) {
  
      if (!_.isObject(view.behaviors)) {
        return {};
      }
  
      // Behaviors defined on a view can be a flat object literal
      // or it can be a function that returns an object.
      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));
  
      // Wraps several of the view's methods
      // calling the methods first on each behavior
      // and then eventually calling the method on the view.
      Behaviors.wrap(view, behaviors, _.keys(methods));
      return behaviors;
    }
  
    var methods = {
      behaviorTriggers: function(behaviorTriggers, behaviors) {
        var triggerBuilder = new BehaviorTriggersBuilder(this, behaviors);
        return triggerBuilder.buildBehaviorTriggers();
      },
  
      behaviorEvents: function(behaviorEvents, behaviors) {
        var _behaviorsEvents = {};
  
        _.each(behaviors, function(b, i) {
          var _events = {};
          var behaviorEvents = _.clone(_.result(b, 'events')) || {};
  
          // Normalize behavior events hash to allow
          // a user to use the @ui. syntax.
          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, getBehaviorsUI(b));
  
          var j = 0;
          _.each(behaviorEvents, function(behaviour, key) {
            var match     = key.match(delegateEventSplitter);
  
            // Set event name to be namespaced using the view cid,
            // the behavior index, and the behavior event index
            // to generate a non colliding event namespace
            // http://api.jquery.com/event.namespace/
            var eventName = match[1] + '.' + [this.cid, i, j++, ' '].join('');
            var selector  = match[2];
  
            var eventKey  = eventName + selector;
            var handler   = _.isFunction(behaviour) ? behaviour : b[behaviour];
  
            _events[eventKey] = _.bind(handler, b);
          }, this);
  
          _behaviorsEvents = _.extend(_behaviorsEvents, _events);
        }, this);
  
        return _behaviorsEvents;
      }
    };
  
    _.extend(Behaviors, {
  
      // Placeholder method to be extended by the user.
      // The method should define the object that stores the behaviors.
      // i.e.
      //
      // ```js
      // Marionette.Behaviors.behaviorsLookup: function() {
      //   return App.Behaviors
      // }
      // ```
      behaviorsLookup: function() {
        throw new Marionette.Error({
          message: 'You must define where your behaviors are stored.',
          url: 'marionette.behaviors.html#behaviorslookup'
        });
      },
  
      // Takes care of getting the behavior class
      // given options and a key.
      // If a user passes in options.behaviorClass
      // default to using that. Otherwise delegate
      // the lookup to the users `behaviorsLookup` implementation.
      getBehaviorClass: function(options, key) {
        if (options.behaviorClass) {
          return options.behaviorClass;
        }
  
        // Get behavior class can be either a flat object or a method
        return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];
      },
  
      // Iterate over the behaviors object, for each behavior
      // instantiate it and get its grouped behaviors.
      parseBehaviors: function(view, behaviors) {
        return _.chain(behaviors).map(function(options, key) {
          var BehaviorClass = Behaviors.getBehaviorClass(options, key);
  
          var behavior = new BehaviorClass(options, view);
          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));
  
          return [behavior].concat(nestedBehaviors);
        }).flatten().value();
      },
  
      // Wrap view internal methods so that they delegate to behaviors. For example,
      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.
      // i.e.
      //
      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`
      wrap: function(view, behaviors, methodNames) {
        _.each(methodNames, function(methodName) {
          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
        });
      }
    });
  
    // Class to build handlers for `triggers` on behaviors
    // for views
    function BehaviorTriggersBuilder(view, behaviors) {
      this._view      = view;
      this._behaviors = behaviors;
      this._triggers  = {};
    }
  
    _.extend(BehaviorTriggersBuilder.prototype, {
      // Main method to build the triggers hash with event keys and handlers
      buildBehaviorTriggers: function() {
        _.each(this._behaviors, this._buildTriggerHandlersForBehavior, this);
        return this._triggers;
      },
  
      // Internal method to build all trigger handlers for a given behavior
      _buildTriggerHandlersForBehavior: function(behavior, i) {
        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};
  
        triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));
  
        _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));
      },
  
      // Internal method to create and assign the trigger handler for a given
      // behavior
      _setHandlerForBehavior: function(behavior, i, eventName, trigger) {
        // Unique identifier for the `this._triggers` hash
        var triggerKey = trigger.replace(/^\S+/, function(triggerName) {
          return triggerName + '.' + 'behaviortriggers' + i;
        });
  
        this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);
      }
    });
  
    function getBehaviorsUI(behavior) {
      return behavior._uiBindings || behavior.ui;
    }
  
    return Behaviors;
  
  })(Marionette, _);
  

  // App Router
  // ----------
  
  // Reduce the boilerplate code of handling route events
  // and then calling a single method on another object.
  // Have your routers configured to call the method on
  // your object, directly.
  //
  // Configure an AppRouter with `appRoutes`.
  //
  // App routers can only take one `controller` object.
  // It is recommended that you divide your controller
  // objects in to smaller pieces of related functionality
  // and have multiple routers / controllers, instead of
  // just one giant router and controller.
  //
  // You can also add standard routes to an AppRouter.
  
  Marionette.AppRouter = Backbone.Router.extend({
  
    constructor: function(options) {
      this.options = options || {};
  
      Backbone.Router.apply(this, arguments);
  
      var appRoutes = this.getOption('appRoutes');
      var controller = this._getController();
      this.processAppRoutes(controller, appRoutes);
      this.on('route', this._processOnRoute, this);
    },
  
    // Similar to route method on a Backbone Router but
    // method is called on the controller
    appRoute: function(route, methodName) {
      var controller = this._getController();
      this._addAppRoute(controller, route, methodName);
    },
  
    // process the route event and trigger the onRoute
    // method call, if it exists
    _processOnRoute: function(routeName, routeArgs) {
      // make sure an onRoute before trying to call it
      if (_.isFunction(this.onRoute)) {
        // find the path that matches the current route
        var routePath = _.invert(this.getOption('appRoutes'))[routeName];
        this.onRoute(routeName, routePath, routeArgs);
      }
    },
  
    // Internal method to process the `appRoutes` for the
    // router, and turn them in to routes that trigger the
    // specified method on the specified `controller`.
    processAppRoutes: function(controller, appRoutes) {
      if (!appRoutes) { return; }
  
      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes
  
      _.each(routeNames, function(route) {
        this._addAppRoute(controller, route, appRoutes[route]);
      }, this);
    },
  
    _getController: function() {
      return this.getOption('controller');
    },
  
    _addAppRoute: function(controller, route, methodName) {
      var method = controller[methodName];
  
      if (!method) {
        throw new Marionette.Error('Method "' + methodName + '" was not found on the controller');
      }
  
      this.route(route, methodName, _.bind(method, controller));
    },
  
    mergeOptions: Marionette.mergeOptions,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    triggerMethod: Marionette.triggerMethod,
  
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Application
  // -----------
  
  // Contain and manage the composite application as a whole.
  // Stores and starts up `Region` objects, includes an
  // event aggregator as `app.vent`
  Marionette.Application = Marionette.Object.extend({
    constructor: function(options) {
      this._initializeRegions(options);
      this._initCallbacks = new Marionette.Callbacks();
      this.submodules = {};
      _.extend(this, options);
      this._initChannel();
      Marionette.Object.apply(this, arguments);
    },
  
    // Command execution, facilitated by Backbone.Wreqr.Commands
    execute: function() {
      this.commands.execute.apply(this.commands, arguments);
    },
  
    // Request/response, facilitated by Backbone.Wreqr.RequestResponse
    request: function() {
      return this.reqres.request.apply(this.reqres, arguments);
    },
  
    // Add an initializer that is either run at when the `start`
    // method is called, or run immediately if added after `start`
    // has already been called.
    addInitializer: function(initializer) {
      this._initCallbacks.add(initializer);
    },
  
    // kick off all of the application's processes.
    // initializes all of the regions that have been added
    // to the app, and runs all of the initializer functions
    start: function(options) {
      this.triggerMethod('before:start', options);
      this._initCallbacks.run(options, this);
      this.triggerMethod('start', options);
    },
  
    // Add regions to your app.
    // Accepts a hash of named strings or Region objects
    // addRegions({something: "#someRegion"})
    // addRegions({something: Region.extend({el: "#someRegion"}) });
    addRegions: function(regions) {
      return this._regionManager.addRegions(regions);
    },
  
    // Empty all regions in the app, without removing them
    emptyRegions: function() {
      return this._regionManager.emptyRegions();
    },
  
    // Removes a region from your app, by name
    // Accepts the regions name
    // removeRegion('myRegion')
    removeRegion: function(region) {
      return this._regionManager.removeRegion(region);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this._regionManager.get(region);
    },
  
    // Get all the regions from the region manager
    getRegions: function() {
      return this._regionManager.getRegions();
    },
  
    // Create a module, attached to the application
    module: function(moduleNames, moduleDefinition) {
  
      // Overwrite the module class if the user specifies one
      var ModuleClass = Marionette.Module.getClass(moduleDefinition);
  
      var args = _.toArray(arguments);
      args.unshift(this);
  
      // see the Marionette.Module object for more information
      return ModuleClass.create.apply(ModuleClass, args);
    },
  
    // Enable easy overriding of the default `RegionManager`
    // for customized region interactions and business-specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on the application instance
    _initializeRegions: function(options) {
      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};
  
      this._initRegionManager();
  
      // Enable users to define `regions` in instance options.
      var optionRegions = Marionette.getOption(options, 'regions');
  
      // Enable region options to be a function
      if (_.isFunction(optionRegions)) {
        optionRegions = optionRegions.call(this, options);
      }
  
      // Overwrite current regions with those passed in options
      _.extend(regions, optionRegions);
  
      this.addRegions(regions);
  
      return this;
    },
  
    // Internal method to set up the region manager
    _initRegionManager: function() {
      this._regionManager = this.getRegionManager();
      this._regionManager._parent = this;
  
      this.listenTo(this._regionManager, 'before:add:region', function() {
        Marionette._triggerMethod(this, 'before:add:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'add:region', function(name, region) {
        this[name] = region;
        Marionette._triggerMethod(this, 'add:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'before:remove:region', function() {
        Marionette._triggerMethod(this, 'before:remove:region', arguments);
      });
  
      this.listenTo(this._regionManager, 'remove:region', function(name) {
        delete this[name];
        Marionette._triggerMethod(this, 'remove:region', arguments);
      });
    },
  
    // Internal method to setup the Wreqr.radio channel
    _initChannel: function() {
      this.channelName = _.result(this, 'channelName') || 'global';
      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);
      this.vent = _.result(this, 'vent') || this.channel.vent;
      this.commands = _.result(this, 'commands') || this.channel.commands;
      this.reqres = _.result(this, 'reqres') || this.channel.reqres;
    }
  });
  
  /* jshint maxparams: 9 */
  
  // Module
  // ------
  
  // A simple module system, used to create privacy and encapsulation in
  // Marionette applications
  Marionette.Module = function(moduleName, app, options) {
    this.moduleName = moduleName;
    this.options = _.extend({}, this.options, options);
    // Allow for a user to overide the initialize
    // for a given module instance.
    this.initialize = options.initialize || this.initialize;
  
    // Set up an internal store for sub-modules.
    this.submodules = {};
  
    this._setupInitializersAndFinalizers();
  
    // Set an internal reference to the app
    // within a module.
    this.app = app;
  
    if (_.isFunction(this.initialize)) {
      this.initialize(moduleName, app, this.options);
    }
  };
  
  Marionette.Module.extend = Marionette.extend;
  
  // Extend the Module prototype with events / listenTo, so that the module
  // can be used as an event aggregator or pub/sub.
  _.extend(Marionette.Module.prototype, Backbone.Events, {
  
    // By default modules start with their parents.
    startWithParent: true,
  
    // Initialize is an empty function by default. Override it with your own
    // initialization logic when extending Marionette.Module.
    initialize: function() {},
  
    // Initializer for a specific module. Initializers are run when the
    // module's `start` method is called.
    addInitializer: function(callback) {
      this._initializerCallbacks.add(callback);
    },
  
    // Finalizers are run when a module is stopped. They are used to teardown
    // and finalize any variables, references, events and other code that the
    // module had set up.
    addFinalizer: function(callback) {
      this._finalizerCallbacks.add(callback);
    },
  
    // Start the module, and run all of its initializers
    start: function(options) {
      // Prevent re-starting a module that is already started
      if (this._isInitialized) { return; }
  
      // start the sub-modules (depth-first hierarchy)
      _.each(this.submodules, function(mod) {
        // check to see if we should start the sub-module with this parent
        if (mod.startWithParent) {
          mod.start(options);
        }
      });
  
      // run the callbacks to "start" the current module
      this.triggerMethod('before:start', options);
  
      this._initializerCallbacks.run(options, this);
      this._isInitialized = true;
  
      this.triggerMethod('start', options);
    },
  
    // Stop this module by running its finalizers and then stop all of
    // the sub-modules for this module
    stop: function() {
      // if we are not initialized, don't bother finalizing
      if (!this._isInitialized) { return; }
      this._isInitialized = false;
  
      this.triggerMethod('before:stop');
  
      // stop the sub-modules; depth-first, to make sure the
      // sub-modules are stopped / finalized before parents
      _.invoke(this.submodules, 'stop');
  
      // run the finalizers
      this._finalizerCallbacks.run(undefined, this);
  
      // reset the initializers and finalizers
      this._initializerCallbacks.reset();
      this._finalizerCallbacks.reset();
  
      this.triggerMethod('stop');
    },
  
    // Configure the module with a definition function and any custom args
    // that are to be passed in to the definition function
    addDefinition: function(moduleDefinition, customArgs) {
      this._runModuleDefinition(moduleDefinition, customArgs);
    },
  
    // Internal method: run the module definition function with the correct
    // arguments
    _runModuleDefinition: function(definition, customArgs) {
      // If there is no definition short circut the method.
      if (!definition) { return; }
  
      // build the correct list of arguments for the module definition
      var args = _.flatten([
        this,
        this.app,
        Backbone,
        Marionette,
        Backbone.$, _,
        customArgs
      ]);
  
      definition.apply(this, args);
    },
  
    // Internal method: set up new copies of initializers and finalizers.
    // Calling this method will wipe out all existing initializers and
    // finalizers.
    _setupInitializersAndFinalizers: function() {
      this._initializerCallbacks = new Marionette.Callbacks();
      this._finalizerCallbacks = new Marionette.Callbacks();
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });
  
  // Class methods to create modules
  _.extend(Marionette.Module, {
  
    // Create a module, hanging off the app parameter as the parent object.
    create: function(app, moduleNames, moduleDefinition) {
      var module = app;
  
      // get the custom args passed in after the module definition and
      // get rid of the module name and definition function
      var customArgs = _.drop(arguments, 3);
  
      // Split the module names and get the number of submodules.
      // i.e. an example module name of `Doge.Wow.Amaze` would
      // then have the potential for 3 module definitions.
      moduleNames = moduleNames.split('.');
      var length = moduleNames.length;
  
      // store the module definition for the last module in the chain
      var moduleDefinitions = [];
      moduleDefinitions[length - 1] = moduleDefinition;
  
      // Loop through all the parts of the module definition
      _.each(moduleNames, function(moduleName, i) {
        var parentModule = module;
        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
      }, this);
  
      // Return the last module in the definition chain
      return module;
    },
  
    _getModule: function(parentModule, moduleName, app, def, args) {
      var options = _.extend({}, def);
      var ModuleClass = this.getClass(def);
  
      // Get an existing module of this name if we have one
      var module = parentModule[moduleName];
  
      if (!module) {
        // Create a new module if we don't have one
        module = new ModuleClass(moduleName, app, options);
        parentModule[moduleName] = module;
        // store the module on the parent
        parentModule.submodules[moduleName] = module;
      }
  
      return module;
    },
  
    // ## Module Classes
    //
    // Module classes can be used as an alternative to the define pattern.
    // The extend function of a Module is identical to the extend functions
    // on other Backbone and Marionette classes.
    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.
    getClass: function(moduleDefinition) {
      var ModuleClass = Marionette.Module;
  
      if (!moduleDefinition) {
        return ModuleClass;
      }
  
      // If all of the module's functionality is defined inside its class,
      // then the class can be passed in directly. `MyApp.module("Foo", FooModule)`.
      if (moduleDefinition.prototype instanceof ModuleClass) {
        return moduleDefinition;
      }
  
      return moduleDefinition.moduleClass || ModuleClass;
    },
  
    // Add the module definition and add a startWithParent initializer function.
    // This is complicated because module definitions are heavily overloaded
    // and support an anonymous function, module class, or options object
    _addModuleDefinition: function(parentModule, module, def, args) {
      var fn = this._getDefine(def);
      var startWithParent = this._getStartWithParent(def, module);
  
      if (fn) {
        module.addDefinition(fn, args);
      }
  
      this._addStartWithParent(parentModule, module, startWithParent);
    },
  
    _getStartWithParent: function(def, module) {
      var swp;
  
      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {
        swp = module.constructor.prototype.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      if (_.isObject(def)) {
        swp = def.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      return true;
    },
  
    _getDefine: function(def) {
      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
        return def;
      }
  
      if (_.isObject(def)) {
        return def.define;
      }
  
      return null;
    },
  
    _addStartWithParent: function(parentModule, module, startWithParent) {
      module.startWithParent = module.startWithParent && startWithParent;
  
      if (!module.startWithParent || !!module.startWithParentIsConfigured) {
        return;
      }
  
      module.startWithParentIsConfigured = true;
  
      parentModule.addInitializer(function(options) {
        if (module.startWithParent) {
          module.start(options);
        }
      });
    }
  });
  

  return Marionette;
}));

/**
 *  backbone.associate.js v0.0.9
 *  (c) 2013, RJ Zaworski
 *
 *  Presumptionless model relations for Backbone.js
 *  Released under the MIT License
 */
(function(root, factory) {

    // CommonJS compatibilty
    if (typeof exports !== 'undefined') {
        factory(_, Backbone);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['underscore', 'backbone'], function(_, Backbone) {
            // Use global variables if the locals are undefined.
            return factory(_ || root._, Backbone || root.Backbone);
        });
    } else {
        factory(root._, root.Backbone);
    }

})(this, function(_, Backbone) {

    var
    // Sift through a map of attributes and initialize any
    // known associations
        _filterAssociates = function(context, attributes, options) {

            var attrs, current = context.attributes,
                action, key, association, associations = context._associations,
                omit = [];

            for (key in associations) {
                association = associations[key];
                attrs = attributes[key];
                if (_isAssociatedType(association, current[key])) {
                    if (_isAssociatedType(association, attrs)) {
                        // Reassign associated resource
                        current[key] = attrs;
                        omit.push(key);
                    } else if (attrs && attrs !== null) {
                        // Update attributes of associated resource
                        current[key].set(attrs, options);
                        omit.push(key);
                    }
                } else {
                    attributes[key] = _buildAssociation(context, association, attrs, options);
                }
            }

            // Skip any attributes that have were handled by associations
            return _.omit(attributes, omit);
        },

        // Check whether the supplied object matches the association type
        _isAssociatedType = function(association, obj) {
            return (obj instanceof association.type);
        },

        // Builds an association
        _buildAssociation = function(context, association, attributes, options) {
            var result = new(association.type)(attributes, options);
            if (association.url) {
                // Assign a sensible default URL by appending the url parameter
                // to the url of the parent model.
                result.url = function() {
                    return _.result(context, 'url') + _.result(association, 'url');
                };
            }
            return result;
        },

        // Wraps a method, exposing an "unwrap" method for reverting it later
        _wrapMethod = function(context, wrapper, key) {

            var original = context[key],
                wrapped = _.wrap(original, wrapper);

            wrapped.unwrap = function() {
                context[key] = original;
            };

            context[key] = wrapped;
        },

        // Extensions to Backbone.Model for filtering associate data, etc, etc
        _extensions = {

            // Updates `set` to handle supplied attributes
            set: function(original, key, val, options) {

                var self = this,
                    attributes = {};

                if (_.isObject(key)) {
                    _.extend(attributes, key);
                } else {
                    attributes[key] = val;
                }
                if (_.isObject(val) && (typeof options === "undefined" || options === null)) {
                    options = val;
                }

                return original.call(self, _filterAssociates(self, attributes, options), options);
            },

            // Updates `toJSON` to serialize associated objects
            toJSON: function(original, options) {

                var self = this,
                    key, associations = self._associations,
                    attributes = original.call(self, options);

                for (key in associations) {
                    if (_isAssociatedType(associations[key], attributes[key])) {
                        attributes[key] = attributes[key].toJSON();
                    }
                }
                return attributes;
            }
        },

        // Patch initialize method to setup associations and filter initial attributes
        _initialize = function(original, attrs, options) {

            var self = this,
                key, extensions = _.clone(_extensions);

            // Provide associate accessors
            for (key in self._associations) {
                extensions[key] = _.partial(self.get, key);
            }

            // Wrap extensions around existing class methods
            _.each(extensions, _.partial(_wrapMethod, self));

            // Filter any attributes that slipped by without parsing
            _filterAssociates(self, self.attributes, options);

            // Pass control back to the original initialize method
            return original.call(self, attrs, options);
        };

    // Define associations for a model
    Backbone.associate = function(klass, associations) {

        var proto = klass.prototype;

        if (!proto._associations) {
            // Patch initialize method in prototype
            _wrapMethod(proto, _initialize, 'initialize');

            // Add namespace for associations
            proto._associations = {};
        }

        _.extend(proto._associations, associations);
    };

    // Remove model associations
    Backbone.dissociate = function(klass) {
        var proto = klass.prototype;
        proto.initialize.unwrap();
        proto._associations = null;
    };

    return Backbone;
});

/*!
 * @copyright Copyright &copy; Kartik Visweswaran, Krajee.com, 2015
 * @version 4.1.7
 *
 * File input styled for Bootstrap 3.0 that utilizes HTML5 File Input's advanced
 * features including the FileReader API.
 *
 * The plugin drastically enhances the HTML file input to preview multiple files on the client before
 * upload. In addition it provides the ability to preview content of images, text, videos, audio, html,
 * flash and other objects. It also offers the ability to upload and delete files using AJAX, and add
 * files in batches (i.e. preview, append, or remove before upload).
 *
 * Author: Kartik Visweswaran
 * Copyright: 2015, Kartik Visweswaran, Krajee.com
 * For more JQuery plugins visit http://plugins.krajee.com
 * For more Yii related demos visit http://demos.krajee.com
 */
(function($) {
    "use strict";
    String.prototype.repl = function(from, to) {
        return this.split(from).join(to);
    };
    var isIE = function(ver) {
            var div = document.createElement("div"),
                status;
            div.innerHTML = "<!--[if IE " + ver + "]><i></i><![endif]-->";
            status = (div.getElementsByTagName("i").length === 1);
            document.body.appendChild(div);
            div.parentNode.removeChild(div);
            return status;
        },
        hasFileAPISupport = function() {
            return window.File && window.FileReader;
        },
        hasDragDropSupport = function() {
            var $div = document.createElement('div');
            return !isIE(9) && ($div.draggable !== undefined || ($div.ondragstart !== undefined && $div.ondrop !== undefined));
        },
        hasFileUploadSupport = function() {
            return hasFileAPISupport && window.FormData;
        },
        addCss = function($el, css) {
            $el.removeClass(css).addClass(css);
        },
        STYLE_SETTING = 'style="width:{width};height:{height};"',
        OBJECT_PARAMS = '      <param name="controller" value="true" />\n' +
        '      <param name="allowFullScreen" value="true" />\n' +
        '      <param name="allowScriptAccess" value="always" />\n' +
        '      <param name="autoPlay" value="false" />\n' +
        '      <param name="autoStart" value="false" />\n' +
        '      <param name="quality" value="high" />\n',
        DEFAULT_PREVIEW = '<div class="file-preview-other">\n' +
        '       <i class="w2ui-icon-file"></i>\n' +
        '   </div>',
        defaultFileActionSettings = {
            removeIcon: '<i class="w2ui-icon-trash text-danger"></i>',
            removeClass: 'btn btn-icon-only btn-red',
            removeTitle: 'Remove file',
            uploadIcon: '<i class="w2ui-icon-upload text-info"></i>',
            uploadClass: 'btn btn-icon-only btn-orange',
            uploadTitle: 'Upload file',
            indicatorNew: '<i class="glyphicon glyphicon-hand-down text-warning"></i>',
            indicatorSuccess: '<i class="glyphicon glyphicon-ok-sign file-icon-large text-success"></i>',
            indicatorError: '<i class="glyphicon glyphicon-exclamation-sign text-danger"></i>',
            indicatorLoading: '<i class="glyphicon glyphicon-hand-up text-muted"></i>',
            indicatorNewTitle: 'Not uploaded yet',
            indicatorSuccessTitle: 'Uploaded',
            indicatorErrorTitle: 'Upload Error',
            indicatorLoadingTitle: 'Uploading ...'
        },
        tMain1 = '{preview}\n' +
        '<div class="kv-upload-progress hide"></div>\n' +
        '<div class="input-group {class}">\n' +
        '   {caption}\n' +
        '   <div class="input-group-btn">\n' +
        '       {remove}\n' +
        '       {cancel}\n' +
        '       {upload}\n' +
        '       {browse}\n' +
        '   </div>\n' +
        '</div>',
        tMain2 = '{preview}\n<div class="kv-upload-progress hide"></div>\n{remove}\n{cancel}\n{upload}\n{browse}\n',
        tPreview = '<div class="file-preview {class}">\n' +
        '    <div class="closebtn fileinput-remove">&times;</div>\n' +
        '    <div class="{dropClass}">\n' +
        '    <div class="file-preview-thumbnails">\n' +
        '    </div>\n' +
        '    <div class="clearfix"></div>' +
        '    <div class="file-preview-status text-center text-success"></div>\n' +
        '    <div class="kv-fileinput-error"></div>\n' +
        '    </div>\n' +
        '</div>',
        tIcon = '<span class="w2ui-icon-file kv-caption-icon"></span>',
        tCaption = '<div tabindex="-1" class="form-control file-caption {class}">\n' +
        '   <span class="file-caption-ellipsis">&hellip;</span>\n' +
        '   <div class="file-caption-name"></div>\n' +
        '</div>',
        tModal = '<div id="{id}" class="modal fade">\n' +
        '  <div class="modal-dialog modal-lg">\n' +
        '    <div class="modal-content">\n' +
        '      <div class="modal-header">\n' +
        '        <button type="button" class="closebtn" data-dismiss="modal" aria-hidden="true">&times;</button>\n' +
        '        <h3 class="modal-title">Detailed Preview <small>{title}</small></h3>\n' +
        '      </div>\n' +
        '      <div class="modal-body">\n' +
        '        <textarea class="form-control" style="font-family:Monaco,Consolas,monospace; height: {height}px;" readonly>{body}</textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>',
        tProgress = '<div class="progress">\n' +
        '    <div class="{class}" role="progressbar"' +
        ' aria-valuenow="{percent}" aria-valuemin="0" aria-valuemax="100" style="width:{percent}%;">\n' +
        '        {percent}%\n' +
        '     </div>\n' +
        '</div>',
        tFooter = '<div class="file-thumbnail-footer">\n' +
        '    <div class="file-caption-name">{caption}</div>\n' +
        '    {actions}\n' +
        '</div>',
        tActions = '<div class="file-actions">\n' +
        '    <div class="file-footer-buttons">\n' +
        '        {upload}{delete}{other}' +
        '    </div>\n' +
        '    <div class="file-upload-indicator" tabindex="-1" title="{indicatorTitle}">{indicator}</div>\n' +
        '    <div class="clearfix"></div>\n' +
        '</div>',
        tActionDelete = '<button type="button" class="kv-file-remove {removeClass}" ' +
        'title="{removeTitle}"{dataUrl}{dataKey}>{removeIcon}</button>\n',
        tActionUpload = '<button type="button" class="kv-file-upload {uploadClass}" title="{uploadTitle}">' +
        '   {uploadIcon}\n</button>\n',
        tGeneric = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '   {content}\n' +
        '   {footer}\n' +
        '</div>\n',
        tHtml = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '    <object data="{data}" type="{type}" width="{width}" height="{height}">\n' +
        '       ' + DEFAULT_PREVIEW + '\n' +
        '    </object>\n' +
        '   {footer}\n' +
        '</div>',
        tImage = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '   <img src="{data}" class="file-preview-image" title="{caption}" alt="{caption}" ' + STYLE_SETTING + '>\n' +
        '   {footer}\n' +
        '</div>\n',
        tText = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}">\n' +
        '   <div class="file-preview-text" title="{caption}" ' + STYLE_SETTING + '>\n' +
        '       {data}\n' +
        '   </div>\n' +
        '   {footer}\n' +
        '</div>',
        tVideo = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <video width="{width}" height="{height}" controls>\n' +
        '       <source src="{data}" type="{type}">\n' +
        '       ' + DEFAULT_PREVIEW + '\n' +
        '   </video>\n' +
        '   {footer}\n' +
        '</div>\n',
        tAudio = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <audio controls>\n' +
        '       <source src="' + '{data}' + '" type="{type}">\n' +
        '       ' + DEFAULT_PREVIEW + '\n' +
        '   </audio>\n' +
        '   {footer}\n' +
        '</div>',
        tFlash = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <object type="application/x-shockwave-flash" width="{width}" height="{height}" data="{data}">\n' +
        OBJECT_PARAMS + '       ' + DEFAULT_PREVIEW + '\n' +
        '   </object>\n' +
        '   {footer}\n' +
        '</div>\n',
        tObject = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   <object data="{data}" type="{type}" width="{width}" height="{height}">\n' +
        '       <param name="movie" value="{caption}" />\n' +
        OBJECT_PARAMS + '         ' + DEFAULT_PREVIEW + '\n' +
        '   </object>\n' +
        '   {footer}\n' +
        '</div>',
        tOther = '<div class="file-preview-frame{frameClass}" id="{previewId}" data-fileindex="{fileindex}"' +
        ' title="{caption}" ' + STYLE_SETTING + '>\n' +
        '   ' + DEFAULT_PREVIEW + '\n' +
        '   {footer}\n' +
        '</div>',
        defaultLayoutTemplates = {
            main1: tMain1,
            main2: tMain2,
            preview: tPreview,
            icon: tIcon,
            caption: tCaption,
            modal: tModal,
            progress: tProgress,
            footer: tFooter,
            actions: tActions,
            actionDelete: tActionDelete,
            actionUpload: tActionUpload
        },
        defaultPreviewTemplates = {
            generic: tGeneric,
            html: tHtml,
            image: tImage,
            text: tText,
            video: tVideo,
            audio: tAudio,
            flash: tFlash,
            object: tObject,
            other: tOther
        },
        defaultPreviewTypes = ['image', 'html', 'text', 'video', 'audio', 'flash', 'object'],
        defaultPreviewSettings = {
            image: {
                width: "auto",
                height: "160px"
            },
            html: {
                width: "213px",
                height: "160px"
            },
            text: {
                width: "160px",
                height: "160px"
            },
            video: {
                width: "213px",
                height: "160px"
            },
            audio: {
                width: "213px",
                height: "80px"
            },
            flash: {
                width: "213px",
                height: "160px"
            },
            object: {
                width: "160px",
                height: "160px"
            },
            other: {
                width: "160px",
                height: "160px"
            }
        },
        defaultFileTypeSettings = {
            image: function(vType, vName) {
                return (vType !== undefined) ? vType.match('image.*') : vName.match(/\.(gif|png|jpe?g)$/i);
            },
            html: function(vType, vName) {
                return (vType !== undefined) ? vType === 'text/html' : vName.match(/\.(htm|html)$/i);
            },
            text: function(vType, vName) {
                return (vType !== undefined && vType.match('text.*')) || vName.match(/\.(txt|md|csv|nfo|php|ini)$/i);
            },
            video: function(vType, vName) {
                return (vType !== undefined && vType.match(/\.video\/(ogg|mp4|webm)$/i)) || vName.match(/\.(og?|mp4|webm)$/i);
            },
            audio: function(vType, vName) {
                return (vType !== undefined && vType.match(/\.audio\/(ogg|mp3|wav)$/i)) || vName.match(/\.(ogg|mp3|wav)$/i);
            },
            flash: function(vType, vName) {
                return (vType !== undefined && vType === 'application/x-shockwave-flash') || vName.match(/\.(swf)$/i);
            },
            object: function() {
                return true;
            },
            other: function() {
                return true;
            }
        },
        isEmpty = function(value, trim) {
            return value === null || value === undefined || value.length === 0 || (trim && $.trim(value) === '');
        },
        isArray = function(a) {
            return Array.isArray(a) || Object.prototype.toString.call(a) === '[object Array]';
        },
        isSet = function(needle, haystack) {
            return (typeof haystack === 'object' && needle in haystack);
        },
        getElement = function(options, param, value) {
            return (isEmpty(options) || isEmpty(options[param])) ? value : $(options[param]);
        },
        uniqId = function() {
            return Math.round(new Date().getTime() + (Math.random() * 100));
        },
        htmlEncode = function(str) {
            return String(str).repl('&', '&amp;')
                .repl('"', '&quot;')
                .repl("'", '&#39;')
                .repl('<', '&lt;')
                .repl('>', '&gt;');
        },
        replaceTags = function(str, tags) {
            var out = str;
            $.each(tags, function(key, value) {
                if (typeof value === "function") {
                    value = value();
                }
                out = out.repl(key, value);
            });
            return out;
        },
        objUrl = window.URL || window.webkitURL,
        FileInput = function(element, options) {
            this.$element = $(element);
            if (hasFileAPISupport() || isIE(9)) {
                this.init(options);
                this.listen();
            } else {
                this.$element.removeClass('file-loading');
            }
        };

    FileInput.prototype = {
        constructor: FileInput,
        init: function(options) {
            var self = this,
                $el = self.$element,
                content, t;
            $.each(options, function(key, value) {
                self[key] = value;
            });
            if (isEmpty(self.allowedPreviewTypes)) {
                self.allowedPreviewTypes = defaultPreviewTypes;
            }
            self.uploadFileAttr = !isEmpty($el.attr('name')) ? $el.attr('name') : 'file_data';
            self.reader = null;
            self.formdata = {};
            self.isIE9 = isIE(9);
            self.isIE10 = isIE(10);
            self.filestack = [];
            self.ajaxRequests = [];
            self.isError = false;
            self.dropZoneEnabled = hasDragDropSupport() && self.dropZoneEnabled;
            self.isDisabled = self.$element.attr('disabled') || self.$element.attr('readonly');
            self.isUploadable = hasFileUploadSupport && !isEmpty(self.uploadUrl);
            self.slug = typeof options.slugCallback === "function" ? options.slugCallback : self.slugDefault;
            self.mainTemplate = self.showCaption ? self.getLayoutTemplate('main1') : self.getLayoutTemplate('main2');
            self.captionTemplate = self.getLayoutTemplate('caption');
            self.previewGenericTemplate = self.getPreviewTemplate('generic');
            if (isEmpty(self.$element.attr('id'))) {
                self.$element.attr('id', uniqId());
            }
            if (self.$container === undefined) {
                self.$container = self.createContainer();
            } else {
                self.refreshContainer();
            }
            self.$progress = self.$container.find('.kv-upload-progress');
            self.$btnUpload = self.$container.find('.kv-fileinput-upload');
            self.$captionContainer = getElement(options, 'elCaptionContainer', self.$container.find('.file-caption'));
            self.$caption = getElement(options, 'elCaptionText', self.$container.find('.file-caption-name'));
            self.$previewContainer = getElement(options, 'elPreviewContainer', self.$container.find('.file-preview'));
            self.$preview = getElement(options, 'elPreviewImage', self.$container.find('.file-preview-thumbnails'));
            self.$previewStatus = getElement(options, 'elPreviewStatus', self.$container.find('.file-preview-status'));
            self.$errorContainer = getElement(options, 'elErrorContainer',
                self.$previewContainer.find('.kv-fileinput-error'));
            if (!isEmpty(self.msgErrorClass)) {
                addCss(self.$errorContainer, self.msgErrorClass);
            }
            self.$errorContainer.hide();
            self.initialPreviewContent = '';
            content = self.initialPreview;
            self.initialPreviewCount = isArray(content) ? content.length : (content.length > 0 ? content.split(self.initialPreviewDelimiter).length : 0);
            self.fileActionSettings = $.extend(defaultFileActionSettings, options.fileActionSettings);
            self.previewInitId = "preview-" + uniqId();
            self.initPreview();
            self.initPreviewDeletes();
            self.original = {
                preview: self.$preview.html(),
                caption: self.$caption.html()
            };
            self.options = options;
            self.setFileDropZoneTitle();
            self.uploadCount = 0;
            self.uploadPercent = 0;
            self.$element.removeClass('file-loading');
            t = self.getLayoutTemplate('progress');
            self.progressTemplate = t.replace('{class}', self.progressClass);
            self.progressCompleteTemplate = t.replace('{class}', self.progressCompleteClass);
            self.setEllipsis();
        },
        raise: function(event, params) {
            var self = this;
            if (params !== undefined) {
                self.$element.trigger(event, params);
            } else {
                self.$element.trigger(event);
            }
        },
        getLayoutTemplate: function(t) {
            var self = this,
                template = isSet(t, self.layoutTemplates) ? self.layoutTemplates[t] : defaultLayoutTemplates[t];
            if (isEmpty(self.customLayoutTags)) {
                return template;
            }
            return replaceTags(template, self.customLayoutTags);
        },
        getPreviewTemplate: function(t) {
            var self = this,
                template = isSet(t, self.previewTemplates) ? self.previewTemplates[t] : defaultPreviewTemplates[t];
            if (isEmpty(self.customPreviewTags)) {
                return template;
            }
            return replaceTags(template, self.customPreviewTags);
        },
        getOutData: function(jqXHR, responseData, filesData) {
            var self = this;
            jqXHR = jqXHR || {};
            responseData = responseData || {};
            filesData = filesData || self.filestack.slice(0);
            return {
                form: self.formdata,
                files: filesData,
                extra: self.getExtraData(),
                response: responseData,
                reader: self.reader,
                jqXHR: jqXHR
            };
        },
        setEllipsis: function() {
            var self = this,
                $capCont = self.$captionContainer,
                $cap = self.$caption,
                $div = $cap.clone().css('height', 'auto').hide();
            $capCont.parent().before($div);
            $capCont.removeClass('kv-has-ellipsis');
            if ($div.outerWidth() > $cap.outerWidth()) {
                $capCont.addClass('kv-has-ellipsis');
            }
            $div.remove();
        },
        listen: function() {
            var self = this,
                $el = self.$element,
                $cap = self.$captionContainer,
                $btnFile = self.$btnFile;
            $el.on('change', $.proxy(self.change, self));
            $(window).on('resize', function() {
                self.setEllipsis();
            });
            $btnFile.off('click').on('click', function() {
                self.raise('filebrowse');
                if (self.isError && !self.isUploadable) {
                    self.clear(true);
                }
                $cap.focus();
            });
            $el.closest('form').off('reset').on('reset', $.proxy(self.reset, self));
            self.$container.off('click')
                .on('click', '.fileinput-remove:not([disabled])', $.proxy(self.clear, self))
                .on('click', '.fileinput-cancel', $.proxy(self.cancel, self));
            if (self.isUploadable && self.dropZoneEnabled && self.showPreview) {
                self.initDragDrop();
            }
            if (!self.isUploadable) {
                return;
            }
            self.$container.find('.kv-fileinput-upload').off('click').on('click', function(e) {
                if (!self.isUploadable) {
                    return;
                }
                e.preventDefault();
                if (!$(this).hasClass('disabled') && isEmpty($(this).attr('disabled'))) {
                    self.upload();
                }
            });
        },
        setProgress: function(p) {
            var self = this,
                pct = Math.min(p, 100),
                template = pct < 100 ? self.progressTemplate : self.progressCompleteTemplate;
            self.$progress.html(template.repl('{percent}', pct));
        },
        upload: function() {
            var self = this,
                totLen = self.getFileStack().length,
                i, outData, len;
            if (!self.isUploadable || self.isDisabled || totLen === 0) {
                return;
            }
            self.resetUpload();
            self.$progress.removeClass('hide');
            self.uploadCount = 0;
            self.uploadPercent = 0;
            self.lock();
            self.setProgress(0);
            len = self.filestack.length;
            if ((self.uploadAsync || totLen === 1) && self.showPreview) {
                outData = self.getOutData();
                self.raise('filebatchpreupload', [outData]);
                for (i = 0; i < len; i += 1) {
                    if (self.filestack[i] !== undefined) {
                        self.uploadSingle(i, self.filestack, true);
                    }
                }
                return;
            }
            self.uploadBatch();
        },
        lock: function() {
            var self = this;
            self.resetErrors();
            self.disable();
            if (self.showRemove) {
                addCss(self.$container.find('.fileinput-remove'), 'hide');
            }
            if (self.showCancel) {
                self.$container.find('.fileinput-cancel').removeClass('hide');
            }
            self.raise('filelock', [self.filestack, self.getExtraData()]);
        },
        unlock: function(reset) {
            var self = this;
            if (reset === undefined) {
                reset = true;
            }
            self.enable();
            if (self.showCancel) {
                addCss(self.$container.find('.fileinput-cancel'), 'hide');
            }
            if (self.showRemove) {
                self.$container.find('.fileinput-remove').removeClass('hide');
            }
            if (reset) {
                self.resetFileStack();
            }
            self.raise('fileunlock', [self.filestack, self.getExtraData()]);
        },
        resetFileStack: function() {
            var self = this,
                i = 0,
                newstack = [];
            self.$preview.find('.file-preview-frame').each(function() {
                var $thumb = $(this),
                    ind = $thumb.attr('data-fileindex'),
                    file = self.filestack[ind];
                if (ind == -1) {
                    return;
                }
                if (file !== undefined) {
                    newstack[i] = file;
                    $thumb.attr({
                        'id': self.previewInitId + '-' + i,
                        'data-fileindex': i
                    });
                    i += 1;
                } else {
                    $thumb.attr({
                        'id': 'uploaded-' + uniqId(),
                        'data-fileindex': '-1'
                    });
                }
            });
            self.filestack = newstack;
        },
        refresh: function(options) {
            var self = this,
                $el = self.$element,
                $zone,
                params = (arguments.length) ? $.extend(self.options, options) : self.options;
            $el.off();
            self.init(params);
            $zone = self.$container.find('.file-drop-zone');
            $zone.off('dragenter dragover drop');
            $(document).off('dragenter dragover drop');
            self.listen();
            self.setFileDropZoneTitle();
        },
        initDragDrop: function() {
            var self = this,
                $zone = self.$container.find('.file-drop-zone');
            $zone.off('dragenter dragover drop');
            $(document).off('dragenter dragover drop');
            $zone.on('dragenter dragover', function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (self.isDisabled) {
                    return;
                }
                addCss($(this), 'highlighted');
            });
            $zone.on('dragleave', function(e) {
                e.stopPropagation();
                e.preventDefault();
                if (self.isDisabled) {
                    return;
                }
                $(this).removeClass('highlighted');
            });
            $zone.on('drop', function(e) {
                e.preventDefault();
                if (self.isDisabled) {
                    return;
                }
                self.change(e, 'dragdrop');
                $(this).removeClass('highlighted');
            });
            $(document).on('dragenter dragover drop', function(e) {
                e.stopPropagation();
                e.preventDefault();
            });
        },
        setFileDropZoneTitle: function() {
            var self = this,
                $zone = self.$container.find('.file-drop-zone');
            $zone.find('.' + self.dropZoneTitleClass).remove();
            if (!self.isUploadable || !self.showPreview || $zone.length === 0 || self.getFileStack().length > 0 || !self.dropZoneEnabled) {
                return;
            }
            if ($zone.find('.file-preview-frame').length === 0) {
                $zone.prepend('<div class="' + self.dropZoneTitleClass + '">' + self.dropZoneTitle + '</div>');
            }
            self.$container.removeClass('file-input-new');
            addCss(self.$container, 'file-input-ajax-new');
        },
        initFileActions: function() {
            var self = this;
            self.$preview.find('.kv-file-remove').each(function() {
                var $el = $(this),
                    $frame = $el.closest('.file-preview-frame'),
                    ind = $frame.attr('data-fileindex'),
                    n, cap;
                $el.off('click').on('click', function() {
                    $frame.fadeOut('slow', function() {
                        self.filestack[ind] = undefined;
                        self.clearObjects($frame);
                        $frame.remove();
                        var filestack = self.getFileStack(),
                            len = filestack.length,
                            chk = self.$container.find('.file-preview-initial').length;
                        if (len === 0 && chk === 0) {
                            self.original.preview = '';
                            self.reset();
                        } else {
                            n = self.initialPreviewCount + len;
                            cap = n > 1 ? self.msgSelected.repl('{n}', n) : filestack[0].name;
                            self.setCaption(cap);
                        }
                    });
                });
            });
            self.$preview.find('.kv-file-upload').each(function() {
                var $el = $(this);
                $el.off('click').on('click', function() {
                    var $frame = $el.closest('.file-preview-frame'),
                        ind = $frame.attr('data-fileindex');
                    self.uploadSingle(ind, self.filestack, false);
                });
            });
        },
        renderInitFileFooter: function(i) {
            if (this.initialPreviewConfig.length === 0 || isEmpty(this.initialPreviewConfig[i])) {
                return '';
            }
            var self = this,
                template = self.getLayoutTemplate('footer'),
                config = self.initialPreviewConfig[i],
                caption = isSet('caption', config) ? config.caption : '',
                width = isSet('width', config) ? config.width : 'auto',
                url = isSet('url', config) ? config.url : false,
                key = isSet('key', config) ? config.key : null,
                disabled = (url === false),
                actions = self.initialPreviewShowDelete ? self.renderFileActions(false, true, disabled, url, key) : '',
                footer = template.repl('{actions}', actions);
            return footer.repl('{caption}', caption).repl('{width}', width)
                .repl('{indicator}', '').repl('{indicatorTitle}', '');
        },
        renderFileFooter: function(caption, width) {
            var self = this,
                config = self.fileActionSettings,
                footer,
                template = self.getLayoutTemplate('footer');
            if (self.isUploadable) {
                footer = template.repl('{actions}', self.renderFileActions(true, true, false, false, false));
                return footer.repl('{caption}', caption)
                    .repl('{width}', width)
                    .repl('{indicator}', config.indicatorNew)
                    .repl('{indicatorTitle}', config.indicatorNewTitle);
            }
            return template.repl('{actions}', '')
                .repl('{caption}', caption)
                .repl('{width}', width)
                .repl('{indicator}', '')
                .repl('{indicatorTitle}', '');
        },
        renderFileActions: function(showUpload, showDelete, disabled, url, key) {
            if (!showUpload && !showDelete) {
                return '';
            }
            var self = this,
                vUrl = url === false ? '' : ' data-url="' + url + '"',
                vKey = key === false ? '' : ' data-key="' + key + '"',
                btnDelete = self.getLayoutTemplate('actionDelete'),
                btnUpload = '',
                template = self.getLayoutTemplate('actions'),
                otherActionButtons = self.otherActionButtons.repl('{dataKey}', vKey),
                config = self.fileActionSettings,
                removeClass = disabled ? config.removeClass + ' disabled' : config.removeClass;
            btnDelete = btnDelete
                .repl('{removeClass}', removeClass)
                .repl('{removeIcon}', config.removeIcon)
                .repl('{removeTitle}', config.removeTitle)
                .repl('{dataUrl}', vUrl)
                .repl('{dataKey}', vKey);
            if (showUpload) {
                btnUpload = self.getLayoutTemplate('actionUpload')
                    .repl('{uploadClass}', config.uploadClass)
                    .repl('{uploadIcon}', config.uploadIcon)
                    .repl('{uploadTitle}', config.uploadTitle);
            }
            return template
                .repl('{delete}', btnDelete)
                .repl('{upload}', btnUpload)
                .repl('{other}', otherActionButtons);
        },
        getInitialPreview: function(template, content, i) {
            var self = this,
                ind = 'init_' + i,
                previewId = self.previewInitId + '-' + ind,
                footer = self.renderInitFileFooter(i, false);
            return template
                .repl('{previewId}', previewId)
                .repl('{frameClass}', ' file-preview-initial')
                .repl('{fileindex}', ind)
                .repl('{content}', content)
                .repl('{footer}', footer);
        },
        initPreview: function() {
            var self = this,
                html = '',
                content = self.initialPreview,
                len = self.initialPreviewCount,
                cap = self.initialCaption.length,
                i, fileList,
                caption = (cap > 0) ? self.initialCaption : self.msgSelected.repl('{n}', len);
            if (isArray(content) && len > 0) {
                for (i = 0; i < len; i += 1) {
                    html += self.getInitialPreview(self.previewGenericTemplate, content[i], i);
                }
                if (len > 1 && cap === 0) {
                    caption = self.msgSelected.repl('{n}', len);
                }
            } else {
                if (len > 0) {
                    fileList = content.split(self.initialPreviewDelimiter);
                    for (i = 0; i < len; i += 1) {
                        html += self.getInitialPreview(self.previewGenericTemplate, fileList[i], i);
                    }
                    if (len > 1 && cap === 0) {
                        caption = self.msgSelected.repl('{n}', len);
                    }
                } else {
                    if (cap > 0) {
                        self.setCaption(caption);
                    }
                    return;
                }
            }
            self.initialPreviewContent = html;
            self.$preview.html(html);
            self.setCaption(caption);
            self.$container.removeClass('file-input-new');
        },
        initPreviewDeletes: function() {
            var self = this,
                resetProgress = function() {
                    if (self.$preview.find('.kv-file-remove').length === 0) {
                        self.reset();
                    }
                };
            self.$preview.find('.kv-file-remove').each(function() {
                var $el = $(this),
                    $frame = $el.closest('.file-preview-frame'),
                    vUrl = $el.attr('data-url'),
                    vKey = $el.attr('data-key'),
                    $content;
                if (vUrl === undefined || vKey === undefined) {
                    return;
                }
                $el.off('click').on('click', function() {
                    $.ajax({
                        url: vUrl,
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            key: vKey
                        },
                        beforeSend: function(jqXHR) {
                            addCss($frame, 'file-uploading');
                            addCss($el, 'disabled');
                            self.raise('filepredelete', [vKey, jqXHR]);
                        },
                        success: function(data, textStatus, jqXHR) {
                            if (data.error === undefined) {
                                self.raise('filedeleted', [vKey, jqXHR]);
                            } else {
                                self.showError(data.error, null, $el.attr('id'), vKey, 'filedeleteerror', jqXHR);
                                resetProgress();
                            }
                            $frame.removeClass('file-uploading').addClass('file-deleted');
                            $frame.fadeOut('slow', function() {
                                self.clearObjects($frame);
                                $frame.remove();
                                $content = $(document.createElement('div')).html(self.original.preview);
                                $content.find('.file-preview-frame').each(function() {
                                    var $that = $(this);
                                    /*jshint eqeqeq: false*/
                                    if ($that.find('.kv-file-remove').attr('data-key') == vKey) {
                                        $that.remove();
                                    }
                                    /*jshint eqeqeq: true*/
                                });
                                self.initialPreviewContent = $content.html();
                                if (self.initialPreviewCount > 0) {
                                    self.initialPreviewCount -= 1;
                                }
                                var caption = self.initialCaption;
                                if (self.initialCaption.length === 0) {
                                    caption = self.msgSelected.repl('{n}', self.initialPreviewCount);
                                }
                                self.original.preview = $content.html();
                                self.setCaption(caption);
                                self.original.caption = self.$caption.html();
                                $content.remove();
                                resetProgress();
                            });
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            self.showError(errorThrown, null, $el.attr('id'), vKey, 'filedeleteerror', jqXHR);
                            $frame.removeClass('file-uploading');
                            resetProgress();
                        }
                    });
                });
            });
        },
        clearObjects: function($el) {
            $el.find('video audio').each(function() {
                this.pause();
                $(this).remove();
            });
            $el.find('img object div').each(function() {
                $(this).remove();
            });
        },
        clearFileInput: function() {
            var self = this,
                $el = self.$element,
                $srcFrm, $tmpFrm, $tmpEl;
            if (isEmpty($el.val())) {
                return;
            }
            // Fix for IE ver < 11, that does not clear file inputs
            // Requires a sequence of steps to prevent IE crashing but
            // still allow clearing of the file input.
            if (self.isIE9 || self.isIE10) {
                $srcFrm = $el.closest('form');
                $tmpFrm = $(document.createElement('form'));
                $tmpEl = $(document.createElement('div'));
                $el.before($tmpEl);
                if ($srcFrm.length) {
                    $srcFrm.after($tmpFrm);
                } else {
                    $tmpEl.after($tmpFrm);
                }
                $tmpFrm.append($el).trigger('reset');
                $tmpEl.before($el).remove();
                $tmpFrm.remove();
            } else { // normal input clear behavior for other sane browsers
                $el.val('');
            }
        },
        resetUpload: function() {
            var self = this;
            self.uploadCount = 0;
            self.uploadPercent = 0;
            self.$btnUpload.removeAttr('disabled');
            self.setProgress(0);
            addCss(self.$progress, 'hide');
            self.resetErrors(false);
            self.ajaxRequests = [];
        },
        cancel: function() {
            var self = this,
                xhr = self.ajaxRequests,
                len = xhr.length,
                i;
            if (len > 0) {
                for (i = 0; i < len; i += 1) {
                    xhr[i].abort();
                }
            }
            self.$preview.find('.file-preview-frame').each(function() {
                var $thumb = $(this),
                    ind = $thumb.attr('data-fileindex');
                $thumb.removeClass('file-uploading');
                if (self.filestack[ind] !== undefined) {
                    $thumb.find('.kv-file-upload').removeClass('disabled').removeAttr('disabled');
                    $thumb.find('.kv-file-remove').removeClass('disabled').removeAttr('disabled');
                }
                self.unlock();
            });
        },
        clear: function(trig) {
            var self = this,
                cap;
            if (!self.isIE9 && self.reader instanceof FileReader) {
                self.reader.abort();
            }
            self.$btnUpload.removeAttr('disabled');
            self.resetUpload();
            self.filestack = [];
            self.clearFileInput();
            self.resetErrors(true);

            if (trig !== true) {
                self.raise('change');
                self.raise('fileclear');
            }
            if (self.overwriteInitial) {
                self.initialPreviewCount = 0;
                self.initialPreviewContent = '';
            }
            if (!self.overwriteInitial && self.initialPreviewContent.length > 0) {
                self.showFileIcon();
                self.$preview.html(self.original.preview);
                self.$caption.html(self.original.caption);
                self.setEllipsis();
                self.initPreviewDeletes();
                self.$container.removeClass('file-input-new');
            } else {
                self.$preview.find('.file-preview-frame').each(function() {
                    self.clearObjects($(this));
                });
                self.$preview.html('');
                cap = (!self.overwriteInitial && self.initialCaption.length > 0) ? self.original.caption : '';
                self.$caption.html(cap);
                self.setEllipsis();
                self.$caption.attr('title', '');
                addCss(self.$container, 'file-input-new');
            }
            if (self.$container.find('.file-preview-frame').length === 0) {
                self.initialCaption = '';
                self.original.caption = '';
                self.$caption.html('');
                self.setEllipsis();
                self.$captionContainer.find('.kv-caption-icon').hide();
            }
            self.hideFileIcon();
            self.raise('filecleared');
            self.$captionContainer.focus();
            self.setFileDropZoneTitle();
        },
        reset: function() {
            var self = this;
            self.clear(true);
            self.$preview.html(self.original.preview);
            self.$caption.html(self.original.caption);
            self.setEllipsis();
            self.$container.find('.fileinput-filename').text('');
            self.raise('filereset');
            if (self.initialPreview.length > 0) {
                self.$container.removeClass('file-input-new');
            }
            self.setFileDropZoneTitle();
            if (self.isUploadable) {
                self.resetUpload();
            }
            self.filestack = [];
            self.formdata = {};
        },
        disable: function() {
            var self = this;
            self.isDisabled = true;
            self.raise('filedisabled');
            self.$element.attr('disabled', 'disabled');
            self.$container.find(".kv-fileinput-caption").addClass("file-caption-disabled");
            self.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").attr("disabled", true);
            self.initDragDrop();
        },
        enable: function() {
            var self = this;
            self.isDisabled = false;
            self.raise('fileenabled');
            self.$element.removeAttr('disabled');
            self.$container.find(".kv-fileinput-caption").removeClass("file-caption-disabled");
            self.$container.find(".btn-file, .fileinput-remove, .kv-fileinput-upload").removeAttr("disabled");
            self.initDragDrop();
        },
        getExtraData: function() {
            var self = this,
                data = self.uploadExtraData;
            if (typeof self.uploadExtraData === "function") {
                data = self.uploadExtraData();
            }
            return data;
        },
        uploadExtra: function() {
            var self = this,
                data = self.getExtraData();
            if (data.length === 0) {
                return;
            }
            $.each(data, function(key, value) {
                self.formdata.append(key, value);
            });
        },
        initXhr: function(xhrobj, factor) {
            var self = this;
            if (xhrobj.upload) {
                xhrobj.upload.addEventListener('progress', function(event) {
                    var pct = 0,
                        position = event.loaded || event.position,
                        total = event.total;
                    if (event.lengthComputable) {
                        pct = Math.ceil(position / total * factor);
                    }
                    self.uploadPercent = Math.max(pct, self.uploadPercent);
                    self.setProgress(self.uploadPercent);
                }, false);
            }
            return xhrobj;
        },
        ajaxSubmit: function(fnBefore, fnSuccess, fnComplete, fnError) {
            var self = this,
                settings;
            self.uploadExtra();
            settings = $.extend(self.ajaxSettings, {
                xhr: function() {
                    var xhrobj = $.ajaxSettings.xhr();
                    return self.initXhr(xhrobj, 98);
                },
                url: self.uploadUrl,
                type: 'POST',
                dataType: 'json',
                data: self.formdata,
                cache: false,
                processData: false,
                contentType: false,
                beforeSend: fnBefore,
                success: fnSuccess,
                complete: fnComplete,
                error: fnError
            });
            self.ajaxRequests.push($.ajax(settings));
        },
        uploadSingle: function(i, files, allFiles) {
            var self = this,
                total = self.getFileStack().length,
                formdata = new FormData(),
                outData,
                previewId = self.previewInitId + "-" + i,
                $thumb = $('#' + previewId),
                cap, pct, chkComplete,
                $btnUpload = $thumb.find('.kv-file-upload'),
                $btnDelete = $thumb.find('.kv-file-remove'),
                $indicator = $thumb.find('.file-upload-indicator'),
                config = self.fileActionSettings,
                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
                setIndicator, updateProgress, resetActions, fnBefore, fnSuccess, fnComplete, fnError;
            self.formdata = formdata;
            if (total === 0 || !hasPostData || $btnUpload.hasClass('disabled')) {
                return;
            }
            chkComplete = function() {
                var $thumbs = self.$preview.find('.file-preview-frame.file-uploading'),
                    chk = $thumbs.length;
                if (chk > 0) {
                    return;
                }
                self.setProgress(100);
                self.unlock();
                self.clearFileInput();
                self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);
            };
            setIndicator = function(icon, msg) {
                $indicator.html(config[icon]);
                $indicator.attr('title', config[msg]);
            };
            updateProgress = function() {
                if (!allFiles || total === 0 || self.uploadPercent >= 100) {
                    return;
                }
                self.uploadCount += 1;
                pct = 80 + Math.ceil(self.uploadCount * 20 / total);
                self.uploadPercent = Math.max(pct, self.uploadPercent);
                self.setProgress(self.uploadPercent);
                self.initPreviewDeletes();
            };
            resetActions = function() {
                $btnUpload.removeAttr('disabled');
                $btnDelete.removeAttr('disabled');
                $thumb.removeClass('file-uploading');
            };
            fnBefore = function(jqXHR) {
                outData = self.getOutData(jqXHR);
                setIndicator('indicatorLoading', 'indicatorLoadingTitle');
                addCss($thumb, 'file-uploading');
                $btnUpload.attr('disabled', true);
                $btnDelete.attr('disabled', true);
                if (!allFiles) {
                    self.lock();
                }
                self.raise('filepreupload', [outData, previewId, i]);
            };
            fnSuccess = function(data, textStatus, jqXHR) {
                outData = self.getOutData(jqXHR, data);
                setTimeout(function() {
                    if (data.error === undefined) {
                        setIndicator('indicatorSuccess', 'indicatorSuccessTitle');
                        $btnUpload.hide();
                        $btnDelete.hide();
                        self.filestack[i] = undefined;
                        if (!allFiles) {
                            self.resetFileStack();
                        }
                        self.raise('fileuploaded', [outData, previewId, i]);
                    } else {
                        setIndicator('indicatorError', 'indicatorErrorTitle');
                        self.showUploadError(data.error, outData, previewId, i);
                    }
                }, 100);
            };
            fnComplete = function() {
                setTimeout(function() {
                    updateProgress();
                    resetActions();
                    if (!allFiles) {
                        self.unlock(false);
                    } else {
                        chkComplete();
                    }
                }, 100);
            };
            fnError = function(jqXHR, textStatus, errorThrown) {
                setIndicator('indicatorError', 'indicatorErrorTitle');
                outData = self.getOutData(jqXHR);
                if (allFiles) {
                    cap = files[i].name;
                    self.showUploadError('<b>' + cap + '</b>: ' + errorThrown, outData, previewId, i);
                } else {
                    self.showUploadError(errorThrown, outData, previewId, i);
                }
            };
            formdata.append(self.uploadFileAttr, files[i]);
            formdata.append('file_id', i);
            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
        },
        uploadBatch: function() {
            var self = this,
                files = self.filestack,
                total = files.length,
                config,
                hasPostData = self.filestack.length > 0 || !$.isEmptyObject(self.uploadExtraData),
                setIndicator, setAllUploaded, enableActions, fnBefore, fnSuccess, fnComplete, fnError;
            self.formdata = new FormData();
            if (total === 0 || !hasPostData) {
                return;
            }
            config = self.fileActionSettings;
            setIndicator = function(i, icon, msg) {
                var $indicator = $('#' + self.previewInitId + "-" + i).find('.file-upload-indicator');
                $indicator.html(config[icon]);
                $indicator.attr('title', config[msg]);
            };
            enableActions = function(i) {
                var $thumb = $('#' + self.previewInitId + "-" + i),
                    $btnUpload = $thumb.find('.kv-file-upload'),
                    $btnDelete = $thumb.find('.kv-file-delete');
                $thumb.removeClass('file-uploading');
                $btnUpload.removeAttr('disabled');
                $btnDelete.removeAttr('disabled');
            };
            setAllUploaded = function() {
                $.each(files, function(key, data) {
                    self.filestack[key] = undefined;
                });
                self.clearFileInput();
            };
            fnBefore = function(jqXHR) {
                self.lock();
                var outData = self.getOutData(jqXHR);
                if (!self.showPreview) {
                    return;
                }
                self.$preview.find('.file-preview-frame').each(function() {
                    var $thumb = $(this),
                        $btnUpload = $thumb.find('.kv-file-upload'),
                        $btnDelete = $thumb.find('.kv-file-remove');
                    addCss($thumb, 'file-uploading');
                    $btnUpload.attr('disabled', true);
                    $btnDelete.attr('disabled', true);
                });
                self.raise('filebatchpreupload', [outData]);
            };
            fnSuccess = function(data, textStatus, jqXHR) {
                var outData = self.getOutData(jqXHR, data),
                    keys = isEmpty(data.errorkeys) ? [] : data.errorkeys;
                if (data.error === undefined || isEmpty(data.error)) {
                    self.raise('filebatchuploadsuccess', [outData]);
                    setAllUploaded();
                    if (self.showPreview) {
                        self.$preview.find('.kv-file-upload').hide();
                        self.$preview.find('.kv-file-remove').hide();
                        self.$preview.find('.file-preview-frame').each(function() {
                            var $thumb = $(this),
                                key = $thumb.attr('data-fileindex');
                            setIndicator(key, 'indicatorSuccess', 'indicatorSuccessTitle');
                            enableActions(key);
                        });
                    } else {
                        self.reset();
                    }
                } else {
                    self.$preview.find('.file-preview-frame').each(function() {
                        var $thumb = $(this),
                            key = parseInt($thumb.attr('data-fileindex'), 10);
                        enableActions(key);
                        if (keys.length === 0) {
                            setIndicator(key, 'indicatorError', 'indicatorErrorTitle');
                            return;
                        }
                        if ($.inArray(key, keys) !== -1) {
                            setIndicator(key, 'indicatorError', 'indicatorErrorTitle');
                        } else {
                            $thumb.find('.kv-file-upload').hide();
                            $thumb.find('.kv-file-remove').hide();
                            setIndicator(key, 'indicatorSuccess', 'indicatorSuccessTitle');
                            self.filestack[key] = undefined;
                        }
                    });
                    self.showUploadError(data.error, outData, null, null, 'filebatchuploaderror');
                }
            };
            fnComplete = function() {
                self.setProgress(100);
                self.unlock();
                self.raise('filebatchuploadcomplete', [self.filestack, self.getExtraData()]);
                self.clearFileInput();
            };
            fnError = function(jqXHR, textStatus, errorThrown) {
                var outData = self.getOutData(jqXHR);
                self.showUploadError(errorThrown, outData, null, null, 'filebatchuploaderror');
                self.uploadFileCount = total - 1;
                self.$preview.find('.file-preview-frame').each(function() {
                    var $thumb = $(this),
                        key = $thumb.attr('data-fileindex');
                    $thumb.removeClass('file-uploading');
                    if (self.filestack[key] !== undefined) {
                        setIndicator(key, 'indicatorError', 'indicatorErrorTitle');
                    }
                });
                self.$preview.find('.file-preview-frame').removeClass('file-uploading');
                self.$preview.find('.file-preview-frame kv-file-upload').removeAttr('disabled');
                self.$preview.find('.file-preview-frame kv-file-delete').removeAttr('disabled');
            };
            $.each(files, function(key, data) {
                if (!isEmpty(files[key])) {
                    self.formdata.append(self.uploadFileAttr, data);
                }
            });
            self.ajaxSubmit(fnBefore, fnSuccess, fnComplete, fnError);
        },
        hideFileIcon: function() {
            if (this.overwriteInitial) {
                this.$captionContainer.find('.kv-caption-icon').hide();
            }
        },
        showFileIcon: function() {
            this.$captionContainer.find('.kv-caption-icon').show();
        },
        resetErrors: function(fade) {
            var self = this,
                $error = self.$errorContainer;
            self.isError = false;
            self.$container.removeClass('has-error');
            $error.html('');
            if (fade) {
                $error.fadeOut('slow');
            } else {
                $error.hide();
            }
        },
        showUploadError: function(msg, data, previewId, index, ev) {
            var self = this,
                $error = self.$errorContainer;
            ev = ev || 'fileuploaderror';
            if ($error.find('ul').length === 0) {
                $error.html('<ul class="text-left"><li>' + msg + '</li></ul>');
            } else {
                $error.find('ul').append('<li>' + msg + '</li>');
            }
            $error.fadeIn(800);
            self.raise(ev, [data, previewId, index, self.reader]);
            addCss(self.$container, 'has-error');
            return true;
        },
        showError: function(msg, file, previewId, index, ev, jqXHR) {
            var self = this,
                $error = self.$errorContainer;
            ev = ev || 'fileerror';
            jqXHR = jqXHR || {};
            $error.html(msg);
            $error.fadeIn(800);
            self.raise(ev, [file, previewId, index, self.reader, jqXHR]);
            if (!self.isUploadable) {
                self.clearFileInput();
            }
            addCss(self.$container, 'has-error');
            self.$btnUpload.attr('disabled', true);
            return true;
        },
        errorHandler: function(evt, caption) {
            var self = this,
                err = evt.target.error;
            switch (err.code) {
                case err.NOT_FOUND_ERR:
                    self.addError(self.msgFileNotFound.repl('{name}', caption));
                    break;
                case err.SECURITY_ERR:
                    self.addError(self.msgFileSecured.repl('{name}', caption));
                    break;
                case err.NOT_READABLE_ERR:
                    self.addError(self.msgFileNotReadable.repl('{name}', caption));
                    break;
                case err.ABORT_ERR:
                    self.addError(self.msgFilePreviewAborted.repl('{name}', caption));
                    break;
                default:
                    self.addError(self.msgFilePreviewError.repl('{name}', caption));
            }
        },
        parseFileType: function(file) {
            var self = this,
                isValid, vType, cat, i;
            for (i = 0; i < defaultPreviewTypes.length; i += 1) {
                cat = defaultPreviewTypes[i];
                isValid = isSet(cat, self.fileTypeSettings) ? self.fileTypeSettings[cat] : defaultFileTypeSettings[cat];
                vType = isValid(file.type, file.name) ? cat : '';
                if (!isEmpty(vType)) {
                    return vType;
                }
            }
            return 'other';
        },
        previewDefault: function(file, previewId, isDisabled) {
            if (!this.showPreview) {
                return;
            }
            var self = this,
                data = objUrl.createObjectURL(file),
                $obj = $('#' + previewId),
                config = self.previewSettings.other,
                footer = self.renderFileFooter(file.name, config.width),
                previewOtherTemplate = self.getPreviewTemplate('other'),
                ind = previewId.slice(previewId.lastIndexOf('-') + 1),
                frameClass = '';
            if (isDisabled === true) {
                frameClass = ' btn disabled';
                footer += '<div class="file-other-error text-danger"><i class="glyphicon glyphicon-exclamation-sign"></i></div>';
            }
            self.$preview.append("\n" + previewOtherTemplate
                .repl('{previewId}', previewId)
                .repl('{frameClass}', frameClass)
                .repl('{fileindex}', ind)
                .repl('{caption}', self.slug(file.name))
                .repl('{width}', config.width)
                .repl('{height}', config.height)
                .repl('{type}', file.type)
                .repl('{data}', data)
                .repl('{footer}', footer));
            $obj.on('load', function() {
                objUrl.revokeObjectURL($obj.attr('data'));
            });
        },
        previewFile: function(file, theFile, previewId, data) {
            if (!this.showPreview) {
                return;
            }
            var self = this,
                cat = self.parseFileType(file),
                caption = self.slug(file.name),
                content, strText,
                types = self.allowedPreviewTypes,
                mimes = self.allowedPreviewMimeTypes,
                tmplt = isSet(cat, self.previewTemplates) ? self.previewTemplates[cat] : defaultPreviewTemplates[cat],
                config = isSet(cat, self.previewSettings) ? self.previewSettings[cat] : defaultPreviewSettings[cat],
                wrapLen = parseInt(self.wrapTextLength, 10),
                wrapInd = self.wrapIndicator,
                chkTypes = types.indexOf(cat) >= 0,
                id, height,
                chkMimes = isEmpty(mimes) || (!isEmpty(mimes) && isSet(file.type, mimes)),
                footer = self.renderFileFooter(caption, config.width),
                modal = '',
                ind = previewId.slice(previewId.lastIndexOf('-') + 1);
            if (chkTypes && chkMimes) {
                if (cat === 'text') {
                    strText = htmlEncode(theFile.target.result);
                    objUrl.revokeObjectURL(data);
                    if (strText.length > wrapLen) {
                        id = 'text-' + uniqId();
                        height = window.innerHeight * 0.75;
                        modal = self.getLayoutTemplate('modal').repl('{id}', id)
                            .repl('{title}', caption)
                            .repl('{height}', height)
                            .repl('{body}', strText);
                        wrapInd = wrapInd
                            .repl('{title}', caption)
                            .repl('{dialog}', "$('#" + id + "').modal('show')");
                        strText = strText.substring(0, (wrapLen - 1)) + wrapInd;
                    }
                    content = tmplt.repl('{previewId}', previewId).repl('{caption}', caption)
                        .repl('{frameClass}', '')
                        .repl('{type}', file.type).repl('{width}', config.width)
                        .repl('{height}', config.height).repl('{data}', strText)
                        .repl('{footer}', footer).repl('{fileindex}', ind) + modal;
                } else {
                    content = tmplt.repl('{previewId}', previewId).repl('{caption}', caption)
                        .repl('{frameClass}', '')
                        .repl('{type}', file.type).repl('{data}', data)
                        .repl('{width}', config.width).repl('{height}', config.height)
                        .repl('{footer}', footer).repl('{fileindex}', ind);
                }
                self.$preview.append("\n" + content);
                self.autoSizeImage(previewId);
            } else {
                self.previewDefault(file, previewId);
            }
        },
        slugDefault: function(text) {
            return isEmpty(text) ? '' : text.split(/(\\|\/)/g).pop().replace(/[^\w\-.\\\/ ]+/g, '');
        },
        getFileStack: function() {
            var self = this;
            return self.filestack.filter(function(n) {
                return n !== undefined;
            });
        },
        readFiles: function(files) {
            this.reader = new FileReader();
            var self = this,
                $el = self.$element,
                $preview = self.$preview,
                reader = self.reader,
                $container = self.$previewContainer,
                $status = self.$previewStatus,
                msgLoading = self.msgLoading,
                msgProgress = self.msgProgress,
                previewInitId = self.previewInitId,
                numFiles = files.length,
                settings = self.fileTypeSettings,
                ctr = self.filestack.length,
                throwError = function(msg, file, previewId, index) {
                    self.previewDefault(file, previewId, true);
                    var outData = self.getOutData({}, {}, files);
                    return self.isUploadable ? self.showUploadError(msg, outData, previewId,
                        index) : self.showError(msg, file, previewId, index);
                };

            function readFile(i) {
                if (isEmpty($el.attr('multiple'))) {
                    numFiles = 1;
                }
                if (i >= numFiles) {
                    $container.removeClass('loading');
                    $status.html('');
                    return;
                }
                var node = ctr + i,
                    previewId = previewInitId + "-" + node,
                    isText,
                    file = files[i],
                    caption = self.slug(file.name),
                    fileSize = (file.size || 0) / 1000,
                    checkFile, fileExtExpr = '',
                    previewData = objUrl.createObjectURL(file),
                    fileCount = 0,
                    j, msg, typ, chk,
                    fileTypes = self.allowedFileTypes,
                    strTypes = isEmpty(fileTypes) ? '' : fileTypes.join(', '),
                    fileExt = self.allowedFileExtensions,
                    strExt = isEmpty(fileExt) ? '' : fileExt.join(', ');
                if (!isEmpty(fileExt)) {
                    fileExtExpr = new RegExp('\\.(' + fileExt.join('|') + ')$', 'i');
                }
                fileSize = fileSize.toFixed(2);
                if (self.maxFileSize > 0 && fileSize > self.maxFileSize) {
                    msg = self.msgSizeTooLarge.repl('{name}', caption)
                        .repl('{size}', fileSize)
                        .repl('{maxSize}', self.maxFileSize);
                    self.isError = throwError(msg, file, previewId, i);
                    return;
                }
                if (!isEmpty(fileTypes) && isArray(fileTypes)) {
                    for (j = 0; j < fileTypes.length; j += 1) {
                        typ = fileTypes[j];
                        checkFile = settings[typ];
                        chk = (checkFile !== undefined && checkFile(file.type, caption));
                        fileCount += isEmpty(chk) ? 0 : chk.length;
                    }
                    if (fileCount === 0) {
                        msg = self.msgInvalidFileType.repl('{name}', caption).repl('{types}', strTypes);
                        self.isError = throwError(msg, file, previewId, i);
                        return;
                    }
                }
                if (fileCount === 0 && !isEmpty(fileExt) && isArray(fileExt) && !isEmpty(fileExtExpr)) {
                    chk = caption.match(fileExtExpr);
                    fileCount += isEmpty(chk) ? 0 : chk.length;
                    if (fileCount === 0) {
                        msg = self.msgInvalidFileExtension.repl('{name}', caption).repl('{extensions}',
                            strExt);
                        self.isError = throwError(msg, file, previewId, i);
                        return;
                    }
                }
                if (!self.showPreview) {
                    self.filestack.push(file);
                    setTimeout(readFile(i + 1), 100);
                    self.raise('fileloaded', [file, previewId, i, reader]);
                    return;
                }
                if ($preview.length > 0 && FileReader !== undefined) {
                    $status.html(msgLoading.repl('{index}', i + 1).repl('{files}', numFiles));
                    $container.addClass('loading');
                    reader.onerror = function(evt) {
                        self.errorHandler(evt, caption);
                    };
                    reader.onload = function(theFile) {
                        self.previewFile(file, theFile, previewId, previewData);
                        self.initFileActions();
                    };
                    reader.onloadend = function() {
                        msg = msgProgress
                            .repl('{index}', i + 1).repl('{files}', numFiles)
                            .repl('{percent}', 50).repl('{name}', caption);
                        setTimeout(function() {
                            $status.html(msg);
                            objUrl.revokeObjectURL(previewData);
                        }, 100);
                        setTimeout(function() {
                            readFile(i + 1);
                            self.updateFileDetails(numFiles);
                        }, 100);
                        self.raise('fileloaded', [file, previewId, i, reader]);
                    };
                    reader.onprogress = function(data) {
                        if (data.lengthComputable) {
                            var fact = (data.loaded / data.total) * 100,
                                progress = Math.ceil(fact);
                            msg = msgProgress.repl('{index}', i + 1).repl('{files}', numFiles)
                                .repl('{percent}', progress).repl('{name}', caption);
                            setTimeout(function() {
                                $status.html(msg);
                            }, 100);
                        }
                    };
                    isText = isSet('text', settings) ? settings.text : defaultFileTypeSettings.text;
                    if (isText(file.type, caption)) {
                        reader.readAsText(file, self.textEncoding);
                    } else {
                        reader.readAsArrayBuffer(file);
                    }
                } else {
                    self.previewDefault(file, previewId);
                    setTimeout(function() {
                        readFile(i + 1);
                        self.updateFileDetails(numFiles);
                    }, 100);
                    self.raise('fileloaded', [file, previewId, i, reader]);
                }
                self.filestack.push(file);
            }

            readFile(0);
            self.updateFileDetails(numFiles, false);
        },
        updateFileDetails: function(numFiles) {
            var self = this,
                msgSelected = self.msgSelected,
                $el = self.$element,
                fileStack = self.getFileStack(),
                name = $el.val() || (fileStack.length && fileStack[0].name) || '',
                label = self.slug(name),
                n = self.isUploadable ? fileStack.length : numFiles,
                nFiles = self.initialPreviewCount + n,
                log = n > 1 ? msgSelected.repl('{n}', nFiles) : label;
            if (self.isError) {
                self.$previewContainer.removeClass('loading');
                self.$previewStatus.html('');
                self.$captionContainer.find('.kv-caption-icon').hide();
                log = self.msgValidationError;
            } else {
                self.showFileIcon();
            }
            self.setCaption(log);
            self.$container.removeClass('file-input-new file-input-ajax-new');
            if (arguments.length === 1) {
                self.raise('fileselect', [numFiles, label]);
            }
        },
        change: function(e) {
            var self = this,
                $el = self.$element,
                tfiles, msg,
                total, $preview = self.$preview,
                isDragDrop = arguments.length > 1,
                files = isDragDrop ? e.originalEvent.dataTransfer.files : $el.get(0).files,
                isSingleUpload = isEmpty($el.attr('multiple')),
                ctr = self.filestack.length,
                isAjaxUpload = (self.isUploadable && ctr !== 0),
                throwError = function(mesg, file, previewId, index) {
                    var outData = self.getOutData({}, {}, files);
                    return self.isUploadable ? self.showUploadError(mesg, outData, previewId,
                        index) : self.showError(mesg, file, previewId, index);
                };
            self.resetUpload();
            self.hideFileIcon();
            self.$container.find('.file-drop-zone .' + self.dropZoneTitleClass).remove();
            if (isDragDrop) {
                tfiles = files;
            } else {
                if (e.target.files === undefined) {
                    tfiles = e.target && e.target.value ? [{
                        name: e.target.value.replace(/^.+\\/, '')
                    }] : [];
                } else {
                    tfiles = e.target.files;
                }
            }
            if (isEmpty(tfiles) || tfiles.length === 0) {
                if (!isAjaxUpload) {
                    self.clear(true);
                }
                self.raise('fileselectnone');
                return;
            }
            self.resetErrors();
            if (!isAjaxUpload || (isSingleUpload && ctr > 0)) {
                if (!self.overwriteInitial) {
                    $preview.html(self.initialPreviewContent);
                } else {
                    $preview.html('');
                }
                if (isSingleUpload && ctr > 0) {
                    self.filestack = [];
                }
            }
            total = self.isUploadable ? self.getFileStack().length + tfiles.length : tfiles.length;
            if (self.maxFileCount > 0 && total > self.maxFileCount) {
                msg = self.msgFilesTooMany.repl('{m}', self.maxFileCount).repl('{n}', total);
                self.isError = throwError(msg, null, null, null);
                self.$captionContainer.find('.kv-caption-icon').hide();
                self.$caption.html(self.msgValidationError);
                self.setEllipsis();
                self.$container.removeClass('file-input-new file-input-ajax-new');
                return;
            }
            if (!self.isIE9) {
                self.readFiles(files);
            } else {
                self.updateFileDetails(1);
            }
            if (isAjaxUpload) {
                self.raise('filebatchselected', [self.getFileStack()]);
            } else {
                self.raise('filebatchselected', [tfiles]);
            }
            self.reader = null;
        },
        autoSizeImage: function(previewId) {
            var self = this,
                $preview = self.$preview,
                $thumb = $preview.find("#" + previewId),
                $img = $thumb.find('img'),
                w1, w2, $cap;
            if (!$img.length) {
                return;
            }
            $img.on('load', function() {
                w1 = $thumb.width();
                w2 = $preview.width();
                if (w1 > w2) {
                    $img.css('width', '100%');
                    $thumb.css('width', '97%');
                }
                $cap = $img.closest('.file-preview-frame').find('.file-caption-name');
                if ($cap.length) {
                    $cap.width($img.width());
                    $cap.attr('title', $cap.text());
                }
                self.raise('fileimageloaded', previewId);
            });
        },
        setCaption: function(content) {
            var self = this,
                title = $('<div>' + content + '</div>').text(),
                icon = self.getLayoutTemplate('icon'),
                out = icon + title;
            if (self.$caption.length === 0) {
                return;
            }
            self.$caption.html(out);
            self.$caption.attr('title', title);
            self.$captionContainer.find('.file-caption-ellipsis').attr('title', title);
            self.setEllipsis();
        },
        initBrowse: function($container) {
            var self = this;
            self.$btnFile = $container.find('.btn-file');
            self.$btnFile.append(self.$element);
        },
        createContainer: function() {
            var self = this,
                $container = $(document.createElement("span"))
                .attr({
                    "class": 'file-input file-input-new'
                })
                .html(self.renderMain());
            self.$element.before($container);
            self.initBrowse($container);
            return $container;
        },
        refreshContainer: function() {
            var self = this,
                $container = self.$container;
            $container.before(self.$element);
            $container.html(self.renderMain());
            self.initBrowse($container);
        },
        renderMain: function() {
            var self = this,
                dropCss = (self.isUploadable && self.dropZoneEnabled) ? ' file-drop-zone' : '',
                preview = self.showPreview ? self.getLayoutTemplate('preview').repl('{class}', self.previewClass)
                .repl('{dropClass}', dropCss) : '',
                css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass,
                caption = self.captionTemplate.repl('{class}', css + ' kv-fileinput-caption');
            return self.mainTemplate.repl('{class}', self.mainClass)
                .repl('{preview}', preview)
                .repl('{caption}', caption)
                .repl('{upload}', self.renderUpload())
                .repl('{remove}', self.renderRemove())
                .repl('{cancel}', self.renderCancel())
                .repl('{browse}', self.renderBrowse());
        },
        renderBrowse: function() {
            var self = this,
                css = self.browseClass + ' btn-file',
                status = '';
            if (self.isDisabled) {
                status = ' disabled ';
            }
            return '<div class="' + css + '"' + status + '> ' + self.browseIcon + self.browseLabel + ' </div>';
        },
        renderRemove: function() {
            var self = this,
                css = self.removeClass + ' fileinput-remove fileinput-remove-button',
                status = '';
            if (!self.showRemove) {
                return '';
            }
            if (self.isDisabled) {
                status = ' disabled ';
            }
            return '<button type="button" title="' + self.removeTitle + '" class="' + css + '"' + status + '>' + self.removeIcon + self.removeLabel + '</button>';
        },
        renderCancel: function() {
            var self = this,
                css = self.cancelClass + ' fileinput-cancel fileinput-cancel-button';
            if (!self.showCancel) {
                return '';
            }
            return '<button type="button" title="' + self.cancelTitle + '" class="hide ' + css + '">' + self.cancelIcon + self.cancelLabel + '</button>';
        },
        renderUpload: function() {
            var self = this,
                css = self.uploadClass + ' kv-fileinput-upload fileinput-upload-button',
                content = '',
                status = '';
            if (!self.showUpload) {
                return '';
            }
            if (self.isDisabled) {
                status = ' disabled ';
            }
            if (!self.isUploadable || self.isDisabled) {
                content = '<button type="submit" title="' + self.uploadTitle + '"class="' + css + '"' + status + '>' + self.uploadIcon + self.uploadLabel + '</button>';
            } else {
                content = '<a href="' + self.uploadUrl + '" title="' + self.uploadTitle + '" class="' + css + '"' + status + '>' + self.uploadIcon + self.uploadLabel + '</a>';
            }
            return content;
        }
    };

    //FileInput plugin definition
    $.fn.fileinput = function(option) {
        if (!hasFileAPISupport() && !isIE(9)) {
            return;
        }

        var args = Array.apply(null, arguments);
        args.shift();
        return this.each(function() {
            var $this = $(this),
                data = $this.data('fileinput'),
                options = typeof option === 'object' && option;

            if (!data) {
                data = new FileInput(this, $.extend({}, $.fn.fileinput.defaults, options, $(this).data()));
                $this.data('fileinput', data);
            }

            if (typeof option === 'string') {
                data[option].apply(data, args);
            }
        });
    };

    $.fn.fileinput.defaults = {
        showCaption: true,
        showPreview: true,
        showRemove: true,
        showUpload: true,
        showCancel: true,
        mainClass: '',
        previewClass: '',
        captionClass: '',
        mainTemplate: null,
        initialCaption: '',
        initialPreview: '',
        initialPreviewCount: 0,
        initialPreviewDelimiter: '*$$*',
        initialPreviewConfig: [],
        initialPreviewShowDelete: true,
        overwriteInitial: true,
        layoutTemplates: defaultLayoutTemplates,
        previewTemplates: defaultPreviewTemplates,
        allowedPreviewTypes: defaultPreviewTypes,
        allowedPreviewMimeTypes: null,
        allowedFileTypes: null,
        allowedFileExtensions: null,
        customLayoutTags: {},
        customPreviewTags: {},
        previewSettings: defaultPreviewSettings,
        fileTypeSettings: defaultFileTypeSettings,
        browseLabel: 'Browse &hellip;',
        browseIcon: '<i class="w2ui-icon-folder"></i> &nbsp;',
        browseClass: 'btn btn-blue',
        removeLabel: 'Remove',
        removeTitle: 'Clear selected files',
        removeIcon: '<i class="w2ui-icon-trash"></i> ',
        removeClass: 'btn btn-red',
        cancelLabel: 'Cancel',
        cancelTitle: 'Abort ongoing upload',
        cancelIcon: '<i class="w2ui-icon-ban"></i> ',
        cancelClass: 'btn btn-red',
        uploadLabel: 'Upload',
        uploadTitle: 'Upload selected files',
        uploadIcon: '<i class="w2ui-icon-upload"></i> ',
        uploadClass: 'btn btn-orange',
        uploadUrl: null,
        uploadExtraData: [],
        uploadAsync: true,
        maxFileSize: 0,
        maxFileCount: 0,
        msgSizeTooLarge: 'File "{name}" (<b>{size} KB</b>) exceeds maximum allowed upload size of <b>{maxSize} KB</b>. Please retry your upload!',
        msgFilesTooMany: 'Number of files selected for upload <b>({n})</b> exceeds maximum allowed limit of <b>{m}</b>. Please retry your upload!',
        msgFileNotFound: 'File "{name}" not found!',
        msgFileSecured: 'Security restrictions prevent reading the file "{name}".',
        msgFileNotReadable: 'File "{name}" is not readable.',
        msgFilePreviewAborted: 'File preview aborted for "{name}".',
        msgFilePreviewError: 'An error occurred while reading the file "{name}".',
        msgInvalidFileType: 'Invalid type for file "{name}". Only "{types}" files are supported.',
        msgInvalidFileExtension: 'Invalid extension for file "{name}". Only "{extensions}" files are supported.',
        msgValidationError: '<span class="text-danger"><i class="glyphicon glyphicon-exclamation-sign"></i> File Upload Error</span>',
        msgErrorClass: 'file-error-message',
        msgLoading: 'Loading  file {index} of {files} &hellip;',
        msgProgress: 'Loading file {index} of {files} - {name} - {percent}% completed.',
        msgSelected: '{n} files selected',
        progressClass: "progress-bar progress-bar-success progress-bar-striped active",
        progressCompleteClass: "progress-bar progress-bar-success",
        previewFileType: 'image',
        wrapTextLength: 250,
        wrapIndicator: ' <span class="wrap-indicator" title="{title}" onclick="{dialog}">[&hellip;]</span>',
        elCaptionContainer: null,
        elCaptionText: null,
        elPreviewContainer: null,
        elPreviewImage: null,
        elPreviewStatus: null,
        elErrorContainer: null,
        slugCallback: null,
        dropZoneEnabled: true,
        dropZoneTitle: 'Drag & drop files here &hellip;',
        dropZoneTitleClass: 'file-drop-zone-title',
        fileActionSettings: {},
        otherActionButtons: '',
        textEncoding: 'UTF-8',
        ajaxSettings: {}
    };

    $.fn.fileinput.Constructor = FileInput;

    /**
     * Convert automatically file inputs with class 'file'
     * into a bootstrap fileinput control.
     */
    $(document).ready(function() {
        var $input = $('input.file[type=file]'),
            count = $input.attr('type') ? $input.length : 0;
        if (count > 0) {
            $input.fileinput();
        }
    });
})(window.jQuery);

//
// backbone.stickit - v0.8.0
// The MIT License
// Copyright (c) 2012 The New York Times, CMS Group, Matthew DeLambo <delambo@gmail.com> 
//
// Backbone.Stickit v0.8.0, MIT Licensed
// Copyright (c) 2012 The New York Times, CMS Group, Matthew DeLambo <delambo@gmail.com>

(function(factory) {

    // Set up Stickit appropriately for the environment. Start with AMD.
    if (typeof define === 'function' && define.amd) {
        define(['underscore', 'backbone', 'exports'], factory);
    }

    // Next for Node.js or CommonJS.
    else if (typeof exports === 'object') {
        factory(_, Backbone, exports);
    }

    // Finally, as a browser global.
    else {
        factory(_, Backbone, {});
    }

}(function(_, Backbone, Stickit) {

    // Stickit Namespace
    // --------------------------

    Stickit._handlers = [];

    Stickit.addHandler = function(handlers) {
        // Fill-in default values.
        handlers = _.map(_.flatten([handlers]), function(handler) {
            return _.extend({
                updateModel: true,
                updateView: true,
                updateMethod: 'text'
            }, handler);
        });
        this._handlers = this._handlers.concat(handlers);
    };

    // Backbone.View Mixins
    // --------------------

    Stickit.ViewMixin = {

        // Collection of model event bindings.
        //   [{model,event,fn,config}, ...]
        _modelBindings: null,

        // Unbind the model and event bindings from `this._modelBindings` and
        // `this.$el`. If the optional `model` parameter is defined, then only
        // delete bindings for the given `model` and its corresponding view events.
        unstickit: function(model, bindingSelector) {
            // Support bindings hash in place of selector.
            if (_.isObject(bindingSelector)) {
                _.each(_.keys(bindingSelector), function(selector) {
                    this.unstickit(model, selector);
                }, this);
                return;
            }

            var models = [],
                destroyFns = [];
            _.each(this._modelBindings, function(binding, i) {
                if (model && binding.model !== model) {
                    return;
                }
                if (bindingSelector && binding.config.selector != bindingSelector) return;
                destroyFns.push(binding.config._destroy);
                binding.model.off(binding.event, binding.fn);
                models.push(binding.model);
                delete this._modelBindings[i];
            }, this);

            // Trigger an event for each model that was unbound.
            _.invoke(_.uniq(models), 'trigger', 'stickit:unstuck', this.cid);
            // Call `_destroy` on a unique list of the binding callbacks.
            _.each(_.uniq(destroyFns), function(fn) {
                fn.call(this);
            }, this);
            // Cleanup the null values.
            this._modelBindings = _.compact(this._modelBindings);

            this.$el.off('.stickit' + (model ? '.' + model.cid : ''), bindingSelector);
        },

        // Using `this.bindings` configuration or the `optionalBindingsConfig`, binds `this.model`
        // or the `optionalModel` to elements in the view.
        stickit: function(optionalModel, optionalBindingsConfig) {
            var model = optionalModel || this.model,
                bindings = optionalBindingsConfig || _.result(this, "bindings") || {};

            this._modelBindings || (this._modelBindings = []);

            // Iterate through the selectors in the bindings configuration and configure
            // the various options for each field.
            this.addBinding(model, bindings);

            // Wrap `view.remove` to unbind stickit model and dom events.
            var remove = this.remove;
            if (!remove.stickitWrapped)
                this.remove = function() {
                    var ret = this;
                    this.unstickit();
                    if (remove) ret = remove.apply(this, arguments);
                    return ret;
                };
            this.remove.stickitWrapped = true;
        },

        // Add a single model binding to the view
        addBinding: function(optionalModel, second, _binding) {
            var $el, options, modelAttr, config, selector,
                model = optionalModel || this.model,
                namespace = '.stickit.' + model.cid,
                binding = _binding || {},
                bindId = _.uniqueId();

            // Allow jQuery-style {key: val} event maps
            if (_.isString(second)) {
                selector = second;
            } else {
                var bindings = second;
                _.each(bindings, function(v, selector) {
                    this.addBinding(model, selector, bindings[selector]);
                }, this);
                return;
            }

            // Support ':el' selector - special case selector for the view managed delegate.
            $el = selector === ':el' ? this.$el : this.$(selector);

            this.unstickit(model, selector);

            // Fail fast if the selector didn't match an element.
            if (!$el.length) return;

            // Allow shorthand setting of model attributes - `'selector':'observe'`.
            if (_.isString(binding)) binding = {
                observe: binding
            };

            // Handle case where `observe` is in the form of a function.
            if (_.isFunction(binding.observe)) binding.observe = binding.observe.call(this);

            config = getConfiguration($el, binding);
            config.selector = selector;
            modelAttr = config.observe;

            // Create the model set options with a unique `bindId` so that we
            // can avoid double-binding in the `change:attribute` event handler.
            config.bindId = bindId;

            // Add a reference to the view for handlers of stickitChange events
            config.view = this;
            options = _.extend({
                stickitChange: config
            }, config.setOptions);

            // Add a `_destroy` callback to the configuration, in case `destroy`
            // is a named function and we need a unique function when unsticking.
            config._destroy = function() {
                applyViewFn(this, config.destroy, $el, model, config);
            };

            initializeAttributes(this, $el, config, model, modelAttr);

            initializeVisible(this, $el, config, model, modelAttr);

            if (modelAttr) {
                // Setup one-way, form element to model, bindings.
                _.each(config.events, function(type) {
                    var event = type + namespace;
                    var method = function(event) {
                        var val = config.getVal.call(this, $el, event, config, _.rest(arguments));
                        // Don't update the model if false is returned from the `updateModel` configuration.
                        if (evaluateBoolean(this, config.updateModel, val, event, config))
                            setAttr(model, modelAttr, val, options, this, config);
                    };
                    method = _.bind(method, this);
                    if (selector === ':el') this.$el.on(event, method);
                    else this.$el.on(event, selector, method);
                }, this);

                // Setup a `change:modelAttr` observer to keep the view element in sync.
                // `modelAttr` may be an array of attributes or a single string value.
                _.each(_.flatten([modelAttr]), function(attr) {
                    observeModelEvent(model, this, 'change:' + attr, config, function(model, val, options) {
                        var changeId = options && options.stickitChange && options.stickitChange.bindId || null;
                        if (changeId !== bindId)
                            updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model);
                    });
                }, this);

                updateViewBindEl(this, $el, config, getAttr(model, modelAttr, config, this), model, true);
            }

            // After each binding is setup, call the `initialize` callback.
            applyViewFn(this, config.initialize, $el, model, config);
        }
    };

    _.extend(Backbone.View.prototype, Stickit.ViewMixin);

    // Helpers
    // -------

    // Evaluates the given `path` (in object/dot-notation) relative to the given
    // `obj`. If the path is null/undefined, then the given `obj` is returned.
    var evaluatePath = function(obj, path) {
        var parts = (path || '').split('.');
        var result = _.reduce(parts, function(memo, i) {
            return memo[i];
        }, obj);
        return result == null ? obj : result;
    };

    // If the given `fn` is a string, then view[fn] is called, otherwise it is
    // a function that should be executed.
    var applyViewFn = function(view, fn) {
        if (fn) return (_.isString(fn) ? evaluatePath(view, fn) : fn).apply(view, _.rest(arguments, 2));
    };

    var getSelectedOption = function($select) {
        return $select.find('option').not(function() {
            return !this.selected;
        });
    };

    // Given a function, string (view function reference), or a boolean
    // value, returns the truthy result. Any other types evaluate as false.
    var evaluateBoolean = function(view, reference) {
        if (_.isBoolean(reference)) return reference;
        else if (_.isFunction(reference) || _.isString(reference))
            return applyViewFn.apply(this, arguments);
        return false;
    };

    // Setup a model event binding with the given function, and track the event
    // in the view's _modelBindings.
    var observeModelEvent = function(model, view, event, config, fn) {
        model.on(event, fn, view);
        view._modelBindings.push({
            model: model,
            event: event,
            fn: fn,
            config: config
        });
    };

    // Prepares the given `val`ue and sets it into the `model`.
    var setAttr = function(model, attr, val, options, context, config) {
        var value = {};
        if (config.onSet)
            val = applyViewFn(context, config.onSet, val, config);

        if (config.set)
            applyViewFn(context, config.set, attr, val, options, config);
        else {
            value[attr] = val;
            // If `observe` is defined as an array and `onSet` returned
            // an array, then map attributes to their values.
            if (_.isArray(attr) && _.isArray(val)) {
                value = _.reduce(attr, function(memo, attribute, index) {
                    memo[attribute] = _.has(val, index) ? val[index] : null;
                    return memo;
                }, {});
            }
            model.set(value, options);
        }
    };

    // Returns the given `attr`'s value from the `model`, escaping and
    // formatting if necessary. If `attr` is an array, then an array of
    // respective values will be returned.
    var getAttr = function(model, attr, config, context) {
        var val,
            retrieveVal = function(field) {
                return model[config.escape ? 'escape' : 'get'](field);
            },
            sanitizeVal = function(val) {
                return val == null ? '' : val;
            };
        val = _.isArray(attr) ? _.map(attr, retrieveVal) : retrieveVal(attr);
        if (config.onGet) val = applyViewFn(context, config.onGet, val, config);
        return _.isArray(val) ? _.map(val, sanitizeVal) : sanitizeVal(val);
    };

    // Find handlers in `Backbone.Stickit._handlers` with selectors that match
    // `$el` and generate a configuration by mixing them in the order that they
    // were found with the given `binding`.
    var getConfiguration = Stickit.getConfiguration = function($el, binding) {
        var handlers = [{
            updateModel: false,
            updateMethod: 'text',
            update: function($el, val, m, opts) {
                if ($el[opts.updateMethod]) $el[opts.updateMethod](val);
            },
            getVal: function($el, e, opts) {
                return $el[opts.updateMethod]();
            }
        }];
        handlers = handlers.concat(_.filter(Stickit._handlers, function(handler) {
            return $el.is(handler.selector);
        }));
        handlers.push(binding);
        var config = _.extend.apply(_, handlers);
        // `updateView` is defaulted to false for configutrations with
        // `visible`; otherwise, `updateView` is defaulted to true.
        if (config.visible && !_.has(config, 'updateView')) config.updateView = false;
        else if (!_.has(config, 'updateView')) config.updateView = true;
        return config;
    };

    // Setup the attributes configuration - a list that maps an attribute or
    // property `name`, to an `observe`d model attribute, using an optional
    // `onGet` formatter.
    //
    //     attributes: [{
    //       name: 'attributeOrPropertyName',
    //       observe: 'modelAttrName'
    //       onGet: function(modelAttrVal, modelAttrName) { ... }
    //     }, ...]
    //
    var initializeAttributes = function(view, $el, config, model, modelAttr) {
        var props = ['autofocus', 'autoplay', 'async', 'checked', 'controls', 'defer', 'disabled', 'hidden', 'indeterminate', 'loop', 'multiple', 'open', 'readonly', 'required', 'scoped', 'selected'];

        _.each(config.attributes || [], function(attrConfig) {
            var lastClass = '',
                observed, updateAttr;
            attrConfig = _.clone(attrConfig);
            observed = attrConfig.observe || (attrConfig.observe = modelAttr),
                updateAttr = function() {
                    var updateType = _.indexOf(props, attrConfig.name, true) > -1 ? 'prop' : 'attr',
                        val = getAttr(model, observed, attrConfig, view);
                    // If it is a class then we need to remove the last value and add the new.
                    if (attrConfig.name === 'class') {
                        $el.removeClass(lastClass).addClass(val);
                        lastClass = val;
                    } else $el[updateType](attrConfig.name, val);
                };
            _.each(_.flatten([observed]), function(attr) {
                observeModelEvent(model, view, 'change:' + attr, config, updateAttr);
            });
            updateAttr();
        });
    };

    // If `visible` is configured, then the view element will be shown/hidden
    // based on the truthiness of the modelattr's value or the result of the
    // given callback. If a `visibleFn` is also supplied, then that callback
    // will be executed to manually handle showing/hiding the view element.
    //
    //     observe: 'isRight',
    //     visible: true, // or function(val, options) {}
    //     visibleFn: function($el, isVisible, options) {} // optional handler
    //
    var initializeVisible = function(view, $el, config, model, modelAttr) {
        if (config.visible == null) return;
        var visibleCb = function() {
            var visible = config.visible,
                visibleFn = config.visibleFn,
                val = getAttr(model, modelAttr, config, view),
                isVisible = !!val;
            // If `visible` is a function then it should return a boolean result to show/hide.
            if (_.isFunction(visible) || _.isString(visible)) isVisible = !!applyViewFn(view, visible, val, config);
            // Either use the custom `visibleFn`, if provided, or execute the standard show/hide.
            if (visibleFn) applyViewFn(view, visibleFn, $el, isVisible, config);
            else {
                $el.toggle(isVisible);
            }
        };
        _.each(_.flatten([modelAttr]), function(attr) {
            observeModelEvent(model, view, 'change:' + attr, config, visibleCb);
        });
        visibleCb();
    };

    // Update the value of `$el` using the given configuration and trigger the
    // `afterUpdate` callback. This action may be blocked by `config.updateView`.
    //
    //     update: function($el, val, model, options) {},  // handler for updating
    //     updateView: true, // defaults to true
    //     afterUpdate: function($el, val, options) {} // optional callback
    //
    var updateViewBindEl = function(view, $el, config, val, model, isInitializing) {
        if (!evaluateBoolean(view, config.updateView, val, config)) return;
        applyViewFn(view, config.update, $el, val, model, config);
        if (!isInitializing) applyViewFn(view, config.afterUpdate, $el, val, config);
    };

    // Default Handlers
    // ----------------

    Stickit.addHandler([{
        selector: '[contenteditable="true"]',
        updateMethod: 'html',
        events: ['input', 'change']
    }, {
        selector: 'input',
        events: ['propertychange', 'input', 'change'],
        update: function($el, val) {
            $el.val(val);
        },
        getVal: function($el) {
            return $el.val();
        }
    }, {
        selector: 'textarea',
        events: ['propertychange', 'input', 'change'],
        update: function($el, val) {
            $el.val(val);
        },
        getVal: function($el) {
            return $el.val();
        }
    }, {
        selector: 'input[type="radio"]',
        events: ['change'],
        update: function($el, val) {
            $el.filter('[value="' + val + '"]').prop('checked', true);
        },
        getVal: function($el) {
            return $el.filter(':checked').val();
        }
    }, {
        selector: 'input[type="checkbox"]',
        events: ['change'],
        update: function($el, val, model, options) {
            if ($el.length > 1) {
                // There are multiple checkboxes so we need to go through them and check
                // any that have value attributes that match what's in the array of `val`s.
                val || (val = []);
                $el.each(function(i, el) {
                    var checkbox = Backbone.$(el);
                    var checked = _.indexOf(val, checkbox.val()) > -1;
                    checkbox.prop('checked', checked);
                });
            } else {
                var checked = _.isBoolean(val) ? val : val === $el.val();
                $el.prop('checked', checked);
            }
        },
        getVal: function($el) {
            var val;
            if ($el.length > 1) {
                val = _.reduce($el, function(memo, el) {
                    var checkbox = Backbone.$(el);
                    if (checkbox.prop('checked')) memo.push(checkbox.val());
                    return memo;
                }, []);
            } else {
                val = $el.prop('checked');
                // If the checkbox has a value attribute defined, then
                // use that value. Most browsers use "on" as a default.
                var boxval = $el.val();
                if (boxval !== 'on' && boxval != null) {
                    val = val ? $el.val() : null;
                }
            }
            return val;
        }
    }, {
        selector: 'select',
        events: ['change'],
        update: function($el, val, model, options) {
            var optList,
                selectConfig = options.selectOptions,
                list = selectConfig && selectConfig.collection || undefined,
                isMultiple = $el.prop('multiple');

            // If there are no `selectOptions` then we assume that the `<select>`
            // is pre-rendered and that we need to generate the collection.
            if (!selectConfig) {
                selectConfig = {};
                var getList = function($el) {
                    return $el.map(function() {
                        return {
                            value: this.value,
                            label: this.text
                        };
                    }).get();
                };
                if ($el.find('optgroup').length) {
                    list = {
                        opt_labels: []
                    };
                    // Search for options without optgroup
                    if ($el.find('> option').length) {
                        list.opt_labels.push(undefined);
                        _.each($el.find('> option'), function(el) {
                            list[undefined] = getList(Backbone.$(el));
                        });
                    }
                    _.each($el.find('optgroup'), function(el) {
                        var label = Backbone.$(el).attr('label');
                        list.opt_labels.push(label);
                        list[label] = getList(Backbone.$(el).find('option'));
                    });
                } else {
                    list = getList($el.find('option'));
                }
            }

            // Fill in default label and path values.
            selectConfig.valuePath = selectConfig.valuePath || 'value';
            selectConfig.labelPath = selectConfig.labelPath || 'label';

            var addSelectOptions = function(optList, $el, fieldVal) {
                _.each(optList, function(obj) {
                    var option = Backbone.$('<option/>'),
                        optionVal = obj;

                    var fillOption = function(text, val) {
                        option.text(text);
                        optionVal = val;
                        // Save the option value as data so that we can reference it later.
                        option.data('stickit_bind_val', optionVal);
                        if (!_.isArray(optionVal) && !_.isObject(optionVal)) option.val(optionVal);
                    };

                    if (obj === '__default__')
                        fillOption(selectConfig.defaultOption.label, selectConfig.defaultOption.value);
                    else
                        fillOption(evaluatePath(obj, selectConfig.labelPath), evaluatePath(obj, selectConfig.valuePath));

                    // Determine if this option is selected.
                    if (!isMultiple && optionVal != null && fieldVal != null && optionVal === fieldVal || (_.isObject(fieldVal) && _.isEqual(optionVal, fieldVal)))
                        option.prop('selected', true);
                    else if (isMultiple && _.isArray(fieldVal)) {
                        _.each(fieldVal, function(val) {
                            if (_.isObject(val)) val = evaluatePath(val, selectConfig.valuePath);
                            if (val === optionVal || (_.isObject(val) && _.isEqual(optionVal, val)))
                                option.prop('selected', true);
                        });
                    }

                    $el.append(option);
                });
            };

            $el.find('*').remove();

            // The `list` configuration is a function that returns the options list or a string
            // which represents the path to the list relative to `window` or the view/`this`.
            var evaluate = function(view, list) {
                var context = window;
                if (list.indexOf('this.') === 0) context = view;
                list = list.replace(/^[a-z]*\.(.+)$/, '$1');
                return evaluatePath(context, list);
            };
            if (_.isString(list)) optList = evaluate(this, list);
            else if (_.isFunction(list)) optList = applyViewFn(this, list, $el, options);
            else optList = list;

            // Support Backbone.Collection and deserialize.
            if (optList instanceof Backbone.Collection) optList = optList.toJSON();

            if (selectConfig.defaultOption) {
                addSelectOptions(["__default__"], $el);
            }

            if (_.isArray(optList)) {
                addSelectOptions(optList, $el, val);
            } else if (optList.opt_labels) {
                // To define a select with optgroups, format selectOptions.collection as an object
                // with an 'opt_labels' property, as in the following:
                //
                //     {
                //       'opt_labels': ['Looney Tunes', 'Three Stooges'],
                //       'Looney Tunes': [{id: 1, name: 'Bugs Bunny'}, {id: 2, name: 'Donald Duck'}],
                //       'Three Stooges': [{id: 3, name : 'moe'}, {id: 4, name : 'larry'}, {id: 5, name : 'curly'}]
                //     }
                //
                _.each(optList.opt_labels, function(label) {
                    var $group = Backbone.$('<optgroup/>').attr('label', label);
                    addSelectOptions(optList[label], $group, val);
                    $el.append($group);
                });
                // With no 'opt_labels' parameter, the object is assumed to be a simple value-label map.
                // Pass a selectOptions.comparator to override the default order of alphabetical by label.
            } else {
                var opts = [],
                    opt;
                for (var i in optList) {
                    opt = {};
                    opt[selectConfig.valuePath] = i;
                    opt[selectConfig.labelPath] = optList[i];
                    opts.push(opt);
                }
                addSelectOptions(_.sortBy(opts, selectConfig.comparator || selectConfig.labelPath), $el, val);
            }
        },
        getVal: function($el) {
            var val;
            if ($el.prop('multiple')) {
                val = Backbone.$(getSelectedOption($el).map(function() {
                    return Backbone.$(this).data('stickit_bind_val');
                })).get();
            } else {
                val = getSelectedOption($el).data('stickit_bind_val');
            }
            return val;
        }
    }]);


    // Export onto Backbone object
    Backbone.Stickit = Stickit;

    return Backbone.Stickit;

}));

(function(root, factory) {

    // CommonJS compatibilty
    if (typeof exports !== 'undefined') {
        factory(Backbone);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['backbone'], function(Backbone) {
            // Use global variables if the locals are undefined.
            return factory(Backbone || root.Backbone);
        });
    } else {
        factory(root.Backbone);
    }

})(this, function(Backbone) {
    'use strict';
    Number.prototype.pad = function(size) {
      var s = String(this);
      while (s.length < (size || 2)) {s = "0" + s;}
      return s;
    };
    if(!window.isDirty) window.isDirty=new Object();
    _.groupByMulti = function(obj, values, context) {
        if (!values.length)
            return obj;
        var byFirst = _.groupBy(obj, values[0], context),
            rest = values.slice(1);
        for (var prop in byFirst) {
            byFirst[prop] = _.groupByMulti(byFirst[prop], rest, context);
        }
        return byFirst;
    };

    _.findDeep = function(items, attrs) {

        function match(value) {
            for (var key in attrs) {
                if (!_.isUndefined(value)) {
                    if (attrs[key] !== value[key]) {
                        return false;
                    }
                }
            }

            return true;
        }

        function traverse(value) {
            var result;

            $.each(value, function(i, val) {
                if (match(val)) {
                    result = val;
                    return false;
                }

                if (_.isObject(val) || _.isArray(val)) {
                    result = traverse(val);
                }

                if (result) {
                    return false;
                }
            });

            return result;
        }

        return traverse(items);

    }

    Backbone.Collection.prototype.save = function(options) {
        return Backbone.sync('create', this, options);
    };

    var originalFn = Backbone.history.loadUrl;

    Backbone.history.loadUrl = function() {
        var me = this;
        // I introduced an application state variable, but it can be solved in multiple ways
        // if (window.dirty) {
        //     var previousFragment = Backbone.history.fragment;
        //     window.location.hash = '#' + previousFragment;
        //     w2confirm('Exista inregistrari nesalvate! Sigur iesiti?').yes(function() {
        //         window.dirty = false;
        //         return originalFn.apply(me, arguments);
        //     }).no(function() {
        //         return false;
        //     });
        // } else {
        //     return originalFn.apply(this, arguments);
        // }

        var answer = $.Deferred();
        answer.promise().then(function() {
            return originalFn.apply(me, arguments);
        });
        if (window.isDirty.dirty) {
            var nextFragment = window.location.hash;
            var previousFragment = Backbone.history.fragment;
            window.location.hash = '#/' + previousFragment;
            w2confirm('Exista inregistrari nesalvate! Sigur iesiti?').yes(function() {
                window.isDirty.dirty = false;
                window.location.hash = nextFragment;
                return answer.resolve();
            }).no(function() {
                return answer.promise();
            });

        } else {
            answer.resolve();
        }
    };

    Backbone.SModel = Backbone.Model.extend({
        constructor: function() {
            this.listenTo(this, 'change', function() {
                if(!this.changed.EntityState){
                if (this.attributes.EntityState === 3) {
                    this.attributes.EntityState = 1;
                }
                }
            });
            this.listenTo(this, 'save', function() {
                this.attributes.EntityState = 1;
            });
            Backbone.Model.apply(this, arguments);
            this.attributes['recid'] = this.cid;
        }
    });

    Backbone.SCollection = Backbone.Collection.extend({
        constructor: function() {
            this.listenTo(this, 'remove', function(model) {
                model.set('EntityState', 2);
            });
            Backbone.Collection.apply(this, arguments);
        }
    });
    Backbone.SGridCollection = Backbone.SCollection.extend({
        gridRowProperty: undefined,
        constructor: function() {
            var me = this;
            this.listenTo(this, 'remove', function(model) {
                if (this.getGridRowProperty())
                    w2ui[me.getGridName()].remove(model.get(me.getGridRowProperty()).get('cid'));
                else
                    w2ui[me.getGridName()].remove(model.get('cid'));
            });
            this.listenTo(this, 'add', function(model) {
                if (this.getGridRowProperty()) {
                    model.get(this.getGridRowProperty()).set('recid', model.cid);
                    w2ui[me.getGridName()].add(model.get(this.getGridRowProperty()).toJSON());
                } else {
                    model.set('recid', model.cid);
                    w2ui[me.getGridName()].add(model.toJSON());
                }
            });
            this.listenTo(this, 'change', function(model) {
                //SET GRID RECORD BASED ON MODEL CHANGES
                if (this.getGridRowProperty())
                    w2ui[me.getGridName()].set(model.get(this.getGridRowProperty()).cid, model.get(this.getGridRowProperty()).toJSON());
                else
                    w2ui[me.getGridName()].set(model.cid, model.toJSON());
            });
            Backbone.Collection.apply(this, arguments);
        },
        setGridRowProperty: function(name) {
            this.gridRowProperty = name;
        },
        getGridRowProperty: function() {
            return this.gridRowProperty;
        },
        getGridName: function() {
            return this.gridName;
        },
        setGridName: function(name) {
            this.gridName = name;
        }
    });
    return Backbone;
});

(function(root, factory) {

    // CommonJS compatibilty
    if (typeof exports !== 'undefined') {
        factory(Marionette, Backbone);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['marionette', 'backbone'], function(Marionette, Backbone) {
            // Use global variables if the locals are undefined.
            return factory(Marionette || root.Marionette, Backbone || root.Backbone);
        });
    } else {
        factory(root.Marionette, root.Backbone);
    }

})(this, function(Marionette, Backbone) {
    'use strict';
    // var Marionette;
    // if (module) {
    //     Marionette = MarionetteBundle.Marionette;
    //     Backbone = MarionetteBundle.Backbone;
    // } else {
    //     Marionette = MarionetteBundle;
    // }
    /**
     * Extend default router to prevent user navigation if unsaved changes
     */

    Marionette.DirtyRouter = Marionette.AppRouter.extend({
        navigate: function(fragment, options) {
            var answer = $.Deferred();
            answer.promise().then(function() {
                return Marionette.AppRouter.prototype.navigate(fragment, options);
            });
            if (window.dirty) {
                w2confirm('Exista inregistrari nesalvate! Sigur iesiti?').yes(function() {
                    window.dirty = false;
                    return answer.resolve();
                }).no(function() {
                    return answer.promise();
                });

            } else {
                answer.resolve();
            }
        }
    });

    Marionette.SlashRouter = Marionette.AppRouter.extend({
        navigate: function(fragment) {
            var options = Backbone.history.options,
                ret;

            if (fragment === '' || fragment === '/') {
                Backbone.history.stop();
                Backbone.history.start({
                    pushState: options.pushState,
                    root: '/'
                });

                arguments[0] = options.root;

                ret = Backbone.Router.prototype.navigate.apply(this, arguments);

                Backbone.history.stop();
                Backbone.history.start({
                    pushState: options.pushState,
                    root: options.root
                });

                return ret;
            }

            return Backbone.Router.prototype.navigate.apply(this, arguments);
        }
    });


    /**
     * Create a ItemView with 2 functions that will construct the UI based on view's model definition
     */

    Marionette.FormView = Marionette.ItemView.extend({

        resetCombo: function() {
            var self = this;
            var fields = self.model.fields();
            for (var i in this.model.changed) {
                var field = _.find(fields, {
                    name: i
                });
                if (field && field.type === 'list') {
                    $(field.el).data('selected', field.selected);
                    $(field.el).w2field().refresh();
                }

            }
        },
        getTemplate: function() {
            if (!this.template) {
                var html = '';
                var fields;
                if (typeof this.model.fields === 'function')
                    fields = this.model.fields();
                else
                    fields = this.model.fields;
                for (var i in fields) {
                    var field = fields[i];
                    var input = field.isMemo ? '<textarea id="' + field.name + '"></textarea>' : '<input type="text" id="' + field.name + '" />';
                    html += '<div class="w2ui-field">' +
                        '<label>' + (field.displayName ? field.displayName : this.normalizeName(field.name)) + '</label>' +
                        '<div>' + input + '</div>' +
                        '</div>';
                }
                html += '<hr />' +
                    '<div style="text-align:left">' +
                    '<button class="toolbar-button" title="Salveaza modificarile" id="btnSave"><i class="w2ui-icon-save"></i></button>' +
                    '<button class="toolbar-button" title="Renunta la modificare" id="btnCancel"><i class="w2ui-icon-ban"></i></button>' +
                    '</div>';
                return html;
            } else {
                return this.template;
            }
        },
        bindings: {},
        constructor: function(options) {
            Marionette.ItemView.prototype.constructor.call(this, options);
        },
        ensureElement:function(setupview){
            var self = this;
             var checkInterval = setInterval(function(){
                if($.contains(document.body,self.el)){
                    clearInterval(checkInterval);
                    self.hasElement = true;
                    if (setupview)self.setupView();
                    if(typeof self.onViewRendered === 'function')
                        self.onViewRendered.apply(self,arguments);
                }
                return false;
            },10);
        },
        setupView: function() {
            console.log($.contains(document.body,this.el));
            if(!this.hasElement){
                if(!this.ensureElement(true)) return;
            }
            var self = this;
            self.$el.find('.button-translate button').each(function(i,b){
                b.textContent = w2utils.lang(b.textContent)
            });
            var fields;
            if (typeof this.model.fields === 'function')
                fields = this.model.fields();
            else
                fields = this.model.fields;
            for (var f in fields) {
                var field = fields[f]; 
                if (field.type === 'collection')
                    continue;
                if (field.selected) {
                    field.options.selected = field.selected;
                }

                if (field.options && typeof field.options.items === 'string') {
                    var prop = field.options.items;
                    field.options.items = self.model.get(prop);
                }
                var label = $(field.el).closest('.w2ui-field').find('label');
                label.text(w2utils.lang(label.text()));
                console.log('label:' + label.text());
                $(field.el).w2field(field.type, field.options);

                $(field.el).on('change', {
                    field: field
                }, function(event) {
                    if (event.data.field.idField && event.data.field.txtField) {
                        var selected = $(event.data.field.el).data('selected');
                        if (event.data.field.type === 'combo') { //allow addition to combo fields
                            var val = $(event.data.field.el).val();
                            if (val && val !== selected.text) {
                                self.model.set(event.data.field.idField, ''); // in case is new value we set id field to null
                            } else {
                                self.model.set(event.data.field.idField, selected.id);
                                self.model.set(event.data.field.txtField, selected.text);
                            }
                        } else {
                                self.model.set(event.data.field.idField, selected.id);
                                self.model.set(event.data.field.txtField, selected.text);
                        }
                    }
                    if (event.data.field.change)
                        event.data.field.change.apply(this, arguments);
                });
                // if(field.type==='list'){
                //      var listBinding ;
                //     if(field.idField && field.txtField){
                //         listBinding = {
                //             observe:field.name,
                //             onGet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 if(field.idField === field.name)
                //                     return selected.id;
                //                 if(field.txtField === field.name)
                //                     return selected.text;
                //             },
                //             onSet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 if(field.idField === field.name)
                //                     return selected.id;
                //                 if(field.txtField === field.name)
                //                     return selected.text;
                //             }
                //         }
                //     }else{
                //         listBinding = {
                //             observe:field.name,
                //             onGet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 return selected.id;
                //             },
                //             onSet:function(value){
                //                 var selected = $(field.el).data('selected');
                //                 return selected.id;
                //             }
                //         }
                //     }
                //     self.bindings[field.el] = listBinding;
                // }else{
                    self.bindings[field.el] = field.name;
                // }

            }
            $.extend(self.bindings, self.bindingsOverrides);
            self.stickit();
        },
        resetView: function() {
            var fields = this.model.fields();
            for (var f in fields) {
                var field = fields[f];
                if(($(field.el).w2field()))
                  $(field.el).w2field().refresh();
            }
        },
        normalizeName: function(name) {
            name = name.replace('_', ' ');
            return name.replace(/\w\S*/g, function(txt) {
                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
            });
        }
    });


    /**
     * Creates an AppRouter with a particular prefix at the beginning of each route.
     * @class Marionette.SubAppRouter
     * @alias module:marionette.subapprouter
     * @classdesc A router that prepends a specified prefix (passed on instantiation) onto each specified `route` or
     * `appRoute`.  Directly extends from Marione
tte.AppRouter to enable controller objects linked to the `appRoutes`
     * hash. Useful for sub applications that live in sub-directories under root and want to handle all of their own
     * routing.
     */
    Marionette.SubAppRouter = Marionette.AppRouter.extend({

        /**
         * @constructs Marionette.SubAppRouter
         * @param {string} [prefix] - The prefix string to prepend to all routes, making them act as if relative. If
         * blank, then it just acts like a regular Backbone.Router.
         * @param {Object} [options] - The options object expected by Marionette.AppRouter.
         * @param {Object} [options.controller] - An object with function properties corresponding to the hash values
         * from `routes` and `appRoutes`.
         */
        constructor: function(prefix, options) {

            var controller,
                appRoutes,
                routes = {};

            // Prefix is optional, set to empty string if not passed
            this.prefix = prefix = prefix || '';

            // SubRoute instances may be instantiated using a prefix with or without a trailing slash.
            // If the prefix does *not* have a trailing slash, we need to insert a slash as a separator
            // between the prefix and the sub-route path for each route that we register with Backbone.
            this.separator =
                (prefix.slice(-1) === '/') ? '' : '/';

            // if you want to match "books" and "books/" without creating separate routes, set this
            // option to "true" and the sub-router will automatically create those routes for you.
            var createTrailingSlashRoutes = options && options.createTrailingSlashRoutes;

            if (this.appRoutes) {

                appRoutes = this.appRoutes;
                controller = this.controller;

                if (options && options.controller) {
                    controller = options.controller;
                }

                _.each(appRoutes, function(callback, path) {

                    if (path) {

                        // strip off any leading slashes in the sub-route path,
                        // since we already handle inserting them when needed.
                        if (path.substr(0) === '/') {
                            path = path.substr(1, path.length);
                        }

                        routes[prefix + this.separator + path] = callback;

                        if (createTrailingSlashRoutes) {
                            routes[prefix + this.separator + path + '/'] = callback;
                        }

                    } else {
                        // default routes (those with a path equal to the empty string)
                        // are simply registered using the prefix as the route path.
                        routes[prefix] = callback;

                        if (createTrailingSlashRoutes) {
                            routes[prefix + '/'] = callback;
                        }
                    }

                }, this);

                // Override the local sub-routes with the fully-qualified routes that we just set up.
                this.appRoutes = routes;

            }

            Marionette.AppRouter.prototype.constructor.call(this, options);
        }


    });


    /**
     * https://github.com/justspamjustin/BossView
     * BossView v 0.1.4
     */

    Marionette.BossView = Marionette.ItemView.extend({

        template: function() {
            return '';
        },

        constructor: function() {
            Marionette.ItemView.prototype.constructor.apply(this, arguments);
            this._initializeSubViews();
            this._afterInitializeSubViews();
            this.listenTo(this, 'render', this._onParentRendered);
        },

        getParentEl: function() {
            return this.$el;
        },

        _afterInitializeSubViews: function() {
            this._initializeChildViewEvents();
            this._initializeSubViewEventBubbling();
        },

        _initializeSubViews: function() {
            this.initializedSubViews = {};
            this._eachSubView(_.bind(this._initializeSubView, this));
        },

        _initializeSubView: function(subViewName, subViewFunction) {
            var subView = this._getInitializedSubView(subViewFunction);
            this._checkSubViewForRender(subView, subViewName);
            this[subViewName] = subView;
            this.initializedSubViews[subViewName] = subView;
        },

        initializeSubView: function(subViewName, subViewFunction) {
            this._initializeSubView(subViewName, subViewFunction);
            this._afterInitializeSubViews();
        },

        _getInitializedSubView: function(subViewFunction) {
            var subView;
            var isRenderableView = _.isFunction(subViewFunction.prototype.render);
            if (isRenderableView) {
                subView = this._initializeRenderableSubView(subViewFunction);
            } else {
                subView = subViewFunction.call(this);
            }
            return subView;
        },

        _initializeRenderableSubView: function(subViewFunction) {
            return new subViewFunction({
                model: this.model,
                collection: this.collection
            });
        },

        _checkSubViewForRender: function(subView, subViewName) {
            if (_.isUndefined(subView) || !_.isFunction(subView.render)) {
                throw new Error('The subview named ' + subViewName + ' does not have a render function.');
            }
        },

        _initializeChildViewEvents: function() {
            this._eachSubViewEvent(_.bind(function(subView, subViewEventName, subViewEventCallback) {
                subViewEventCallback = this._getSubViewEventCallbackFunction(subViewEventCallback, subViewEventName);
                if (subView === '*') {
                    this._listenToEventOnAllSubViews(subViewEventCallback, subViewEventName);
                } else {
                    if (subView) {
                        this.listenTo(subView, subViewEventName, subViewEventCallback);
                    }
                }
            }, this));
        },

        _getSubViewEventCallbackFunction: function(subViewEventCallback, subViewEventName) {
            if (_.isString(subViewEventCallback)) {
                this._checkForSubViewEventCallback(subViewEventCallback, subViewEventName);
                subViewEventCallback = this[subViewEventCallback];
            }
            return subViewEventCallback;
        },

        _listenToEventOnAllSubViews: function(subViewEventCallback, subViewEventName) {
            this._eachSubView(_.bind(function(subViewName) {
                var subViewInstance = this[subViewName];
                this.listenTo(subViewInstance, subViewEventName, subViewEventCallback);
            }, this));
        },

        _checkForSubViewEventCallback: function(subViewEventCallback, subViewEventName) {
            if (_.isUndefined(this[subViewEventCallback])) {
                throw new Error('This view has no function named ' + subViewEventCallback + ' to use as a callback for the event ' + subViewEventName);
            }
        },

        _initializeSubViewEventBubbling: function() {
            this._eachSubView(_.bind(function(subViewName) {
                var subView = this[subViewName];
                this.listenTo(subView, 'all', function() {
                    this.trigger(subViewName + ':' + arguments[0], arguments[1]);
                });
            }, this));
        },

        _onParentRendered: function() {
            this.trigger('subviews:before:render');
            this._renderSubViews();
            this.trigger('subviews:after:render');
        },

        _renderSubViews: function() {
            this._eachSubView(_.bind(this.renderSubView, this));
        },

        renderSubView: function(subViewName) {
            var mainSubViewContainer = this._getOption('mainSubViewContainer');
            var appendToEl = this.getParentEl();
            if (this._hasSubViewContainer(subViewName)) {
                appendToEl = this._getSubViewContainer(subViewName);
            } else if (mainSubViewContainer) {
                appendToEl = this.$(mainSubViewContainer);
            }
            this._renderSubView(subViewName, appendToEl);
        },

        _renderSubView: function(subViewName, appendToEl) {
            if (this._shouldRenderSubView(subViewName)) {
                this[subViewName].render().$el.appendTo(appendToEl);
                /**
                 * We need to call delegateEvents here because when Marionette renders a template
                 * it uses this.$el.html(templateHTML).  If this is the second render, then it will
                 * remove each of the subViews from the DOM, thus also unbinding each of their DOM
                 * events.  So this is necessary for any renders after the initial render.
                 */
                this[subViewName].delegateEvents();
                if (this[subViewName].viewShown) {
                    this[subViewName].viewShown.apply(this[subViewName], arguments);
                }

            }
        },

        _shouldRenderSubView: function(subViewName) {
            var renderConditionFunction = this._getSubViewRenderConditions()[subViewName];
            var hasRenderConditionFunction = _.isFunction(renderConditionFunction);
            return hasRenderConditionFunction ? renderConditionFunction.call(this) : true;
        },

        _eachSubView: function(callback) {
            if (this._getSubViews()) {
                for (var subViewName in this._getSubViews()) {
                    callback(subViewName, this._getSubViews()[subViewName]);
                }
            }
        },

        _eachSubViewEvent: function(callback) {
            var subViewEvents = this._getOption('subViewEvents');
            if (subViewEvents) {
                for (var subViewEventKey in subViewEvents) {
                    var split = this._splitSubViewEventKey(subViewEventKey);
                    var subView = split.subViewName === '*' ? '*' : this[split.subViewName];
                    callback(subView, split.subViewEventName, subViewEvents[subViewEventKey]);
                }
            }
        },

        _splitSubViewEventKey: function(subViewEventKey) {
            var subViewEventKeySplit = subViewEventKey.split(' ');
            return {
                subViewName: subViewEventKeySplit[0],
                subViewEventName: subViewEventKeySplit[1]
            }
        },

        _hasSubViewContainer: function(subViewName) {
            var subViewContainers = this._getOption('subViewContainers');
            return !_.isUndefined(subViewContainers) && !_.isUndefined(subViewContainers[subViewName]);
        },

        _getSubViewContainer: function(subViewName) {
            if (!this._hasSubViewContainer(subViewName)) {
                throw new Error('No subview container for subView: ' + subViewName);
            }
            return this.$(this._getOption('subViewContainers')[subViewName]);
        },

        remove: function() {
            Backbone.Marionette.ItemView.prototype.remove.apply(this, arguments);
            console.log('view removed');
            this._removeSubViews();
        },

        _removeSubViews: function() {
            _.each(this.initializedSubViews, function(subView) {
                subView.remove();
            });
        },

        _getSubViews: function() {
            var subViews = _.result(this, 'subViews');
            if (this.options.subViews) {
                subViews = _.result(this.options, 'subViews');
            }
            return subViews;
        },

        _getOption: function(optionName) {
            return this[optionName] || this.options[optionName];
        },

        _getSubViewRenderConditions: function() {
            return this._getOption('subViewRenderConditions') || {};
        }
    });


    //END BOSSVIEW


    var isClosable = function(p) {
        if (p && p.reset && typeof(p.reset) == 'function') {
            return true;
        }
        return false;
    };

    var isStopable = function(p) {
        if (p && p.stop && typeof(p.stop) == 'function') {
            return true;
        }
        return false;
    };

    _.extend(Backbone.Marionette.Application.prototype, {
        stop: function() {
            _.each(this._regionManager._regions, function(region) {
                region.reset();
            });
            if (this.onStop && typeof this.onStop === 'function') {
                this.onStop();
            }
        }
    });


   // object.watch
if (!Object.prototype.watch) {
    Object.defineProperty(Object.prototype, "watch", {
          enumerable: false
        , configurable: true
        , writable: false
        , value: function (prop, handler) {
            var
              oldval = this[prop]
            , newval = oldval
            , getter = function () {
                return newval;
            }
            , setter = function (val) {
                oldval = newval;
                return newval = handler.call(this, prop, oldval, val);
            }
            ;

            if (delete this[prop]) { // can't watch constants
                Object.defineProperty(this, prop, {
                      get: getter
                    , set: setter
                    , enumerable: true
                    , configurable: true
                });
            }
        }
    });
}

// object.unwatch
if (!Object.prototype.unwatch) {
    Object.defineProperty(Object.prototype, "unwatch", {
          enumerable: false
        , configurable: true
        , writable: false
        , value: function (prop) {
            var val = this[prop];
            delete this[prop]; // remove accessors
            this[prop] = val;
        }
    });
}
    return Marionette;
});

/*global define,jQuery,window */

(function(factory) {

    "use strict";

    if (typeof(define) === 'function' && define.amd) {
        define(['jquery'], factory);
    } else {
        factory(jQuery);
    }
}(function($) {

    "use strict";

    $.fileMenu = function(el, options) {

        var base = this;

        base.$el = $(el).first('ul');
        base.el = el;
        base.index = 0;
        base.actions = [];

        base.options = $.extend({}, $.fileMenu.defaultOptions, options);
        base.touch = false;

        base.$ = function(query) {
            return base.$el.find(query);
        };
        base.setMenuItems = function(menu) {
            var self = this;
            var m;
            if (!menu){ 
                m = base.options.items;
            }else{
                m = menu;
            }
            for (var x in m) {
                var menuItem = m[x];
                if (!menuItem.index) {
                    menuItem.index = base.index;
                    base.index += 1;
                }
                menuItem.enabled = true;
                if (menuItem.show) {
                    try{
                        menuItem.hidden = !menuItem.show();
                    }catch(e){
                        menuItem.hidden = true;
                    }
                    
                }
                if (menuItem.submenu) {
                    base.setMenuItems(menuItem.submenu);
                }
            }
            base.options.items = m;
        };
        base.refresh = function(items) {
            base.setMenuItems();
            base.appendHtml(base.buildHTML());
            base.addListeners();
        };
        base.buildHTML = function() {
            var html = '<ul>';
            var items = base.options.items;
            for (var i in items) {
                var menu = items[i];
                //if (menu.visibile) {
                html += '<li data-index="' + menu.index + '"' + ' id = "menu' + menu.index + '"' +
                    ' class="' + (menu.type === 'separator' ? 'divider' : '') + (menu.enabled ? '' : ' disabled') + (menu.hidden ? ' hidden' : '') + '">' +
                    (menu.icon ? '<i class="' + menu.icon + '"></i>' : '') + ' ' + (menu.label ? menu.label : '');
                if (menu.submenu) {
                    html += base.buildSubHtml(menu.submenu);
                } else {
                    html += '<ul><li class="disabled">Empty</li></ul>';
                }
                html += '</li>';
                //}
            }
            html += '</ul>';
            return html;
        };
        base.buildSubHtml = function(items) {
            var html = '<ul>';
            for (var i in items) {
                var menu = items[i];
                if (menu.click) base.actions.push({
                    index: menu.index,
                    menu: menu
                });
                //if (!menu.hidden) {
                html += '<li data-index="' + menu.index + '" id="menu' + menu.index + '"' + (base.click ? 'data-action="' + menu.index + '"' : '') +
                    'class="' + (menu.submenu ? 'sub' : '') + ' ' + (menu.click ? 'menuaction' : '') + (menu.enabled ? '' : ' disabled') + (menu.hidden ? ' hidden' : '') +
                    ' ' + (menu.type === 'separator' ? 'divider' : '') + '">' +
                    '<div class="menuicon">' + (menu.icon ? '<i class="' + menu.icon + '"></i>' : ' ') + '</div> ' +
                    ' ' + (menu.label ? menu.label : '') + '';
                if (menu.submenu) {
                    html += base.buildSubHtml(menu.submenu);
                }

                html += '</li>';
                // }
            }
            html += '</ul>';
            return html;
        };
        base.appendHtml = function(markup) {
            base.$el.html(markup);
            var menu = base.$el.children('ul')[0];
            base.menu = $(menu);
            base.menu.addClass('w2ui-filemenu');
        };
        base.hideMenu = function() {
            base.$('.selected ul').slideUp(base.options.slideSpeed);
            base.$('.selected').removeClass('selected');
            base.menu.removeClass('active');
        };

        base.showMenu = function($this) {
            var $parent = $this.parent(),
                $menu = $this.children('ul').first(),
                offsets = $this.offset();

            $parent.addClass('active');

            $this.addClass('selected');
            $menu.css({
                'left': offsets.left,
                'top': offsets.top + $parent.height()
            });
            $menu.slideDown(base.options.slideSpeed);
        };

        base.addListeners = function() {
            base.menu.children('li').on('click', function(e) {
                var $this = $(this);

                if ($this.hasClass('selected')) {
                    base.hideMenu();
                } else {
                    base.hideMenu();
                    base.showMenu($this);
                }
                e.stopPropagation();
            });

            base.$('li').on('click', '.menuaction', function(e) {
                var $this = $(e.target);
                var id = $this.data('index');
                var menuItem = _.where(base.actions, {
                    index: id
                })[0].menu;
                if (menuItem.click && typeof(menuItem.click) === 'function') {
                    menuItem.click.apply(this, arguments);
                    $this.parent().addClass('selected');
                    base.hideMenu();
                }
                e.stopPropagation();
                //
            });

            base.menu.children('li').on('mouseenter', function() {
                var $this = $(this);
                if (!$this.parent().hasClass('active')) {
                    return;
                }
                if ($this.hasClass('selected')) {
                    return;
                }

                base.hideMenu();
                base.showMenu($this);
            });

            /* Don't slide up if submenu, divider or disabled item is clicked */
            base.$('ul').on('click', function(e) {
                var $this = $(e.target);
                if ($this.get(0).tagName === 'LI' && !$this.hasClass('sub')) {
                    return;
                }
                e.stopPropagation();
            });

            /* Handle toggle elements */
            base.$('ul').on('click', '.toggle', function(e) {
                $(this).toggleClass('active');
                e.stopPropagation();
            });

            /* Position sub menus */
            base.menu.on('mouseenter', 'ul li', function() {
                var $this = $(this);

                $this.find('ul').first().css({
                    'left': $this.parent().width(),
                    'margin-top': -$this.height(),
                    'display': ''
                });
            });

            /* Hide menu on click outside the menu */
            $('html').on('click', function() {
                base.hideMenu();
            });
        };

        base.init = function() {
            base.setMenuItems();
            var markup = base.buildHTML();
            base.appendHtml(markup);
            base.addListeners();
            //base.$el.addClass('fileMenu');
        };

        base.init();
        $.extend(w2ui.obj, base);
        w2ui['filemenu'] = base;
    };

    $.fileMenu.defaultOptions = {
        slideSpeed: 100,
        items: []
    };

    $.fn.fileMenu = function(options) {
        return this.each(function() {
            var fm = new $.fileMenu(this, options);
        });
    };

}));

/* w2ui 1.4.x (nightly) (c) http://w2ui.com, vitmalina@gmail.com */
var w2ui = w2ui || {};
var w2obj = w2obj || {}; // expose object to be able to overwrite default functions

/************************************************
 *  Library: Web 2.0 UI for jQuery
 *  - Following objects are defines
 *        - w2ui             - object that will contain all widgets
 *        - w2obj            - object with widget prototypes
 *        - w2utils          - basic utilities
 *        - $().w2render     - common render
 *        - $().w2destroy    - common destroy
 *        - $().w2marker     - marker plugin
 *        - $().w2tag        - tag plugin
 *        - $().w2overlay    - overlay plugin
 *        - $().w2menu       - menu plugin
 *        - w2utils.event    - generic event object
 *        - w2utils.keyboard - object for keyboard navigation
 *  - Dependencies: jQuery
 *
 * == NICE TO HAVE ==
 *   - overlay should be displayed where more space (on top or on bottom)
 *   - write and article how to replace certain framework functions
 *   - add maxHeight for the w2menu
 *   - isTime should support seconds
 *   - add time zone
 *   - TEST On IOS
 *   - $().w2marker() -- only unmarks first instance
 *   - subitems for w2menus()
 *   - add w2utils.lang wrap for all captions in all buttons.
 *   - add isDateTime()
 *   - remove momentjs
 *
 * == 1.5 changes
 *   - date has problems in FF new Date('yyyy-mm-dd') breaks
 *   - bug: w2utils.formatDate('2011-31-01', 'yyyy-dd-mm'); - wrong foratter
 *   - format date and time is buggy
 *   - added decimalSymbol
 *   - renamed size() -> formatSize()
 *   - added cssPrefix()
 *   - added w2utils.settings.weekStarts
 *   - onComplete should pass widget as context (this)
 *   - hidden and disabled in menus
 *   - added menu.item.hint for overlay menues
 *   - added w2tag options.id, options.left, options.top
 *
 ************************************************/

var w2utils = (function() {
    var tmp = {}; // for some temp variables
    var obj = {
        version: '1.5.x',
        settings: {
            "locale": "en-us",
            "date_format": "m/d/yyyy",
            "date_display": "Mon d, yyyy",
            "time_format": "hh:mi pm",
            "currencyPrefix": "$",
            "currencySuffix": "",
            "currencyPrecision": 2,
            "groupSymbol": ",",
            "decimalSymbol": ".",
            "shortmonths": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            "fullmonths": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            "shortdays": ["M", "T", "W", "T", "F", "S", "S"],
            "fulldays": ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
            "weekStarts": "M", // can be "M" for Monday or "S" for Sunday
            "dataType": 'HTTP', // can be HTTP, RESTFULL, JSON (case sensative)
            "phrases": {}, // empty object for english phrases
            "dateStartYear": 1950, // start year for date-picker
            "dateEndYear": 2020 // end year for date picker
        },
        isInt: isInt,
        isFloat: isFloat,
        isMoney: isMoney,
        isHex: isHex,
        isAlphaNumeric: isAlphaNumeric,
        isEmail: isEmail,
        isDate: isDate,
        isTime: isTime,
        isDateTime: isDateTime,
        age: age,
        date: date,
        formatSize: formatSize,
        formatNumber: formatNumber,
        formatDate: formatDate,
        formatTime: formatTime,
        formatDateTime: formatDateTime,
        stripTags: stripTags,
        encodeTags: encodeTags,
        escapeId: escapeId,
        base64encode: base64encode,
        base64decode: base64decode,
        transition: transition,
        lock: lock,
        unlock: unlock,
        lang: lang,
        locale: locale,
        getSize: getSize,
        scrollBarSize: scrollBarSize,
        checkName: checkName,
        checkUniqueId: checkUniqueId,
        parseRoute: parseRoute,
        cssPrefix: cssPrefix,
        validate: validate,
        escapeRegExp: escapeRegExp,
        modelErrors: modelErrors,
        validateRaw: validateRaw,
        // some internal variables
        isIOS: ((navigator.userAgent.toLowerCase().indexOf('iphone') != -1 ||
            navigator.userAgent.toLowerCase().indexOf('ipod') != -1 ||
            navigator.userAgent.toLowerCase().indexOf('ipad') != -1) ? true : false),
        isIE: ((navigator.userAgent.toLowerCase().indexOf('msie') != -1 ||
            navigator.userAgent.toLowerCase().indexOf('trident') != -1) ? true : false),
        use_momentjs: ((typeof moment === 'function') && (typeof moment.version === 'string'))
    };
    return obj;

    function isInt(val) {
        var re = /^[-+]?[0-9]+$/;
        return re.test(val);
    }

    function isFloat(val) {
        if (typeof val == 'string') val = val.replace(w2utils.settings.decimalSymbol, '.');
        return (typeof val === 'number' || (typeof val === 'string' && val !== '')) && !isNaN(Number(val));
    }

    function isMoney(val) {
        var se = w2utils.settings;
        var re = new RegExp('^' + (se.currencyPrefix ? '\\' + se.currencyPrefix + '?' : '') + '[-+]?[0-9]*[\\' + se.decimalSymbol + ']?[0-9]+' + (se.currencySuffix ? '\\' + se.currencySuffix + '?' : '') + '$', 'i');
        if (typeof val === 'string') {
            val = val.replace(new RegExp(se.groupSymbol, 'g'), '');
        }
        if (typeof val === 'object' || val === '') return false;
        return re.test(val);
    }

    function isHex(val) {
        var re = /^[a-fA-F0-9]+$/;
        return re.test(val);
    }

    function isAlphaNumeric(val) {
        var re = /^[a-zA-Z0-9_-]+$/;
        return re.test(val);
    }

    function isEmail(val) {
        var email = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
        var mails = val.split(',');
        for (var i in mails) {
            var mail = mails[i];
            if (!email.test(mail))
                return false;
        }
        return true;
    }

    function isDate(val, format, retDate) {
        if (!val) return false;

        var dt = 'Invalid Date';
        var month, day, year;

        if (format == null) format = w2utils.settings.date_format;

        if (typeof val.getUTCFullYear === 'function' && typeof val.getUTCMonth === 'function' && typeof val.getUTCDate === 'function') {
            year = val.getUTCFullYear();
            month = val.getUTCMonth();
            day = val.getUTCDate();
        } else if (typeof val.getFullYear === 'function' && typeof val.getMonth === 'function' && typeof val.getDate === 'function') {
            year = val.getFullYear();
            month = val.getMonth();
            day = val.getDate();
        } else {
            val = String(val);
            // convert month formats
            if (new RegExp('mon', 'ig').test(format)) {
                format = format.replace(/month/ig, 'm').replace(/mon/ig, 'm').replace(/dd/ig, 'd').replace(/[, ]/ig, '/').replace(/\/\//g, '/').toLowerCase();
                val = val.replace(/[, ]/ig, '/').replace(/\/\//g, '/').toLowerCase();
                for (var m = 0, len = w2utils.settings.fullmonths.length; m < len; m++) {
                    var t = w2utils.settings.fullmonths[m];
                    val = val.replace(new RegExp(t, 'ig'), (parseInt(m) + 1)).replace(new RegExp(t.substr(0, 3), 'ig'), (parseInt(m) + 1));
                }
            }
            // format date
            var tmp = val.replace(/-/g, '/').replace(/\./g, '/').toLowerCase().split('/');
            var tmp2 = format.replace(/-/g, '/').replace(/\./g, '/').toLowerCase();
            if (tmp2 === 'mm/dd/yyyy') {
                month = tmp[0];
                day = tmp[1];
                year = tmp[2];
            }
            if (tmp2 === 'm/d/yyyy') {
                month = tmp[0];
                day = tmp[1];
                year = tmp[2];
            }
            if (tmp2 === 'dd/mm/yyyy') {
                month = tmp[1];
                day = tmp[0];
                year = tmp[2];
            }
            if (tmp2 === 'd/m/yyyy') {
                month = tmp[1];
                day = tmp[0];
                year = tmp[2];
            }
            if (tmp2 === 'yyyy/dd/mm') {
                month = tmp[2];
                day = tmp[1];
                year = tmp[0];
            }
            if (tmp2 === 'yyyy/d/m') {
                month = tmp[2];
                day = tmp[1];
                year = tmp[0];
            }
            if (tmp2 === 'yyyy/mm/dd') {
                month = tmp[1];
                day = tmp[2];
                year = tmp[0];
            }
            if (tmp2 === 'yyyy/m/d') {
                month = tmp[1];
                day = tmp[2];
                year = tmp[0];
            }
            if (tmp2 === 'mm/dd/yy') {
                month = tmp[0];
                day = tmp[1];
                year = tmp[2];
            }
            if (tmp2 === 'm/d/yy') {
                month = tmp[0];
                day = tmp[1];
                year = parseInt(tmp[2]) + 1900;
            }
            if (tmp2 === 'dd/mm/yy') {
                month = tmp[1];
                day = tmp[0];
                year = parseInt(tmp[2]) + 1900;
            }
            if (tmp2 === 'd/m/yy') {
                month = tmp[1];
                day = tmp[0];
                year = parseInt(tmp[2]) + 1900;
            }
            if (tmp2 === 'yy/dd/mm') {
                month = tmp[2];
                day = tmp[1];
                year = parseInt(tmp[0]) + 1900;
            }
            if (tmp2 === 'yy/d/m') {
                month = tmp[2];
                day = tmp[1];
                year = parseInt(tmp[0]) + 1900;
            }
            if (tmp2 === 'yy/mm/dd') {
                month = tmp[1];
                day = tmp[2];
                year = parseInt(tmp[0]) + 1900;
            }
            if (tmp2 === 'yy/m/d') {
                month = tmp[1];
                day = tmp[2];
                year = parseInt(tmp[0]) + 1900;
            }
        }
        if (!isInt(year)) return false;
        if (!isInt(month)) return false;
        if (!isInt(day)) return false;
        year = +year;
        month = +month;
        day = +day;
        dt = new Date(year, month - 1, day);
        // do checks
        if (month == null) return false;
        if (String(dt) == 'Invalid Date') return false;
        if ((dt.getMonth() + 1 !== month) || (dt.getDate() !== day) || (dt.getFullYear() !== year)) return false;
        if (retDate === true) return dt;
        else return true;
    }

    function isTime(val, retTime) {
        // Both formats 10:20pm and 22:20
        if (val == null) return false;
        var max, pm;
        // -- process american format
        val = String(val);
        val = val.toUpperCase();
        pm = val.indexOf('PM') >= 0;
        var ampm = (pm || val.indexOf('AM') >= 0);
        if (ampm) max = 12;
        else max = 24;
        val = val.replace('AM', '').replace('PM', '');
        val = $.trim(val);
        // ---
        var tmp = val.split(':');
        var h = parseInt(tmp[0] || 0),
            m = parseInt(tmp[1] || 0);
        // accept edge case: 3PM is a good timestamp, but 3 (without AM or PM) is NOT:
        if ((!ampm || tmp.length !== 1) && tmp.length !== 2) {
            return false;
        }
        if (tmp[0] === '' || h < 0 || h > max || !this.isInt(tmp[0]) || tmp[0].length > 2) {
            return false;
        }
        if (tmp.length === 2 && (tmp[1] === '' || m < 0 || m > 59 || !this.isInt(tmp[1]) || tmp[1].length !== 2)) {
            return false;
        }
        // check the edge cases: 12:01AM is ok, as is 12:01PM, but 24:01 is NOT ok while 24:00 is (midnight; equivalent to 00:00).
        // meanwhile, there is 00:00 which is ok, but 0AM nor 0PM are okay, while 0:01AM and 0:00AM are.
        if (!ampm && max === h && m !== 0) {
            return false;
        }
        if (ampm && tmp.length === 1 && h === 0) {
            return false;
        }

        if (retTime === true) {
            if (pm) h += 12;
            return {
                hours: h,
                minutes: m
            };
        }
        return true;
    }

    function isDateTime(val, format, retDate) {
        if (w2utils.use_momentjs) {
            var dt = moment(val, format);
            var valid = dt.isValid();
            if (valid && (retDate === true)) {
                return dt.clone().toDate();
            }
            return valid;
        }
        // TODO: perform time check, too
        format = format.split('|')[0];
        val = val.split(' ')[0];
        //console.log("isDateTime() - " + val + " / " + format);
        return isDate(val, format, retDate);
    }

    function age(dateStr) {
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';
        var d1 = new Date(dateStr);
        if (w2utils.isInt(dateStr)) d1 = new Date(Number(dateStr)); // for unix timestamps
        if (String(d1) == 'Invalid Date') return '';

        var d2 = new Date();
        var sec = (d2.getTime() - d1.getTime()) / 1000;
        var amount = '';
        var type = '';
        if (sec < 0) {
            amount = '<span style="color: #aaa">0 sec</span>';
            type = '';
        } else if (sec < 60) {
            amount = Math.floor(sec);
            type = 'sec';
            if (sec < 0) {
                amount = 0;
                type = 'sec';
            }
        } else if (sec < 60 * 60) {
            amount = Math.floor(sec / 60);
            type = 'min';
        } else if (sec < 24 * 60 * 60) {
            amount = Math.floor(sec / 60 / 60);
            type = 'hour';
        } else if (sec < 30 * 24 * 60 * 60) {
            amount = Math.floor(sec / 24 / 60 / 60);
            type = 'day';
        } else if (sec < 365 * 24 * 60 * 60) {
            amount = Math.floor(sec / 30 / 24 / 60 / 60 * 10) / 10;
            type = 'month';
        } else if (sec < 365 * 4 * 24 * 60 * 60) {
            amount = Math.floor(sec / 365 / 24 / 60 / 60 * 10) / 10;
            type = 'year';
        } else if (sec >= 365 * 4 * 24 * 60 * 60) {
            // factor in leap year shift (only older then 4 years)
            amount = Math.floor(sec / 365.25 / 24 / 60 / 60 * 10) / 10;
            type = 'year';
        }
        return amount + ' ' + type + (amount > 1 ? 's' : '');
    }

    function date(dateStr,span) {
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';
        var d1 = new Date(dateStr);
        if (w2utils.isInt(dateStr)) d1 = new Date(Number(dateStr)); // for unix timestamps
        if (String(d1) == 'Invalid Date') return '';

        var months = w2utils.settings.shortmonths;
        var d2 = new Date(); // today
        var d3 = new Date();
        d3.setTime(d3.getTime() - 86400000); // yesterday

        var dd1 = months[d1.getMonth()] + ' ' + d1.getDate() + ', ' + d1.getFullYear();
        var dd2 = months[d2.getMonth()] + ' ' + d2.getDate() + ', ' + d2.getFullYear();
        var dd3 = months[d3.getMonth()] + ' ' + d3.getDate() + ', ' + d3.getFullYear();

        var time = (d1.getHours() - (d1.getHours() > 12 ? 12 : 0)) + ':' + (d1.getMinutes() < 10 ? '0' : '') + d1.getMinutes() + ' ' + (d1.getHours() >= 12 ? 'pm' : 'am');
        var time2 = (d1.getHours() - (d1.getHours() > 12 ? 12 : 0)) + ':' + (d1.getMinutes() < 10 ? '0' : '') + d1.getMinutes() + ':' + (d1.getSeconds() < 10 ? '0' : '') + d1.getSeconds() + ' ' + (d1.getHours() >= 12 ? 'pm' : 'am');
        var dsp = dd1;
        if (dd1 === dd2) dsp = time;
        if (dd1 === dd3) dsp = w2utils.lang('Yesterday');
        if(span){
            return '<span title="' + dd1 + ' ' + time2 + '">' + dsp + '</span>';
        }else{
            return dsp;
        }
    }

    function formatSize(sizeStr) {
        if (!w2utils.isFloat(sizeStr) || sizeStr === '') return '';
        sizeStr = parseFloat(sizeStr);
        if (sizeStr === 0) return 0;
        var sizes = ['Bt', 'KB', 'MB', 'GB', 'TB'];
        var i = parseInt(Math.floor(Math.log(sizeStr) / Math.log(1024)));
        return (Math.floor(sizeStr / Math.pow(1024, i) * 10) / 10).toFixed(i === 0 ? 0 : 1) + ' ' + sizes[i];
    }

    function formatNumber(val, groupSymbol, decimalSymbol) {
        var ret = '';
        if (groupSymbol == null) groupSymbol = w2utils.settings.groupSymbol || ',';
        if (decimalSymbol == null) decimalSymbol = w2utils.settings.decimalSymbol || '.';
        // check if this is a number
        if (w2utils.isFloat(val) || w2utils.isInt(val) || w2utils.isMoney(val)) {
            tmp = String(val).split('.');
            ret = String(tmp[0]).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + groupSymbol);
            if (tmp[1] != null) ret += decimalSymbol + tmp[1];
        }
        return ret;
    }

    function formatDate(dateStr, format) { // IMPORTANT dateStr HAS TO BE valid JavaScript Date String
        if (!format) format = this.settings.date_format;
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';

        var dt = new Date(dateStr);
        if (w2utils.isInt(dateStr)) dt = new Date(Number(dateStr)); // for unix timestamps
        if (String(dt) == 'Invalid Date') return '';

        var year = dt.getFullYear();
        var month = dt.getMonth();
        var date = dt.getDate();
        return format.toLowerCase()
            .replace('month', w2utils.settings.fullmonths[month])
            .replace('mon', w2utils.settings.shortmonths[month])
            .replace(/yyyy/g, year)
            .replace(/yyy/g, year)
            .replace(/yy/g, year > 2000 ? 100 + parseInt(String(year).substr(2)) : String(year).substr(2))
            .replace(/(^|[^a-z$])y/g, '$1' + year) // only y's that are not preceeded by a letter
            .replace(/mm/g, (month + 1 < 10 ? '0' : '') + (month + 1))
            .replace(/dd/g, (date < 10 ? '0' : '') + date)
            .replace(/th/g, (date == 1 ? 'st' : 'th'))
            .replace(/th/g, (date == 2 ? 'nd' : 'th'))
            .replace(/th/g, (date == 3 ? 'rd' : 'th'))
            .replace(/(^|[^a-z$])m/g, '$1' + (month + 1)) // only y's that are not preceeded by a letter
            .replace(/(^|[^a-z$])d/g, '$1' + date); // only y's that are not preceeded by a letter
    }

    function formatTime(dateStr, format) { // IMPORTANT dateStr HAS TO BE valid JavaScript Date String
        var months = w2utils.settings.shortmonths;
        var fullMonths = w2utils.settings.fullmonths;
        if (!format) format = this.settings.time_format;
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';

        var dt = new Date(dateStr);
        if (w2utils.isInt(dateStr)) dt = new Date(Number(dateStr)); // for unix timestamps
        if (w2utils.isTime(dateStr)) {
            var tmp = w2utils.isTime(dateStr, true);
            dt = new Date();
            dt.setHours(tmp.hours);
            dt.setMinutes(tmp.minutes);
        }
        if (String(dt) == 'Invalid Date') return '';

        var type = 'am';
        var hour = dt.getHours();
        var h24 = dt.getHours();
        var min = dt.getMinutes();
        var sec = dt.getSeconds();
        if (min < 10) min = '0' + min;
        if (sec < 10) sec = '0' + sec;
        if (format.indexOf('am') !== -1 || format.indexOf('pm') !== -1) {
            if (hour >= 12) type = 'pm';
            if (hour > 12) hour = hour - 12;
        }
        return format.toLowerCase()
            .replace('am', type)
            .replace('pm', type)
            .replace('hhh', (hour < 10 ? '0' + hour : hour))
            .replace('hh24', (h24 < 10 ? '0' + h24 : h24))
            .replace('h24', h24)
            .replace('hh', hour)
            .replace('mm', min)
            .replace('mi', min)
            .replace('ss', sec)
            .replace(/(^|[^a-z$])h/g, '$1' + hour) // only y's that are not preceeded by a letter
            .replace(/(^|[^a-z$])m/g, '$1' + min) // only y's that are not preceeded by a letter
            .replace(/(^|[^a-z$])s/g, '$1' + sec); // only y's that are not preceeded by a letter
    }

    function formatDateTime(dateStr, format) {
        var fmt;
        if (dateStr === '' || dateStr == null || (typeof dateStr == 'object' && !dateStr.getMonth)) return '';
        if (typeof format !== 'string') {
            fmt = [this.settings.date_format, this.settings.time_format];
        } else {
            fmt = format.split('|');
        }
        return this.formatDate(dateStr, fmt[0]) + ' ' + this.formatTime(dateStr, fmt[1]);
    }

    function stripTags(html) {
        if (html === null) return html;
        switch (typeof html) {
            case 'number':
                break;
            case 'string':
                html = $.trim(String(html).replace(/(<([^>]+)>)/ig, ""));
                break;
            case 'object':
                for (var a in html) html[a] = this.stripTags(html[a]);
                break;
        }
        return html;
    }

    function encodeTags(html) {
        if (html === null) return html;
        switch (typeof html) {
            case 'number':
                break;
            case 'string':
                html = String(html).replace(/&/g, "&amp;").replace(/>/g, "&gt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
                break;
            case 'object':
                for (var a in html) html[a] = this.encodeTags(html[a]);
                break;
        }
        return html;
    }

    function escapeId(id) {
        if (id === '' || id == null) return '';
        return String(id).replace(/([;&,\.\+\*\~'`:"\!\^#$%@\[\]\(\)=<>\|\/? {}\\])/g, '\\$1');
    }

    function base64encode(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        input = utf8_encode(input);

        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
        }

        function utf8_encode(string) {
            string = String(string).replace(/\r\n/g, "\n");
            var utftext = "";

            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
            }
            return utftext;
        }

        return output;
    }

    function base64decode(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {
            enc1 = keyStr.indexOf(input.charAt(i++));
            enc2 = keyStr.indexOf(input.charAt(i++));
            enc3 = keyStr.indexOf(input.charAt(i++));
            enc4 = keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }
        }
        output = utf8_decode(output);

        function utf8_decode(utftext) {
            var string = "";
            var i = 0;
            var c = 0,
                c2, c3;

            while (i < utftext.length) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if ((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = utftext.charCodeAt(i + 1);
                    c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }

            return string;
        }

        return output;
    }

    function transition(div_old, div_new, type, callBack) {
        var width = $(div_old).width();
        var height = $(div_old).height();
        var time = 0.5;

        if (!div_old || !div_new) {
            console.log('ERROR: Cannot do transition when one of the divs is null');
            return;
        }

        div_old.parentNode.style.cssText += cross('perspective', '700px') + '; overflow: hidden;';
        div_old.style.cssText += '; position: absolute; z-index: 1019; ' + cross('backface-visibility', 'hidden');
        div_new.style.cssText += '; position: absolute; z-index: 1020; ' + cross('backface-visibility', 'hidden');

        switch (type) {
            case 'slide-left':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(' + width + 'px, 0, 0)', 'translate(' + width + 'px, 0)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + ';' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + ';' + cross('transform', 'translate3d(-' + width + 'px, 0, 0)', 'translate(-' + width + 'px, 0)');
                }, 1);
                break;

            case 'slide-right':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(-' + width + 'px, 0, 0)', 'translate(-' + width + 'px, 0)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0px, 0, 0)', 'translate(0px, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(' + width + 'px, 0, 0)', 'translate(' + width + 'px, 0)');
                }, 1);
                break;

            case 'slide-down':
                // init divs
                div_old.style.cssText += 'overflow: hidden; z-index: 1; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; z-index: 0; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, ' + height + 'px, 0)', 'translate(0, ' + height + 'px)');
                }, 1);
                break;

            case 'slide-up':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, ' + height + 'px, 0)', 'translate(0, ' + height + 'px)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                }, 1);
                break;

            case 'flip-left':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(-180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(180deg)');
                }, 1);
                break;

            case 'flip-right':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateY(180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateY(-180deg)');
                }, 1);
                break;

            case 'flip-down':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(-180deg)');
                }, 1);
                break;

            case 'flip-up':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(0deg)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'rotateX(-180deg)');
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(0deg)');
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'rotateX(180deg)');
                }, 1);
                break;

            case 'pop-in':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; ' + cross('transform', 'scale(.8)') + '; opacity: 0;';
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'scale(1)') + '; opacity: 1;';
                    div_old.style.cssText += cross('transition', time + 's') + ';';
                }, 1);
                break;

            case 'pop-out':
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; ' + cross('transform', 'scale(1)') + '; opacity: 1;';
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; opacity: 0;';
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; opacity: 1;';
                    div_old.style.cssText += cross('transition', time + 's') + '; ' + cross('transform', 'scale(1.7)') + '; opacity: 0;';
                }, 1);
                break;

            default:
                // init divs
                div_old.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)');
                div_new.style.cssText += 'overflow: hidden; ' + cross('transform', 'translate3d(0, 0, 0)', 'translate(0, 0)') + '; opacity: 0;';
                $(div_new).show();
                // -- need a timing function because otherwise not working
                window.setTimeout(function() {
                    div_new.style.cssText += cross('transition', time + 's') + '; opacity: 1;';
                    div_old.style.cssText += cross('transition', time + 's');
                }, 1);
                break;
        }

        setTimeout(function() {
            if (type === 'slide-down') {
                $(div_old).css('z-index', '1019');
                $(div_new).css('z-index', '1020');
            }
            if (div_new) {
                $(div_new).css({
                    'opacity': '1'
                }).css(w2utils.cssPrefix({
                    'transition': '',
                    'transform': '',
                    'backface-visibility': ''
                }));
            }
            if (div_old) {
                $(div_old).css({
                    'opacity': '1'
                }).css(w2utils.cssPrefix({
                    'transition': '',
                    'transform': '',
                    'backface-visibility': ''
                }));
                if (div_old.parentNode) $(div_old.parentNode).css(w2utils.cssPrefix('perspective', ''));
            }
            if (typeof callBack === 'function') callBack();
        }, time * 1000);

        function cross(property, value, none_webkit_value) {
            var isWebkit = !!window.webkitURL; // jQuery no longer supports $.browser - RR
            if (!isWebkit && typeof none_webkit_value !== 'undefined') value = none_webkit_value;
            return ';' + property + ': ' + value + '; -webkit-' + property + ': ' + value + '; -moz-' + property + ': ' + value + '; ' +
                '-ms-' + property + ': ' + value + '; -o-' + property + ': ' + value + ';';
        }
    }

    function lock(box, msg, spinner) {
        var options = {};
        if (typeof msg === 'object') {
            options = msg;
        } else {
            options.msg = msg;
            options.spinner = spinner;
        }
        if (!options.msg && options.msg !== 0) options.msg = '';
        w2utils.unlock(box);
        $(box).prepend(
            '<div class="w2ui-lock"></div>' +
            '<div class="w2ui-lock-msg"></div>'
        );
        var $lock = $(box).find('.w2ui-lock');
        var mess = $(box).find('.w2ui-lock-msg');
        if (!options.msg) mess.css({
            'background-color': 'transparent',
            'border': '0px'
        });
        if (options.spinner === true) options.msg = '<div class="w2ui-spinner" ' + (!options.msg ? 'style="width: 35px; height: 35px"' : '') + '></div>' + options.msg;
        if (options.opacity != null) $lock.css('opacity', options.opacity);
        if (typeof $lock.fadeIn == 'function') {
            $lock.fadeIn(200);
            mess.html(options.msg).fadeIn(200);
        } else {
            $lock.show();
            mess.html(options.msg).show(0);
        }
        // hide all tags (do not hide overlays as the form can be in overlay)
        $().w2tag();
    }

    function unlock(box, speed) {
        if (isInt(speed)) {
            $(box).find('.w2ui-lock').fadeOut(speed);
            setTimeout(function() {
                $(box).find('.w2ui-lock').remove();
                $(box).find('.w2ui-lock-msg').remove();
            }, speed);
        } else {
            $(box).find('.w2ui-lock').remove();
            $(box).find('.w2ui-lock-msg').remove();
        }
    }

    function getSize(el, type) {
        var $el = $(el);
        var bwidth = {
            left: parseInt($el.css('border-left-width')) || 0,
            right: parseInt($el.css('border-right-width')) || 0,
            top: parseInt($el.css('border-top-width')) || 0,
            bottom: parseInt($el.css('border-bottom-width')) || 0
        };
        var mwidth = {
            left: parseInt($el.css('margin-left')) || 0,
            right: parseInt($el.css('margin-right')) || 0,
            top: parseInt($el.css('margin-top')) || 0,
            bottom: parseInt($el.css('margin-bottom')) || 0
        };
        var pwidth = {
            left: parseInt($el.css('padding-left')) || 0,
            right: parseInt($el.css('padding-right')) || 0,
            top: parseInt($el.css('padding-top')) || 0,
            bottom: parseInt($el.css('padding-bottom')) || 0
        };
        switch (type) {
            case 'top':
                return bwidth.top + mwidth.top + pwidth.top;
            case 'bottom':
                return bwidth.bottom + mwidth.bottom + pwidth.bottom;
            case 'left':
                return bwidth.left + mwidth.left + pwidth.left;
            case 'right':
                return bwidth.right + mwidth.right + pwidth.right;
            case 'width':
                return bwidth.left + bwidth.right + mwidth.left + mwidth.right + pwidth.left + pwidth.right + parseInt($el.width());
            case 'height':
                return bwidth.top + bwidth.bottom + mwidth.top + mwidth.bottom + pwidth.top + pwidth.bottom + parseInt($el.height());
            case '+width':
                return bwidth.left + bwidth.right + mwidth.left + mwidth.right + pwidth.left + pwidth.right;
            case '+height':
                return bwidth.top + bwidth.bottom + mwidth.top + mwidth.bottom + pwidth.top + pwidth.bottom;
        }
        return 0;
    }

    function lang(phrase) {
        var translation = this.settings.phrases[phrase];
        if (translation == null) return phrase;
        else return translation;
    }

    function locale(locale) {
        if (!locale) locale = 'en-us';
        if (typeof locale === 'object') {
            w2utils.settings = $.extend(true, w2utils.settings, locale);
            // apply translation to some prototype functions
            var p = w2obj.grid.prototype;
            for (var b in p.buttons) {
                p.buttons[b].caption = w2utils.lang(p.buttons[b].caption);
                p.buttons[b].hint = w2utils.lang(p.buttons[b].hint);
            }
            p.msgDelete = w2utils.lang(p.msgDelete);
            p.msgNotJSON = w2utils.lang(p.msgNotJSON);
            p.msgRefresh = w2utils.lang(p.msgRefresh);
        } else {
            if (locale.length === 5) locale = 'locale/' + locale + '.json';

            // clear phrases from language before
            w2utils.settings.phrases = {};

            // load from the file
            $.ajax({
                url: locale,
                type: "GET",
                dataType: "JSON",
                async: false,
                cache: false,
                success: function(data, status, xhr) {
                    w2utils.settings = $.extend(true, w2utils.settings, data);
                    // apply translation to some prototype functions
                    var p = w2obj.grid.prototype;
                    for (var b in p.buttons) { // buttons is an object
                        p.buttons[b].caption = w2utils.lang(p.buttons[b].caption);
                        p.buttons[b].hint = w2utils.lang(p.buttons[b].hint);
                    }
                    p.msgDelete = w2utils.lang(p.msgDelete);
                    p.msgNotJSON = w2utils.lang(p.msgNotJSON);
                    p.msgRefresh = w2utils.lang(p.msgRefresh);
                },
                error: function(xhr, status, msg) {
                    console.log('ERROR: Cannot load locale ' + locale);
                }
            });
        }
    }

    function scrollBarSize() {
        if (tmp.scrollBarSize) return tmp.scrollBarSize;
        var html =
            '<div id="_scrollbar_width" style="position: absolute; top: -300px; width: 100px; height: 100px; overflow-y: scroll;">' +
            '    <div style="height: 120px">1</div>' +
            '</div>';
        $('body').append(html);
        tmp.scrollBarSize = 100 - $('#_scrollbar_width > div').width();
        $('#_scrollbar_width').remove();
        if (String(navigator.userAgent).indexOf('MSIE') >= 0) tmp.scrollBarSize = tmp.scrollBarSize / 2; // need this for IE9+
        return tmp.scrollBarSize;
    }


    function checkName(params, component) { // was w2checkNameParam
        if (!params || typeof params.name === 'undefined') {
            console.log('ERROR: The parameter "name" is required but not supplied in $().' + component + '().');
            return false;
        }
        if (typeof w2ui[params.name] !== 'undefined') {
            console.log('ERROR: The parameter "name" is not unique. There are other objects already created with the same name (obj: ' + params.name + ').');
            return false;
        }
        if (!w2utils.isAlphaNumeric(params.name)) {
            console.log('ERROR: The parameter "name" has to be alpha-numeric (a-z, 0-9, dash and underscore). ');
            return false;
        }
        return true;
    }

    function checkUniqueId(id, items, itemsDecription, objName) { // was w2checkUniqueId
        if (!$.isArray(items)) items = [items];
        for (var i = 0; i < items.length; i++) {
            if (items[i].id === id) {
                console.log('ERROR: The parameter "id=' + id + '" is not unique within the current ' + itemsDecription + '. (obj: ' + objName + ')');
                return false;
            }
        }
        return true;
    }

    function parseRoute(route) {
        var keys = [];
        var path = route
            .replace(/\/\(/g, '(?:/')
            .replace(/\+/g, '__plus__')
            .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional) {
                keys.push({
                    name: key,
                    optional: !!optional
                });
                slash = slash || '';
                return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '');
            })
            .replace(/([\/.])/g, '\\$1')
            .replace(/__plus__/g, '(.+)')
            .replace(/\*/g, '(.*)');
        return {
            path: new RegExp('^' + path + '$', 'i'),
            keys: keys
        };
    }

    function cssPrefix(field, value, returnString) {
        var css = {};
        var newCSS = {};
        var ret = '';
        if (!$.isPlainObject(field)) {
            css[field] = value;
        } else {
            css = field;
            if (value === true) returnString = true;
        }
        for (var c in css) {
            newCSS[c] = css[c];
            newCSS['-webkit-' + c] = css[c];
            newCSS['-moz-' + c] = css[c].replace('-webkit-', '-moz-');
            newCSS['-ms-' + c] = css[c].replace('-webkit-', '-ms-');
            newCSS['-o-' + c] = css[c].replace('-webkit-', '-o-');
        }
        if (returnString === true) {
            for (var c in newCSS) {
                ret += c + ': ' + newCSS[c] + '; ';
            }
        } else {
            ret = newCSS;
        }
        return ret;
    }

    function escapeRegExp(str) {
        var txt = str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        return txt;
    }

    function validate(model, el) {
        var errors = modelErrors(model);
        if (errors.length > 0) {
            validateRaw(el, errors);
            return false;
        }
        return true;
    }

    function modelErrors(model) {
        var errors = [],
            eventdata;
        $().w2tag();
        var fields;

        if (typeof(model.fields) === 'function')
            fields = model.fields();
        else {
            fields = model.fields;
        }
        for (var f in fields) {
            var field = fields[f];
            if (model.get(field.name) === null) {
                model.set(field.name, '',{silent:true});
            }
            switch (field.type) {
                case 'int':
                    if (model.get(field.name) && !w2utils.isInt(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not an integer')
                        });
                    }
                    break;
                case 'float':
                    if (model.get(field.name) && !w2utils.isFloat(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a float')
                        });
                    }
                    break;
                case 'money':
                    if (this.record[field.name] && !w2utils.isMoney(this.record[field.name])) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not in money format')
                        });
                    }
                    break;
                case 'color':
                case 'hex':
                    if (model.get(field.name) && !w2utils.isHex(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a hex number')
                        });
                    }
                    break;
                case 'email':
                    if (model.get(field.name) && !w2utils.isEmail(model.get(field.name))) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a valid email')
                        });
                    }
                    break;
                case 'checkbox':
                    // convert true/false
                    if (model.get(field.name) === true) {
                        model.set(field.name, 1);
                    } else {
                        model.set(field.name, 0);
                    }
                    break;
                case 'date':
                    // format date before submit
                    //if (!field.options.format) field.options.format = w2utils.settings.date_format;
                    if (model.get(field.name) && !w2utils.isDate(model.get(field.name), w2utils.settings.date_format)) {
                        errors.push({
                            name: field.el.replace('#', ''),
                            message: w2utils.lang('Not a valid date') /*+': ' + field.options.format*/
                        });
                    } else {}
                    break;
                case 'list':
                case 'combo':
                    break;
                case 'enum':
                    break;
                case 'model':
                    var mdl = model.get(field.name);
                    var childerrors = w2utils.modelErrors(mdl);
                    errors = _.union(errors, childerrors);
                    break;
                case 'collection':
                    var ok = true;
                    $.each(model.get(field.name).models, function(i, mdl) {
                        var childerrors = w2utils.modelErrors(mdl);
                        errors = _.union(errors, childerrors);
                    });
                    // if (!ok) {
                    //     errors.push({
                    //         field: field,
                    //         error: w2utils.lang('Child not valid') /*+': ' + field.options.format*/
                    //     });
                    // }
                    break;
            }
            // === check required - if field is '0' it should be considered not empty
            var val = model.get(field.name);
            if (field.required && (val === '' || (val!==0 && !val) || ($.isArray(val) && val.length === 0) || ($.isPlainObject(val) && $.isEmptyObject(val)))) {
                errors.push({
                    name: field.el.replace('#', ''),
                    message: w2utils.lang('Required field')
                });
            }
            if (field.equalto && model.get(field.name) != model.get(field.name)) {
                errors.push({
                    name: field.el.replace('#', ''),
                    message: w2utils.lang('Field should be equal to ') + field.equalto
                });
            }
        }
        // event before
        eventData = {
            phase: 'before',
            target: model.id,
            type: 'validate',
            errors: errors
        };
        //if (eventData.isCancelled === true) return;
        // show error

        if (false)
            for (var e in eventData.errors) {
                var err = eventData.errors[e];
                if (err.field.type == 'radio') { // for radio and checkboxes
                    $($(err.field.el).parents('div')[0]).w2tag(err.error, {
                        'class': 'w2ui-error'
                    });
                } else if (['enum', 'file'].indexOf(err.field.type) != -1) {
                    (function(err) {
                        setTimeout(function() {
                            var fld = $(err.field.el).data('w2field').helpers.multi;
                            $(err.field.el).w2tag(err.error);
                            $(fld).addClass('w2ui-error');
                        }, 1);
                    })(err);
                } else if (err.field.type == 'collection') {
                    continue;
                } else {
                    if ($(err.field.el).length > 0) {
                        $(err.field.el).w2tag(err.error, {
                            'class': 'w2ui-error',
                            //'parentEl': $(err.field.el).parents('.w2ui-page')
                        });
                    }
                }

            }
            // event after
        model.trigger($.extend(eventData, {
            phase: 'after'
        }));
        return errors;
    }


    function validateRaw(el, errors) {
        if (true)
            for (var e in errors) {
                var err = errors[e];
                var type = "";
                var realfield = $(el.find('#' + err.name)).w2field();
                var fname = '#' + err.name;
                var parent = $(fname).parent();
                //if(!field){
                var field = $(el.find('#' + err.name));

                type = realfield ? realfield.type : "";
                if (realfield) {
                    if (type == 'radio') { // for radio and checkboxes
                        $(realfield.el).parents('div')[0].w2tag(err.message, {
                            "class": 'w2ui-error',
                            parentEl: parent
                        });
                    } else if (['enum', 'file'].indexOf(type) != -1) {
                        //(function(err) {
                        //    setTimeout(function() {
                        var fld = realfield.helpers.multi;
                        $(realfield.el).w2tag(err.message, {
                            parentEl: parent,
                            onHide: function(e) {
                                $(fld).removeClass('w2ui-error');
                            }
                        });
                        $(fld).addClass('w2ui-error');
                        //    }, 1);
                        //})(err);
                    } else {
                        $(realfield.el).w2tag(err.message, {
                            "class": 'w2ui-error',
                            parentEl: parent
                        });
                    }
                } else {
                    field.w2tag(err.message, {
                        "class": 'w2ui-error',
                        parentEl: parent
                    });
                }
            }
    }

})();

/***********************************************************
 *  Generic Event Object
 *  --- This object is reused across all other
 *  --- widgets in w2ui.
 *
 *********************************************************/

w2utils.event = {
    on: function(eventData, handler) {
        if (!$.isPlainObject(eventData)) eventData = {
            type: eventData
        };
        eventData = $.extend({
            type: null,
            execute: 'before',
            target: null,
            onComplete: null
        }, eventData);

        if (!eventData.type) {
            console.log('ERROR: You must specify event type when calling .on() method of ' + this.name);
            return;
        }
        if (!handler) {
            console.log('ERROR: You must specify event handler function when calling .on() method of ' + this.name);
            return;
        }
        if (!$.isArray(this.handlers)) this.handlers = [];
        this.handlers.push({
            event: eventData,
            handler: handler
        });
    },

    off: function(eventData, handler) {
        if (!$.isPlainObject(eventData)) eventData = {
            type: eventData
        };
        eventData = $.extend({}, {
            type: null,
            execute: 'before',
            target: null,
            onComplete: null
        }, eventData);

        if (!eventData.type) {
            console.log('ERROR: You must specify event type when calling .off() method of ' + this.name);
            return;
        }
        if (!handler) {
            handler = null;
        }
        // remove handlers
        var newHandlers = [];
        for (var h = 0, len = this.handlers.length; h < len; h++) {
            var t = this.handlers[h];
            if ((t.event.type === eventData.type || eventData.type === '*') &&
                (t.event.target === eventData.target || eventData.target === null) &&
                (t.handler === handler || handler === null)) {
                // match
            } else {
                newHandlers.push(t);
            }
        }
        this.handlers = newHandlers;
    },

    trigger: function(eventData) {
        var eventData = $.extend({
            type: null,
            phase: 'before',
            target: null
        }, eventData, {
            isStopped: false,
            isCancelled: false,
            preventDefault: function() {
                this.isCancelled = true;
            },
            stopPropagation: function() {
                this.isStopped = true;
            }
        });
        if (eventData.phase === 'before') eventData.onComplete = null;
        var args, fun, tmp;
        if (eventData.target == null) eventData.target = null;
        if (!$.isArray(this.handlers)) this.handlers = [];
        // process events in REVERSE order
        for (var h = this.handlers.length - 1; h >= 0; h--) {
            var item = this.handlers[h];
            if ((item.event.type === eventData.type || item.event.type === '*') &&
                (item.event.target === eventData.target || item.event.target === null) &&
                (item.event.execute === eventData.phase || item.event.execute === '*' || item.event.phase === '*')) {
                eventData = $.extend({}, item.event, eventData);
                // check handler arguments
                args = [];
                tmp = new RegExp(/\((.*?)\)/).exec(item.handler);
                if (tmp) args = tmp[1].split(/\s*,\s*/);
                if (args.length === 2) {
                    item.handler.call(this, eventData.target, eventData); // old way for back compatibility
                } else {
                    item.handler.call(this, eventData); // new way
                }
                if (eventData.isStopped === true || eventData.stop === true) return eventData; // back compatibility eventData.stop === true
            }
        }
        // main object events
        var funName = 'on' + eventData.type.substr(0, 1).toUpperCase() + eventData.type.substr(1);
        if (eventData.phase === 'before' && typeof this[funName] === 'function') {
            fun = this[funName];
            // check handler arguments
            args = [];
            tmp = new RegExp(/\((.*?)\)/).exec(fun);
            if (tmp) args = tmp[1].split(/\s*,\s*/);
            if (args.length === 2) {
                fun.call(this, eventData.target, eventData); // old way for back compatibility
            } else {
                fun.call(this, eventData); // new way
            }
            if (eventData.isStopped === true || eventData.stop === true) return eventData; // back compatibility eventData.stop === true
        }
        // item object events
        if (eventData.object != null && eventData.phase === 'before' &&
            typeof eventData.object[funName] === 'function') {
            fun = eventData.object[funName];
            // check handler arguments
            args = [];
            tmp = new RegExp(/\((.*?)\)/).exec(fun);
            if (tmp) args = tmp[1].split(/\s*,\s*/);
            if (args.length === 2) {
                fun.call(this, eventData.target, eventData); // old way for back compatibility
            } else {
                fun.call(this, eventData); // new way
            }
            if (eventData.isStopped === true || eventData.stop === true) return eventData;
        }
        // execute onComplete
        if (eventData.phase === 'after' && typeof eventData.onComplete === 'function') eventData.onComplete.call(this, eventData);

        return eventData;
    }
};

/***********************************************************
 *  Common Keyboard Handler. Supported in
 *  - grid
 *  - sidebar
 *  - popup
 *
 *********************************************************/

w2utils.keyboard = (function(obj) {
    // private scope
    var w2ui_name = null;

    obj.active = active;
    obj.clear = clear;

    init();
    return obj;

    function init() {
        $(document).on('keydown', keydown);
        $(document).on('mousedown', mousedown);
    }

    function keydown(event) {
        var tag = event.target.tagName;
        if ($.inArray(tag, ['INPUT', 'SELECT', 'TEXTAREA']) !== -1) return;
        if ($(event.target).prop('contenteditable') === 'true') return;
        if (!w2ui_name) return;
        // pass to appropriate widget
        if (w2ui[w2ui_name] && typeof w2ui[w2ui_name].keydown === 'function') {
            w2ui[w2ui_name].keydown.call(w2ui[w2ui_name], event);
        }
    }

    function mousedown(event) {
        var tag = event.target.tagName;
        var els = $(event.target).parents('.w2ui-grid, .w2ui-sidebar, .w2ui-popup, .w2ui-keyboard');
        if (els.length > 0) {
            var name = els.attr('name');
            var obj = w2ui[name];
            if (name != w2ui_name) {
                if (clear(event) === false) return; // event cancelled
                if (active(name, event) === false) return; // event cancelled
            }
            if (obj && obj.keyboard) w2ui_name = name;
        } else {
            clear(event);
        }
    }

    function active(new_w2ui_name, event) {
        if (new_w2ui_name == null) return w2ui_name;
        var obj = w2ui[new_w2ui_name];
        if (obj && obj.focus) {
            if (obj.focus.call(obj, event) === false) return false;
        }
        w2ui_name = new_w2ui_name;
        return true;
    }

    function clear(event) {
        if (w2ui_name != null && w2ui[w2ui_name] && w2ui[w2ui_name].blur) {
            if (w2ui[w2ui_name].blur.call(w2ui[w2ui_name], event) === false) return false;
        }
        w2ui_name = null;
        return true;
    }

})({});

/***********************************************************
 *  Commonly used plugins
 *  --- used primarily in grid and form
 *
 *********************************************************/

(function() {

    $.fn.w2render = function(name) {
        if ($(this).length > 0) {
            if (typeof name === 'string' && w2ui[name]) w2ui[name].render($(this)[0]);
            if (typeof name === 'object') name.render($(this)[0]);
        }
    };

    $.fn.w2destroy = function(name) {
        if (!name && this.length > 0) name = this.attr('name');
        if (typeof name === 'string' && w2ui[name]) w2ui[name].destroy();
        if (typeof name === 'object') name.destroy();
    };

    $.fn.w2marker = function() {
        var str = Array.prototype.slice.call(arguments, 0);
        if (str.length == 0 || !str[0]) { // remove marker
            return $(this).each(clearMarkedText);
        } else { // add marker
            return $(this).each(function(index, el) {
                clearMarkedText(index, el);
                for (var s = 0; s < str.length; s++) {
                    var tmp = str[s];
                    if (typeof tmp !== 'string') tmp = String(tmp);
                    // escape regex special chars
                    tmp = tmp.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&").replace(/&/g, '&amp;').replace(/</g, '&gt;').replace(/>/g, '&lt;');
                    var regex = new RegExp(tmp + '(?!([^<]+)?>)', "gi"); // only outside tags
                    el.innerHTML = el.innerHTML.replace(regex, replaceValue);
                }

                function replaceValue(matched) { // mark new
                    return '<span class="w2ui-marker">' + matched + '</span>';
                }
            });
        }

        function clearMarkedText(index, el) {
            while (el.innerHTML.indexOf('<span class="w2ui-marker">') != -1) {
                el.innerHTML = el.innerHTML.replace(/\<span class=\"w2ui\-marker\"\>(.*)\<\/span\>/ig, '$1'); // unmark
            }
        }
    };

    // -- w2tag - appears on the right side from element, there can be multiple on screen at a time

    $.fn.w2tag = function(text, options) {
        if (!$.isPlainObject(options)) options = {};
        if (!$.isPlainObject(options.css)) options.css = {};
        if (typeof options['class'] === 'undefined') options['class'] = '';
        // remove all tags
        if ($(this).length === 0) {
            $('.w2ui-tag').each(function(index, elem) {
                var opt = $(elem).data('options');
                if (opt == null) opt = {};
                $($(elem).data('taged-el')).removeClass(opt['class']);
                clearInterval($(elem).data('timer'));
                $(elem).remove();
            });
            return;
        }
        return $(this).each(function(index, el) {
            // show or hide tag
            var tagOrigID = (options.id ? options.id : el.id);
            var tagID = w2utils.escapeId(tagOrigID);
            if (text === '' || text == null) {
                $('#w2ui-tag-' + tagID).css('opacity', 0);
                // remmove element
                clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                $('#w2ui-tag-' + tagID).remove();
            } else {
                // remove elements
                clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                $('#w2ui-tag-' + tagID).remove();
                // insert
                var parentEl = options.parentEl ? options.parentEl : $('body');
                parentEl.append(
                    '<div id="w2ui-tag-' + tagOrigID + '" class="w2ui-tag ' + ($(el).parents('.w2ui-popup').length > 0 ? 'w2ui-tag-popup' : '') +
                    '" style="' + (options.parentEl ? 'position:fixed' : '') + '"></div>');

                var timer = setInterval(function() {
                    // monitor if destroyed
                    if ($(el).length === 0 || ($(el).offset().left === 0 && $(el).offset().top === 0)) {
                        clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                        tmp_hide();
                        return;
                    }
                    // monitor if moved
                    if ($('#w2ui-tag-' + tagID).data('position') !== ($(el).offset().left + el.offsetWidth) + 'x' + $(el).offset().top) {
                        $('#w2ui-tag-' + tagID).css(w2utils.cssPrefix({
                            'transition': '.2s'
                        })).css({
                            left: ($(el).offset().left + el.offsetWidth + (options.left ? options.left : 0)) + 'px',
                            top: ($(el).offset().top + (options.top ? options.top : 0)) + 'px'
                        }).data('position', ($(el).offset().left + el.offsetWidth) + 'x' + $(el).offset().top);
                    }
                }, 100);
                setTimeout(function() {
                    if (!$(el).offset()) return;
                    $('#w2ui-tag-' + tagID).css({
                            opacity: '1',
                            left: ($(el).offset().left + el.offsetWidth + (options.left ? options.left : 0)) + 'px',
                            top: ($(el).offset().top + (options.top ? options.top : 0)) + 'px'
                        }).html('<div style="margin-top: -2px 0px 0px -2px; white-space: nowrap;"> <div class="w2ui-tag-body">' + text + '</div> </div>')
                        .data('text', text)
                        .data('taged-el', el)
                        .data('options', options)
                        .data('position', ($(el).offset().left + el.offsetWidth) + 'x' + $(el).offset().top)
                        .data('timer', timer);
                    $(el).off('keypress', tmp_hide).on('keypress', tmp_hide).off('change', tmp_hide).on('change', tmp_hide)
                        .css(options.css).addClass(options['class']);
                    if (typeof options.onShow === 'function') options.onShow();
                }, 1);
                var originalCSS = '';
                if ($(el).length > 0) originalCSS = $(el)[0].style.cssText;
                // bind event to hide it
                function tmp_hide() {
                    $tag = $('#w2ui-tag-' + tagID);
                    if ($tag.length <= 0) return;
                    clearInterval($tag.data('timer'));
                    $tag.remove();
                    $(el).off('keypress', tmp_hide).removeClass(options['class']);
                    if ($(el).length > 0) $(el)[0].style.cssText = originalCSS;
                    if (typeof options.onHide === 'function') options.onHide();
                }
            }
        });
    };

    // -- w2tag - appears on the right side from element, there can be multiple on screen at a time

    $.fn.w2error = function(text, options) {
        if (!$.isPlainObject(options)) options = {};
        if (!$.isPlainObject(options.css)) options.css = {};
        if (typeof options['class'] === 'undefined') options['class'] = '';
        // remove all tags
        if ($(this).length === 0) {
            $('.w2ui-tag').each(function(index, elem) {
                var opt = $(elem).data('options');
                if (opt == null) opt = {};
                $($(elem).data('taged-el')).removeClass(opt['class']);
                $(elem).remove();
            });
            return;
        }
        return $(this).each(function(index, el) {
            // show or hide tag
            var tagOrigID = (options.id ? options.id : el.id);
            var tagID = w2utils.escapeId(tagOrigID);
            if (text === '' || text == null) {
                $('#w2ui-tag-' + tagID).css('opacity', 0);
                // remmove element
                clearInterval($('#w2ui-tag-' + tagID).data('timer'));
                $('#w2ui-tag-' + tagID).remove();
            } else {
                $('#w2ui-tag-' + tagID).remove();
                // insert
                var parentEl = options.parentEl;
                parentEl.append(
                    '<div id="w2ui-tag-' + tagOrigID + '" class="w2ui-tag ' + ($(el).parents('.w2ui-popup').length > 0 ? 'w2ui-tag-popup' : '') +
                    '" style=""></div>');
                $('#w2ui-tag-' + tagID).css({
                        left: $(el).offsetWidth(),
                        top: 0,
                        opacity: '1'
                    }).html('<div style="margin-top: -2px 0px 0px -2px; white-space: nowrap;"> <div class="w2ui-tag-body">' + text + '</div> </div>')
                    .data('text', text)
                    .data('taged-el', el)
                    .data('options', options);

            }
        });
    };

    // w2overlay - appears under the element, there can be only one at a time

    $.fn.w2overlay = function(html, options) {
        var obj = this;
        var name = '';
        var defaults = {
            name: null, // it not null, then allows multiple concurent overlays
            html: '', // html text to display
            align: 'none', // can be none, left, right, both
            left: 0, // offset left
            top: 0, // offset top
            tipLeft: 30, // tip offset left
            width: 0, // fixed width
            height: 0, // fixed height
            maxWidth: null, // max width if any
            maxHeight: null, // max height if any
            style: '', // additional style for main div
            'class': '', // additional class name for main div
            onShow: null, // event on show
            onHide: null, // event on hide
            openAbove: false, // show abover control
            tmp: {}
        };
        if (arguments.length == 1) {
            if (typeof html == 'object') {
                options = html;
            } else {
                options = {
                    html: html
                };
            }
        }
        if (arguments.length == 2) options.html = html;
        if (!$.isPlainObject(options)) options = {};
        options = $.extend({}, defaults, options);
        if (options.name) name = '-' + options.name;
        // if empty then hide
        var tmp_hide;
        if (this.length === 0 || options.html === '' || options.html == null) {
            if ($('#w2ui-overlay' + name).length > 0) {
                tmp_hide = $('#w2ui-overlay' + name)[0].hide;
                if (typeof tmp_hide === 'function') tmp_hide();
            } else {
                $('#w2ui-overlay' + name).remove();
            }
            return $(this);
        }
        if ($('#w2ui-overlay' + name).length > 0) {
            tmp_hide = $('#w2ui-overlay' + name)[0].hide;
            $(document).off('click', tmp_hide);
            if (typeof tmp_hide === 'function') tmp_hide();
        }
        $('body').append(
            '<div id="w2ui-overlay' + name + '" style="display: none"' +
            '        class="w2ui-reset w2ui-overlay ' + ($(this).parents('.w2ui-popup, .w2ui-overlay-popup').length > 0 ? 'w2ui-overlay-popup' : '') + '">' +
            '    <style></style>' +
            '    <div style="' + options.style + '" class="' + options['class'] + '"></div>' +
            '</div>'
        );
        // init
        var div1 = $('#w2ui-overlay' + name);



        var div2 = div1.find(' > div');
        div2.html(options.html);
        // pick bg color of first div
        var bc = div2.css('background-color');
        if (bc != null && bc !== 'rgba(0, 0, 0, 0)' && bc !== 'transparent') div1.css('background-color', bc);

        div1.data('element', obj.length > 0 ? obj[0] : null)
            .data('options', options)
            .data('position', $(obj).offset().left + 'x' + $(obj).offset().top)
            .fadeIn('fast')
            .on('click', function(event) {
                // if there is label for input, it will produce 2 click events
                if (event.target.tagName == 'LABEL') event.stopPropagation();
            })
            .on('mousedown', function(event) {
                $('#w2ui-overlay' + name).data('keepOpen', true);
                if (['INPUT', 'TEXTAREA', 'SELECT'].indexOf(event.target.tagName) == -1) event.preventDefault();
            });
        div1[0].hide = hide;
        div1[0].resize = resize;

        // need time to display
        resize();
        setTimeout(function() {
            resize();
            $(document).off('click', hide).on('click', hide);
            if (typeof options.onShow === 'function') options.onShow();
            /**
             * modified
             * if we have a hide el we attach click event on hideEl
             * @param  {[type]} options &&            options.hideEl [description]
             * @return {[type]}         [description]
             */
            if (options && options.hideEl) {
                $(options.hideEl).off('click').on('click',
                    function() {
                        hide();
                    });
            }
        }, 10);

        monitor();
        return $(this);

        // monitor position
        function monitor() {
            var tmp = $('#w2ui-overlay' + name);
            if (tmp.data('element') !== obj[0]) return; // it if it different overlay
            if (tmp.length === 0) return;
            var pos = $(obj).offset().left + 'x' + $(obj).offset().top;
            if (tmp.data('position') !== pos) {
                hide();
            } else {
                setTimeout(monitor, 250);
            }
        }

        // click anywhere else hides the drop down
        function hide() {
            var div1 = $('#w2ui-overlay' + name);
            if (div1.data('keepOpen') === true) {
                div1.removeData('keepOpen');
                return;
            }
            var result;
            if (typeof options.onHide === 'function') result = options.onHide();
            if (result === false) return;
            div1.remove();
            $(document).off('click', hide);
            clearInterval(div1.data('timer'));
        }

        function resize() {
            var div1 = $('#w2ui-overlay' + name);
            var div2 = div1.find(' > div');
            // if goes over the screen, limit height and width
            if (div1.length > 0) {
                div2.height('auto').width('auto');
                // width/height
                var overflowX = false;
                var overflowY = false;
                var h = div2.height();
                var w = div2.width();
                if (options.width && options.width < w) w = options.width;
                if (w < 30) w = 30;
                // if content of specific height
                if (options.tmp.contentHeight) {
                    h = parseInt(options.tmp.contentHeight);
                    div2.height(h);
                    setTimeout(function() {
                        if (h > div2.find('div.menu > table').height()) {
                            div2.find('div.menu').css('overflow-y', 'hidden');
                        }
                    }, 1);
                    setTimeout(function() {
                        div2.find('div.menu').css('overflow-y', 'auto');
                    }, 10);
                }
                if (options.tmp.contentWidth) {
                    w = parseInt(options.tmp.contentWidth);
                    div2.width(w);
                    setTimeout(function() {
                        if (w > div2.find('div.menu > table').width()) {
                            div2.find('div.menu').css('overflow-x', 'hidden');
                        }
                    }, 1);
                    setTimeout(function() {
                        div2.find('div.menu').css('overflow-x', 'auto');
                    }, 10);
                }
                // alignment
                switch (options.align) {
                    case 'both':
                        options.left = 17;
                        if (options.width === 0) options.width = w2utils.getSize($(obj), 'width');
                        break;
                    case 'left':
                        options.left = 17;
                        break;
                    case 'right':
                        options.tipLeft = w - 45;
                        options.left = w2utils.getSize($(obj), 'width') - w + 10;
                        break;
                }
                // adjust position
                var tmp = (w - 17) / 2;
                var boxLeft = options.left;
                var boxWidth = options.width;
                var tipLeft = options.tipLeft;
                if (w === 30 && !boxWidth) boxWidth = 30;
                else boxWidth = (options.width ? options.width : 'auto');
                if (tmp < 25) {
                    boxLeft = 25 - tmp;
                    tipLeft = Math.floor(tmp);
                }
                // Y coord
                div1.css({
                    top: (obj.offset().top + w2utils.getSize(obj, 'height') + options.top + 7) + 'px',
                    left: ((obj.offset().left > 25 ? obj.offset().left : 25) + boxLeft) + 'px',
                    'min-width': boxWidth,
                    'min-height': (options.height ? options.height : 'auto')
                });
                // $(window).height() - has a problem in FF20
                var maxHeight = window.innerHeight + $(document).scrollTop() - div2.offset().top - 7;
                var maxWidth = window.innerWidth + $(document).scrollLeft() - div2.offset().left - 7;
                if (((maxHeight > -50 && maxHeight < 210) || options.openAbove === true) && !options.overridePosition) {
                    // show on top
                    maxHeight = div2.offset().top - $(document).scrollTop() - 7;
                    if (options.maxHeight && maxHeight > options.maxHeight) maxHeight = options.maxHeight;
                    if (h > maxHeight) {
                        overflowY = true;
                        div2.height(maxHeight).width(w).css({
                            'overflow-y': 'auto'
                        });
                        h = maxHeight;
                    }
                    div1.css('top', ($(obj).offset().top - h - 24 + options.top) + 'px');
                    div1.find('>style').html(
                        '#w2ui-overlay' + name + ':before { display: none; margin-left: ' + parseInt(tipLeft) + 'px; }' +
                        '#w2ui-overlay' + name + ':after { display: block; margin-left: ' + parseInt(tipLeft) + 'px; }'
                    );
                } else {
                    // show under
                    if (options.maxHeight && maxHeight > options.maxHeight) maxHeight = options.maxHeight;
                    if (h > maxHeight) {
                        overflowY = true;
                        div2.height(maxHeight).width(w).css({
                            'overflow-y': 'auto'
                        });
                    }
                    div1.find('>style').html(
                        '#w2ui-overlay' + name + ':before { display: block; margin-left: ' + parseInt(tipLeft) + 'px; }' +
                        '#w2ui-overlay' + name + ':after { display: none; margin-left: ' + parseInt(tipLeft) + 'px; }'
                    );
                }
                // check width
                w = div2.width();
                maxWidth = window.innerWidth + $(document).scrollLeft() - div2.offset().left - 7;
                if (options.maxWidth && maxWidth > options.maxWidth) maxWidth = options.maxWidth;
                if (w > maxWidth && options.align !== 'both') {
                    options.align = 'right';
                    setTimeout(function() {
                        resize();
                    }, 1);
                }
                // check scroll bar
                if (overflowY && overflowX) div2.width(w + w2utils.scrollBarSize() + 2);
            }
        }
    };



    $.fn.w2menu = function(menu, options) {
        /*
        ITEM STRUCTURE
            item : {
                id       : null,
                text     : '',
                style    : '',
                img      : '',
                icon     : '',
                count    : '',
                hidden   : false,
                disabled : false
                ...
            }
        */
        var defaults = {
            index: null, // current selected
            items: [],
            render: null,
            msgNoItems: 'No items',
            onSelect: null,
            tmp: {}
        };
        var obj = this;
        var name = '';
        if (menu === 'refresh') {
            // if not show - call blur
            if ($('#w2ui-overlay' + name).length > 0) {
                options = $.extend($.fn.w2menuOptions, options);
                var scrTop = $('#w2ui-overlay' + name + ' div.menu').scrollTop();
                $('#w2ui-overlay' + name + ' div.menu').html(getMenuHTML());
                $('#w2ui-overlay' + name + ' div.menu').scrollTop(scrTop);
                setTimeout(function() {
                    mresize();
                }, 1);
            } else {
                $(this).w2menu(options);
            }
        } else if (menu === 'refresh-index') {
            var $menu = $('#w2ui-overlay' + name + ' div.menu');
            var cur = $menu.find('tr[index=' + options.index + ']');
            var scrTop = $menu.scrollTop();
            $menu.find('tr.w2ui-selected').removeClass('w2ui-selected'); // clear all
            cur.addClass('w2ui-selected'); // select current
            // scroll into view
            if (cur.length > 0) {
                var top = cur[0].offsetTop - 5; // 5 is margin top
                var height = $menu.height();
                $menu.scrollTop(scrTop);
                if (top < scrTop || top + cur.height() > scrTop + height) {
                    $menu.animate({
                        'scrollTop': top - (height - cur.height() * 2) / 2
                    }, 200, 'linear');
                }
            }
            return;
        } else {
            if (arguments.length === 1) options = menu;
            else options.items = menu;
            if (typeof options !== 'object') options = {};
            options = $.extend({}, defaults, options);
            $.fn.w2menuOptions = options;
            if (options.name) name = '-' + options.name;
            if (typeof options.select === 'function' && typeof options.onSelect !== 'function') options.onSelect = options.select;
            if (typeof options.onRender === 'function' && typeof options.render !== 'function') options.render = options.onRender;
            // since only one overlay can exist at a time
            $.fn.w2menuHandler = function(event, index) {
                if (event.type === 'mouseover') {
                    setTimeout(function() {
                        var el = event.target;
                        $(el).w2menu(options.items[index].submenu);
                        console.log(options.items[index].submenu);
                    }, 300);
                } else if (event.type === 'mouseout') {
                    setTimeout(function() {
                        console.log('out now');
                    }, 300);
                }
                if (typeof options.onSelect === 'function') {
                    // need time so that menu first hides
                    setTimeout(function() {
                        options.onSelect({
                            index: index,
                            item: options.items[index],
                            originalEvent: event
                        });
                    }, 10);
                }
                // do not uncomment (or enum search type is not working in grid)
                // setTimeout(function () { $(document).click(); }, 50);
            };
            var html = '';
            if (options.search) {
                html +=
                    '<div style="position: absolute; top: 0px; height: 40px; left: 0px; right: 0px; border-bottom: 1px solid silver; background-color: #ECECEC; padding: 8px 5px;">' +
                    '    <div class="w2ui-icon icon-search" style="position: absolute; margin-top: 4px; margin-left: 6px; width: 11px; background-position: left !important;"></div>' +
                    '    <input id="menu-search" type="text" style="width: 100%; outline: none; padding-left: 20px;" onclick="event.stopPropagation();">' +
                    '</div>';
                options.style += ';background-color: #ECECEC';
                options.index = 0;
                for (var i = 0; i < options.items.length; i++) options.items[i].hidden = false;
            }
            html += '<div class="menu" style="position: absolute; top: ' + (options.search ? 40 : 0) + 'px; bottom: 0px; width: 100%; overflow: auto;">' +
                getMenuHTML() +
                '</div>';
            var ret = $(this).w2overlay(html, options);
            setTimeout(function() {
                $('#w2ui-overlay' + name + ' #menu-search')
                    .on('keyup', change)
                    .on('keydown', function(event) {
                        // cancel tab key
                        if (event.keyCode === 9) {
                            event.stopPropagation();
                            event.preventDefault();
                        }
                    });
                if (options.search) {
                    if (['text', 'password'].indexOf($(obj)[0].type) != -1 || $(obj)[0].tagName == 'texarea') return;
                    $('#w2ui-overlay' + name + ' #menu-search').focus();
                }
            }, 200);
            mresize();
            return ret;
        }

        function mresize() {
            setTimeout(function() {
                // show selected
                $('#w2ui-overlay' + name + ' tr.w2ui-selected').removeClass('w2ui-selected');
                var cur = $('#w2ui-overlay' + name + ' tr[index=' + options.index + ']');
                var scrTop = $('#w2ui-overlay' + name + ' div.menu').scrollTop();
                cur.addClass('w2ui-selected');
                if (options.tmp) options.tmp.contentHeight = $('#w2ui-overlay' + name + ' table').height() + (options.search ? 50 : 10);
                if (options.tmp) options.tmp.contentWidth = $('#w2ui-overlay' + name + ' table').width();
                if ($('#w2ui-overlay' + name).length > 0) $('#w2ui-overlay' + name)[0].resize();
                // scroll into view
                if (cur.length > 0) {
                    var top = cur[0].offsetTop - 5; // 5 is margin top
                    var el = $('#w2ui-overlay' + name + ' div.menu');
                    var height = el.height();
                    $('#w2ui-overlay' + name + ' div.menu').scrollTop(scrTop);
                    if (top < scrTop || top + cur.height() > scrTop + height) {
                        $('#w2ui-overlay' + name + ' div.menu').animate({
                            'scrollTop': top - (height - cur.height() * 2) / 2
                        }, 200, 'linear');
                    }
                }
            }, 1);
        }

        function change(event) {
            var search = this.value;
            var key = event.keyCode;
            var cancel = false;
            switch (key) {
                case 13: // enter
                    $('#w2ui-overlay' + name).remove();
                    $.fn.w2menuHandler(event, options.index);
                    break;
                case 9: // tab
                case 27: // escape
                    $('#w2ui-overlay' + name).remove();
                    $.fn.w2menuHandler(event, -1);
                    break;
                case 38: // up
                    options.index = w2utils.isInt(options.index) ? parseInt(options.index) : 0;
                    options.index--;
                    while (options.index > 0 && options.items[options.index].hidden) options.index--;
                    if (options.index === 0 && options.items[options.index].hidden) {
                        while (options.items[options.index] && options.items[options.index].hidden) options.index++;
                    }
                    if (options.index < 0) options.index = 0;
                    cancel = true;
                    break;
                case 40: // down
                    options.index = w2utils.isInt(options.index) ? parseInt(options.index) : 0;
                    options.index++;
                    while (options.index < options.items.length - 1 && options.items[options.index].hidden) options.index++;
                    if (options.index === options.items.length - 1 && options.items[options.index].hidden) {
                        while (options.items[options.index] && options.items[options.index].hidden) options.index--;
                    }
                    if (options.index >= options.items.length) options.index = options.items.length - 1;
                    cancel = true;
                    break;
            }
            // filter
            if (!cancel) {
                var shown = 0;
                for (var i = 0; i < options.items.length; i++) {
                    var item = options.items[i];
                    var prefix = '';
                    var suffix = '';
                    if (['is', 'begins with'].indexOf(options.match) !== -1) prefix = '^';
                    if (['is', 'ends with'].indexOf(options.match) !== -1) suffix = '$';
                    try {
                        var re = new RegExp(prefix + search + suffix, 'i');
                        if (re.test(item.text) || item.text === '...') item.hidden = false;
                        else item.hidden = true;
                    } catch (e) {}
                    // do not show selected items
                    if (obj.type === 'enum' && $.inArray(item.id, ids) !== -1) item.hidden = true;
                    if (item.hidden !== true) shown++;
                }
                options.index = 0;
                while (options.index < options.items.length - 1 && options.items[options.index].hidden) options.index++;
                if (shown <= 0) options.index = -1;
            }
            $(obj).w2menu('refresh', options);
            mresize();
        }

        function getMenuHTML() {
            if (options.spinner) {
                return '<table class="w2ui-drop-menu"><tr><td style="padding: 5px 10px 10px 10px; text-align: center">' +
                    '    <div class="w2ui-spinner" style="width: 18px; height: 18px; position: relative; top: 5px;"></div> ' +
                    '    <div style="display: inline-block; padding: 3px; color: #999;">' + w2utils.lang('Loading...') + '</div>' +
                    '</td></tr></table>';
            }
            var count = 0;
            var menu_html = '<table cellspacing="0" cellpadding="0" class="w2ui-drop-menu">';
            var img = null,
                icon = null;
            for (var f = 0; f < options.items.length; f++) {
                var mitem = options.items[f];
                if (typeof mitem === 'string') {
                    mitem = {
                        id: mitem,
                        text: mitem
                    };
                } else {
                    if (mitem.text != null && mitem.id == null) mitem.id = mitem.text;
                    if (mitem.text == null && mitem.id != null) mitem.text = mitem.id;
                    if (mitem.caption != null) mitem.text = mitem.caption;
                    img = mitem.img;
                    icon = mitem.icon;
                    if (img == null) img = null;
                    if (icon == null) icon = null;
                }
                if (mitem.hidden !== true) {
                    var imgd = '';
                    var txt = mitem.text;
                    if (typeof options.render === 'function') txt = options.render(mitem, options);
                    if (img) imgd = '<td class="menu-icon"><div class="w2ui-tb-image w2ui-icon ' + img + '"></div></td>';
                    if (icon) imgd = '<td class="menu-icon" align="center"><span class="w2ui-icon ' + icon + '"></span></td>';
                    // render only if non-empty
                    if (typeof txt !== 'undefined' && txt !== '' && !(/^-+$/.test(txt))) {
                        var bg = (count % 2 === 0 ? 'w2ui-item-even' : 'w2ui-item-odd');
                        if (options.altRows !== true) bg = '';
                        var colspan = 1;
                        if (imgd == '') colspan++;
                        if (mitem.count == null) colspan++;
                        menu_html +=
                            '<tr index="' + f + '" style="' + (mitem.style ? mitem.style : '') + '" ' + (mitem.hint ? 'title="' + mitem.hint + '"' : '') +
                            '        class="' + bg + ' ' + (options.index === f ? 'w2ui-selected' : '') + ' ' + (mitem.disabled === true ? 'w2ui-disabled' : '') + '"' +
                            '        onmousedown="$(this).parent().find(\'tr\').removeClass(\'w2ui-selected\'); $(this).addClass(\'w2ui-selected\');"' +
                            '        onclick="event.stopPropagation(); ' +
                            '               if (' + (mitem.disabled === true ? 'true' : 'false') + ') return;' +
                            '               $(\'#w2ui-overlay' + name + '\').remove(); ' +
                            '               $.fn.w2menuHandler(event, \'' + f + '\');"' +
                            '       onmouseover = "' + (mitem.submenu ? "$.fn.w2menuHandler(event, '" + f + "');" : "") + '"' +
                            '       onmouseout  = "' + (mitem.submenu ? "$.fn.w2menuHandler(event, '" + f + "');" : "") + '"' + '>' +
                            imgd +
                            '   <td class="menu-text" colspan="' + colspan + '">' + txt + '</td>' +
                            '   <td class="menu-count">' + (mitem.count != null ? '<span>' + mitem.count + '</span>' : '') + '</td>' +
                            '</tr>';
                        count++;
                    } else {
                        // horizontal line
                        menu_html += '<tr><td colspan="2" style="padding: 6px; pointer-events: none"><div style="border-top: 1px solid silver;"></div></td></tr>';
                    }
                }
                options.items[f] = mitem;
            }
            if (count === 0) {
                menu_html += '<tr><td style="padding: 13px; color: #999; text-align: center">' + options.msgNoItems + '</div></td></tr>';
            }
            menu_html += "</table>";
            return menu_html;
        }
    };
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2grid        - grid widget
 *        - $().w2grid    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils, w2toolbar, w2fields, w2alert, w2confirm
 *
 * == NICE TO HAVE ==
 *   - frozen columns
 *   - add colspans
 *   - allow this.total to be unknown (-1)
 *   - column autosize based on largest content
 *   - easy bubbles in the grid
 *   - More than 2 layers of header groups
 *   - reorder columns/records
 *   - hidden searches could not be clearned by the user
 *   - problem with .set() and arrays, array get extended too, but should be replaced
 *   - move events into prototype
 *   - add grid.focus()
 *   - add showExtra, KickIn Infinite scroll when so many records
 *   - after edit stay on the same record option
 *   - allow render: function to be filters
 *
 ************************************************************************/

(function() {
    var w2grid = function(options) {

        // public properties
        this.name = null;
        this.box = null; // HTML element that hold this element
        this.header = '';
        this.url = '';
        this.routeData = {}; // data for dynamic routes
        this.columns = []; // { field, caption, size, attr, render, hidden, gridMinWidth, editable }
        this.columnGroups = []; // { span: int, caption: 'string', master: true/false }
        this.records = []; // { recid: int(requied), field1: 'value1', ... fieldN: 'valueN', style: 'string', editable: true/false, summary: true/false, changes: object }
        this.summary = []; // arry of summary records, same structure as records array
        this.searches = []; // { type, caption, field, inTag, outTag, hidden }
        this.searchData = [];
        this.sortData = [];
        this.postData = {};
        this.toolbar = {}; // if not empty object; then it is toolbar object

        this.show = {
            header: false,
            toolbar: false,
            footer: false,
            columnHeaders: true,
            lineNumbers: false,
            expandColumn: false,
            groupExpand: false,
            selectColumn: false,
            emptyRecords: true,
            toolbarReload: true,
            toolbarColumns: true,
            toolbarSearch: true,
            toolbarAdd: false,
            toolbarEdit: false,
            toolbarDelete: false,
            toolbarSave: false,
            selectionBorder: true,
            recordTitles: true,
            skipRecords: true
        };

        this.autoLoad = true; // for infinite scroll
        this.fixedBody = true; // if false; then grid grows with data
        this.recordHeight = 24;
        this.keyboard = true;
        this.selectType = 'row'; // can be row|cell
        this.multiSearch = true;
        this.multiSelect = true;
        this.multiSort = true;
        this.reorderColumns = false;
        this.reorderRows = false;
        this.markSearch = true;
        this.hasInitialSearchData = false;

        //group related
        this.enableGrouping = false;
        this.groupData = {};
        this.summaryData = [];
        this.expandedGroups = [];
        this.summaryTemplates = [];
        this.groupTemplates = [];
        this.expandedGrids = [];

        this.total = 0; // server total
        this.limit = 100;
        this.offset = 0; // how many records to skip (for infinite scroll) when pulling from server
        this.style = '';
        this.ranges = [];
        this.menu = [];
        this.method = null; // if defined, then overwrited ajax method
        this.recid = null;
        this.parser = null;
        this.data = null;

        // events
        this.onAdd = null;
        this.onEdit = null;
        this.onRequest = null; // called on any server event
        this.onLoad = null;
        this.onDelete = null;
        this.onDeleted = null;
        this.onSubmit = null;
        this.onSave = null;
        this.onSelect = null;
        this.onUnselect = null;
        this.onClick = null;
        this.onDblClick = null;
        this.onContextMenu = null;
        this.onMenuClick = null; // when context menu item selected
        this.onColumnClick = null;
        this.onColumnResize = null;
        this.onSort = null;
        this.onSearch = null;
        this.onChange = null; // called when editable record is changed
        this.onRestore = null; // called when editable record is restored
        this.onExpand = null;
        this.onCollapse = null;
        this.onError = null;
        this.onKeydown = null;
        this.onToolbar = null; // all events from toolbar
        this.onColumnOnOff = null;
        this.onCopy = null;
        this.onPaste = null;
        this.onSelectionExtend = null;
        this.onEditField = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onReload = null;
        this.onResize = null;
        this.onDestroy = null;
        this.onStateSave = null;
        this.onStateRestore = null;

        // internal
        this.last = {
            field: 'all',
            caption: w2utils.lang('All Fields'),
            logic: 'OR',
            search: '',
            searchIds: [],
            selection: {
                indexes: [],
                columns: {}
            },
            postData:{},
            multi: false,
            scrollTop: 0,
            scrollLeft: 0,
            sortData: null,
            sortCount: 0,
            xhr: null,
            range_start: null,
            range_end: null,
            sel_ind: null,
            sel_col: null,
            sel_type: null,
            edit_col: null
        };

        $.extend(true, this, w2obj.grid, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2grid = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2grid')) return;
            // remember items
            var columns = method.columns;
            var records;
            var columnGroups = method.columnGroups;

            var searches = method.searches;
            var searchData = method.searchData;
            var sortData = method.sortData;
            var postData = method.postData || {};
            var toolbar = method.toolbar;
            var enableGrouping = method.enableGrouping;

            // extend items
            var object = new w2grid(method);
            $.extend(object, {
                postData: {},
                records: [],
                columns: [],
                searches: [],
                toolbar: {},
                sortData: [],
                searchData: [],
                handlers: [],
                groupData: method.groupData,
                hasInitialSearchData:method.hasInitialSearchData
            });
            if (typeof method.records === 'function')
                records = method.records.apply(object, arguments);
            else
                records = method.records;
            // extend postData to include grouping
            if (enableGrouping) {
                object.show.groupExpand = true;
                if (method.groupData)
                    postData.groupOn = method.groupData[0];
                if (method.summaryData)
                    postData.summaryData = method.summaryData;
                $.extend(true, object.summaryTemplates, method.summaryTemplates);
                $.extend(true, object.groupTemplates, method.groupTemplates);
                $.extend(true, object.enableGrouping, method.enableGrouping);

            }

            if (object.onExpand !== null || object.enableGrouping) object.show.expandColumn = true;
            //hide expand column for grouped grid - will show group expand
            //if (enableGrouping) object.show.expandColumn = false;

            $.extend(true, object.toolbar, toolbar);
            // reassign variables
            for (var p in columns) object.columns[p] = $.extend(true, {}, columns[p]);
            for (var p in columnGroups) object.columnGroups[p] = $.extend(true, {}, columnGroups[p]);
            for (var p in searches) object.searches[p] = $.extend(true, {}, searches[p]);
            for (var p in searchData) object.searchData[p] = $.extend(true, {}, searchData[p]);
            for (var p in sortData) object.sortData[p] = $.extend(true, {}, sortData[p]);
            object.postData = $.extend(true, {}, postData);
            if (!method.url && object.enableGrouping) {
                records = object.getGroupedRecords(records);
            }
            // check if there are records without recid
            for (var r in records) {
                if (records[r].recid === null || typeof records[r].recid === 'undefined') {
                    console.log('ERROR: Cannot add records without recid. (obj: ' + object.name + ')');
                    return;
                }
                object.records[r] = $.extend(true, {}, records[r]);
            }

            // add searches
            for (var c in object.columns) {
                var col = object.columns[c];
                if (typeof col.searchable === 'undefined' || object.getSearch(col.field) !== null) continue;
                var stype = col.searchable;
                var attr = '';
                if (col.searchable === true) {
                    stype = 'text';
                    attr = 'size="20"';
                }
                object.addSearch({
                    field: col.field,
                    caption: col.caption,
                    type: stype,
                    attr: attr
                });
            }
            // init toolbar
            object.initToolbar();

            // render if necessary
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            // register new object
            //object.initGrouping();
            w2ui[object.name] = object;

            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2grid');
        }

    };

    // ====================================================
    // -- Implementation of core functionality

    w2grid.prototype = {
        // ----
        // properties that need to be in prototype

        msgDelete: w2utils.lang('Are you sure you want to delete selected records?'),
        msgNotJSON: w2utils.lang('Returned data is not in valid JSON format.'),
        msgAJAXerror: w2utils.lang('AJAX error. See console for more details.'),
        msgRefresh: w2utils.lang('Refreshing...'),

        // for easy button overwrite
        buttons: {
            'reload': {
                type: 'button',
                id: 'w2ui-reload',
                icon: 'w2ui-icon-reload',
                hint: w2utils.lang('Reload data in the list')
            },
            'columns': {
                type: 'drop',
                id: 'w2ui-column-on-off',
                icon: 'w2ui-icon-columns',
                hint: w2utils.lang('Show/hide columns'),
                arrow: false,
                html: ''
            },
            'search': {
                type: 'html',
                id: 'w2ui-search',
                html: '<div class="w2ui-icon icon-search-down w2ui-search-down" title="' + 'Select Search Field' + '" ' +
                    'onclick="var obj = w2ui[$(this).parents(\'div.w2ui-grid\').attr(\'name\')]; obj.searchShowFields();"></div>'
            },
            'search-go': {
                type: 'check',
                id: 'w2ui-search-advanced',
                caption: w2utils.lang('Search...'),
                hint: w2utils.lang('Open Search Fields')
            },
            'add': {
                type: 'button',
                id: 'w2ui-add',
                caption: w2utils.lang('Add New'),
                hint: w2utils.lang('Add new record'),
                icon: 'w2ui-icon-plus'
            },
            'edit': {
                type: 'button',
                id: 'w2ui-edit',
                caption: w2utils.lang('Edit'),
                hint: w2utils.lang('Edit selected record'),
                icon: 'w2ui-icon-pencil',
                disabled: true
            },
            'delete': {
                type: 'button',
                id: 'w2ui-delete',
                caption: w2utils.lang('Delete'),
                hint: w2utils.lang('Delete selected records'),
                icon: 'w2ui-icon-cross',
                disabled: true
            },
            'save': {
                type: 'button',
                id: 'w2ui-save',
                caption: w2utils.lang('Save'),
                hint: w2utils.lang('Save changed records'),
                icon: 'w2ui-icon-check'
            },
            'groups': {
                type: 'html',
                id: 'dropArea',
                html: '<div class="dropGroup"></div>'
            }
        },


        getGroupedRecords: function(records) {
            var grid = this.mainGrid || this;
            var obj = this;
            var parentRecords = [];
            var fields = [];
            _.each(obj.groupData, function(g) {
                fields.push(g);
            });
            var rs = _.groupByMulti(records || grid.records, fields);
            var index = 0;
            parentRecords = obj.constructRecords(records, rs, grid.postData.groupOn);
            return parentRecords;
        },

        constructRecords: function(records, data, groupColumn) {
            var obj = this;
            var ret = [];
            var index = 0;
            $.each(data, function(i, grp) {
                var o = {
                    recid: index,
                    grpcnt: obj.getSizeOfGroup(records, groupColumn, i),
                    childRecords: grp
                };
                o[groupColumn] = i;
                ret.push(o);
                index++;
            });
            return ret;
        },



        getSizeOfGroup: function(records, column, value) {
            var count = _.countBy(records, function(num) {
                return num[column] === value ? value : 'others';
            });
            return count[value];
        },


        getRecordsOfGroup: function(column, value) {
            var obj = this;
            var records = _.find(this.records, function(rec) {
                return rec[column] === value;
            });
            return records.childRecords;
        },


        //W2UI GROUPED GRID
        initGrouping: function() {
            var mainGrid = this.mainGrid ? this.mainGrid : this;
            // if (mainGrid.groupsInitiated)
            //     return;

            var ele = $(mainGrid.box);
            $('.dropGroup .w2ui-col-header').on('click', function() {
                var el = $(this);
                el.remove();
                //get the id of group, if is first, we have to rebuild grid
                var id;
                $.map(mainGrid.groupData, function(obj, index) {
                    if (obj === el.data('col'))
                        id = index;
                });


                mainGrid.groupData = $.grep(mainGrid.groupData, function(obj, index) {
                    return obj === el.data('col');
                }, true);

                mainGrid.postData.group_data = [];
                mainGrid.postData.groupOn = mainGrid.groupData[0];

                if (mainGrid.groupData.length === 0) {
                    mainGrid.postData.groupOn = '';
                    mainGrid.isLastGroup = true;
                }
                // //

                mainGrid.resetGroups();


            });
            //;
            var dragSrcEl;

            function handleDragStart(e) {
                var colname = mainGrid.columns[$(this).attr('col')].field;
                dragSrcEl = '<div class="w2ui-col-header" data-col="' + colname + '">' + this.innerText + '</div>';
            }

            function handleDragEnter() {
                $(this).addClass('over');
            }

            function handleDragLeave(e) {
                $(this).removeClass('over'); // this / e.target is previous target element.
            }

            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault(); // Necessary. Allows us to drop.
                }

            }

            function handleDragDrop(e) {
                var dropGroup = $('.dropGroup');
                dropGroup.removeClass('over');
                dropGroup.append(dragSrcEl);
                mainGrid.postData.group_data = [];
                mainGrid.isLastGroup = false;
                mainGrid.groupData.push($(dragSrcEl).data('col'));
                if (mainGrid.groupData.length === 1)
                    mainGrid.postData.groupOn = mainGrid.groupData[0];
                if (!mainGrid.url) {
                    mainGrid.records = mainGrid.getGroupedRecords(mainGrid.records);
                }
                mainGrid.resetGroups();
            }

            function handleDragEnd(e) {
                $('.dropGroup').removeClass('over');
            }
            var headers = $('.page').find('.w2ui-head').attr('draggable', true);
            var dropGroup = $('.dropGroup');
            headers.off('dragstart').on('dragstart', handleDragStart);
            dropGroup.off('dragleave').on('dragleave', handleDragLeave);
            dropGroup.off('dragenter').on('dragenter', handleDragEnter);
            dropGroup.off('dragover').on('dragover', handleDragOver);
            dropGroup.off('drop').on('drop', handleDragDrop);
            headers.off('dragend').on('dragend', handleDragEnd);

            // });
        },

        add: function(record,last) {
            if (!$.isArray(record)) record = [record];
            var added = 0;
            for (var o in record) {
                if (this.recid && typeof record[o].recid == 'undefined') record[o].recid = record[o][this.recid];
                if (record[o].recid == null || typeof record[o].recid == 'undefined') {
                    console.log('ERROR: Cannot add record without recid. (obj: ' + this.name + ')');
                    continue;
                }
                if(last){
                  this.records.push(record[o]);
                }else{
                  this.records.unshift(record[o]); // modified : to add new record on top of grid
                }
                //
                added++;
            }
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.total = this.records.length;
                this.localSort();
                this.localSearch();
            }
            this.refresh(); // ??  should it be reload?
            return added;
        },

        find: function(obj, returnIndex) {
            if (typeof obj == 'undefined' || obj == null) obj = {};
            var recs = [];
            var hasDots = false;
            // check if property is nested - needed for speed
            for (var o in obj)
                if (String(o).indexOf('.') != -1) hasDots = true;
                // look for an item
            for (var i = 0; i < this.records.length; i++) {
                var match = true;
                for (var o in obj) {
                    var val = this.records[i][o];
                    if (hasDots && String(o).indexOf('.') != -1) val = this.parseField(this.records[i], o);
                    if (obj[o] != val) match = false;
                }
                if (match && returnIndex !== true) recs.push(this.records[i].recid);
                if (match && returnIndex === true) recs.push(i);
            }
            return recs;
        },

        set: function(recid, record, noRefresh) { // does not delete existing, but overrides on top of it
            if (typeof recid == 'object') {
                noRefresh = record;
                record = recid;
                recid = null;
            }
            // update all records
            if (recid == null) {
                for (var r in this.records) {
                    $.extend(true, this.records[r], record); // recid is the whole record
                }
                if (noRefresh !== true) this.refresh();
            } else { // find record to update
                var ind = this.get(recid, true);
                if (ind == null) return false;
                var isSummary = (this.records[ind] && this.records[ind].recid == recid ? false : true);
                if (isSummary) {
                    $.extend(true, this.summary[ind], record);
                } else {
                    $.extend(true, this.records[ind], record);
                }
                if (noRefresh !== true) this.refreshRow(recid); // refresh only that record
            }
            return true;
        },

        get: function(recid, returnIndex) {
            // search records
            for (var i = 0; i < this.records.length; i++) {
                if (this.records[i].recid == recid) {
                    if (returnIndex === true) return i;
                    else return this.records[i];
                }
            }
            // search summary
            for (var i = 0; i < this.summary.length; i++) {
                if (this.summary[i].recid == recid) {
                    if (returnIndex === true) return i;
                    else return this.summary[i];
                }
            }
            return null;
        },

        remove: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.records.length - 1; r >= 0; r--) {
                    if (this.records[r].recid == arguments[a]) {
                        this.records.splice(r, 1);
                        removed++;
                    }
                }
            }
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.localSort();
                this.localSearch();
            }
            this.refresh();
            return removed;
        },

        addColumn: function(before, columns) {
            var added = 0;
            if (arguments.length == 1) {
                columns = before;
                before = this.columns.length;
            } else {
                if (typeof before == 'string') before = this.getColumn(before, true);
                if (before === null) before = this.columns.length;
            }
            if (!$.isArray(columns)) columns = [columns];
            for (var o in columns) {
                this.columns.splice(before, 0, columns[o]);
                before++;
                added++;
            }
            this.refresh();
            return added;
        },

        removeColumn: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    if (this.columns[r].field == arguments[a]) {
                        this.columns.splice(r, 1);
                        removed++;
                    }
                }
            }
            this.refresh();
            return removed;
        },

        getColumn: function(field, returnIndex) {
            for (var i = 0; i < this.columns.length; i++) {
                if (this.columns[i].field == field) {
                    if (returnIndex === true) return i;
                    else return this.columns[i];
                }
            }
            return null;
        },

        toggleColumn: function() {
            var effected = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    var col = this.columns[r];
                    if (col.field == arguments[a]) {
                        col.hidden = !col.hidden;
                        effected++;
                    }
                }
            }
            this.refresh();
            return effected;
        },

        showColumn: function() {
            var shown = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    var col = this.columns[r];
                    if (col.gridMinWidth) delete col.gridMinWidth;
                    if (col.field == arguments[a] && col.hidden !== false) {
                        col.hidden = false;
                        shown++;
                    }
                }
            }
            this.refresh();
            return shown;
        },

        hideColumn: function() {
            var hidden = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.columns.length - 1; r >= 0; r--) {
                    var col = this.columns[r];
                    if (col.field == arguments[a] && col.hidden !== true) {
                        col.hidden = true;
                        hidden++;
                    }
                }
            }
            this.refresh();
            return hidden;
        },

        addSearch: function(before, search) {
            var added = 0;
            if (arguments.length == 1) {
                search = before;
                before = this.searches.length;
            } else {
                if (typeof before == 'string') before = this.getSearch(before, true);
                if (before === null) before = this.searches.length;
            }
            if (!$.isArray(search)) search = [search];
            for (var o in search) {
                this.searches.splice(before, 0, search[o]);
                before++;
                added++;
            }
            this.searchClose();
            return added;
        },

        removeSearch: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a]) {
                        this.searches.splice(r, 1);
                        removed++;
                    }
                }
            }
            this.searchClose();
            return removed;
        },

        getSearch: function(field, returnIndex) {
            for (var i = 0; i < this.searches.length; i++) {
                if (this.searches[i].field == field) {
                    if (returnIndex === true) return i;
                    else return this.searches[i];
                }
            }
            return null;
        },

        toggleSearch: function() {
            var effected = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a]) {
                        this.searches[r].hidden = !this.searches[r].hidden;
                        effected++;
                    }
                }
            }
            this.searchClose();
            return effected;
        },

        showSearch: function() {
            var shown = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a] && this.searches[r].hidden !== false) {
                        this.searches[r].hidden = false;
                        shown++;
                    }
                }
            }
            this.searchClose();
            return shown;
        },

        hideSearch: function() {
            var hidden = 0;
            for (var a = 0; a < arguments.length; a++) {
                for (var r = this.searches.length - 1; r >= 0; r--) {
                    if (this.searches[r].field == arguments[a] && this.searches[r].hidden !== true) {
                        this.searches[r].hidden = true;
                        hidden++;
                    }
                }
            }
            this.searchClose();
            return hidden;
        },

        getSearchData: function(field) {
            for (var s in this.searchData) {
                if (this.searchData[s].field == field) return this.searchData[s];
            }
            return null;
        },

        localSort: function(silent) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                console.log('ERROR: grid.localSort can only be used on local data source, grid.url should be empty.');
                return;
            }
            if ($.isEmptyObject(this.sortData)) return;
            var time = (new Date()).getTime();
            var obj = this;
            // process date fields
            obj.prepareData();
            // process sortData
            for (var s in this.sortData) {
                var column = this.getColumn(this.sortData[s].field);
                if (!column) return;
                if (typeof column.render == 'string') {
                    if (['date', 'age'].indexOf(column.render.split(':')[0]) != -1) {
                        this.sortData[s]['field_'] = column.field + '_';
                    }
                    if (['time'].indexOf(column.render.split(':')[0]) != -1) {
                        this.sortData[s]['field_'] = column.field + '_';
                    }
                }
            }
            // process sort
            this.records.sort(function(a, b) {
                var ret = 0;
                for (var s in obj.sortData) {
                    var fld = obj.sortData[s].field;
                    if (obj.sortData[s].field_) fld = obj.sortData[s].field_;
                    var aa = a[fld];
                    var bb = b[fld];
                    if (String(fld).indexOf('.') != -1) {
                        aa = obj.parseField(a, fld);
                        bb = obj.parseField(b, fld);
                    }
                    if (typeof aa == 'string') aa = $.trim(aa.toLowerCase());
                    if (typeof bb == 'string') bb = $.trim(bb.toLowerCase());
                    if (aa > bb) ret = (obj.sortData[s].direction == 'asc' ? 1 : -1);
                    if (aa < bb) ret = (obj.sortData[s].direction == 'asc' ? -1 : 1);
                    if (typeof aa != 'object' && typeof bb == 'object') ret = -1;
                    if (typeof bb != 'object' && typeof aa == 'object') ret = 1;
                    if (aa == null && bb != null) ret = 1; // all nuls and undefined on bottom
                    if (aa != null && bb == null) ret = -1;
                    if (ret != 0) break;
                }
                return ret;
            });
            time = (new Date()).getTime() - time;
            if (silent !== true) setTimeout(function() {
                obj.status(w2utils.lang('Sorting took') + ' ' + time / 1000 + ' ' + w2utils.lang('sec'));
            }, 10);
            return time;
        },

        localSearch: function(silent, override) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                console.log('ERROR: grid.localSearch can only be used on local data source, grid.url should be empty.');
                return;
            }
            var time = (new Date()).getTime();
            var obj = this;
            this.total = this.records.length;
            // mark all records as shown
            this.last.searchIds = [];
            // prepare date/time fields
            this.prepareData();
            if (override) return;
            // hide records that did not match
            if (this.searchData.length > 0 && !url) {
                this.total = 0;
                for (var r in this.records) {
                    var rec = this.records[r];
                    var fl = 0;
                    for (var s in this.searchData) {
                        var sdata = this.searchData[s];
                        var search = this.getSearch(sdata.field);
                        if (sdata == null) continue;
                        if (search == null) search = {
                            field: sdata.field,
                            type: sdata.type
                        };
                        var val1 = String(obj.parseField(rec, search.field)).toLowerCase();
                        if (typeof sdata.value != 'undefined') {
                            if (!$.isArray(sdata.value)) {
                                var val2 = String(sdata.value).toLowerCase();
                            } else {
                                var val2 = sdata.value[0];
                                var val3 = sdata.value[1];
                            }
                        }
                        switch (sdata.operator) {
                            case 'is':
                                if (rec[search.field] == sdata.value) fl++; // do not hide record
                                if (search.type == 'date') {
                                    var val1 = w2utils.formatDate(rec[search.field + '_'], 'yyyy-mm-dd');
                                    var val2 = w2utils.formatDate(val2, 'yyyy-mm-dd');
                                    if (val1 == val2) fl++;
                                }
                                if (search.type == 'time') {
                                    var val1 = w2utils.formatTime(rec[search.field + '_'], 'h24:mi');
                                    var val2 = w2utils.formatTime(val2, 'h24:mi');
                                    if (val1 == val2) fl++;
                                }
                                break;
                            case 'between':
                                if (['int', 'float', 'money', 'currency', 'percent'].indexOf(search.type) != -1) {
                                    if (parseFloat(rec[search.field]) >= parseFloat(val2) && parseFloat(rec[search.field]) <= parseFloat(val3)) fl++;
                                }
                                if (search.type == 'date') {
                                    var val1 = rec[search.field + '_'];
                                    var val2 = w2utils.isDate(val2, w2utils.settings.date_format, true);
                                    var val3 = w2utils.isDate(val3, w2utils.settings.date_format, true);
                                    if (val3 != null) val3 = new Date(val3.getTime() + 86400000); // 1 day
                                    if (val1 >= val2 && val1 < val3) fl++;
                                }
                                if (search.type == 'time') {
                                    var val1 = rec[search.field + '_'];
                                    var val2 = w2utils.isTime(val2, true);
                                    var val3 = w2utils.isTime(val3, true);
                                    val2 = (new Date()).setHours(val2.hours, val2.minutes, val2.seconds ? val2.seconds : 0, 0);
                                    val3 = (new Date()).setHours(val3.hours, val3.minutes, val3.seconds ? val3.seconds : 0, 0);
                                    if (val1 >= val2 && val1 < val3) fl++;
                                }
                                break;
                            case 'in':
                                var tmp = sdata.value;
                                if (sdata.svalue) tmp = sdata.svalue;
                                if (tmp.indexOf(val1) !== -1) fl++;
                                break;
                            case 'not in':
                                var tmp = sdata.value;
                                if (sdata.svalue) tmp = sdata.svalue;
                                if (tmp.indexOf(val1) == -1) fl++;
                                break;
                            case 'begins':
                            case 'begins with': // need for back compatib.
                                if (val1.indexOf(val2) == 0) fl++; // do not hide record
                                break;
                            case 'contains':
                                if (val1.indexOf(val2) >= 0) fl++; // do not hide record
                                break;
                            case 'ends':
                            case 'ends with': // need for back compatib.
                                if (val1.indexOf(val2) == val1.length - val2.length) fl++; // do not hide record
                                break;
                        }
                    }
                    if ((this.last.logic == 'OR' && fl != 0) || (this.last.logic == 'AND' && fl == this.searchData.length)) this.last.searchIds.push(parseInt(r));
                }
                this.total = this.last.searchIds.length;
            }
            time = (new Date()).getTime() - time;
            if (silent !== true) setTimeout(function() {
                obj.status(w2utils.lang('Search took') + ' ' + time / 1000 + ' ' + w2utils.lang('sec'));
            }, 10);
            return time;
        },

        getRangeData: function(range, extra) {
            var rec1 = this.get(range[0].recid, true);
            var rec2 = this.get(range[1].recid, true);
            var col1 = range[0].column;
            var col2 = range[1].column;

            var res = [];
            if (col1 == col2) { // one row
                for (var r = rec1; r <= rec2; r++) {
                    var record = this.records[r];
                    var dt = record[this.columns[col1].field] || null;
                    if (extra !== true) {
                        res.push(dt);
                    } else {
                        res.push({
                            data: dt,
                            column: col1,
                            index: r,
                            record: record
                        });
                    }
                }
            } else if (rec1 == rec2) { // one line
                var record = this.records[rec1];
                for (var i = col1; i <= col2; i++) {
                    var dt = record[this.columns[i].field] || null;
                    if (extra !== true) {
                        res.push(dt);
                    } else {
                        res.push({
                            data: dt,
                            column: i,
                            index: rec1,
                            record: record
                        });
                    }
                }
            } else {
                for (var r = rec1; r <= rec2; r++) {
                    var record = this.records[r];
                    res.push([]);
                    for (var i = col1; i <= col2; i++) {
                        var dt = record[this.columns[i].field];
                        if (extra !== true) {
                            res[res.length - 1].push(dt);
                        } else {
                            res[res.length - 1].push({
                                data: dt,
                                column: i,
                                index: r,
                                record: record
                            });
                        }
                    }
                }
            }
            return res;
        },

        addRange: function(ranges) {
            var added = 0;
            if (this.selectType == 'row') return added;
            if (!$.isArray(ranges)) ranges = [ranges];
            // if it is selection
            for (var r in ranges) {
                if (typeof ranges[r] != 'object') ranges[r] = {
                    name: 'selection'
                };
                if (ranges[r].name == 'selection') {
                    if (this.show.selectionBorder === false) continue;
                    var sel = this.getSelection();
                    if (sel.length == 0) {
                        this.removeRange(ranges[r].name);
                        continue;
                    } else {
                        var first = sel[0];
                        var last = sel[sel.length - 1];
                        var td1 = $('#grid_' + this.name + '_rec_' + first.recid + ' td[col=' + first.column + ']');
                        var td2 = $('#grid_' + this.name + '_rec_' + last.recid + ' td[col=' + last.column + ']');
                    }
                } else { // other range
                    var first = ranges[r].range[0];
                    var last = ranges[r].range[1];
                    var td1 = $('#grid_' + this.name + '_rec_' + first.recid + ' td[col=' + first.column + ']');
                    var td2 = $('#grid_' + this.name + '_rec_' + last.recid + ' td[col=' + last.column + ']');
                }
                if (first) {
                    var rg = {
                        name: ranges[r].name,
                        range: [{
                            recid: first.recid,
                            column: first.column
                        }, {
                            recid: last.recid,
                            column: last.column
                        }],
                        style: ranges[r].style || ''
                    };
                    // add range
                    var ind = false;
                    for (var t in this.ranges)
                        if (this.ranges[t].name == ranges[r].name) {
                            ind = r;
                            break;
                        }
                    if (ind !== false) {
                        this.ranges[ind] = rg;
                    } else {
                        this.ranges.push(rg);
                    }
                    added++
                }
            }
            this.refreshRanges();
            return added;
        },

        removeRange: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                var name = arguments[a];
                $('#grid_' + this.name + '_' + name).remove();
                for (var r = this.ranges.length - 1; r >= 0; r--) {
                    if (this.ranges[r].name == name) {
                        this.ranges.splice(r, 1);
                        removed++;
                    }
                }
            }
            return removed;
        },

        refreshRanges: function() {
            var obj = this;
            var time = (new Date()).getTime();
            var rec = $('#grid_' + this.name + '_records');
            for (var r in this.ranges) {
                var rg = this.ranges[r];
                var first = rg.range[0];
                var last = rg.range[1];
                var td1 = $('#grid_' + this.name + '_rec_' + first.recid + ' td[col=' + first.column + ']');
                var td2 = $('#grid_' + this.name + '_rec_' + last.recid + ' td[col=' + last.column + ']');
                if ($('#grid_' + this.name + '_' + rg.name).length == 0) {
                    rec.append('<div id="grid_' + this.name + '_' + rg.name + '" class="w2ui-selection" style="' + rg.style + '">' +
                        (rg.name == 'selection' ? '<div id="grid_' + this.name + '_resizer" class="w2ui-selection-resizer"></div>' : '') +
                        '</div>');
                } else {
                    $('#grid_' + this.name + '_' + rg.name).attr('style', rg.style);
                }
                if (td1.length > 0 && td2.length > 0) {
                    $('#grid_' + this.name + '_' + rg.name).css({
                        left: (td1.position().left - 1 + rec.scrollLeft()) + 'px',
                        top: (td1.position().top - 1 + rec.scrollTop()) + 'px',
                        width: (td2.position().left - td1.position().left + td2.width() + 3) + 'px',
                        height: (td2.position().top - td1.position().top + td2.height() + 3) + 'px'
                    });
                }
            }

            // add resizer events
            $(this.box).find('#grid_' + this.name + '_resizer').off('mousedown').on('mousedown', mouseStart);
            //$(this.box).find('#grid_'+ this.name +'_resizer').off('selectstart').on('selectstart', function () { return false; }); // fixes chrome cursror bug

            var eventData = {
                phase: 'before',
                type: 'selectionExtend',
                target: obj.name,
                originalRange: null,
                newRange: null
            };

            function mouseStart(event) {
                var sel = obj.getSelection();
                obj.last.move = {
                    type: 'expand',
                    x: event.screenX,
                    y: event.screenY,
                    divX: 0,
                    divY: 0,
                    recid: sel[0].recid,
                    column: sel[0].column,
                    originalRange: [{
                        recid: sel[0].recid,
                        column: sel[0].column
                    }, {
                        recid: sel[sel.length - 1].recid,
                        column: sel[sel.length - 1].column
                    }],
                    newRange: [{
                        recid: sel[0].recid,
                        column: sel[0].column
                    }, {
                        recid: sel[sel.length - 1].recid,
                        column: sel[sel.length - 1].column
                    }]
                };
                $(document).off('mousemove', mouseMove).on('mousemove', mouseMove);
                $(document).off('mouseup', mouseStop).on('mouseup', mouseStop);
            }

            function mouseMove(event) {
                var mv = obj.last.move;
                if (!mv || mv.type != 'expand') return;
                mv.divX = (event.screenX - mv.x);
                mv.divY = (event.screenY - mv.y);
                // find new cell
                var recid, column;
                var tmp = event.originalEvent.target;
                if (tmp.tagName != 'TD') tmp = $(tmp).parents('td')[0];
                if (typeof $(tmp).attr('col') != 'undefined') column = parseInt($(tmp).attr('col'));
                tmp = $(tmp).parents('tr')[0];
                recid = $(tmp).attr('recid');
                // new range
                if (mv.newRange[1].recid == recid && mv.newRange[1].column == column) return;
                var prevNewRange = $.extend({}, mv.newRange);
                mv.newRange = [{
                    recid: mv.recid,
                    column: mv.column
                }, {
                    recid: recid,
                    column: column
                }];
                // event before
                eventData = obj.trigger($.extend(eventData, {
                    originalRange: mv.originalRange,
                    newRange: mv.newRange
                }));
                if (eventData.isCancelled === true) {
                    mv.newRange = prevNewRange;
                    eventData.newRange = prevNewRange;
                    return;
                } else {
                    // default behavior
                    obj.removeRange('grid-selection-expand');
                    obj.addRange({
                        name: 'grid-selection-expand',
                        range: eventData.newRange,
                        style: 'background-color: rgba(100,100,100,0.1); border: 2px dotted rgba(100,100,100,0.5);'
                    });
                }
            }

            function mouseStop(event) {
                // default behavior
                obj.removeRange('grid-selection-expand');
                delete obj.last.move;
                $(document).off('mousemove', mouseMove);
                $(document).off('mouseup', mouseStop);
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }

            return (new Date()).getTime() - time;
        },
        //GRID SELECT RECORD
        select: function() {
            var selected = 0;
            var sel = this.last.selection;
            if (!this.multiSelect) this.selectNone();
            for (var a = 0; a < arguments.length; a++) {
                var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                var record = this.get(recid);
                if (record == null) continue;
                var index = this.get(recid, true);
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                if (this.selectType == 'row') {
                    if (sel.indexes.indexOf(index) >= 0) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'select',
                        target: this.name,
                        recid: recid,
                        index: index
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    sel.indexes.push(index);
                    sel.indexes.sort(function(a, b) {
                        return a - b
                    });
                    recEl.addClass('w2ui-selected').data('selected', 'yes');
                    recEl.find('.w2ui-grid-select-check').prop("checked", true);
                    selected++;
                } else {
                    var col = arguments[a].column;
                    if (!w2utils.isInt(col)) { // select all columns
                        var cols = [];
                        for (var c in this.columns) {
                            if (this.columns[c].hidden) continue;
                            cols.push({
                                recid: recid,
                                column: parseInt(c)
                            });
                        }
                        if (!this.multiSelect) cols = cols.splice(0, 1);
                        return this.select.apply(this, cols);
                    }
                    var s = sel.columns[index] || [];
                    if ($.isArray(s) && s.indexOf(col) != -1) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'select',
                        target: this.name,
                        recid: recid,
                        index: index,
                        column: col
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    if (sel.indexes.indexOf(index) == -1) {
                        sel.indexes.push(index);
                        sel.indexes.sort(function(a, b) {
                            return a - b
                        });
                    }
                    s.push(col);
                    s.sort(function(a, b) {
                        return a - b
                    }); // sort function must be for numerical sort
                    recEl.find(' > td[col=' + col + ']').addClass('w2ui-selected');
                    selected++;
                    recEl.data('selected', 'yes');
                    recEl.find('.w2ui-grid-select-check').prop("checked", true);
                    // save back to selection object
                    sel.columns[index] = s;
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            // all selected?
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            this.status();
            this.addRange('selection');
            return selected;
        },


         selecttest: function() {
            var selected = 0;
            var grid = this.mainGrid || this;
            if(this.isLastGroup){
                var sel = grid.last.selection;
                if (!grid.multiSelect) this.selectNone();
                for (var a = 0; a < arguments.length; a++) {
                    var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                    var record = this.get(recid);
                    if (record == null) continue;
                    var index = this.get(recid, true);
                    var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                    if (grid.selectType == 'row') {
                        if (sel.indexes.indexOf(index) >= 0) continue;
                        // event before
                        var eventData = grid.trigger({
                            phase: 'before',
                            type: 'select',
                            target: grid.name,
                            recid: recid,
                            index: index
                        });
                        if (eventData.isCancelled === true) continue;
                        // default action
                        sel.indexes.push(index);
                        sel.indexes.sort(function(a, b) {
                            return a - b
                        });
                        recEl.addClass('w2ui-selected').data('selected', 'yes');
                        recEl.find('.w2ui-grid-select-check').prop("checked", true);
                        selected++;
                    } else {
                        var col = arguments[a].column;
                        if (!w2utils.isInt(col)) { // select all columns
                            var cols = [];
                            for (var c in this.columns) {
                                if (this.columns[c].hidden) continue;
                                cols.push({
                                    recid: recid,
                                    column: parseInt(c)
                                });
                            }
                            if (!grid.multiSelect) cols = cols.splice(0, 1);
                            return grid.select.apply(grid, cols);
                        }
                        var s = sel.columns[index] || [];
                        if ($.isArray(s) && s.indexOf(col) != -1) continue;
                        // event before
                        var eventData = grid.trigger({
                            phase: 'before',
                            type: 'select',
                            target: grid.name,
                            recid: recid,
                            index: index,
                            column: col
                        });
                        if (eventData.isCancelled === true) continue;
                        // default action
                        if (sel.indexes.indexOf(index) == -1) {
                            sel.indexes.push(index);
                            sel.indexes.sort(function(a, b) {
                                return a - b
                            });
                        }
                        s.push(col);
                        s.sort(function(a, b) {
                            return a - b
                        }); // sort function must be for numerical sort
                        recEl.find(' > td[col=' + col + ']').addClass('w2ui-selected');
                        selected++;
                        recEl.data('selected', 'yes');
                        recEl.find('.w2ui-grid-select-check').prop("checked", true);
                        // save back to selection object
                        sel.columns[index] = s;
                    }
                    // event after
                    grid.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }
                // all selected?
                if (sel.indexes.length == this.records.length || (grid.searchData.length !== 0 && sel.indexes.length == grid.last.searchIds.length)) {
                    $('#grid_' + this.name + '_check_all').prop('checked', true);
                } else {
                    $('#grid_' + this.name + '_check_all').prop('checked', false);
                }
                this.status();
                this.addRange('selection');
                return selected;
            }
        },


        unselecttest: function() {
            var unselected = 0;
            var grid = this.mainGrid || this;
            var sel = grid.last.selection;
            for (var a = 0; a < arguments.length; a++) {
                var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                var record = this.get(recid);
                if (record == null) continue;
                var index = this.get(record.recid, true);
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                if (grid.selectType == 'row') {
                    if (sel.indexes.indexOf(index) == -1) continue;
                    // event before
                    var eventData = grid.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: this.name,
                        recid: recid,
                        index: index
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    sel.indexes.splice(sel.indexes.indexOf(index), 1);
                    recEl.removeClass('w2ui-selected').removeData('selected');
                    if (recEl.length != 0) recEl[0].style.cssText = 'height: ' + this.recordHeight + 'px; ' + recEl.attr('custom_style');
                    recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    unselected++;
                } else {
                    var col = arguments[a].column;
                    if (!w2utils.isInt(col)) { // unselect all columns
                        var cols = [];
                        for (var c in this.columns) {
                            if (this.columns[c].hidden) continue;
                            cols.push({
                                recid: recid,
                                column: parseInt(c)
                            });
                        }
                        return grid.unselect.apply(grid, cols);
                    }
                    var s = sel.columns[index];
                    if (!$.isArray(s) || s.indexOf(col) == -1) continue;
                    // event before
                    var eventData = grid.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: grid.name,
                        recid: recid,
                        column: col
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    s.splice(s.indexOf(col), 1);
                    $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid) + ' > td[col=' + col + ']').removeClass('w2ui-selected');
                    unselected++;
                    if (s.length == 0) {
                        delete sel.columns[index];
                        sel.indexes.splice(sel.indexes.indexOf(index), 1);
                        recEl.removeData('selected');
                        recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    }
                }
                // event after
                grid.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            // all selected?
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            // show number of selected
            grid.status();
            this.addRange('selection');
            return unselected;
        },

        unselect: function() {
            var unselected = 0;
            var sel = this.last.selection;
            for (var a = 0; a < arguments.length; a++) {
                var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
                var record = this.get(recid);
                if (record == null) continue;
                var index = this.get(record.recid, true);
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                if (this.selectType == 'row') {
                    if (sel.indexes.indexOf(index) == -1) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: this.name,
                        recid: recid,
                        index: index
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    sel.indexes.splice(sel.indexes.indexOf(index), 1);
                    recEl.removeClass('w2ui-selected').removeData('selected');
                    if (recEl.length != 0) recEl[0].style.cssText = 'height: ' + this.recordHeight + 'px; ' + recEl.attr('custom_style');
                    recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    unselected++;
                } else {
                    var col = arguments[a].column;
                    if (!w2utils.isInt(col)) { // unselect all columns
                        var cols = [];
                        for (var c in this.columns) {
                            if (this.columns[c].hidden) continue;
                            cols.push({
                                recid: recid,
                                column: parseInt(c)
                            });
                        }
                        return this.unselect.apply(this, cols);
                    }
                    var s = sel.columns[index];
                    if (!$.isArray(s) || s.indexOf(col) == -1) continue;
                    // event before
                    var eventData = this.trigger({
                        phase: 'before',
                        type: 'unselect',
                        target: this.name,
                        recid: recid,
                        column: col
                    });
                    if (eventData.isCancelled === true) continue;
                    // default action
                    s.splice(s.indexOf(col), 1);
                    $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid) + ' > td[col=' + col + ']').removeClass('w2ui-selected');
                    unselected++;
                    if (s.length == 0) {
                        delete sel.columns[index];
                        sel.indexes.splice(sel.indexes.indexOf(index), 1);
                        recEl.removeData('selected');
                        recEl.find('.w2ui-grid-select-check').prop("checked", false);
                    }
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            // all selected?
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            // show number of selected
            this.status();
            this.addRange('selection');
            return unselected;
        },
        selectAll: function() {
            if (this.multiSelect === false) return;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'select',
                target: this.name,
                all: true
            });
            if (eventData.isCancelled === true) return;
            // default action
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            var sel = this.last.selection;
            var cols = [];
            for (var c in this.columns) cols.push(parseInt(c));
            // if local data source and searched
            sel.indexes = [];
            if (!url && this.searchData.length !== 0) {
                // local search applied
                for (var i = 0; i < this.last.searchIds.length; i++) {
                    sel.indexes.push(this.last.searchIds[i]);
                    if (this.selectType != 'row') sel.columns[this.last.searchIds[i]] = cols.slice(); // .slice makes copy of the array
                }
            } else {
                var buffered = this.records.length;
                if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
                for (var i = 0; i < buffered; i++) {
                    sel.indexes.push(i);
                    if (this.selectType != 'row') sel.columns[i] = cols.slice(); // .slice makes copy of the array
                }
            }
            this.refresh();
            // enable/disable toolbar buttons
            var sel = this.getSelection();
            if (this.toolbar) {
                if (sel.length == 1) this.toolbar.enable('w2ui-edit');
                else this.toolbar.disable('w2ui-edit');
                if (sel.length >= 1) this.toolbar.enable('w2ui-delete');
                else this.toolbar.disable('w2ui-delete');
            }
            this.addRange('selection');
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        selectNone: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'unselect',
                target: this.name,
                all: true
            });
            if (eventData.isCancelled === true) return;
            // default action
            var sel = this.last.selection;
            for (var s in sel.indexes) {
                var index = sel.indexes[s];
                var rec = this.records[index];
                var recid = rec ? rec.recid : null;
                var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
                recEl.removeClass('w2ui-selected').removeData('selected');
                recEl.find('.w2ui-grid-select-check').prop("checked", false);
                // for not rows
                if (this.selectType != 'row') {
                    var cols = sel.columns[index];
                    for (var c in cols) recEl.find(' > td[col=' + cols[c] + ']').removeClass('w2ui-selected');
                }
            }
            sel.indexes = [];
            sel.columns = {};
            if (this.toolbar) this.toolbar.disable('w2ui-edit', 'w2ui-delete');
            this.removeRange('selection');
            $('#grid_' + this.name + '_check_all').prop('checked', false);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        getSelectiontest: function(returnIndex) {
            var ret = [];
            var grid = this.mainGrid || this;
            var sel = grid.last.selection;
            if (grid.selectType == 'row') {
                for (var s in sel.indexes) {
                    if (!this.records[sel.indexes[s]]) continue;
                    if (returnIndex === true) ret.push(sel.indexes[s]);
                    else ret.push(this.records[sel.indexes[s]].recid);
                }
                return ret;
            } else {
                for (var s in sel.indexes) {
                    var cols = sel.columns[sel.indexes[s]];
                    if (!this.records[sel.indexes[s]]) continue;
                    for (var c in cols) {
                        ret.push({
                            recid: this.records[sel.indexes[s]].recid,
                            index: parseInt(sel.indexes[s]),
                            column: cols[c]
                        });
                    }
                }
                return ret;
            }
        },
        getSelection: function(returnIndex) {
            var ret = [];
            var sel = this.last.selection;
            if (this.selectType == 'row') {
                for (var s in sel.indexes) {
                    if (!this.records[sel.indexes[s]]) continue;
                    if (returnIndex === true) ret.push(sel.indexes[s]);
                    else ret.push(this.records[sel.indexes[s]].recid);
                }
                return ret;
            } else {
                for (var s in sel.indexes) {
                    var cols = sel.columns[sel.indexes[s]];
                    if (!this.records[sel.indexes[s]]) continue;
                    for (var c in cols) {
                        ret.push({
                            recid: this.records[sel.indexes[s]].recid,
                            index: parseInt(sel.indexes[s]),
                            column: cols[c]
                        });
                    }
                }
                return ret;
            }
        },
        // select: function() {
        //     var selected = 0;
        //     var grid = this.mainGrid || this;
        //     if (this.isLastGroup) {
        //         var sel = this.last.selection;
        //         if (!grid.multiSelect) this.selectNone();
        //         for (var a = 0; a < arguments.length; a++) {
        //             var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
        //             var record = this.get(recid);
        //             if (record == null) continue;
        //             var index = this.get(recid, true);
        //             var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
        //             if (this.selectType == 'row') {
        //                 if (sel.indexes.indexOf(index) >= 0) continue;
        //                 // event before
        //                 var eventData = grid.trigger({
        //                     phase: 'before',
        //                     type: 'select',
        //                     target: this.name,
        //                     recid: recid,
        //                     index: index
        //                 });
        //                 if (eventData.isCancelled === true) continue;
        //                 // default action
        //                 sel.indexes.push(index);
        //                 sel.indexes.sort(function(a, b) {
        //                     return a - b
        //                 });
        //                 recEl.addClass('w2ui-selected').data('selected', 'yes');
        //                 recEl.find('.w2ui-grid-select-check').prop("checked", true);
        //                 selected++;
        //             } else {
        //                 var col = arguments[a].column;
        //                 if (!w2utils.isInt(col)) { // select all columns
        //                     var cols = [];
        //                     for (var c in this.columns) {
        //                         if (this.columns[c].hidden) continue;
        //                         cols.push({
        //                             recid: recid,
        //                             column: parseInt(c)
        //                         });
        //                     }
        //                     if (!grid.multiSelect) cols = cols.splice(0, 1);
        //                     return this.select.apply(this, cols);
        //                 }
        //                 var s = sel.columns[index] || [];
        //                 if ($.isArray(s) && s.indexOf(col) != -1) continue;
        //                 // event before
        //                 var eventData = grid.trigger({
        //                     phase: 'before',
        //                     type: 'select',
        //                     target: this.name,
        //                     recid: recid,
        //                     index: index,
        //                     column: col
        //                 });
        //                 if (eventData.isCancelled === true) continue;
        //                 // default action
        //                 if (sel.indexes.indexOf(index) == -1) {
        //                     sel.indexes.push(index);
        //                     sel.indexes.sort(function(a, b) {
        //                         return a - b
        //                     });
        //                 }
        //                 s.push(col);
        //                 s.sort(function(a, b) {
        //                     return a - b
        //                 }); // sort function must be for numerical sort
        //                 recEl.find(' > td[col=' + col + ']').addClass('w2ui-selected');
        //                 selected++;
        //                 recEl.data('selected', 'yes');
        //                 recEl.find('.w2ui-grid-select-check').prop("checked", true);
        //                 // save back to selection object
        //                 sel.columns[index] = s;
        //             }
        //             // event after
        //             grid.trigger($.extend(eventData, {
        //                 phase: 'after'
        //             }));
        //         }
        //         // all selected?
        //         if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
        //             $('#grid_' + this.name + '_check_all').prop('checked', true);
        //         } else {
        //             $('#grid_' + this.name + '_check_all').prop('checked', false);
        //         }
        //         this.status();
        //         this.addRange('selection');
        //         grid.last.activeGrid = this.name;
        //         return selected;
        //     }
        // },

        // unselect: function() {
        //     var unselected = 0;
        //     var grid = this.mainGrid || this;
        //     var sel = this.last.selection;
        //     for (var a = 0; a < arguments.length; a++) {
        //         var recid = typeof arguments[a] == 'object' ? arguments[a].recid : arguments[a];
        //         var record = this.get(recid);
        //         if (record == null) continue;
        //         var index = this.get(record.recid, true);
        //         var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
        //         if (this.selectType == 'row') {
        //             if (sel.indexes.indexOf(index) == -1) continue;
        //             // event before
        //             var eventData = grid.trigger({
        //                 phase: 'before',
        //                 type: 'unselect',
        //                 target: this.name,
        //                 recid: recid,
        //                 index: index
        //             });
        //             if (eventData.isCancelled === true) continue;
        //             // default action
        //             sel.indexes.splice(sel.indexes.indexOf(index), 1);
        //             recEl.removeClass('w2ui-selected').removeData('selected');
        //             if (recEl.length != 0) recEl[0].style.cssText = 'height: ' + this.recordHeight + 'px; ' + recEl.attr('custom_style');
        //             recEl.find('.w2ui-grid-select-check').prop("checked", false);
        //             unselected++;
        //         } else {
        //             var col = arguments[a].column;
        //             if (!w2utils.isInt(col)) { // unselect all columns
        //                 var cols = [];
        //                 for (var c in this.columns) {
        //                     if (this.columns[c].hidden) continue;
        //                     cols.push({
        //                         recid: recid,
        //                         column: parseInt(c)
        //                     });
        //                 }
        //                 return this.unselect.apply(this, cols);
        //             }
        //             var s = sel.columns[index];
        //             if (!$.isArray(s) || s.indexOf(col) == -1) continue;
        //             // event before
        //             var eventData = grid.trigger({
        //                 phase: 'before',
        //                 type: 'unselect',
        //                 target: this.name,
        //                 recid: recid,
        //                 column: col
        //             });
        //             if (eventData.isCancelled === true) continue;
        //             // default action
        //             s.splice(s.indexOf(col), 1);
        //             $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid) + ' > td[col=' + col + ']').removeClass('w2ui-selected');
        //             unselected++;
        //             if (s.length == 0) {
        //                 delete sel.columns[index];
        //                 sel.indexes.splice(sel.indexes.indexOf(index), 1);
        //                 recEl.removeData('selected');
        //                 recEl.find('.w2ui-grid-select-check').prop("checked", false);
        //             }
        //         }
        //         // event after
        //         grid.trigger($.extend(eventData, {
        //             phase: 'after'
        //         }));
        //     }
        //     // all selected?
        //     if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
        //         $('#grid_' + this.name + '_check_all').prop('checked', true);
        //     } else {
        //         $('#grid_' + this.name + '_check_all').prop('checked', false);
        //     }
        //     // show number of selected
        //     this.status();
        //     this.addRange('selection');
        //     return unselected;
        // },

        // selectAll: function() {
        //     var grid = this.mainGrid || this;
        //     if (grid.multiSelect === false) return;
        //     if (this.isLastGroup) {
        //         // event before
        //         var eventData = grid.trigger({
        //             phase: 'before',
        //             type: 'select',
        //             target: this.name,
        //             all: true
        //         });
        //         if (eventData.isCancelled === true) return;
        //         // default action
        //         var url = (typeof this.url != 'object' ? this.url : this.url.get);
        //         var sel = grid.last.selection;
        //         var cols = [];
        //         for (var c in this.columns) cols.push(parseInt(c));
        //         // if local data source and searched
        //         sel.indexes = [];
        //         if (!url && this.searchData.length !== 0) {
        //             // local search applied
        //             for (var i = 0; i < this.last.searchIds.length; i++) {
        //                 sel.indexes.push(this.last.searchIds[i]);
        //                 if (this.selectType != 'row') sel.columns[this.last.searchIds[i]] = cols.slice(); // .slice makes copy of the array
        //             }
        //         } else {
        //             var buffered = this.records.length;
        //             if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
        //             for (var i = 0; i < buffered; i++) {
        //                 sel.indexes.push(i);
        //                 if (this.selectType != 'row') sel.columns[i] = cols.slice(); // .slice makes copy of the array
        //             }
        //         }
        //         this.refresh();
        //         // enable/disable toolbar buttons
        //         var sel = this.getSelection();
        //         if (sel.length == 1) grid.toolbar.enable('w2ui-edit');
        //         else grid.toolbar.disable('w2ui-edit');
        //         if (sel.length >= 1) grid.toolbar.enable('w2ui-delete');
        //         else grid.toolbar.disable('w2ui-delete');
        //         this.addRange('selection');
        //         // event after
        //         grid.trigger($.extend(eventData, {
        //             phase: 'after'
        //         }));
        //     }
        // },

        // selectNone: function() {
        //     // event before
        //     var grid = this.mainGrid || this;
        //     grid.last.activeGrid = '';
        //     if (this.isLastGroup) {
        //         var eventData = grid.trigger({
        //             phase: 'before',
        //             type: 'unselect',
        //             target: this.name,
        //             all: true
        //         });
        //         if (eventData.isCancelled === true) return;
        //         // default action
        //         var sel = this.last.selection;
        //         for (var s in sel.indexes) {
        //             var index = sel.indexes[s];
        //             var rec = this.records[index];
        //             var recid = rec ? rec.recid : null;
        //             var recEl = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
        //             recEl.removeClass('w2ui-selected').removeData('selected');
        //             recEl.find('.w2ui-grid-select-check').prop("checked", false);
        //             // for not rows
        //             if (this.selectType != 'row') {
        //                 var cols = sel.columns[index];
        //                 for (var c in cols) recEl.find(' > td[col=' + cols[c] + ']').removeClass('w2ui-selected');
        //             }
        //         }
        //         sel.indexes = [];
        //         sel.columns = {};
        //         grid.toolbar.disable('w2ui-edit', 'w2ui-delete');
        //         this.removeRange('selection');
        //         $('#grid_' + this.name + '_check_all').prop('checked', false);
        //         // event after
        //         grid.trigger($.extend(eventData, {
        //             phase: 'after'
        //         }));
        //     }
        // },

        // getSelection: function(returnIndex) {
        //     var ret = [];
        //     var grid = this.mainGrid || this;
        //     var sel = this.last.selection;
        //     if (this.selectType == 'row') {
        //         for (var s in sel.indexes) {
        //             if (!this.records[sel.indexes[s]]) continue;
        //             if (returnIndex === true) ret.push(sel.indexes[s]);
        //             else ret.push(this.records[sel.indexes[s]].recid);
        //         }
        //         return ret;
        //     } else {
        //         for (var s in sel.indexes) {
        //             var cols = sel.columns[sel.indexes[s]];
        //             if (!this.records[sel.indexes[s]]) continue;
        //             for (var c in cols) {
        //                 ret.push({
        //                     recid: this.records[sel.indexes[s]].recid,
        //                     index: parseInt(sel.indexes[s]),
        //                     column: cols[c]
        //                 });
        //             }
        //         }
        //         return ret;
        //     }
        // },

        search: function(field, value, override) {
            var obj = this;
            obj.hasInitialSearchData = false;
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            var searchData = [];
            var last_multi = this.last.multi;
            var last_logic = this.last.logic;
            var last_field = this.last.field;
            var last_search = this.last.search;
            // 1: search() - advanced search (reads from popup)
            if (arguments.length == 0) {
                last_search = '';
                // advanced search
                for (var s in this.searches) {
                    var search = this.searches[s];
                    var operator = $('#grid_' + this.name + '_operator_' + s).val();
                    var field1 = $('#grid_' + this.name + '_field_' + s);
                    var field2 = $('#grid_' + this.name + '_field2_' + s);
                    var value1 = field1.val();
                    var value2 = field2.val();
                    var svalue = null;
                    if (['int', 'float', 'money', 'currency', 'percent'].indexOf(search.type) != -1) {
                        var fld1 = field1.data('w2field');
                        var fld2 = field2.data('w2field');
                        if (fld1) value1 = fld1.clean(value1);
                        if (fld2) value2 = fld2.clean(value2);
                    }
                    if (['list', 'enum'].indexOf(search.type) != -1) {
                        value1 = field1.data('selected') || {};
                        if ($.isArray(value1)) {
                            svalue = [];
                            for (var v in value1) {
                                svalue.push(w2utils.isFloat(value1[v].id) ? parseFloat(value1[v].id) : String(value1[v].id).toLowerCase());
                                delete value1[v].hidden;
                            }
                        } else {
                            value1 = value1.id || '';
                        }
                    }
                    if ((value1 != '' && value1 != null) || (typeof value2 != 'undefined' && value2 != '')) {
                        var tmp = {
                            field: search.field,
                            type: search.type,
                            operator: operator
                        }
                        if (operator == 'between') {
                            $.extend(tmp, {
                                value: [value1, value2]
                            });
                        } else if (operator == 'in' && typeof value1 == 'string') {
                            $.extend(tmp, {
                                value: value1.split(',')
                            });
                        } else if (operator == 'not in' && typeof value1 == 'string') {
                            $.extend(tmp, {
                                value: value1.split(',')
                            });
                        } else {
                            $.extend(tmp, {
                                value: value1
                            });
                        }
                        if (svalue) $.extend(tmp, {
                            svalue: svalue
                        });
                        // conver date to unix time
                        try {
                            if (search.type == 'date' && operator == 'between') {
                                tmp.value[0] = value1; // w2utils.isDate(value1, w2utils.settings.date_format, true).getTime();
                                tmp.value[1] = value2; // w2utils.isDate(value2, w2utils.settings.date_format, true).getTime();
                            }
                            if (search.type == 'date' && operator == 'is') {
                                tmp.value = value1; // w2utils.isDate(value1, w2utils.settings.date_format, true).getTime();
                            }
                        } catch (e) {

                        }
                        searchData.push(tmp);
                    }
                }
                if (searchData.length > 0 && !url) {
                    last_multi = true;
                    last_logic = 'AND';
                } else {
                    last_multi = true;
                    last_logic = 'AND';
                }
            }
            // 2: search(field, value) - regular search
            if (typeof field == 'string') {
                last_field = field;
                last_search = value;
                last_multi = false;
                last_logic = 'OR';
                // loop through all searches and see if it applies
                if (typeof value != 'undefined') {
                    if (field.toLowerCase() == 'all') {
                        // if there are search fields loop thru them
                        if (this.searches.length > 0) {
                            for (var s in this.searches) {
                                var search = this.searches[s];
                                if (search.type == 'text' || (search.type == 'alphanumeric' && w2utils.isAlphaNumeric(value)) || (search.type == 'int' && w2utils.isInt(value)) || (search.type == 'float' && w2utils.isFloat(value)) || (search.type == 'percent' && w2utils.isFloat(value)) || (search.type == 'hex' && w2utils.isHex(value)) || (search.type == 'currency' && w2utils.isMoney(value)) || (search.type == 'money' && w2utils.isMoney(value)) || (search.type == 'date' && w2utils.isDate(value))) {
                                    var tmp = {
                                        field: search.field,
                                        type: search.type,
                                        operator: (search.type == 'text' ? 'contains' : 'is'),
                                        value: value
                                    };
                                    searchData.push(tmp);
                                }
                                // range in global search box
                                if (['int', 'float', 'money', 'currency', 'percent'].indexOf(search.type) != -1 && String(value).indexOf('-') != -1) {
                                    var t = String(value).split('-');
                                    var tmp = {
                                        field: search.field,
                                        type: search.type,
                                        operator: 'between',
                                        value: [t[0], t[1]]
                                    };
                                    searchData.push(tmp);
                                }
                            }
                        } else {
                            // no search fields, loop thru columns
                            for (var c in this.columns) {
                                var tmp = {
                                    field: this.columns[c].field,
                                    type: 'text',
                                    operator: 'contains',
                                    value: value
                                };
                                searchData.push(tmp);
                            }
                        }
                    } else {
                        var el = $('#grid_' + this.name + '_search_all');
                        var search = this.getSearch(field);
                        if (search == null) search = {
                            field: field,
                            type: 'text'
                        };
                        if (search.field == field) this.last.caption = search.caption;
                        if (search.type == 'list') {
                            var tmp = el.data('selected');
                            if (tmp && !$.isEmptyObject(tmp)) value = tmp.id;
                        }
                        if (value != '') {
                            var op = 'contains';
                            var val = value;
                            if (['date', 'time', 'list'].indexOf(search.type) != -1) op = 'is';
                            if (search.type == 'int' && value != '') {
                                op = 'is';
                                if (String(value).indexOf('-') != -1) {
                                    var tmp = value.split('-');
                                    if (tmp.length == 2) {
                                        op = 'between';
                                        val = [parseInt(tmp[0]), parseInt(tmp[1])];
                                    }
                                }
                                if (String(value).indexOf(',') != -1) {
                                    var tmp = value.split(',');
                                    op = 'in';
                                    val = [];
                                    for (var t in tmp) val.push(tmp[t]);
                                }
                            }
                            var tmp = {
                                field: search.field,
                                type: search.type,
                                operator: op,
                                value: val
                            }
                            searchData.push(tmp);
                        }
                    }
                }
            }
            // 3: search([ { field, value, [operator,] [type] }, { field, value, [operator,] [type] } ], logic) - submit whole structure
            if ($.isArray(field)) {
                var logic = 'AND';
                if (typeof value == 'string') {
                    logic = value.toUpperCase();
                    if (logic != 'OR' && logic != 'AND') logic = 'AND';
                }
                last_search = '';
                last_multi = true;
                last_logic = logic;
                for (var f in field) {
                    var data = field[f];
                    var search = this.getSearch(data.field);
                    if (search == null) search = {
                        type: 'text',
                        operator: 'contains'
                    };
                    // merge current field and search if any
                    searchData.push($.extend(true, {}, search, data));
                }
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'search',
                target: this.name,
                searchData: searchData,
                searchField: (field ? field : 'multi'),
                searchValue: (value ? value : 'multi')
            });
            if (eventData.isCancelled === true) return;
            // default action
            this.searchData = eventData.searchData;
            this.last.field = last_field;
            this.last.search = last_search;
            this.last.multi = last_multi;
            this.last.logic = last_logic;
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            // -- clear all search field
            this.searchClose();
            this.set({
                expanded: false
            }, true);
            // apply search
            if (url) {
                this.last.xhr_offset = 0;
                this.reload();
            } else {
                // local search
                this.localSearch(false, override);
                this.refresh();
            }

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        searchOpen: function() {
            if (!this.box) return;
            if (this.searches.length == 0) return;
            var obj = this;
            // show search
            $('#tb_' + this.name + '_toolbar_item_w2ui-search-advanced').w2overlay(
                this.getSearchesHTML(), {
                    name: 'searches-' + this.name,
                    left: -10,
                    'class': 'w2ui-grid-searches',
                    onShow: function() {
                        if (obj.last.logic == 'OR'  && !obj.hasInitialSearchData) obj.searchData = [];
                        obj.initSearches();
                        $('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches').data('grid-name', obj.name);
                        var sfields = $('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches *[rel=search]');
                        if (sfields.length > 0) sfields[0].focus();
                    }
                }
            );
        },

        searchClose: function() {
            if (!this.box) return;
            if (this.searches.length == 0) return;
            if (this.toolbar) this.toolbar.uncheck('w2ui-search-advanced')
                // hide search
            if ($('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches').length > 0) {
                $().w2overlay('', {
                    name: 'searches-' + this.name
                });
            }
        },

        searchShowFields: function() {
            var el = $('#grid_' + this.name + '_search_all');
            var html = '<div class="w2ui-select-field"><table>';
            for (var s = -1; s < this.searches.length; s++) {
                var search = this.searches[s];
                if (s == -1) {
                    if (!this.multiSearch) continue;
                    search = {
                        field: 'all',
                        caption: w2utils.lang('All Fields')
                    };
                } else {
                    if (this.searches[s].hidden === true) continue;
                }
                html += '<tr ' + (w2utils.isIOS ? 'onTouchStart' : 'onClick') + '="w2ui[\'' + this.name + '\'].initAllField(\'' + search.field + '\')">' +
                    '    <td><input type="radio" tabIndex="-1" ' + (search.field == this.last.field ? 'checked' : '') + '></td>' +
                    '    <td>' + search.caption + '</td>' +
                    '</tr>';
            }
            html += "</table></div>";
            // need timer otherwise does nto show with list type
            setTimeout(function() {
                $(el).w2overlay(html, {
                    left: -10
                });
            }, 1);
        },

        initAllField: function(field, value) {
            var el = $('#grid_' + this.name + '_search_all');
            var search = this.getSearch(field);
            if (field == 'all') {
                search = {
                    field: 'all',
                    caption: w2utils.lang('All Fields')
                };
                el.w2field('clear');
                el.change().focus();
            } else {
                var st = search.type;
                if (['enum', 'select'].indexOf(st) != -1) st = 'list';
                el.w2field(st, $.extend({}, search.options, {
                    suffix: '',
                    autoFormat: false,
                    selected: value
                }));
                if (['list', 'enum'].indexOf(search.type) != -1) {
                    this.last.search = '';
                    this.last.item = '';
                    el.val('');
                }
                // set focus
                setTimeout(function() {
                    el.focus(); /* do not do el.change() as it will refresh grid and pull from server */
                }, 1);
            }
            // update field
            if (this.last.search != '') {
                this.search(search.field, this.last.search);
            } else {
                this.last.field = search.field;
                this.last.caption = search.caption;
            }
            el.attr('placeholder', search.caption);
            $().w2overlay();
        },

        searchReset: function(noRefresh) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'search',
                target: this.name,
                searchData: []
            });
            if (eventData.isCancelled === true) return;
            // default action
            this.searchData = [];
            this.last.search = '';
            this.last.logic = 'OR';
            // --- do not reset to All Fields (I think)
            // if (this.last.multi) {
            //     if (!this.multiSearch) {
            //         this.last.field     = this.searches[0].field;
            //         this.last.caption     = this.searches[0].caption;
            //     } else {
            //         this.last.field      = 'all';
            //         this.last.caption     = w2utils.lang('All Fields');
            //     }
            // }
            this.last.multi = false;
            this.last.xhr_offset = 0;
            // reset scrolling position
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            // -- clear all search field
            this.searchClose();
            $('#grid_' + this.name + '_search_all').val('');
            // apply search
            if (!noRefresh) this.reload();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        clear: function(noRefresh) {
            // this.offset              = 0;   // clear should not reset offset
            // this.total               = 0;   // clear should not reset total
            this.records = [];
            this.summary = [];
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            this.last.range_start = null;
            this.last.range_end = null;
            this.last.xhr_offset = 0;
            if (!noRefresh) this.refresh();
        },

        reset: function(noRefresh) {
            // reset last remembered state
            this.offset = 0;
            this.total = 0;
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            this.last.range_start = null;
            this.last.range_end = null;
            this.last.xhr_offset = 0;
            this.searchReset(noRefresh);
            // initial sort
            if (this.last.sortData != null) this.sortData = this.last.sortData;
            // select none without refresh
            this.set({
                expanded: false
            }, true);
            // refresh
            if (!noRefresh) this.refresh();
        },

        resetGroups: function(noRefresh) {
            // reset last remembered state
            this.offset = 0;
            this.total = 0;
            this.last.scrollTop = 0;
            this.last.scrollLeft = 0;
            this.last.selection.indexes = [];
            this.last.selection.columns = {};
            this.last.range_start = null;
            this.last.range_end = null;
            this.last.xhr_offset = 0;
            if (this.url)
                this.records = [];
            // this.searchReset(noRefresh);
            // initial sort
            if (this.last.sortData != null) this.sortData = this.last.sortData;
            // select none without refresh
            this.set({
                expanded: false
            }, true);
            // refresh
            if (!noRefresh) this.refresh();
            this.reload();
        },

        skip: function(offset) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                this.offset = parseInt(offset);
                if (this.offset > this.total) this.offset = this.total - this.limit;
                if (this.offset < 0 || !w2utils.isInt(this.offset)) this.offset = 0;
                this.records = [];
                this.last.xhr_offset = 0;
                this.last.pull_more = true;
                this.last.scrollTop = 0;
                this.last.scrollLeft = 0;
                $('#grid_' + this.name + '_records').prop('scrollTop', 0);
                this.reload();
            } else {
                console.log('ERROR: grid.skip() can only be called when you have remote data source.');
            }
        },

        load: function(url, callBack) {
            if (typeof url == 'undefined') {
                console.log('ERROR: You need to provide url argument when calling .load() method of "' + this.name + '" object.');
                return;
            }
            // default action
            this.request('get-records', {}, url, callBack);
        },

        reload: function(callBack) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url) {
                this.clear(true);
                this.request('get-records', {}, null, callBack);
            } else {
                this.last.scrollTop = 0;
                this.last.scrollLeft = 0;
                this.last.range_start = null;
                this.last.range_end = null;
                this.localSearch();
                this.refresh();
                if (typeof callBack == 'function') callBack({
                    status: 'success'
                });
            }
        },

        request: function(cmd, add_params, url, callBack) {
            if (typeof add_params == 'undefined') add_params = {};
            if (typeof url == 'undefined' || url == '' || url == null) url = this.url;
            if (url == '' || url == null) return;
            // build parameters list
            var params = {};
            if (!w2utils.isInt(this.offset)) this.offset = 0;
            if (!w2utils.isInt(this.last.xhr_offset)) this.last.xhr_offset = 0;
            // add list params
            params['cmd'] = cmd;
            params['selected'] = this.getSelection();
            params['limit'] = this.limit;
            params['offset'] = parseInt(this.offset) + this.last.xhr_offset;
            params['search'] = this.searchData;
            params['searchLogic'] = this.last.logic;
            params['sort'] = this.sortData;
            if (this.searchData.length == 0) {
                delete params['search'];
                delete params['searchLogic'];
            }
            if (this.sortData.length == 0) {
                delete params['sort'];
            }
            // append other params
            $.extend(params, this.postData);
            $.extend(params, add_params);
            // event before
            if (cmd == 'get-records') {
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'request',
                    target: this.name,
                    url: url,
                    postData: params
                });
                if (eventData.isCancelled === true) {
                    if (typeof callBack == 'function') callBack({
                        status: 'error',
                        message: 'Request aborted.'
                    });
                    return;
                }
            } else {
                var eventData = {
                    url: url,
                    postData: params
                };
            }
            // call server to get data
            var obj = this;
            if (this.last.xhr_offset == 0) {
                this.lock(this.msgRefresh, true);
            } else {
                var more = $('#grid_' + this.name + '_rec_more');
                if (this.autoLoad === true) {
                    more.show().find('td').html('<div><div style="width: 20px; height: 20px;" class="w2ui-spinner"></div></div>');
                } else {
                    more.find('td').html('<div>' + w2utils.lang('Load') + ' ' + obj.limit + ' ' + w2utils.lang('More') + '...</div>');
                }
            }
            if (this.last.xhr) try {
                this.last.xhr.abort();
            } catch (e) {};
            // URL
            var url = (typeof eventData.url != 'object' ? eventData.url : eventData.url.get);
            if (params.cmd == 'save-records' && typeof eventData.url == 'object') url = eventData.url.save;
            if (params.cmd == 'delete-records' && typeof eventData.url == 'object') url = eventData.url.remove;
            // process url with routeData
            if (!$.isEmptyObject(obj.routeData)) {
                var info = w2utils.parseRoute(url);
                if (info.keys.length > 0) {
                    for (var k = 0; k < info.keys.length; k++) {
                        if (obj.routeData[info.keys[k].name] == null) continue;
                        url = url.replace((new RegExp(':' + info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                    }
                }
            }
            // ajax ptions
            var ajaxOptions = {
                type: 'POST',
                url: url,
                data: eventData.postData,
                dataType: 'text' // expected data type from server
            };
            if (w2utils.settings.dataType == 'HTTP') {
                ajaxOptions.data = (typeof ajaxOptions.data == 'object' ? String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']') : ajaxOptions.data);
            }
            if (w2utils.settings.dataType == 'RESTFULL') {
                ajaxOptions.type = 'GET';
                if (params.cmd == 'save-records') ajaxOptions.type = 'PUT'; // so far it is always update
                if (params.cmd == 'delete-records') ajaxOptions.type = 'DELETE';
                ajaxOptions.data = (typeof ajaxOptions.data == 'object' ? String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']') : ajaxOptions.data);
            }
            if (w2utils.settings.dataType == 'JSON') {
                ajaxOptions.type = 'POST';
                ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                ajaxOptions.contentType = 'application/json';
            }
            if (this.method) ajaxOptions.type = this.method;

            this.last.xhr_cmd = params.cmd;
            this.last.xhr_start = (new Date()).getTime();
            this.last.xhr = $.ajax(ajaxOptions)
                .done(function(data, status, xhr) {
                    obj.requestComplete(status, cmd, callBack);
                })
                .fail(function(xhr, status, error) {
                    // trigger event
                    var errorObj = {
                        status: status,
                        error: error,
                        rawResponseText: xhr.responseText
                    };
                    var eventData2 = obj.trigger({
                        phase: 'before',
                        type: 'error',
                        error: errorObj,
                        xhr: xhr
                    });
                    if (eventData2.isCancelled === true) return;
                    // default behavior
                    if (status != 'abort') {
                        var data;
                        try {
                            data = $.parseJSON(xhr.responseText)
                        } catch (e) {}
                        console.log('ERROR: Server communication failed.',
                            '\n   EXPECTED:', {
                                status: 'success',
                                total: 5,
                                records: [{
                                    recid: 1,
                                    field: 'value'
                                }]
                            },
                            '\n         OR:', {
                                status: 'error',
                                message: 'error message'
                            },
                            '\n   RECEIVED:', typeof data == 'object' ? data : xhr.responseText);
                        obj.requestComplete('error', cmd, callBack);
                    }
                    // event after
                    obj.trigger($.extend(eventData2, {
                        phase: 'after'
                    }));
                });
            if (cmd == 'get-records') {
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        requestComplete: function(status, cmd, callBack) {
            var obj = this;
            this.unlock();
            setTimeout(function() {
                obj.status(w2utils.lang('Server Response') + ' ' + ((new Date()).getTime() - obj.last.xhr_start) / 1000 + ' ' + w2utils.lang('sec'));
            }, 10);
            this.last.pull_more = false;
            this.last.pull_refresh = true;

            // event before
            var event_name = 'load';
            if (this.last.xhr_cmd == 'save-records') event_name = 'save';
            if (this.last.xhr_cmd == 'delete-records') event_name = 'deleted';
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: event_name,
                xhr: this.last.xhr,
                status: status
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            // parse server response
            var data;
            var responseText = this.last.xhr.responseText;
            if (status != 'error') {
                // default action
                if (typeof responseText != 'undefined' && responseText != '') {
                    // check if the onLoad handler has not already parsed the data
                    if (typeof responseText == "object") {
                        data = responseText;
                    } else {
                        if (typeof obj.parser == 'function') {
                            data = obj.parser(responseText);
                            if (typeof data != 'object') {
                                console.log('ERROR: Your parser did not return proper object');
                            }
                        } else {
                            // $.parseJSON or $.getJSON did not work because those expect perfect JSON data - where everything is in double quotes
                            //
                            // TODO: avoid (potentially malicious) code injection from the response.
                            try {
                                eval('data = ' + responseText);
                            } catch (e) {}
                        }
                    }
                    // convert recids
                    if (obj.recid) {
                        for (var r in data.records) {
                            data.records[r]['recid'] = data.records[r][obj.recid];
                        }
                    }
                    if (typeof data == 'undefined') {
                        data = {
                            status: 'error',
                            message: this.msgNotJSON,
                            responseText: responseText
                        };
                    }
                    if (data['status'] == 'error') {
                        obj.error(data['message']);
                    } else {
                        if (cmd == 'get-records') {
                            if (this.last.xhr_offset == 0) {
                                this.records = [];
                                this.summary = [];
                                //data.xhr_status=data.status;
                                delete data.status;
                                $.extend(true, this, data);
                            } else {
                                var records = data.records;
                                delete data.records;
                                //data.xhr_status=data.status;
                                delete data.status;
                                $.extend(true, this, data);
                                for (var r in records) {
                                    this.records.push(records[r]);
                                }
                            }
                        }
                        if (cmd == 'delete-records') {
                            // reset() also triggers reload
                            this.reset(); // unselect old selections
                            return;
                        }
                    }
                }
            } else {
                data = {
                    status: 'error',
                    message: this.msgAJAXerror,
                    responseText: responseText
                };
                obj.error(this.msgAJAXerror);
            }
            // event after
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.localSort();
                this.localSearch();
            }
            this.total = parseInt(this.total);
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // do not refresh if loading on infinite scroll
            if (this.last.xhr_offset == 0) this.refresh();
            else this.scroll();
            // call back
            if (typeof callBack == 'function') callBack(data);
        },

        error: function(msg) {
            var obj = this;
            // let the management of the error outside of the grid
            var eventData = this.trigger({
                target: this.name,
                type: 'error',
                message: msg,
                xhr: this.last.xhr
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            if (this.last.xhr.status !== 401) { // modified : to prevent popup error on unauthorized request
                w2alert(msg, 'Error');
            }
            //w2alert(msg, 'Error');
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        getChanges: function() {
            var changes = [];
            for (var r in this.records) {
                var rec = this.records[r];
                if (typeof rec['changes'] != 'undefined') {
                    changes.push($.extend(true, {
                        recid: rec.recid
                    }, rec.changes));
                }
            }
            return changes;
        },

        mergeChanges: function() {
            var changes = this.getChanges();
            for (var c in changes) {
                var record = this.get(changes[c].recid);
                for (var s in changes[c]) {
                    if (s == 'recid') continue; // do not allow to change recid
                    try {
                        eval('record.' + s + ' = changes[c][s]');
                    } catch (e) {}
                    delete record.changes;
                }
            }
            this.refresh();
        },

        // ===================================================
        // --  Action Handlers

        save: function() {
            var obj = this;
            var changes = this.getChanges();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'submit',
                changes: changes
            });
            if (eventData.isCancelled === true) return;
            var url = (typeof this.url != 'object' ? this.url : this.url.save);
            if (url) {
                this.request('save-records', {
                        'changes': eventData.changes
                    }, null,
                    function(data) {
                        if (data.status !== 'error') {
                            // only merge changes, if save was successful
                            obj.mergeChanges();
                        }
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }
                );
            } else {
                this.mergeChanges();
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        editField: function(recid, column, value, event) {
            var obj = this;
            var index = obj.get(recid, true);
            var rec = obj.records[index];
            var col = obj.columns[column];
            var edit = col ? col.editable : null;
            if (!rec || !col || !edit || rec.editable === false) return;
            if (['enum', 'file'].indexOf(edit.type) != -1) {
                console.log('ERROR: input types "enum" and "file" are not supported in inline editing.');
                return;
            }
            if(rec.items) edit.items = rec.items;
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'editField',
                target: obj.name,
                recid: recid,
                column: column,
                value: value,
                index: index,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            value = eventData.value;
            // default behaviour
            this.selectNone();
            this.select({
                recid: recid,
                column: column
            });
            this.last.edit_col = column;
            if (['checkbox', 'check'].indexOf(edit.type) != -1) return;
            // create input element
            var tr = $('#grid_' + obj.name + '_rec_' + w2utils.escapeId(recid));
            var el = tr.find('[col=' + column + '] > div');
            if (typeof edit.inTag == 'undefined') edit.inTag = '';
            if (typeof edit.outTag == 'undefined') edit.outTag = '';
            if (typeof edit.style == 'undefined') edit.style = '';
            if (typeof edit.items == 'undefined') edit.items = [];
            var val = (rec.changes && typeof rec.changes[col.field] != 'undefined' ? w2utils.stripTags(rec.changes[col.field]) : w2utils.stripTags(rec[col.field]));
            if (val == null || typeof val == 'undefined') val = '';
            if (typeof value != 'undefined' && value != null) val = value;
            var addStyle = (typeof col.style != 'undefined' ? col.style + ';' : '');
            if (typeof col.render == 'string' && ['number', 'int', 'float', 'money', 'percent'].indexOf(col.render.split(':')[0]) != -1) {
                addStyle += 'text-align: right;';
            }
            // mormalize items
            if (edit.items.length > 0 && !$.isPlainObject(edit.items[0])) {
                edit.items = w2obj.field.prototype.normMenu(edit.items);
            }
            if (edit.type == 'select') {
                var html = '';
                for (var i in edit.items) {
                    html += '<option value="' + edit.items[i].id + '" ' + (edit.items[i].id == val ? 'selected' : '') + '>' + edit.items[i].text + '</option>';
                }
                el.addClass('w2ui-editable')
                    .html('<select id="grid_' + obj.name + '_edit_' + recid + '_' + column + '" column="' + column + '" ' +
                        '    style="width: 100%; ' + addStyle + edit.style + '" field="' + col.field + '" recid="' + recid + '" ' +
                        '    ' + edit.inTag +
                        '>' + html + '</select>' + edit.outTag);
                el.find('select').focus()
                    .on('change', function(event) {
                        delete obj.last.move;
                    })
                    .on('blur', function(event) {
                        obj.editChange.call(obj, this, index, column, event);
                    });
            } else {
                el.addClass('w2ui-editable')
                    .html('<input id="grid_' + obj.name + '_edit_' + recid + '_' + column + '" ' +
                        '    type="text" style="font-family: inherit; font-size: inherit; outline: none; ' + addStyle + edit.style + '" field="' + col.field + '" recid="' + recid + '" ' +
                        '    column="' + column + '" ' + edit.inTag +
                        '>' + edit.outTag);
                if (value == null) el.find('input').val(val != 'object' ? val : '');
                // init w2field
                var input = el.find('input').get(0);
                $(input).w2field(edit.type, $.extend(edit, {
                        selected: val
                    }))
                    // add blur listener
                setTimeout(function() {
                    var tmp = input;
                    if (edit.type == 'list') {
                        tmp = $($(input).data('w2field').helpers.focus).find('input');
                        if (typeof val != 'object' && val != '') tmp.val(val).css({
                            opacity: 1
                        }).prev().css({
                            opacity: 1
                        });
                    }
                    $(tmp).on('blur', function(event) {
                        obj.editChange.call(obj, input, index, column, event);
                    });
                }, 10);
                if (value != null) $(input).val(val != 'object' ? val : '');
            }
            setTimeout(function() {
                el.find('input, select')
                    .on('click', function(event) {
                        event.stopPropagation();
                    })
                    .on('keydown', function(event) {
                        var cancel = false;
                        switch (event.keyCode) {
                            case 9: // tab
                                cancel = true;
                                var next_rec = recid;
                                var next_col = event.shiftKey ? obj.prevCell(column, true) : obj.nextCell(column, true);
                                // next or prev row
                                if (next_col == null) {
                                    var tmp = event.shiftKey ? obj.prevRow(index) : obj.nextRow(index);
                                    if (tmp != null && tmp != index) {
                                        next_rec = obj.records[tmp].recid;
                                        // find first editable row
                                        for (var c in obj.columns) {
                                            var tmp = obj.columns[c].editable;
                                            if (typeof tmp != 'undefined' && ['checkbox', 'check'].indexOf(tmp.type) == -1) {
                                                next_col = parseInt(c);
                                                if (!event.shiftKey) break;
                                            }
                                        }
                                    }

                                }
                                if (next_rec === false) next_rec = recid;
                                if (next_col == null) next_col = column;
                                // init new or same record
                                this.blur();
                                setTimeout(function() {
                                    if (obj.selectType != 'row') {
                                        obj.selectNone();
                                        obj.select({
                                            recid: next_rec,
                                            column: next_col
                                        });
                                    } else {
                                        obj.editField(next_rec, next_col, null, event);
                                    }
                                }, 1);
                                break;

                            case 13: // enter
                                this.blur();
                                var next = event.shiftKey ? obj.prevRow(index) : obj.nextRow(index);
                                if (next != null && next != index) {
                                    setTimeout(function() {
                                        if (obj.selectType != 'row') {
                                            obj.selectNone();
                                            obj.select({
                                                recid: obj.records[next].recid,
                                                column: column
                                            });
                                        } else {
                                            obj.editField(obj.records[next].recid, column, null, event);
                                        }
                                    }, 100);
                                }
                                break;

                            case 38: // up arrow
                                if (!event.shiftKey) break;
                                cancel = true;
                                var next = obj.prevRow(index);
                                if (next != index) {
                                    this.blur();
                                    setTimeout(function() {
                                        if (obj.selectType != 'row') {
                                            obj.selectNone();
                                            obj.select({
                                                recid: obj.records[next].recid,
                                                column: column
                                            });
                                        } else {
                                            obj.editField(obj.records[next].recid, column, null, event);
                                        }
                                    }, 1);
                                }
                                break;

                            case 40: // down arrow
                                if (!event.shiftKey) break;
                                cancel = true;
                                var next = obj.nextRow(index);
                                if (next != null && next != index) {
                                    this.blur();
                                    setTimeout(function() {
                                        if (obj.selectType != 'row') {
                                            obj.selectNone();
                                            obj.select({
                                                recid: obj.records[next].recid,
                                                column: column
                                            });
                                        } else {
                                            obj.editField(obj.records[next].recid, column, null, event);
                                        }
                                    }, 1);
                                }
                                break;

                            case 27: // escape
                                var old = obj.parseField(rec, col.field);
                                if (rec.changes && typeof rec.changes[col.field] != 'undefined') old = rec.changes[col.field];
                                this.value = typeof old != 'undefined' ? old : '';
                                this.blur();
                                setTimeout(function() {
                                    obj.select({
                                        recid: recid,
                                        column: column
                                    })
                                }, 1);
                                break;
                        }
                        if (cancel)
                            if (event.preventDefault) event.preventDefault();
                    });
                // focus and select
                var tmp = el.find('input').focus();
                if (value != null) {
                    // set cursor to the end
                    tmp[0].setSelectionRange(tmp.val().length, tmp.val().length);
                } else {
                    tmp.select();
                }

            }, 1);
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },
        //GRID EDITCHANGE EVENT
        editChange: function(el, index, column, event) {
            // all other fields
            var summary = index < 0;
            index = index < 0 ? -index - 1 : index;
            var records = summary ? this.summary : this.records;
            var rec = records[index];
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(rec.recid));
            var col = this.columns[column];
            var new_val = el.value;
            var old_val = this.parseField(rec, col.field);
            var tmp = $(el).data('w2field');
            if (tmp) {
                new_val = tmp.clean(new_val);
                if (tmp.type == 'list' && tmp.options.bindToObject && new_val != '') new_val = $(el).data('selected');
            }
            if (el.type == 'checkbox') new_val = el.checked;
            // change/restore event
            var eventData = {
                phase: 'before',
                type: 'change',
                target: this.name,
                input_id: el.id,
                recid: rec.recid,
                index: index,
                column: column,
                value_new: new_val,
                value_previous: (rec.changes && rec.changes.hasOwnProperty(col.field) ? rec.changes[col.field] : old_val),
                value_original: old_val
            };
            while (true) {
                new_val = eventData.value_new;
                if ((typeof new_val != 'object' && String(old_val) != String(new_val)) ||
                    (typeof new_val == 'object' && (typeof old_val != 'object' || new_val.id != old_val.id))) {
                    // change event
                    eventData = this.trigger($.extend(eventData, {
                        type: 'change',
                        phase: 'before'
                    }));
                    if (eventData.isCancelled !== true) {
                        if (new_val !== eventData.value_new) {
                            // re-evaluate the type of change to be made
                            continue;
                        }
                        // default action
                        rec.changes = rec.changes || {};
                        rec.changes[col.field] = eventData.value_new;
                        // event after
                        this.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }
                } else {
                    // restore event
                    eventData = this.trigger($.extend(eventData, {
                        type: 'restore',
                        phase: 'before'
                    }));
                    if (eventData.isCancelled !== true) {
                        if (new_val !== eventData.value_new) {
                            // re-evaluate the type of change to be made
                            continue;
                        }
                        // default action
                        if (rec.changes) delete rec.changes[col.field];
                        if ($.isEmptyObject(rec.changes)) delete rec.changes;
                        // event after
                        this.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }
                }
                break;
            }
            // refresh cell
            var cell = this.getCellHTML(index, column, summary);
            if (!summary) {
                if (rec.changes && typeof rec.changes[col.field] != 'undefined') {
                    $(tr).find('[col=' + column + ']').addClass('w2ui-changed').html(cell);
                } else {
                    $(tr).find('[col=' + column + ']').removeClass('w2ui-changed').html(cell);
                }
            }
        },

        "delete": function(force) {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'delete',
                force: force
            });
            if (eventData.isCancelled === true) return;
            force = eventData.force;
            // default action
            var recs = this.getSelection();
            if (recs.length == 0) return;
            if (this.msgDelete != '' && !force) {
                w2confirm({
                    title: w2utils.lang('Delete Confirmation'),
                    msg: obj.msgDelete,
                    btn_yes: {
                        "class": 'btn-red'
                    },
                    callBack: function(result) {
                        if (result == 'Yes') w2ui[obj.name]['delete'](true);
                    }
                });
                return;
            }
            // call delete script
            var url = (typeof this.url != 'object' ? this.url : this.url.remove);
            if (url) {
                this.request('delete-records');
            } else {
                this.selectNone();
                if (typeof recs[0] != 'object') {
                    this.remove.apply(this, recs);
                } else {
                    // clear cells
                    for (var r in recs) {
                        var fld = this.columns[recs[r].column].field;
                        var ind = this.get(recs[r].recid, true);
                        if (ind != null && fld != 'recid') {
                            this.records[ind][fld] = '';
                            if (this.records[ind].changes) delete this.records[ind].changes[fld];
                        }
                    }
                    this.refresh();
                }
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        click: function(recid, event) {
            var time = (new Date()).getTime();
            var column = null;
            if (this.last.cancelClick == true || (event && event.altKey)) return;
            if (typeof recid == 'object') {
                column = recid.column;
                recid = recid.recid;
            }
            if (typeof event == 'undefined') event = {};
            // check for double click
            if (time - parseInt(this.last.click_time) < 350 && event.type == 'click') {
                this.dblClick(recid, event);
                return;
            }
            this.last.click_time = time;
            // column user clicked on
            if (column == null && event.target) {
                var tmp = event.target;
                if (tmp.tagName != 'TD') tmp = $(tmp).parents('td')[0];
                if (typeof $(tmp).attr('col') != 'undefined') column = parseInt($(tmp).attr('col'));
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'click',
                recid: recid,
                column: column,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // if it is subgrid unselect top grid
            var parent = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid)).parents('tr');
            if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                var grid = parent.parents('.w2ui-grid').attr('name');
                w2ui[grid].selectNone();
                // all subgrids
                parent.parents('.w2ui-grid').find('.w2ui-expanded-row .w2ui-grid').each(function(index, el) {
                    var grid = $(el).attr('name');
                    if (w2ui[grid]) w2ui[grid].selectNone();
                });
            }
            // unselect all subgrids
            $(this.box).find('.w2ui-expanded-row .w2ui-grid').each(function(index, el) {
                var grid = $(el).attr('name');
                if (w2ui[grid]) w2ui[grid].selectNone();
            });
            // default action
            var obj = this;
            var sel = this.getSelection();
            $('#grid_' + this.name + '_check_all').prop("checked", false);
            var ind = this.get(recid, true);
            var record = this.records[ind];
            var selectColumns = [];
            obj.last.sel_ind = ind;
            obj.last.sel_col = column;
            obj.last.sel_recid = recid;
            obj.last.sel_type = 'click';
            // multi select with shif key
            if (event.shiftKey && sel.length > 0 && obj.multiSelect) {
                if (sel[0].recid) {
                    var start = this.get(sel[0].recid, true);
                    var end = this.get(recid, true);
                    if (column > sel[0].column) {
                        var t1 = sel[0].column;
                        var t2 = column;
                    } else {
                        var t1 = column;
                        var t2 = sel[0].column;
                    }
                    for (var c = t1; c <= t2; c++) selectColumns.push(c);
                } else {
                    var start = this.get(sel[0], true);
                    var end = this.get(recid, true);
                }
                var sel_add = []
                if (start > end) {
                    var tmp = start;
                    start = end;
                    end = tmp;
                }
                var url = (typeof this.url != 'object' ? this.url : this.url.get);
                for (var i = start; i <= end; i++) {
                    if (this.searchData.length > 0 && !url && $.inArray(i, this.last.searchIds) == -1) continue;
                    if (this.selectType == 'row') {
                        sel_add.push(this.records[i].recid);
                    } else {
                        for (var sc in selectColumns) sel_add.push({
                            recid: this.records[i].recid,
                            column: selectColumns[sc]
                        });
                    }
                    //sel.push(this.records[i].recid);
                }
                this.select.apply(this, sel_add);
            } else {
                var last = this.last.selection;
                var flag = (last.indexes.indexOf(ind) != -1 ? true : false);
                // clear other if necessary
                if (((!event.ctrlKey && !event.shiftKey && !event.metaKey) || !this.multiSelect) && !this.showSelectColumn) {
                    if (this.selectType != 'row' && $.inArray(column, last.columns[ind]) == -1) flag = false;
                    if (sel.length > 300) this.selectNone();
                    else this.unselect.apply(this, sel);
                    if (flag === true) {
                        this.unselect({
                            recid: recid,
                            column: column
                        });
                    } else {
                        this.select({
                            recid: recid,
                            column: column
                        });
                    }
                } else {
                    if (this.selectType != 'row' && $.inArray(column, last.columns[ind]) == -1) flag = false;
                    if (flag === true) {
                        this.unselect({
                            recid: recid,
                            column: column
                        });
                    } else {
                        this.select({
                            recid: recid,
                            column: column
                        });
                    }
                }
            }
            this.status();
            obj.initResize();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        columnClick: function(field, event) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'columnClick',
                target: this.name,
                field: field,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behaviour
            var column = this.getColumn(field);
            if (column.sortable) this.sort(field, null, (event && (event.ctrlKey || event.metaKey) ? true : false));
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        keydown: function(event) {
            // this method is called from w2utils
            var obj = this;
            if (obj.keyboard !== true) return;
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'keydown',
                target: obj.name,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            var empty = false;
            var records = $('#grid_' + obj.name + '_records');
            var sel = obj.getSelection();
            if (sel.length == 0) empty = true;
            var recid = sel[0] || null;
            var columns = [];
            var recid2 = sel[sel.length - 1];
            if (typeof recid == 'object' && recid != null) {
                recid = sel[0].recid;
                columns = [];
                var ii = 0;
                while (true) {
                    if (!sel[ii] || sel[ii].recid != recid) break;
                    columns.push(sel[ii].column);
                    ii++;
                }
                recid2 = sel[sel.length - 1].recid;
            }
            var ind = obj.get(recid, true);
            var ind2 = obj.get(recid2, true);
            var rec = obj.get(recid);
            var recEL = $('#grid_' + obj.name + '_rec_' + (ind !== null ? w2utils.escapeId(obj.records[ind].recid) : 'none'));
            var cancel = false;
            var key = event.keyCode;
            var shiftKey = event.shiftKey;
            if (key == 9) { // tab key
                if (event.shiftKey) key = 37;
                else key = 39; // replace with arrows
                shiftKey = false;
                cancel = true;
            }
            switch (key) {
                case 8: // backspace
                case 46: // delete
                    if (this.show.toolbarDelete) obj["delete"]();
                    cancel = true;
                    event.stopPropagation();
                    break;

                case 27: // escape
                    obj.selectNone();
                    if (sel.length > 0 && typeof sel[0] == 'object') {
                        obj.select({
                            recid: sel[0].recid,
                            column: sel[0].column
                        });
                    }
                    cancel = true;
                    break;

                case 65: // cmd + A
                    if (!event.metaKey && !event.ctrlKey) break;
                    obj.selectAll();
                    cancel = true;
                    break;

                case 70: // cmd + F
                    if (!event.metaKey && !event.ctrlKey) break;
                    $('#grid_' + obj.name + '_search_all').focus();
                    cancel = true;
                    break;

                case 13: // enter
                    // if expandable columns - expand it
                    if (this.selectType == 'row' && obj.show.expandColumn === true) {
                        if (recEL.length <= 0) break;
                        obj.toggle(recid, event);
                        cancel = true;
                    } else { // or enter edit
                        for (var c in this.columns) {
                            if (this.columns[c].editable) {
                                columns.push(parseInt(c));
                                break;
                            }
                        }
                        // edit last column that was edited
                        if (this.selectType == 'row' && this.last.edit_col) columns = [this.last.edit_col];
                        if (columns.length > 0) {
                            obj.editField(recid, columns[0], null, event);
                            cancel = true;
                        }
                    }
                    break;

                case 37: // left
                    if (empty) break;
                    // check if this is subgrid
                    var parent = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(obj.records[ind].recid)).parents('tr');
                    if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                        var recid = parent.prev().attr('recid');
                        var grid = parent.parents('.w2ui-grid').attr('name');
                        obj.selectNone();
                        w2utils.keyboard.active(grid);
                        w2ui[grid].set(recid, {
                            expanded: false
                        });
                        w2ui[grid].collapse(recid);
                        w2ui[grid].click(recid);
                        cancel = true;
                        break;
                    }
                    if (this.selectType == 'row') {
                        if (recEL.length <= 0 || rec.expanded !== true) break;
                        obj.set(recid, {
                            expanded: false
                        }, true);
                        obj.collapse(recid, event);
                    } else {
                        var prev = obj.prevCell(columns[0]);
                        if (prev != null) {
                            if (shiftKey && obj.multiSelect) {
                                if (tmpUnselect()) return;
                                var tmp = [];
                                var newSel = [];
                                var unSel = [];
                                if (columns.indexOf(this.last.sel_col) == 0 && columns.length > 1) {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        unSel.push({
                                            recid: sel[i].recid,
                                            column: columns[columns.length - 1]
                                        });
                                    }
                                } else {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        newSel.push({
                                            recid: sel[i].recid,
                                            column: prev
                                        });
                                    }
                                }
                                obj.unselect.apply(obj, unSel);
                                obj.select.apply(obj, newSel);
                            } else {
                                event.shiftKey = false;
                                obj.click({
                                    recid: recid,
                                    column: prev
                                }, event);
                            }
                        } else {
                            // if selected more then one, then select first
                            if (!shiftKey) {
                                for (var s = 1; s < sel.length; s++) obj.unselect(sel[s]);
                            }
                        }
                    }
                    cancel = true;
                    break;

                case 39: // right
                    if (empty) break;
                    if (this.selectType == 'row') {
                        if (recEL.length <= 0 || rec.expanded === true || obj.show.expandColumn !== true) break;
                        obj.expand(recid, event);
                    } else {
                        var next = obj.nextCell(columns[columns.length - 1]);
                        if (next !== null) {
                            if (shiftKey && key == 39 && obj.multiSelect) {
                                if (tmpUnselect()) return;
                                var tmp = [];
                                var newSel = [];
                                var unSel = [];
                                if (columns.indexOf(this.last.sel_col) == columns.length - 1 && columns.length > 1) {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        unSel.push({
                                            recid: sel[i].recid,
                                            column: columns[0]
                                        });
                                    }
                                } else {
                                    for (var i in sel) {
                                        if (tmp.indexOf(sel[i].recid) == -1) tmp.push(sel[i].recid);
                                        newSel.push({
                                            recid: sel[i].recid,
                                            column: next
                                        });
                                    }
                                }
                                obj.unselect.apply(obj, unSel);
                                obj.select.apply(obj, newSel);
                            } else {
                                obj.click({
                                    recid: recid,
                                    column: next
                                }, event);
                            }
                        } else {
                            // if selected more then one, then select first
                            if (!shiftKey) {
                                for (var s = 0; s < sel.length - 1; s++) obj.unselect(sel[s]);
                            }
                        }
                    }
                    cancel = true;
                    break;

                case 38: // up
                    if (empty) selectTopRecord();
                    if (recEL.length <= 0) break;
                    // move to the previous record
                    var prev = obj.prevRow(ind);
                    if (prev != null) {
                        // jump into subgrid
                        if (obj.records[prev].expanded) {
                            var subgrid = $('#grid_' + obj.name + '_rec_' + w2utils.escapeId(obj.records[prev].recid) + '_expanded_row').find('.w2ui-grid');
                            if (subgrid.length > 0 && w2ui[subgrid.attr('name')]) {
                                obj.selectNone();
                                var grid = subgrid.attr('name');
                                var recs = w2ui[grid].records;
                                w2utils.keyboard.active(grid);
                                w2ui[grid].click(recs[recs.length - 1].recid);
                                cancel = true;
                                break;
                            }
                        }
                        if (shiftKey && obj.multiSelect) { // expand selection
                            if (tmpUnselect()) return;
                            if (obj.selectType == 'row') {
                                if (obj.last.sel_ind > prev && obj.last.sel_ind != ind2) {
                                    obj.unselect(obj.records[ind2].recid);
                                } else {
                                    obj.select(obj.records[prev].recid);
                                }
                            } else {
                                if (obj.last.sel_ind > prev && obj.last.sel_ind != ind2) {
                                    prev = ind2;
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[prev].recid,
                                        column: columns[c]
                                    });
                                    obj.unselect.apply(obj, tmp);
                                } else {
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[prev].recid,
                                        column: columns[c]
                                    });
                                    obj.select.apply(obj, tmp);
                                }
                            }
                        } else { // move selected record
                            obj.selectNone();
                            obj.click({
                                recid: obj.records[prev].recid,
                                column: columns[0]
                            }, event);
                        }
                        obj.scrollIntoView(prev);
                        if (event.preventDefault) event.preventDefault();
                    } else {
                        // if selected more then one, then select first
                        if (!shiftKey) {
                            for (var s = 1; s < sel.length; s++) obj.unselect(sel[s]);
                        }
                        // jump out of subgird (if first record)
                        var parent = $('#grid_' + obj.name + '_rec_' + w2utils.escapeId(obj.records[ind].recid)).parents('tr');
                        if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                            var recid = parent.prev().attr('recid');
                            var grid = parent.parents('.w2ui-grid').attr('name');
                            obj.selectNone();
                            w2utils.keyboard.active(grid);
                            w2ui[grid].click(recid);
                            cancel = true;
                            break;
                        }
                    }
                    break;

                case 40: // down
                    if (empty) selectTopRecord();
                    if (recEL.length <= 0) break;
                    // jump into subgrid
                    if (obj.records[ind2].expanded) {
                        var subgrid = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(obj.records[ind2].recid) + '_expanded_row').find('.w2ui-grid');
                        if (subgrid.length > 0 && w2ui[subgrid.attr('name')]) {
                            obj.selectNone();
                            var grid = subgrid.attr('name');
                            var recs = w2ui[grid].records;
                            w2utils.keyboard.active(grid);
                            w2ui[grid].click(recs[0].recid);
                            cancel = true;
                            break;
                        }
                    }
                    // move to the next record
                    var next = obj.nextRow(ind2);
                    if (next != null) {
                        if (shiftKey && obj.multiSelect) { // expand selection
                            if (tmpUnselect()) return;
                            if (obj.selectType == 'row') {
                                if (this.last.sel_ind < next && this.last.sel_ind != ind) {
                                    obj.unselect(obj.records[ind].recid);
                                } else {
                                    obj.select(obj.records[next].recid);
                                }
                            } else {
                                if (this.last.sel_ind < next && this.last.sel_ind != ind) {
                                    next = ind;
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[next].recid,
                                        column: columns[c]
                                    });
                                    obj.unselect.apply(obj, tmp);
                                } else {
                                    var tmp = [];
                                    for (var c in columns) tmp.push({
                                        recid: obj.records[next].recid,
                                        column: columns[c]
                                    });
                                    obj.select.apply(obj, tmp);
                                }
                            }
                        } else { // move selected record
                            obj.selectNone();
                            obj.click({
                                recid: obj.records[next].recid,
                                column: columns[0]
                            }, event);
                        }
                        obj.scrollIntoView(next);
                        cancel = true;
                    } else {
                        // if selected more then one, then select first
                        if (!shiftKey) {
                            for (var s = 0; s < sel.length - 1; s++) obj.unselect(sel[s]);
                        }
                        // jump out of subgrid (if last record in subgrid)
                        var parent = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(obj.records[ind2].recid)).parents('tr');
                        if (parent.length > 0 && String(parent.attr('id')).indexOf('expanded_row') != -1) {
                            var recid = parent.next().attr('recid');
                            var grid = parent.parents('.w2ui-grid').attr('name');
                            obj.selectNone();
                            w2utils.keyboard.active(grid);
                            w2ui[grid].click(recid);
                            cancel = true;
                            break;
                        }
                    }
                    break;

                    // copy & paste

                case 17: // ctrl key
                case 91: // cmd key
                    if (empty) break;
                    var text = obj.copy();
                    $('body').append('<textarea id="_tmp_copy_data" ' +
                        '   onpaste="var obj = this; setTimeout(function () { w2ui[\'' + obj.name + '\'].paste(obj.value); }, 1);" ' +
                        '   onkeydown="w2ui[\'' + obj.name + '\'].keydown(event)"' +
                        '   style="position: absolute; top: -100px; height: 1px; width: 1px">' + text + '</textarea>');
                    $('#_tmp_copy_data').focus().select();
                    // remove _tmp_copy_data textarea
                    $(document).on('keyup', tmp_key_down);

                    function tmp_key_down() {
                        $('#_tmp_copy_data').remove();
                        $(document).off('keyup', tmp_key_down);
                    }
                    break;

                case 88: // x - cut
                    if (empty) break;
                    if (event.ctrlKey || event.metaKey) {
                        setTimeout(function() {
                            obj["delete"](true);
                        }, 100);
                    }
                    break;
            }
            var tmp = [187, 189, 32]; // =-spacebar
            for (var i = 48; i <= 90; i++) tmp.push(i); // 0-9,a-z,A-Z
            if (tmp.indexOf(key) != -1 && !event.ctrlKey && !event.metaKey && !cancel) {
                if (columns.length == 0) columns.push(0);
                var tmp = String.fromCharCode(key);
                if (key == 187) tmp = '=';
                if (key == 189) tmp = '-';
                if (!shiftKey) tmp = tmp.toLowerCase();
                obj.editField(recid, columns[0], tmp, event);
                cancel = true;
            }
            if (cancel) { // cancel default behaviour
                if (event.preventDefault) event.preventDefault();
            }
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));

            function selectTopRecord() {
                var ind = Math.floor((records[0].scrollTop + (records.height() / 2.1)) / obj.recordHeight);
                if (!obj.records[ind]) ind = 0;
                obj.select({
                    recid: obj.records[ind].recid,
                    column: 0
                });
            }

            function tmpUnselect() {
                if (obj.last.sel_type != 'click') return false;
                if (obj.selectType != 'row') {
                    obj.last.sel_type = 'key';
                    if (sel.length > 1) {
                        for (var s in sel) {
                            if (sel[s].recid == obj.last.sel_recid && sel[s].column == obj.last.sel_col) {
                                sel.splice(s, 1);
                                break;
                            }
                        }
                        obj.unselect.apply(obj, sel);
                        return true;
                    }
                    return false;
                } else {
                    obj.last.sel_type = 'key';
                    if (sel.length > 1) {
                        sel.splice(sel.indexOf(obj.records[obj.last.sel_ind].recid), 1);
                        obj.unselect.apply(obj, sel);
                        return true;
                    }
                    return false;
                }
            }
        },

        scrollIntoView: function(ind) {
            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            if (typeof ind == 'undefined') {
                var sel = this.getSelection();
                if (sel.length == 0) return;
                ind = this.get(sel[0], true);
            }
            var records = $('#grid_' + this.name + '_records');
            if (buffered == 0) return;
            // if all records in view
            var len = this.last.searchIds.length;
            if (records.height() > this.recordHeight * (len > 0 ? len : buffered)) return;
            if (len > 0) ind = this.last.searchIds.indexOf(ind); // if seach is applied
            // scroll to correct one
            var t1 = Math.floor(records[0].scrollTop / this.recordHeight);
            var t2 = t1 + Math.floor(records.height() / this.recordHeight);
            if (ind == t1) records.animate({
                'scrollTop': records.scrollTop() - records.height() / 1.3
            }, 250, 'linear');
            if (ind == t2) records.animate({
                'scrollTop': records.scrollTop() + records.height() / 1.3
            }, 250, 'linear');
            if (ind < t1 || ind > t2) records.animate({
                'scrollTop': (ind - 1) * this.recordHeight
            });
        },

        dblClick: function(recid, event) {
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // find columns
            var column = null;
            if (typeof recid == 'object') {
                column = recid.column;
                recid = recid.recid;
            }
            if (typeof event == 'undefined') event = {};
            // column user clicked on
            if (column == null && event.target) {
                var tmp = event.target;
                if (tmp.tagName != 'TD') tmp = $(tmp).parents('td')[0];
                column = parseInt($(tmp).attr('col'));
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'dblClick',
                recid: recid,
                column: column,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default action
            this.selectNone();
            var col = this.columns[column];
            if (col && $.isPlainObject(col.editable)) {
                this.editField(recid, column, null, event);
            } else {
                this.select({
                    recid: recid,
                    column: column
                });
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        contextMenu: function(recid, event) {
            var obj = this;
            if (obj.last.userSelect == 'text') return;
            if (typeof event == 'undefined') event = {
                offsetX: 0,
                offsetY: 0,
                target: $('#grid_' + obj.name + '_rec_' + recid)[0]
            };
            if (typeof event.offsetX === 'undefined') {
                event.offsetX = event.layerX - event.target.offsetLeft;
                event.offsetY = event.layerY - event.target.offsetTop;
            }
            if (w2utils.isFloat(recid)) recid = parseFloat(recid);
            if (this.getSelection().indexOf(recid) == -1) obj.click(recid);
            // need timeout to allow click to finish first
            setTimeout(function() {
                // event before
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'contextMenu',
                    target: obj.name,
                    originalEvent: event,
                    recid: recid
                });
                if (eventData.isCancelled === true) return;
                // default action
                if (obj.menu.length > 0) {
                    $(obj.box).find(event.target)
                        .w2menu(obj.menu, {
                            left: event.offsetX,
                            onSelect: function(event) {
                                obj.menuClick(recid, parseInt(event.index), event.originalEvent);
                            }
                        });
                }
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, 150); // need timer 150 for FF
            // cancel event
            if (event.preventDefault) event.preventDefault();
        },

        menuClick: function(recid, index, event) {
            var obj = this;
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'menuClick',
                target: obj.name,
                originalEvent: event,
                recid: recid,
                menuIndex: index,
                menuItem: obj.menu[index]
            });
            if (eventData.isCancelled === true) return;
            // default action
            // -- empty
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        toggle: function(recid) {
            var rec = this.get(recid);
            if (rec.expanded === true) return this.collapse(recid);
            else return this.expand(recid);
        },

        expand: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length > 0) return false;
            if (rec.expanded == 'none') return false;
            // insert expand row
            var tmp = 1 + (this.show.selectColumn ? 1 : 0);
            var addClass = ''; // ($('#grid_'+this.name +'_rec_'+ w2utils.escapeId(recid)).hasClass('w2ui-odd') ? 'w2ui-odd' : 'w2ui-even');
            $('#grid_' + this.name + '_rec_' + id).after(
                '<tr id="grid_' + this.name + '_rec_' + recid + '_expanded_row" class="w2ui-expanded-row ' + addClass + '">' +
                (this.show.lineNumbers ? '<td class="w2ui-col-number"></td>' : '') +
                '    <td class="w2ui-grid-data w2ui-expanded1" colspan="' + tmp + '"><div style="display: none"></div></td>' +
                '    <td colspan="100" class="w2ui-expanded2">' +
                '        <div id="grid_' + this.name + '_rec_' + recid + '_expanded" style="opacity: 0"></div>' +
                '    </td>' +
                '</tr>');
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'expand',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + recid + '_expanded',
                ready: ready
            });
            if (eventData.isCancelled === true) {
                $('#grid_' + this.name + '_rec_' + id + '_expanded_row').remove();
                return;
            }
            // default action
            $('#grid_' + this.name + '_rec_' + id).attr('expanded', 'yes').addClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded_row').show();
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('<div class="w2ui-spinner" style="width: 16px; height: 16px; margin: -2px 2px;"></div>');
            rec.expanded = true;
            // check if height of expanded row > 5 then remove spinner
            setTimeout(ready, 300);

            function ready() {
                var div1 = $('#grid_' + obj.name + '_rec_' + id + '_expanded');
                var div2 = $('#grid_' + obj.name + '_rec_' + id + '_expanded_row .w2ui-expanded1 > div');
                if (div1.height() < 5) return;
                div1.css('opacity', 1);
                div2.show().css('opacity', 1);
                $('#grid_' + obj.name + '_cell_' + obj.get(recid, true) + '_expand div').html('-');
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.resizeRecords();
            return true;
        },

        collapse: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length == 0) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'collapse',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + id + '_expanded'
            });
            if (eventData.isCancelled === true) return;
            // default action
            $('#grid_' + this.name + '_rec_' + id).removeAttr('expanded').removeClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded').css('opacity', 0);
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('+');
            setTimeout(function() {
                $('#grid_' + obj.name + '_rec_' + id + '_expanded').height('0px');
                setTimeout(function() {
                    $('#grid_' + obj.name + '_rec_' + id + '_expanded_row').remove();
                    delete rec.expanded;
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    obj.resizeRecords();
                }, 300);
            }, 200);
            return true;
        },

        sort: function(field, direction, multiField) { // if no params - clears sort
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'sort',
                target: this.name,
                field: field,
                direction: direction,
                multiField: multiField
            });
            if (eventData.isCancelled === true) return;
            // check if needed to quit
            if (typeof field != 'undefined') {
                // default action
                var sortIndex = this.sortData.length;
                for (var s in this.sortData) {
                    if (this.sortData[s].field == field) {
                        sortIndex = s;
                        break;
                    }
                }
                if (typeof direction == 'undefined' || direction == null) {
                    if (typeof this.sortData[sortIndex] == 'undefined') {
                        direction = 'asc';
                    } else {
                        switch (String(this.sortData[sortIndex].direction)) {
                            case 'asc':
                                direction = 'desc';
                                break;
                            case 'desc':
                                direction = 'asc';
                                break;
                            default:
                                direction = 'asc';
                                break;
                        }
                    }
                }
                if (this.multiSort === false) {
                    this.sortData = [];
                    sortIndex = 0;
                }
                if (multiField != true) {
                    this.sortData = [];
                    sortIndex = 0;
                }
                // set new sort
                if (typeof this.sortData[sortIndex] == 'undefined') this.sortData[sortIndex] = {};
                this.sortData[sortIndex].field = field;
                this.sortData[sortIndex].direction = direction;
            } else {
                this.sortData = [];
            }
            this.selectNone();
            // if local
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (!url) {
                this.localSort();
                if (this.searchData.length > 0) this.localSearch(true);
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                this.refresh();
            } else {
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                this.last.xhr_offset = 0;
                this.reload();
            }
        },

        copy: function() {
            var sel = this.getSelection();
            if (sel.length == 0) return '';
            var text = '';
            if (typeof sel[0] == 'object') { // cell copy
                // find min/max column
                var minCol = sel[0].column;
                var maxCol = sel[0].column;
                var recs = [];
                for (var s in sel) {
                    if (sel[s].column < minCol) minCol = sel[s].column;
                    if (sel[s].column > maxCol) maxCol = sel[s].column;
                    if (recs.indexOf(sel[s].index) == -1) recs.push(sel[s].index);
                }
                recs.sort();
                for (var r in recs) {
                    var ind = recs[r];
                    for (var c = minCol; c <= maxCol; c++) {
                        var col = this.columns[c];
                        if (col.hidden === true) continue;
                        text += w2utils.stripTags(this.getCellHTML(ind, c)) + '\t';
                    }
                    text = text.substr(0, text.length - 1); // remove last \t
                    text += '\n';
                }
            } else { // row copy
                // copy headers
                for (var c in this.columns) {
                    var col = this.columns[c];
                    if (col.hidden === true) continue;
                    text += '"' + w2utils.stripTags(col.caption ? col.caption : col.field) + '"\t';
                }
                text = text.substr(0, text.length - 1); // remove last \t
                text += '\n';
                // copy selected text
                for (var s in sel) {
                    var ind = this.get(sel[s], true);
                    for (var c in this.columns) {
                        var col = this.columns[c];
                        if (col.hidden === true) continue;
                        text += '"' + w2utils.stripTags(this.getCellHTML(ind, c)) + '"\t';
                    }
                    text = text.substr(0, text.length - 1); // remove last \t
                    text += '\n';
                }
            }
            text = text.substr(0, text.length - 1);
            // before event
            var eventData = this.trigger({
                phase: 'before',
                type: 'copy',
                target: this.name,
                text: text
            });
            if (eventData.isCancelled === true) return '';
            text = eventData.text;
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return text;
        },

        paste: function(text) {
            var sel = this.getSelection();
            var ind = this.get(sel[0].recid, true);
            var col = sel[0].column;
            // before event
            var eventData = this.trigger({
                phase: 'before',
                type: 'paste',
                target: this.name,
                text: text,
                index: ind,
                column: col
            });
            if (eventData.isCancelled === true) return;
            text = eventData.text;
            // default action
            if (this.selectType == 'row' || sel.length == 0) {
                console.log('ERROR: You can paste only if grid.selectType = \'cell\' and when at least one cell selected.');
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                return;
            }
            var newSel = [];
            var text = text.split('\n');
            for (var t in text) {
                var tmp = text[t].split('\t');
                var cnt = 0;
                var rec = this.records[ind];
                var cols = [];
                for (var dt in tmp) {
                    if (!this.columns[col + cnt]) continue;
                    var field = this.columns[col + cnt].field;
                    rec.changes = rec.changes || {};
                    rec.changes[field] = tmp[dt];
                    cols.push(col + cnt);
                    cnt++;
                }
                for (var c in cols) newSel.push({
                    recid: rec.recid,
                    column: cols[c]
                });
                ind++;
            }
            this.selectNone();
            this.select.apply(this, newSel);
            this.refresh();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ==================================================
        // --- Common functions

        resize: function() {
            var obj = this;
            var time = (new Date()).getTime();
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // make sure the box is right
            if (!this.box || $(this.box).attr('name') != this.name) return;
            // determine new width and height
            $(this.box).find('> div')
                .css('width', $(this.box).width())
                .css('height', $(this.box).height());
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            // resize
            obj.resizeBoxes();
            obj.resizeRecords();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        refreshCell: function(recid, field) {
            var index = this.get(recid, true);
            var isSummary = (this.records[index] && this.records[index].recid == recid ? false : true);
            var col_ind = this.getColumn(field, true);
            var rec = (isSummary ? this.summary[index] : this.records[index]);
            var col = this.columns[col_ind];
            var cell = $('#grid_' + this.name + '_rec_' + recid + ' [col=' + col_ind + ']');
            // set cell html and changed flag
            cell.html(this.getCellHTML(index, col_ind, isSummary));
            if (rec.changes && typeof rec.changes[col.field] != 'undefined') {
                cell.addClass('w2ui-changed');
            } else {
                cell.removeClass('w2ui-changed');
            }
        },

        addRowClass: function(recid, cls) {
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
            $(tr).addClass(cls);
        },
        removeRowClass: function(recid, cls) {
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
            $(tr).removeClass(cls);
        },
        refreshRow: function(recid) {
            var tr = $('#grid_' + this.name + '_rec_' + w2utils.escapeId(recid));
            if (tr.length != 0) {
                var ind = this.get(recid, true);
                var line = tr.attr('line');
                var isSummary = (this.records[ind] && this.records[ind].recid == recid ? false : true);
                // if it is searched, find index in search array
                var url = (typeof this.url != 'object' ? this.url : this.url.get);
                if (this.searchData.length > 0 && !url)
                    for (var s in this.last.searchIds)
                        if (this.last.searchIds[s] == ind) ind = s;
                $(tr).replaceWith(this.getRecordHTML(ind, line, isSummary));
                if (isSummary) this.resize();
            }
        },

        refreshFull: function() {
            this.initToolbar();
            if (this.toolbar != null) this.toolbar.render($('#grid_' + this.name + '_toolbar')[0]);
            this.refresh();
        },

        refreshRecords: function() {
            var obj = this;
            //if (typeof obj.records === 'function') {
            obj.records = obj.records.apply(obj, arguments);
            //}
            obj.refresh();
        },

        refresh: function() {
            var obj = this;
            var time = (new Date()).getTime();
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (this.total <= 0 && !url && this.searchData.length == 0) {
                this.total = this.records.length;
            }
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (this.toolbar) this.toolbar.disable('w2ui-edit', 'w2ui-delete');
            if (!this.box) return;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'refresh'
            });
            if (eventData.isCancelled === true) return;
            // -- header
            if (this.show.header) {
                $('#grid_' + this.name + '_header').html(this.header + '&nbsp;').show();
            } else {
                $('#grid_' + this.name + '_header').hide();
            }
            // -- toolbar
            if (this.show.toolbar) {
                // if select-collumn is checked - no toolbar refresh
                if (this.toolbar && this.toolbar.get('w2ui-column-on-off') && this.toolbar.get('w2ui-column-on-off').checked) {
                    // no action
                } else {
                    $('#grid_' + this.name + '_toolbar').show();
                    // refresh toolbar all but search field
                    if (typeof this.toolbar == 'object') {
                        var tmp = this.toolbar.items;
                        for (var t in tmp) {
                            if (tmp[t].id == 'w2ui-search' || tmp[t].type == 'break') continue;
                            this.toolbar.refresh(tmp[t].id);
                        }
                    }
                }
            } else {
                $('#grid_' + this.name + '_toolbar').hide();
            }

            // append groupcolumns to grouping area
            $(this.box).find('.dropGroup').empty();
            for (var g in this.groupData) {
                var group = this.groupData[g],
                    col;
                $.map(this.columns, function(ob, index) {
                    if (ob.field === group) {
                        col = ob.caption;
                    }
                });
                $(this.box).find('.dropGroup').append('<div class="w2ui-col-header" data-col="' + group + '">' + col + '</div>');
            }

            // -- make sure search is closed
            this.searchClose();
            // search placeholder
            var el = $('#grid_' + obj.name + '_search_all');
            if (!this.multiSearch && this.last.field == 'all' && this.searches.length > 0) {
                this.last.field = this.searches[0].field;
                this.last.caption = this.searches[0].caption;
            }
            for (var s in this.searches) {
                if (this.searches[s].field == this.last.field) this.last.caption = this.searches[s].caption;
            }
            if (this.last.multi) {
                el.attr('placeholder', '[' + w2utils.lang('Multiple Fields') + ']');
            } else {
                el.attr('placeholder', this.last.caption);
            }
            if (el.val() != this.last.search) {
                var val = this.last.search;
                var tmp = el.data('w2field');
                if (tmp) val = tmp.format(val);
                el.val(val);
            }

            //refresh records if function

            if (typeof obj.records === 'function') {
                obj.records = obj.records.apply(obj, arguments);
            }

            // -- separate summary
            var tmp = this.find({
                summary: true
            }, true);
            if (tmp.length > 0) {
                for (var t in tmp) this.summary.push(this.records[tmp[t]]);
                for (var t = tmp.length - 1; t >= 0; t--) this.records.splice(tmp[t], 1);
                this.total = this.total - tmp.length;
            }

            // -- body
            var bodyHTML = '';
            bodyHTML += '<div id="grid_' + this.name + '_records" class="w2ui-grid-records"' +
                '    onscroll="var obj = w2ui[\'' + this.name + '\']; ' +
                '        obj.last.scrollTop = this.scrollTop; ' +
                '        obj.last.scrollLeft = this.scrollLeft; ' +
                '        $(\'#grid_' + this.name + '_columns\')[0].scrollLeft = this.scrollLeft;' +
                '        $(\'#grid_' + this.name + '_summary\')[0].scrollLeft = this.scrollLeft;' +
                '        obj.scroll(event);">' +
                this.getRecordsHTML() +
                '</div>' +
                '<div id="grid_' + this.name + '_columns" class="w2ui-grid-columns">' +
                '    <table>' + this.getColumnsHTML() + '</table>' +
                '</div>'; // Columns need to be after to be able to overlap
            $('#grid_' + this.name + '_body').html(bodyHTML);
            // show summary records
            if (this.summary.length > 0) {
                $('#grid_' + this.name + '_summary').html(this.getSummaryHTML()).show();
            } else {
                $('#grid_' + this.name + '_summary').hide();
            }
            // -- footer
            if (this.show.footer) {
                $('#grid_' + this.name + '_footer').html(this.getFooterHTML()).show();
            } else {
                $('#grid_' + this.name + '_footer').hide();
            }
            // show/hide clear search link
            if (this.searchData.length > 0) {
                $('#grid_' + this.name + '_searchClear').show();
            } else {
                $('#grid_' + this.name + '_searchClear').hide();
            }
            // all selected?
            var sel = this.last.selection;
            if (sel.indexes.length == this.records.length || (this.searchData.length !== 0 && sel.indexes.length == this.last.searchIds.length)) {
                $('#grid_' + this.name + '_check_all').prop('checked', true);
            } else {
                $('#grid_' + this.name + '_check_all').prop('checked', false);
            }
            // show number of selected
            this.status();
            // collapse all records
            var rows = obj.find({
                expanded: true
            }, true);
            for (var r in rows) obj.records[rows[r]].expanded = false;
            // mark selection
            setTimeout(function() {
                var str = $.trim($('#grid_' + obj.name + '_search_all').val());
                if (str != '') $(obj.box).find('.w2ui-grid-data > div').w2marker(str);
            }, 50);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            obj.resize();
            if (obj.enableGrouping)
                obj.initGrouping();
            obj.addRange('selection');
            setTimeout(function() {
                obj.resize();
                obj.scroll();
            }, 1); // allow to render first

            if (obj.reorderColumns && !obj.last.columnDrag) {
                obj.last.columnDrag = obj.initColumnDrag();
            } else if (!obj.reorderColumns && obj.last.columnDrag) {
                obj.last.columnDrag.remove();
            }

            return (new Date()).getTime() - time;
        },

        render: function(box) {
            var obj = this;
            var time = (new Date()).getTime();
            //if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (typeof box != 'undefined' && box != null) {
                if ($(this.box).find('#grid_' + this.name + '_body').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-grid')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return;
            if (this.last.sortData == null) this.last.sortData = this.sortData;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'render',
                box: box
            });
            if (eventData.isCancelled === true) return;
            // insert Elements
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-grid')
                .html('<div>' +
                    '    <div id="grid_' + this.name + '_header" class="w2ui-grid-header"></div>' +
                    '    <div id="grid_' + this.name + '_toolbar" class="w2ui-grid-toolbar"></div>' +
                    '    <div id="grid_' + this.name + '_body" class="w2ui-grid-body"></div>' +
                    '    <div id="grid_' + this.name + '_summary" class="w2ui-grid-body w2ui-grid-summary"></div>' +
                    '    <div id="grid_' + this.name + '_footer" class="w2ui-grid-footer"></div>' +
                    '</div>');
            if (this.selectType != 'row') $(this.box).addClass('w2ui-ss');
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // init toolbar

            this.initToolbar();
            if (this.toolbar != null) this.toolbar.render($('#grid_' + this.name + '_toolbar')[0]);
            // reinit search_all
            if (this.last.field && this.last.field != 'all') {
                var sd = this.searchData;
                this.initAllField(this.last.field, (sd.length == 1 ? sd[0].value : null));
            }
            // init footer
            $('#grid_' + this.name + '_footer').html(this.getFooterHTML());
            // refresh
            if (!this.last.state) this.last.state = this.stateSave(true); // initial default state
            this.stateRestore();
            if (this.url) this.refresh(); // show empty grid (need it) - should it be only for remote data source
            this.reload();

            // init mouse events for mouse selection
            $(this.box).on('mousedown', mouseStart);
            $(this.box).on('selectstart', function() {
                return false;
            }); // fixes chrome cursor bug

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // attach to resize event
            if ($('.w2ui-layout').length == 0) { // if there is layout, it will send a resize event
                this.tmp_resize = function(event) {
                    w2ui[obj.name].resize();
                }
                $(window).off('resize', this.tmp_resize).on('resize', this.tmp_resize);
            }
            return (new Date()).getTime() - time;

            function mouseStart(event) {
                if (event.which != 1) return; // if not left mouse button
                // restore css user-select
                if (obj.last.userSelect == 'text') {
                    delete obj.last.userSelect;
                    $(obj.box).find('.w2ui-grid-body')
                        .css('user-select', 'none')
                        .css('-webkit-user-select', 'none')
                        .css('-moz-user-select', 'none')
                        .css('-ms-user-select', 'none');
                    $(this.box).on('selectstart', function() {
                        return false;
                    });
                }
                // regular record select
                if ($(event.target).parents().hasClass('w2ui-head') || $(event.target).hasClass('w2ui-head')) return;
                if (obj.last.move && obj.last.move.type == 'expand') return;
                // if altKey - alow text selection
                if (event.altKey) {
                    $(obj.box).off('selectstart');
                    $(obj.box).find('.w2ui-grid-body')
                        .css('user-select', 'text')
                        .css('-webkit-user-select', 'text')
                        .css('-moz-user-select', 'text')
                        .css('-ms-user-select', 'text');
                    obj.selectNone();
                    obj.last.move = {
                        type: 'text-select'
                    };
                    obj.last.userSelect = 'text';
                } else {
                    if (!obj.multiSelect) return;
                    obj.last.move = {
                        x: event.screenX,
                        y: event.screenY,
                        divX: 0,
                        divY: 0,
                        recid: $(event.target).parents('tr').attr('recid'),
                        column: (event.target.tagName == 'TD' ? $(event.target).attr('col') : $(event.target).parents('td').attr('col')),
                        type: 'select',
                        ghost: false,
                        start: true
                    };
                }
                $(document).on('mousemove', mouseMove);
                $(document).on('mouseup', mouseStop);
            }

            function mouseMove(event) {
                var mv = obj.last.move;
                if (!mv || mv.type != 'select') return;
                mv.divX = (event.screenX - mv.x);
                mv.divY = (event.screenY - mv.y);
                if (Math.abs(mv.divX) <= 1 && Math.abs(mv.divY) <= 1) return; // only if moved more then 1px
                obj.last.cancelClick = true;
                if (obj.reorderRows == true) {
                    if (!mv.ghost) {
                        var row = $('#grid_' + obj.name + '_rec_' + mv.recid);
                        var tmp = row.parents('table').find('tr:first-child').clone();
                        mv.offsetY = event.offsetY;
                        mv.from = mv.recid;
                        mv.pos = row.position();
                        mv.ghost = $(row).clone(true);
                        mv.ghost.removeAttr('id');
                        row.find('td:first-child').replaceWith('<td colspan="1000" style="height: ' + obj.recordHeight + 'px; background-color: #ddd"></td>');
                        var recs = $(obj.box).find('.w2ui-grid-records');
                        recs.append('<table id="grid_' + obj.name + '_ghost" style="position: absolute; z-index: 999999; opacity: 0.8; border-bottom: 2px dashed #aaa; border-top: 2px dashed #aaa; pointer-events: none;"></table>');
                        $('#grid_' + obj.name + '_ghost').append(tmp).append(mv.ghost);
                    }
                    var recid = $(event.target).parents('tr').attr('recid');
                    if (recid != mv.from) {
                        var row1 = $('#grid_' + obj.name + '_rec_' + mv.recid);
                        var row2 = $('#grid_' + obj.name + '_rec_' + recid);
                        if (event.screenY - mv.lastY < 0) row1.after(row2);
                        else row2.after(row1);
                        mv.lastY = event.screenY;
                        mv.to = recid;
                    }
                    var ghost = $('#grid_' + obj.name + '_ghost');
                    var recs = $(obj.box).find('.w2ui-grid-records');
                    ghost.css({
                        top: mv.pos.top + mv.divY + recs.scrollTop(), // + mv.offsetY - obj.recordHeight / 2,
                        left: mv.pos.left
                    });
                    return;
                }
                if (mv.start && mv.recid) {
                    obj.selectNone();
                    mv.start = false;
                }
                var newSel = [];
                var recid = (event.target.tagName == 'TR' ? $(event.target).attr('recid') : $(event.target).parents('tr').attr('recid'));
                if (typeof recid == 'undefined') return;
                var ind1 = obj.get(mv.recid, true);
                // |:wolfmanx:| this happens when selection is started on summary row
                if (ind1 === null) return;
                var ind2 = obj.get(recid, true);
                // this happens when selection is extended into summary row (a good place to implement scrolling)
                if (ind2 === null) return;
                var col1 = parseInt(mv.column);
                var col2 = parseInt(event.target.tagName == 'TD' ? $(event.target).attr('col') : $(event.target).parents('td').attr('col'));
                if (ind1 > ind2) {
                    var tmp = ind1;
                    ind1 = ind2;
                    ind2 = tmp;
                }
                // check if need to refresh
                var tmp = 'ind1:' + ind1 + ',ind2;' + ind2 + ',col1:' + col1 + ',col2:' + col2;
                if (mv.range == tmp) return;
                mv.range = tmp;
                for (var i = ind1; i <= ind2; i++) {
                    if (obj.last.searchIds.length > 0 && obj.last.searchIds.indexOf(i) == -1) continue;
                    if (obj.selectType != 'row') {
                        if (col1 > col2) {
                            var tmp = col1;
                            col1 = col2;
                            col2 = tmp;
                        }
                        var tmp = [];
                        for (var c = col1; c <= col2; c++) {
                            if (obj.columns[c].hidden) continue;
                            newSel.push({
                                recid: obj.records[i].recid,
                                column: parseInt(c)
                            });
                        }
                    } else {
                        newSel.push(obj.records[i].recid);
                    }
                }
                if (obj.selectType != 'row') {
                    var sel = obj.getSelection();
                    // add more items
                    var tmp = [];
                    for (var ns in newSel) {
                        var flag = false;
                        for (var s in sel)
                            if (newSel[ns].recid == sel[s].recid && newSel[ns].column == sel[s].column) flag = true;
                        if (!flag) tmp.push({
                            recid: newSel[ns].recid,
                            column: newSel[ns].column
                        });
                    }
                    obj.select.apply(obj, tmp);
                    // remove items
                    var tmp = [];
                    for (var s in sel) {
                        var flag = false;
                        for (var ns in newSel)
                            if (newSel[ns].recid == sel[s].recid && newSel[ns].column == sel[s].column) flag = true;
                        if (!flag) tmp.push({
                            recid: sel[s].recid,
                            column: sel[s].column
                        });
                    }
                    obj.unselect.apply(obj, tmp);
                } else {
                    if (obj.multiSelect) {
                        var sel = obj.getSelection();
                        for (var ns in newSel)
                            if (sel.indexOf(newSel[ns]) == -1) obj.select(newSel[ns]); // add more items
                        for (var s in sel)
                            if (newSel.indexOf(sel[s]) == -1) obj.unselect(sel[s]); // remove items
                    }
                }
            }

            function mouseStop(event) {
                var mv = obj.last.move;
                setTimeout(function() {
                    delete obj.last.cancelClick;
                }, 1);
                if ($(event.target).parents().hasClass('.w2ui-head') || $(event.target).hasClass('.w2ui-head')) return;
                if (mv && mv.type == 'select') {
                    if (obj.reorderRows == true) {
                        var ind1 = obj.get(mv.from, true);
                        var tmp = obj.records[ind1];
                        obj.records.splice(ind1, 1);
                        var ind2 = obj.get(mv.to, true);
                        if (ind1 > ind2) obj.records.splice(ind2, 0, tmp);
                        else obj.records.splice(ind2 + 1, 0, tmp);
                        $('#grid_' + obj.name + '_ghost').remove();
                        obj.refresh();
                    }
                }
                delete obj.last.move;
                $(document).off('mousemove', mouseMove);
                $(document).off('mouseup', mouseStop);
            }
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'destroy'
            });

            if (eventData.isCancelled === true) return;
            // remove events
            $(window).off('resize', this.tmp_resize);
            // clean up
            if (typeof this.toolbar == 'object' && this.toolbar.destroy) this.toolbar.destroy();
            if ($(this.box).find('#grid_' + this.name + '_body').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-grid')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ===========================================
        // --- Internal Functions

        initColumnOnOff: function() {
            if (!this.show.toolbarColumns) return;
            var obj = this;
            var col_html = '<div class="w2ui-col-on-off">' +
                '<table><tr>' +
                '<td style="width: 30px">' +
                '    <input id="grid_' + this.name + '_column_ln_check" type="checkbox" tabIndex="-1" ' + (obj.show.lineNumbers ? 'checked' : '') +
                '        onclick="w2ui[\'' + obj.name + '\'].columnOnOff(this, event, \'line-numbers\');">' +
                '</td>' +
                '<td onclick="w2ui[\'' + obj.name + '\'].columnOnOff(this, event, \'line-numbers\'); $(\'#w2ui-overlay\')[0].hide();">' +
                '    <label for="grid_' + this.name + '_column_ln_check">' + w2utils.lang('Line #') + '</label>' +
                '</td></tr>';
            for (var c in this.columns) {
                var col = this.columns[c];
                var tmp = this.columns[c].caption;
                if (col.hideable === false) continue;
                if (!tmp && this.columns[c].hint) tmp = this.columns[c].hint;
                if (!tmp) tmp = '- column ' + (parseInt(c) + 1) + ' -';
                col_html += '<tr>' +
                    '<td style="width: 30px">' +
                    '    <input id="grid_' + this.name + '_column_' + c + '_check" type="checkbox" tabIndex="-1" ' + (col.hidden ? '' : 'checked') +
                    '        onclick="w2ui[\'' + obj.name + '\'].columnOnOff(this, event, \'' + col.field + '\');">' +
                    '</td>' +
                    '<td>' +
                    '    <label for="grid_' + this.name + '_column_' + c + '_check">' + tmp + '</label>' +
                    '</td>' +
                    '</tr>';
            }
            col_html += '<tr><td colspan="2"><div style="border-top: 1px solid #ddd;"></div></td></tr>';
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url && obj.show.skipRecords) {
                col_html +=
                    '<tr><td colspan="2" style="padding: 0px">' +
                    '    <div style="cursor: pointer; padding: 2px 8px; cursor: default">' + w2utils.lang('Skip') +
                    '        <input type="text" style="width: 45px" value="' + this.offset + '" ' +
                    '            onkeypress="if (event.keyCode == 13) { ' +
                    '               w2ui[\'' + obj.name + '\'].skip(this.value); ' +
                    '               $(\'#w2ui-overlay\')[0].hide(); ' +
                    '            }"> ' + w2utils.lang('Records') +
                    '    </div>' +
                    '</td></tr>';
            }
            col_html += '<tr><td colspan="2" onclick="w2ui[\'' + obj.name + '\'].stateSave(); $(\'#w2ui-overlay\')[0].hide();">' +
                '    <div style="cursor: pointer; padding: 4px 8px; cursor: default">' + w2utils.lang('Save Grid State') + '</div>' +
                '</td></tr>' +
                '<tr><td colspan="2" onclick="w2ui[\'' + obj.name + '\'].stateReset(); $(\'#w2ui-overlay\')[0].hide();">' +
                '    <div style="cursor: pointer; padding: 4px 8px; cursor: default">' + w2utils.lang('Restore Default State') + '</div>' +
                '</td></tr>';
            col_html += "</table></div>";
            if (this.toolbar) this.toolbar.get('w2ui-column-on-off').html = col_html;
        },

        /**
         *
         * @param box, grid object
         * @returns {{remove: Function}} contains a closure around all events to ensure they are removed from the dom
         */
        initColumnDrag: function(box) {
            //throw error if using column groups
            if (this.columnGroups && this.columnGroups.length) throw 'Draggable columns are not currently supported with column groups.';

            var obj = this,
                _dragData = {};
            _dragData.lastInt = null;
            _dragData.pressed = false;
            _dragData.timeout = null;
            _dragData.columnHead = null;

            //attach orginal event listener
            $(obj.box).on('mousedown', dragColStart);
            $(obj.box).on('mouseup', catchMouseup);

            function catchMouseup() {
                _dragData.pressed = false;
                clearTimeout(_dragData.timeout);
            }
            /**
             *
             * @param event, mousedown
             * @returns {boolean} false, preventsDefault
             */

            function dragColStart(event) {
                if (_dragData.timeout) clearTimeout(_dragData.timeout);
                var self = this;
                _dragData.pressed = true;

                _dragData.timeout = setTimeout(function() {
                    if (!_dragData.pressed) return;

                    var eventData,
                        columns,
                        selectedCol,
                        origColumn,
                        origColumnNumber,
                        invalidPreColumns = ['w2ui-col-number', 'w2ui-col-expand', 'w2ui-col-select'],
                        invalidPostColumns = ['w2ui-head-last'],
                        invalidColumns = invalidPreColumns.concat(invalidPostColumns),
                        preColumnsSelector = '.w2ui-col-number, .w2ui-col-expand, .w2ui-col-select',
                        preColHeadersSelector = '.w2ui-head.w2ui-col-number, .w2ui-head.w2ui-col-expand, .w2ui-head.w2ui-col-select';

                    // do nothing if it is not a header
                    if (!$(event.originalEvent.target).parents().hasClass('w2ui-head')) return;

                    // do nothing if it is an invalid column
                    for (var i = 0, l = invalidColumns.length; i < l; i++) {
                        if ($(event.originalEvent.target).parents().hasClass(invalidColumns[i])) return;
                    }

                    _dragData.numberPreColumnsPresent = $(obj.box).find(preColHeadersSelector).length;

                    //start event for drag start
                    _dragData.columnHead = origColumn = $(event.originalEvent.target).parents('.w2ui-head');
                    origColumnNumber = parseInt(origColumn.attr('col'), 10);
                    eventData = obj.trigger({
                        type: 'columnDragStart',
                        phase: 'before',
                        originalEvent: event,
                        origColumnNumber: origColumnNumber,
                        target: origColumn[0]
                    });
                    if (eventData.isCancelled === true) return false;

                    columns = _dragData.columns = $(obj.box).find('.w2ui-head:not(.w2ui-head-last)');

                    //add events
                    $(document).on('mouseup', dragColEnd);
                    $(document).on('mousemove', dragColOver);

                    _dragData.originalPos = parseInt($(event.originalEvent.target).parent('.w2ui-head').attr('col'), 10);
                    //_dragData.columns.css({ overflow: 'visible' }).children( 'div' ).css({ overflow: 'visible' });

                    //configure and style ghost image
                    _dragData.ghost = $(self).clone(true);

                    //hide other elements on ghost except the grid body
                    $(_dragData.ghost).find('[col]:not([col="' + _dragData.originalPos + '"]), .w2ui-toolbar, .w2ui-grid-header').remove();
                    $(_dragData.ghost).find(preColumnsSelector).remove();
                    $(_dragData.ghost).find('.w2ui-grid-body').css({
                        top: 0
                    });

                    selectedCol = $(_dragData.ghost).find('[col="' + _dragData.originalPos + '"]');
                    $(document.body).append(_dragData.ghost);

                    $(_dragData.ghost).css({
                        width: 0,
                        height: 0,
                        margin: 0,
                        position: 'fixed',
                        zIndex: 999999,
                        opacity: 0
                    }).addClass('.w2ui-grid-ghost').animate({
                        width: selectedCol.width(),
                        height: $(obj.box).find('.w2ui-grid-body:first').height(),
                        left: event.pageX,
                        top: event.pageY,
                        opacity: .8
                    }, 0);

                    //establish current offsets
                    _dragData.offsets = [];
                    for (var i = 0, l = columns.length; i < l; i++) {
                        _dragData.offsets.push($(columns[i]).offset().left);
                    }

                    //conclude event
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, 150); //end timeout wrapper
            }

            function dragColOver(event) {
                if (!_dragData.pressed) return;

                var cursorX = event.originalEvent.pageX,
                    cursorY = event.originalEvent.pageY,
                    offsets = _dragData.offsets,
                    lastWidth = $('.w2ui-head:not(.w2ui-head-last)').width();

                _dragData.targetInt = Math.max(_dragData.numberPreColumnsPresent, targetIntersection(cursorX, offsets, lastWidth));

                markIntersection(_dragData.targetInt);
                trackGhost(cursorX, cursorY);
            }

            function dragColEnd(event) {
                _dragData.pressed = false;

                var eventData,
                    target,
                    selected,
                    columnConfig,
                    targetColumn,
                    ghosts = $('.w2ui-grid-ghost');

                //start event for drag start
                eventData = obj.trigger({
                    type: 'columnDragEnd',
                    phase: 'before',
                    originalEvent: event,
                    target: _dragData.columnHead[0]
                });
                if (eventData.isCancelled === true) return false;

                selected = obj.columns[_dragData.originalPos];
                columnConfig = obj.columns;
                targetColumn = $(_dragData.columns[Math.min(_dragData.lastInt, _dragData.columns.length - 1)]);
                target = (_dragData.lastInt < _dragData.columns.length) ? parseInt(targetColumn.attr('col')) : columnConfig.length;

                if (target !== _dragData.originalPos + 1 && target !== _dragData.originalPos && targetColumn && targetColumn.length) {
                    $(_dragData.ghost).animate({
                        top: $(obj.box).offset().top,
                        left: targetColumn.offset().left,
                        width: 0,
                        height: 0,
                        opacity: .2
                    }, 300, function() {
                        $(this).remove();
                        ghosts.remove();
                    });

                    columnConfig.splice(target, 0, $.extend({}, selected));
                    columnConfig.splice(columnConfig.indexOf(selected), 1);

                } else {
                    $(_dragData.ghost).remove();
                    ghosts.remove();
                }

                //_dragData.columns.css({ overflow: '' }).children( 'div' ).css({ overflow: '' });

                $(document).off('mouseup', dragColEnd);
                $(document).off('mousemove', dragColOver);
                if (_dragData.marker) _dragData.marker.remove();
                _dragData = {};

                obj.refresh();

                //conclude event
                obj.trigger($.extend(eventData, {
                    phase: 'after',
                    targetColumnNumber: target - 1
                }));
            }

            function markIntersection(intersection) {
                if (!_dragData.marker && !_dragData.markerLeft) {
                    _dragData.marker = $('<div class="col-intersection-marker">' +
                        '<div class="top-marker"></div>' +
                        '<div class="bottom-marker"></div>' +
                        '</div>');
                    _dragData.markerLeft = $('<div class="col-intersection-marker">' +
                        '<div class="top-marker"></div>' +
                        '<div class="bottom-marker"></div>' +
                        '</div>');
                }

                if (!_dragData.lastInt || _dragData.lastInt !== intersection) {
                    _dragData.lastInt = intersection;
                    _dragData.marker.remove();
                    _dragData.markerLeft.remove();
                    $('.w2ui-head').removeClass('w2ui-col-intersection');

                    //if the current intersection is greater than the number of columns add the marker to the end of the last column only
                    if (intersection >= _dragData.columns.length) {
                        $(_dragData.columns[_dragData.columns.length - 1]).children('div:last').append(_dragData.marker.addClass('right').removeClass('left'));
                        $(_dragData.columns[_dragData.columns.length - 1]).addClass('w2ui-col-intersection');
                    } else if (intersection <= _dragData.numberPreColumnsPresent) {
                        //if the current intersection is on the column numbers place marker on first available column only
                        $(_dragData.columns[_dragData.numberPreColumnsPresent]).prepend(_dragData.marker.addClass('left').removeClass('right')).css({
                            position: 'relative'
                        });
                        $(_dragData.columns[_dragData.numberPreColumnsPresent]).prev().addClass('w2ui-col-intersection');
                    } else {
                        //otherwise prepend the marker to the targeted column and append it to the previous column
                        $(_dragData.columns[intersection]).children('div:last').prepend(_dragData.marker.addClass('left').removeClass('right'));
                        $(_dragData.columns[intersection]).prev().children('div:last').append(_dragData.markerLeft.addClass('right').removeClass('left')).css({
                            position: 'relative'
                        });
                        $(_dragData.columns[intersection - 1]).addClass('w2ui-col-intersection');
                    }
                }
            }

            function targetIntersection(cursorX, offsets, lastWidth) {
                if (cursorX <= offsets[0]) {
                    return 0;
                } else if (cursorX >= offsets[offsets.length - 1] + lastWidth) {
                    return offsets.length;
                } else {
                    for (var i = 0, l = offsets.length; i < l; i++) {
                        var thisOffset = offsets[i];
                        var nextOffset = offsets[i + 1] || offsets[i] + lastWidth;
                        var midpoint = (nextOffset - offsets[i]) / 2 + offsets[i];

                        if (cursorX > thisOffset && cursorX <= midpoint) {
                            return i;
                        } else if (cursorX > midpoint && cursorX <= nextOffset) {
                            return i + 1;
                        }
                    }
                    return intersection;
                }
            }

            function trackGhost(cursorX, cursorY) {
                $(_dragData.ghost).css({
                    left: cursorX - 10,
                    top: cursorY - 10
                });
            }

            //return an object to remove drag if it has ever been enabled
            return {
                remove: function() {
                    $(obj.box).off('mousedown', dragColStart);
                    $(obj.box).off('mouseup', catchMouseup);
                    $(obj.box).find('.w2ui-head').removeAttr('draggable');
                    obj.last.columnDrag = false;
                }
            }
        },

        columnOnOff: function(el, event, field) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'columnOnOff',
                checkbox: el,
                field: field,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // regular processing
            var obj = this;
            // collapse expanded rows
            for (var r in this.records) {
                if (this.records[r].expanded === true) this.records[r].expanded = false
            }
            // show/hide
            var hide = true;
            if (field == 'line-numbers') {
                this.show.lineNumbers = !this.show.lineNumbers;
                this.refresh();
            } else {
                var col = this.getColumn(field);
                if (col.hidden) {
                    $(el).prop('checked', true);
                    this.showColumn(col.field);
                } else {
                    $(el).prop('checked', false);
                    this.hideColumn(col.field);
                }
                hide = false;
            }
            if (hide) {
                setTimeout(function() {
                    $().w2overlay('', {
                        name: 'searches-' + this.name
                    });
                    obj.toolbar.uncheck('column-on-off');
                }, 100);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        initToolbar: function() {
            // -- if toolbar is true
            if (this.toolbar && typeof this.toolbar['render'] == 'undefined') {
                var tmp_items = this.toolbar.items;
                this.toolbar.items = [];
                this.toolbar = $().w2toolbar($.extend(true, {}, this.toolbar, {
                    name: this.name + '_toolbar',
                    owner: this
                }));

                // =============================================
                // ------ Toolbar Generic buttons

                if (this.show.toolbarReload) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['reload']));
                }
                if (this.show.toolbarColumns) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['columns']));
                }
                if (this.show.toolbarReload || this.show.toolbarColumn) {
                    this.toolbar.items.push({
                        type: 'break',
                        id: 'w2ui-break0'
                    });
                }
                if (this.show.toolbarSearch) {
                    var html =
                        '<div class="w2ui-toolbar-search">' +
                        '<table cellpadding="0" cellspacing="0"><tr>' +
                        '    <td>' + this.buttons['search'].html + '</td>' +
                        '    <td>' +
                        '        <input id="grid_' + this.name + '_search_all" class="w2ui-search-all" ' +
                        '            placeholder="' + this.last.caption + '" value="' + this.last.search + '"' +
                        '            onkeydown="if (event.keyCode == 13 && w2utils.isIE) this.onchange();"' +
                        '            onchange="' +
                        '                var val = this.value; ' +
                        '                var fld = $(this).data(\'w2field\'); ' +
                        '                var dat = $(this).data(\'selected\'); ' +
                        '                if (fld) val = fld.clean(val);' +
                        '                if (dat != null && $.isPlainObject(dat)) val = dat.id;' +
                        '                w2ui[\'' + this.name + '\'].search(w2ui[\'' + this.name + '\'].last.field, val); ' +
                        '            ">' +
                        '    </td>' +
                        '    <td>' +
                        '        <div title="' + w2utils.lang('Clear Search') + '" class="w2ui-search-clear" id="grid_' + this.name + '_searchClear"  ' +
                        '             onclick="var obj = w2ui[\'' + this.name + '\']; obj.searchReset();" ' +
                        '        >&nbsp;&nbsp;</div>' +
                        '    </td>' +
                        '</tr></table>' +
                        '</div>';
                    this.toolbar.items.push({
                        type: 'html',
                        id: 'w2ui-search',
                        html: html
                    });
                    if (this.multiSearch && this.searches.length > 0) {
                        this.toolbar.items.push($.extend(true, {}, this.buttons['search-go']));
                    }
                }
                if (this.show.toolbarSearch && (this.show.toolbarAdd || this.show.toolbarEdit || this.show.toolbarDelete || this.show.toolbarSave)) {
                    this.toolbar.items.push({
                        type: 'break',
                        id: 'w2ui-break1'
                    });
                }
                if (this.show.toolbarAdd) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['add']));
                }
                if (this.show.toolbarEdit) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['edit']));
                }
                if (this.show.toolbarDelete) {
                    this.toolbar.items.push($.extend(true, {}, this.buttons['delete']));
                }
                if (this.show.toolbarSave) {
                    if (this.show.toolbarAdd || this.show.toolbarDelete || this.show.toolbarEdit) {
                        this.toolbar.items.push({
                            type: 'break',
                            id: 'w2ui-break2'
                        });
                    }
                    this.toolbar.items.push($.extend(true, {}, this.buttons['save']));
                }
                //drop columns for froups is shown by default
                if (this.enableGrouping)
                    this.toolbar.items.push($.extend(true, {}, this.buttons['groups']));
                // add original buttons
                for (var i in tmp_items) this.toolbar.items.push(tmp_items[i]);

                // =============================================
                // ------ Toolbar onClick processing

                var obj = this;
                this.toolbar.on('click', function(event) {
                    var eventData = obj.trigger({
                        phase: 'before',
                        type: 'toolbar',
                        target: event.target,
                        originalEvent: event
                    });
                    if (eventData.isCancelled === true) return;
                    var id = event.target;
                    switch (id) {
                        case 'w2ui-reload':
                            var eventData2 = obj.trigger({
                                phase: 'before',
                                type: 'reload',
                                target: obj.name
                            });
                            if (eventData2.isCancelled === true) return false;
                            obj.reload();
                            obj.trigger($.extend(eventData2, {
                                phase: 'after'
                            }));
                            break;
                        case 'w2ui-column-on-off':
                            obj.initColumnOnOff();
                            obj.initResize();
                            obj.resize();
                            break;
                        case 'w2ui-search-advanced':
                            var tb = this;
                            var it = this.get(id);
                            if (it.checked) {
                                obj.searchClose();
                                setTimeout(function() {
                                    tb.uncheck(id);
                                }, 1);
                            } else {
                                obj.searchOpen();
                                event.originalEvent.stopPropagation();

                                function tmp_close() {
                                    if ($('#w2ui-overlay-searches-' + obj.name).data('keepOpen') === true) return;
                                    tb.uncheck(id);
                                    $(document).off('click', 'body', tmp_close);
                                }
                                $(document).on('click', 'body', tmp_close);
                            }
                            break;
                        case 'w2ui-add':
                            // events
                            var eventData = obj.trigger({
                                phase: 'before',
                                target: obj.name,
                                type: 'add',
                                recid: null
                            });
                            obj.trigger($.extend(eventData, {
                                phase: 'after'
                            }));
                            break;
                        case 'w2ui-edit':
                            var sel = obj.getSelection();
                            var recid = null;
                            if (sel.length == 1) recid = sel[0];
                            // events
                            var eventData = obj.trigger({
                                phase: 'before',
                                target: obj.name,
                                type: 'edit',
                                recid: recid
                            });
                            obj.trigger($.extend(eventData, {
                                phase: 'after'
                            }));
                            break;
                        case 'w2ui-delete':
                            obj["delete"]();
                            break;
                        case 'w2ui-save':
                            obj.save();
                            break;
                    }
                    // no default action
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                });
            }
            return;
        },

        initResize: function() {
            var obj = this;
            var firstVisibleColumn = 0;
            if(obj.columns.length>0){
              for (var i = 0; i <= obj.columns.length; i++) {
                  if (!obj.columns[i].hidden) {
                      firstVisibleColumn = i;
                      break;
                  }
              }
            }
            //if (obj.resizing === true) return;
            $(this.box).find('.w2ui-resizer')
                .off('click')
                .on('click', function(event) {
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                    if (event.preventDefault) event.preventDefault();
                })
                .off('mousedown')
                .on('mousedown', function(event) {
                    var column = parseInt($(this).attr('name'));
                    if (!event) event = window.event;
                    if (!window.addEventListener) {
                        window.document.attachEvent('onselectstart', function() {
                            return false;
                        });
                    }
                    obj.resizing = true;
                    obj.last.tmp = {
                        x: event.screenX,
                        y: event.screenY,
                        gx: event.screenX,
                        gy: event.screenY,
                        col: parseInt($(this).attr('name'))
                    };
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                    if (event.preventDefault) event.preventDefault();
                    // fix sizes
                    for (var c in obj.columns) {
                        if (obj.columns[c].hidden) continue;
                        if (typeof obj.columns[c].sizeOriginal == 'undefined') obj.columns[c].sizeOriginal = obj.columns[c].size;
                        obj.columns[c].size = obj.columns[c].sizeCalculated;
                    }
                    var eventData = {
                        phase: 'before',
                        type: 'columnResize',
                        target: obj.name,
                        column: obj.last.tmp.col,
                        field: obj.columns[obj.last.tmp.col].field
                    };
                    eventData = obj.trigger($.extend(eventData, {
                        resizeBy: 0,
                        originalEvent: event
                    }));
                    // set move event
                    var mouseMove = function(event) {

                        if (obj.resizing != true) return;
                        if (!event) event = window.event;
                        // event before
                        eventData = obj.trigger($.extend(eventData, {
                            resizeBy: (event.screenX - obj.last.tmp.gx),
                            originalEvent: event
                        }));
                        if (eventData.isCancelled === true) {
                            eventData.isCancelled = false;
                            return;
                        }
                        // default action
                        obj.last.tmp.x = (event.screenX - obj.last.tmp.x);
                        obj.last.tmp.y = (event.screenY - obj.last.tmp.y);
                        obj.columns[obj.last.tmp.col].size = (parseInt(obj.columns[obj.last.tmp.col].size) + obj.last.tmp.x) + 'px';
                        obj.resizeRecords();
                        // reset
                        obj.last.tmp.x = event.screenX;
                        obj.last.tmp.y = event.screenY;
                        var colSize = obj.columns[obj.last.tmp.col].size.replace('px', '');
                        //var groupCount = column === firstVisibleColumn ? obj.groupData.length - 1 : 0;
                        for (var f in obj.expandedGrids) {
                            // var childGrid = w2ui[obj.expandedGrids[f]];
                            //if (childGrid.isLastGroup) {
                            // childGrid.last.tmp = {
                            //     x: event.screenX,
                            //     y: event.screenY,
                            //     gx: event.screenX,
                            //     gy: event.screenY,
                            //     col: column //parseInt($(this).attr('name'))
                            // };
                            //childGrid.last.tmp.x = (event.screenX - childGrid.last.tmp.x);
                            //childGrid.last.tmp.y = (event.screenY - childGrid.last.tmp.y);
                            // childGrid.columns[obj.last.tmp.col].size = parseInt(colSize) + 'px';
                            // childGrid.resize();
                            // childGrid.resizeRecords();

                            // reset
                            //childGrid.last.tmp.x = event.screenX;
                            //childGrid.last.tmp.y = event.screenY;
                            //}
                            obj.resizeChildColumns(f, obj.last.tmp.col, firstVisibleColumn, colSize);
                        }
                    }
                    var mouseUp = function(event) {
                        delete obj.resizing;
                        $(document).off('mousemove', 'body');
                        $(document).off('mouseup', 'body');
                        obj.resizeRecords();
                        // event before
                        obj.trigger($.extend(eventData, {
                            phase: 'after',
                            originalEvent: event
                        }));
                    }
                    $(document).on('mousemove', 'body', mouseMove);
                    $(document).on('mouseup', 'body', mouseUp);
                })
                .each(function(index, el) {
                    var td = $(el).parent();
                    $(el).css({
                        "height": '25px',
                        "margin-left": (td.width() - 3) + 'px'
                    })
                });
        },

        resizeChildColumns: function(f, ind, first, colSize) {
            var obj = this;
            var childGrid = w2ui[this.expandedGrids[f]];
            var count = 0;
            if (ind === first) {
                count = obj.groupData.indexOf(obj.postData.groupOn);
                if (count === -1) {
                    if (childGrid.show.expandColumn)
                        count = 1;
                    else
                        count = 0;
                } else {
                    count += childGrid.show.expandColumn ? 1 : 0;
                }
            }
            childGrid.columns[ind].size = parseInt(colSize - 25 * count) + 'px';
            childGrid.resize();
            for (var x in childGrid.expandedGrids) {
                childGrid.resizeChildColumns(x, ind, first, colSize);
            }
        },

        resizeBoxes: function() {
            // elements
            var main = $(this.box).find('> div');
            var header = $('#grid_' + this.name + '_header');
            var toolbar = $('#grid_' + this.name + '_toolbar');
            var summary = $('#grid_' + this.name + '_summary');
            var footer = $('#grid_' + this.name + '_footer');
            var body = $('#grid_' + this.name + '_body');
            var columns = $('#grid_' + this.name + '_columns');
            var records = $('#grid_' + this.name + '_records');

            if (this.show.header) {
                header.css({
                    top: '0px',
                    left: '0px',
                    right: '0px'
                });
            }

            if (this.show.toolbar) {
                toolbar.css({
                    top: (0 + (this.show.header ? w2utils.getSize(header, 'height') : 0)) + 'px',
                    left: '0px',
                    right: '0px'
                });
            }
            if (this.show.footer) {
                footer.css({
                    bottom: '0px',
                    left: '0px',
                    right: '0px'
                });
            }
            if (this.summary.length > 0) {
                summary.css({
                    bottom: (0 + (this.show.footer ? w2utils.getSize(footer, 'height') : 0)) + 'px',
                    left: '0px',
                    right: '0px'
                });
            }
            body.css({
                top: (0 + (this.show.header ? w2utils.getSize(header, 'height') : 0) + (this.show.toolbar ? w2utils.getSize(toolbar, 'height') : 0)) + 'px',
                bottom: (0 + (this.show.footer ? w2utils.getSize(footer, 'height') : 0) + (this.summary.length > 0 ? w2utils.getSize(summary, 'height') : 0)) + 'px',
                left: '0px',
                right: '0px'
            });
        },

        resizeRecords: function() {
            var obj = this;
            // remove empty records
            $(this.box).find('.w2ui-empty-record').remove();
            // -- Calculate Column size in PX
            var box = $(this.box);
            var grid = $(this.box).find('> div');
            var header = $('#grid_' + this.name + '_header');
            var toolbar = $('#grid_' + this.name + '_toolbar');
            var summary = $('#grid_' + this.name + '_summary');
            var footer = $('#grid_' + this.name + '_footer');
            var body = $('#grid_' + this.name + '_body');
            var columns = $('#grid_' + this.name + '_columns');
            var records = $('#grid_' + this.name + '_records');

            // body might be expanded by data
            if (!this.fixedBody) {
                // allow it to render records, then resize
                var calculatedHeight = w2utils.getSize(columns, 'height') + w2utils.getSize($('#grid_' + obj.name + '_records table'), 'height');
                obj.height = calculatedHeight + w2utils.getSize(grid, '+height') + (obj.show.header ? w2utils.getSize(header, 'height') : 0) + (obj.show.toolbar ? w2utils.getSize(toolbar, 'height') : 0) + (summary.css('display') != 'none' ? w2utils.getSize(summary, 'height') : 0) + (obj.show.footer ? w2utils.getSize(footer, 'height') : 0);
                grid.css('height', obj.height);
                body.css('height', calculatedHeight);
                box.css('height', w2utils.getSize(grid, 'height') + w2utils.getSize(box, '+height'));
            } else {
                // fixed body height
                var calculatedHeight = grid.height() - (this.show.header ? w2utils.getSize(header, 'height') : 0) - (this.show.toolbar ? w2utils.getSize(toolbar, 'height') : 0) - (summary.css('display') != 'none' ? w2utils.getSize(summary, 'height') : 0) - (this.show.footer ? w2utils.getSize(footer, 'height') : 0);
                body.css('height', calculatedHeight);
            }

            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            // check overflow
            var bodyOverflowX = false;
            var bodyOverflowY = false;
            if (body.width() < $(records).find('>table').width()) bodyOverflowX = true;
            if (body.height() - columns.height() < $(records).find('>table').height() + (bodyOverflowX ? w2utils.scrollBarSize() : 0)) bodyOverflowY = true;
            if (!this.fixedBody) {
                bodyOverflowY = false;
                bodyOverflowX = false;
            }
            if (bodyOverflowX || bodyOverflowY) {
                columns.find('> table > tbody > tr:nth-child(1) td.w2ui-head-last').css('width', w2utils.scrollBarSize()).show();
                records.css({
                    top: ((this.columnGroups.length > 0 && this.show.columns ? 1 : 0) + w2utils.getSize(columns, 'height')) + 'px',
                    "-webkit-overflow-scrolling": "touch",
                    "overflow-x": (bodyOverflowX && !obj.isGroupGrid ? 'auto' : 'hidden'),
                    "overflow-y": (bodyOverflowY ? 'auto' : 'hidden')
                });
            } else {
                columns.find('> table > tbody > tr:nth-child(1) td.w2ui-head-last').hide();
                records.css({
                    top: ((this.columnGroups.length > 0 && this.show.columns ? 1 : 0) + w2utils.getSize(columns, 'height')) + 'px',
                    overflow: 'hidden'
                });
                if (records.length > 0) {
                    this.last.scrollTop = 0;
                    this.last.scrollLeft = 0;
                } // if no scrollbars, always show top
            }
            if (this.show.emptyRecords && !bodyOverflowY) {
                var max = Math.floor(records.height() / this.recordHeight) + 1;
                if (this.fixedBody) {
                    for (var di = buffered; di <= max; di++) {
                        var html = '';
                        html += '<tr class="' + (di % 2 ? 'w2ui-even' : 'w2ui-odd') + ' w2ui-empty-record" style="height: ' + this.recordHeight + 'px">';
                        if (this.show.lineNumbers) html += '<td class="w2ui-col-number"></td>';
                        if (this.show.selectColumn) html += '<td class="w2ui-grid-data w2ui-col-select"></td>';
                        if (this.show.expandColumn) html += '<td class="w2ui-grid-data w2ui-col-expand"></td>';
                        var j = 0;
                        while (true && this.columns.length > 0) {
                            var col = this.columns[j];
                            if (col.hidden) {
                                j++;
                                if (typeof this.columns[j] == 'undefined') break;
                                else continue;
                            }
                            html += '<td class="w2ui-grid-data" ' + (typeof col.attr != 'undefined' ? col.attr : '') + ' col="' + j + '"></td>';
                            j++;
                            if (typeof this.columns[j] == 'undefined') break;
                        }
                        html += '<td class="w2ui-grid-data-last"></td>';
                        html += '</tr>';
                        $('#grid_' + this.name + '_records > table').append(html);
                    }
                }
            }
            if (body.length > 0) {
                var width_max = parseInt(body.width()) - (bodyOverflowY ? w2utils.scrollBarSize() : 0) - (this.show.lineNumbers ? 34 : 0) - (this.show.selectColumn ? 26 : 0) - (this.show.expandColumn ? 26 : 0);
                var width_box = width_max;
                var percent = 0;
                // gridMinWidth processiong
                var restart = false;
                for (var i = 0; i < this.columns.length; i++) {
                    var col = this.columns[i];
                    if (col.gridMinWidth > 0) {
                        if (col.gridMinWidth > width_box && col.hidden !== true) {
                            col.hidden = true;
                            restart = true;
                        }
                        if (col.gridMinWidth < width_box && col.hidden === true) {
                            col.hidden = false;
                            restart = true;
                        }
                    }
                }
                if (restart === true) {
                    this.refresh();
                    return;
                }
                // assign PX column s
                for (var i = 0; i < this.columns.length; i++) {
                    var col = this.columns[i];
                    if (col.hidden) continue;
                    if (String(col.size).substr(String(col.size).length - 2).toLowerCase() == 'px') {
                        width_max -= parseFloat(col.size);
                        this.columns[i].sizeCalculated = col.size;
                        this.columns[i].sizeType = 'px';
                    } else {
                        percent += parseFloat(col.size);
                        this.columns[i].sizeType = '%';
                        delete col.sizeCorrected;
                    }
                }
                // if sum != 100% -- reassign proportionally
                if (percent != 100 && percent > 0) {
                    for (var i = 0; i < this.columns.length; i++) {
                        var col = this.columns[i];
                        if (col.hidden) continue;
                        if (col.sizeType == '%') {
                            col.sizeCorrected = Math.round(parseFloat(col.size) * 100 * 100 / percent) / 100 + '%';
                        }
                    }
                }
                // calculate % columns
                for (var i = 0; i < this.columns.length; i++) {
                    var col = this.columns[i];
                    if (col.hidden) continue;
                    if (col.sizeType == '%') {
                        if (typeof this.columns[i].sizeCorrected != 'undefined') {
                            // make it 1px smaller, so margin of error can be calculated correctly
                            this.columns[i].sizeCalculated = Math.floor(width_max * parseFloat(col.sizeCorrected) / 100) - 1 + 'px';
                        } else {
                            // make it 1px smaller, so margin of error can be calculated correctly
                            this.columns[i].sizeCalculated = Math.floor(width_max * parseFloat(col.size) / 100) - 1 + 'px';
                        }
                    }
                }
            }
            // fix margin of error that is due percentage calculations
            var width_cols = 0;
            for (var i = 0; i < this.columns.length; i++) {
                var col = this.columns[i];
                if (col.hidden) continue;
                if (typeof col.min == 'undefined') col.min = 20;
                if (parseInt(col.sizeCalculated) < parseInt(col.min)) col.sizeCalculated = col.min + 'px';
                if (parseInt(col.sizeCalculated) > parseInt(col.max)) col.sizeCalculated = col.max + 'px';
                width_cols += parseInt(col.sizeCalculated);
            }
            var width_diff = parseInt(width_box) - parseInt(width_cols);
            if (width_diff > 0 && percent > 0) {
                var i = 0;
                while (true) {
                    var col = this.columns[i];
                    if (typeof col == 'undefined') {
                        i = 0;
                        continue;
                    }
                    if (col.hidden || col.sizeType == 'px') {
                        i++;
                        continue;
                    }
                    col.sizeCalculated = (parseInt(col.sizeCalculated) + 1) + 'px';
                    width_diff--;
                    if (width_diff == 0) break;
                    i++;
                }
            } else if (width_diff > 0) {
                columns.find('> table > tbody > tr:nth-child(1) td.w2ui-head-last').css('width', w2utils.scrollBarSize()).show();
            }
            // resize columns
            columns.find('> table > tbody > tr:nth-child(1) td').each(function(index, el) {
                var ind = $(el).attr('col');
                if (typeof ind != 'undefined' && obj.columns[ind]) $(el).css('width', obj.columns[ind].sizeCalculated);
                // last column
                if ($(el).hasClass('w2ui-head-last')) {
                    $(el).css('width', w2utils.scrollBarSize() + (width_diff > 0 && percent == 0 ? width_diff : 0) + 'px');
                }
            });
            // if there are column groups - hide first row (needed for sizing)
            if (columns.find('> table > tbody > tr').length == 3) {
                columns.find('> table > tbody > tr:nth-child(1) td').html('').css({
                    'height': '0px',
                    'border': '0px',
                    'padding': '0px',
                    'margin': '0px'
                });
            }
            // resize records
            records.find('> table > tbody > tr:nth-child(1) td').each(function(index, el) {
                var ind = $(el).attr('col');
                if (typeof ind != 'undefined' && obj.columns[ind]) $(el).css('width', obj.columns[ind].sizeCalculated);
                // last column
                if ($(el).hasClass('w2ui-grid-data-last')) {
                    $(el).css('width', (width_diff > 0 && percent == 0 ? width_diff : 0) + 'px');
                }
            });
            // resize summary
            summary.find('> table > tbody > tr:nth-child(1) td').each(function(index, el) {
                var ind = $(el).attr('col');
                if (typeof ind != 'undefined' && obj.columns[ind]) $(el).css('width', obj.columns[ind].sizeCalculated);
                // last column
                if ($(el).hasClass('w2ui-grid-data-last')) {
                    $(el).css('width', w2utils.scrollBarSize() + (width_diff > 0 && percent == 0 ? width_diff : 0) + 'px');
                }
            });
            this.initResize();
            this.refreshRanges();
            // apply last scroll if any
            if ((this.last.scrollTop || this.last.scrollLeft) && records.length > 0) {
                columns.prop('scrollLeft', this.last.scrollLeft);
                records.prop('scrollTop', this.last.scrollTop);
                records.prop('scrollLeft', this.last.scrollLeft);
            }
        },

        getSearchesHTML: function() {
            var html = '<table cellspacing="0">';
            var showBtn = false;
            for (var i = 0; i < this.searches.length; i++) {
                var s = this.searches[i];
                s.type = String(s.type).toLowerCase();
                if (s.hidden) continue;
                var btn = '';
                if (showBtn == false) {
                    btn = '<button class="btn close-btn" onclick="obj = w2ui[\'' + this.name + '\']; if (obj) { obj.searchClose(); }">X</button';
                    showBtn = true;
                }
                if (typeof s.inTag == 'undefined') s.inTag = '';
                if (typeof s.outTag == 'undefined') s.outTag = '';
                if (typeof s.type == 'undefined') s.type = 'text';
                if (['text', 'alphanumeric', 'combo'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" onclick="event.stopPropagation();" >' +
                        '    <option value="is">' + w2utils.lang('is') + '</option>' +
                        '    <option value="begins">' + w2utils.lang('begins') + '</option>' +
                        '    <option value="contains">' + w2utils.lang('contains') + '</option>' +
                        '    <option value="ends">' + w2utils.lang('ends') + '</option>' +
                        '</select>';
                }
                if (['int', 'float', 'money', 'currency', 'percent', 'date', 'time'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" ' +
                        '        onchange="w2ui[\'' + this.name + '\'].initOperator(this, ' + i + ');" onclick="event.stopPropagation();" >' +
                        '    <option value="is">' + w2utils.lang('is') + '</option>' +
                        (['int'].indexOf(s.type) != -1 ? '<option value="in">' + w2utils.lang('in') + '</option>' : '') +
                        (['int'].indexOf(s.type) != -1 ? '<option value="not in">' + w2utils.lang('not in') + '</option>' : '') +
                        '<option value="between">' + w2utils.lang('between') + '</option>' +
                        '</select>';
                }
                if (['select', 'list', 'hex'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" onclick="event.stopPropagation();">' +
                        '    <option value="is">' + w2utils.lang('is') + '</option>' +
                        '</select>';
                }
                if (['enum'].indexOf(s.type) != -1) {
                    var operator = '<select id="grid_' + this.name + '_operator_' + i + '" onclick="event.stopPropagation();">' +
                        '    <option value="in">' + w2utils.lang('in') + '</option>' +
                        '    <option value="not in">' + w2utils.lang('not in') + '</option>' +
                        '</select>';
                }
                html += '<tr>' +
                    '    <td class="close-btn">' + btn + '</td>' +
                    '    <td class="caption">' + s.caption + '</td>' +
                    '    <td class="operator">' + operator + '</td>' +
                    '    <td class="value">';

                switch (s.type) {
                    case 'text':
                    case 'alphanumeric':
                    case 'hex':
                    case 'list':
                    case 'combo':
                    case 'enum':
                        html += '<input rel="search" type="text" style="width: 300px;" id="grid_' + this.name + '_field_' + i + '" name="' + s.field + '" ' + s.inTag + ' >';
                        break;

                    case 'int':
                    case 'float':
                    case 'money':
                    case 'currency':
                    case 'percent':
                    case 'date':
                    case 'time':
                        html += '<input rel="search" type="text" size="12" id="grid_' + this.name + '_field_' + i + '" name="' + s.field + '" ' + s.inTag + '>' +
                            '<span id="grid_' + this.name + '_range_' + i + '" style="display: none">' +
                            '&nbsp;-&nbsp;&nbsp;<input rel="search" type="text" style="width: 90px" id="grid_' + this.name + '_field2_' + i + '" name="' + s.field + '" ' + s.inTag + '>' +
                            '</span>';
                        break;

                    case 'select':
                        html += '<select rel="search" id="grid_' + this.name + '_field_' + i + '" name="' + s.field + '" ' + s.inTag + '  onclick="event.stopPropagation();"></select>';
                        break;

                }
                html += s.outTag +
                    '    </td>' +
                    '</tr>';
            }
            html += '<tr>' +
                '    <td colspan="4" class="actions">' +
                '        <div>' +
                '        <button class="btn" onclick="obj = w2ui[\'' + this.name + '\']; if (obj) { obj.searchReset(); }">' + w2utils.lang('Reset') + '</button>' +
                '        <button class="btn btn-blue" onclick="obj = w2ui[\'' + this.name + '\']; if (obj) { obj.search(); }">' + w2utils.lang('Search') + '</button>' +
                '        </div>' +
                '    </td>' +
                '</tr></table>';
            return html;
        },

        initOperator: function(el, search_ind) {
            var obj = this;
            var search = obj.searches[search_ind];
            var range = $('#grid_' + obj.name + '_range_' + search_ind);
            var fld1 = $('#grid_' + obj.name + '_field_' + search_ind);
            var fld2 = fld1.parent().find('span input');
            if ($(el).val() == 'in' || $(el).val() == 'not in') {
                fld1.w2field('clear');
            } else {
                fld1.w2field(search.type);
            }
            if ($(el).val() == 'between') {
                range.show();
                fld2.w2field(search.type);
            } else {
                range.hide();
            }
        },

        initSearches: function() {
            var obj = this;
            // init searches
            for (var s in this.searches) {
                var search = this.searches[s];
                var sdata = this.getSearchData(search.field);
                search.type = String(search.type).toLowerCase();
                if (typeof search.options != 'object') search.options = {};
                // init types
                switch (search.type) {
                    case 'text':
                    case 'alphanumeric':
                        $('#grid_' + this.name + '_operator_' + s).val('begins');
                        if (['alphanumeric', 'hex'].indexOf(search.type) != -1) {
                            $('#grid_' + this.name + '_field_' + s).w2field(search.type, search.options);
                        }
                        break;

                    case 'int':
                    case 'float':
                    case 'money':
                    case 'currency':
                    case 'percent':
                    case 'date':
                    case 'time':
                        if (sdata && sdata.type == 'int' && ['in', 'not in'].indexOf(sdata.operator) != -1) break;
                        $('#grid_' + this.name + '_field_' + s).w2field(search.type, search.options);
                        $('#grid_' + this.name + '_field2_' + s).w2field(search.type, search.options);
                        setTimeout(function() { // convert to date if it is number
                            $('#grid_' + obj.name + '_field_' + s).keydown();
                            $('#grid_' + obj.name + '_field2_' + s).keydown();
                        }, 1);
                        break;

                    case 'hex':
                        break;

                    case 'list':
                    case 'combo':
                    case 'enum':
                        var options = search.options;
                        if (search.type == 'list') options.selected = {};
                        if (search.type == 'enum') options.selected = [];
                        if (sdata) options.selected = sdata.value;
                        $('#grid_' + this.name + '_field_' + s).w2field(search.type, options);
                        if (search.type == 'combo') {
                            $('#grid_' + this.name + '_operator_' + s).val('begins');
                        }
                        break;

                    case 'select':
                        // build options
                        var options = '<option value="">--</option>';
                        for (var i in search.options.items) {
                            var si = search.options.items[i];
                            if ($.isPlainObject(search.options.items[i])) {
                                var val = si.id;
                                var txt = si.text;
                                if (typeof val == 'undefined' && typeof si.value != 'undefined') val = si.value;
                                if (typeof txt == 'undefined' && typeof si.caption != 'undefined') txt = si.caption;
                                if (val == null) val = '';
                                options += '<option value="' + val + '">' + txt + '</option>';
                            } else {
                                options += '<option value="' + si + '">' + si + '</option>';
                            }
                        }
                        $('#grid_' + this.name + '_field_' + s).html(options);
                        break;
                }
                if (sdata != null) {
                    if (sdata.type == 'int' && ['in', 'not in'].indexOf(sdata.operator) != -1) {
                        $('#grid_' + this.name + '_field_' + s).w2field('clear').val(sdata.value);
                    }
                    $('#grid_' + this.name + '_operator_' + s).val(sdata.operator).trigger('change');
                    if (!$.isArray(sdata.value)) {
                        if (typeof sdata.value != 'udefined') $('#grid_' + this.name + '_field_' + s).val(sdata.value).trigger('change');
                    } else {
                        if (['in', 'not in'].indexOf(sdata.operator) != -1) {
                            $('#grid_' + this.name + '_field_' + s).val(sdata.value).trigger('change');
                        } else {
                            $('#grid_' + this.name + '_field_' + s).val(sdata.value[0]).trigger('change');
                            $('#grid_' + this.name + '_field2_' + s).val(sdata.value[1]).trigger('change');
                        }
                    }
                }
            }
            // add on change event
            $('#w2ui-overlay-searches-' + this.name + ' .w2ui-grid-searches *[rel=search]').on('keypress', function(evnt) {
                if (evnt.keyCode == 13) {
                    obj.search();
                    $().w2overlay();
                }
            });
        },

        getColumnsHTML: function() {
            var obj = this;
            var html = '';
            if (this.show.columnHeaders) {
                if (this.columnGroups.length > 0) {
                    html = getColumns(true) + getGroups() + getColumns(false);
                } else {
                    html = getColumns(true);
                }
            }
            return html;

            function getGroups() {
                var html = '<tr>';
                // add empty group at the end
                if (obj.columnGroups[obj.columnGroups.length - 1].caption != '') obj.columnGroups.push({
                    caption: ''
                });

                if (obj.show.lineNumbers) {
                    html += '<td class="w2ui-head w2ui-col-number">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                if (obj.show.selectColumn) {
                    html += '<td class="w2ui-head w2ui-col-select">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                if (obj.show.expandColumn) {
                    html += '<td class="w2ui-head w2ui-col-expand">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                var ii = 0;
                for (var i = 0; i < obj.columnGroups.length; i++) {
                    var colg = obj.columnGroups[i];
                    var col = obj.columns[ii];
                    if (typeof colg.span == 'undefined' || colg.span != parseInt(colg.span)) colg.span = 1;
                    if (typeof colg.colspan != 'undefined') colg.span = colg.colspan;
                    if (colg.master === true) {
                        var sortStyle = '';
                        for (var si in obj.sortData) {
                            if (obj.sortData[si].field == col.field) {
                                if (RegExp('asc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-up';
                                if (RegExp('desc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-down';
                            }
                        }
                        var resizer = "";
                        if (col.resizable !== false) {
                            resizer = '<div class="w2ui-resizer" name="' + ii + '"></div>';
                        }
                        html += '<td class="w2ui-head ' + sortStyle + '" col="' + ii + '" rowspan="2" colspan="' + (colg.span + (i == obj.columnGroups.length - 1 ? 1 : 0)) + '" ' +
                            '    onclick="w2ui[\'' + obj.name + '\'].columnClick(\'' + col.field + '\', event);">' +
                            resizer +
                            '    <div class="w2ui-col-group w2ui-col-header ' + (sortStyle ? 'w2ui-col-sorted' : '') + '">' +
                            '        <div class="' + sortStyle + '"></div>' +
                            (!col.caption ? '&nbsp;' : col.caption) +
                            '    </div>' +
                            '</td>';
                    } else {
                        html += '<td class="w2ui-head" col="' + ii + '" ' +
                            '        colspan="' + (colg.span + (i == obj.columnGroups.length - 1 ? 1 : 0)) + '">' +
                            '    <div class="w2ui-col-group">' +
                            (!colg.caption ? '&nbsp;' : colg.caption) +
                            '    </div>' +
                            '</td>';
                    }
                    ii += colg.span;
                }
                html += '</tr>';
                return html;
            }

            function getColumns(master) {
                var html = '<tr>',
                    reorderCols = (obj.reorderColumns && (!obj.columnGroups || !obj.columnGroups.length)) ? ' w2ui-reorder-cols-head ' : '';
                if (obj.show.lineNumbers) {
                    html += '<td class="w2ui-head w2ui-col-number" onclick="w2ui[\'' + obj.name + '\'].columnClick(\'line-number\', event);">' +
                        '    <div>#</div>' +
                        '</td>';
                }
                if (obj.show.selectColumn) {
                    html += '<td class="w2ui-head w2ui-col-select" ' +
                        '        onclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '    <div>' +
                        '        <input type="checkbox" id="grid_' + obj.name + '_check_all" tabIndex="-1"' +
                        '            style="' + (obj.multiSelect == false ? 'display: none;' : '') + '"' +
                        '            onclick="if (this.checked) w2ui[\'' + obj.name + '\'].selectAll(); ' +
                        '                     else w2ui[\'' + obj.name + '\'].selectNone(); ' +
                        '                     if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '    </div>' +
                        '</td>';
                }
                if (obj.show.expandColumn) {
                    html += '<td class="w2ui-head w2ui-col-expand">' +
                        '    <div>&nbsp;</div>' +
                        '</td>';
                }
                var ii = 0;
                var id = 0;
                for (var i = 0; i < obj.columns.length; i++) {
                    var col = obj.columns[i];
                    var colg = {};
                    if (i == id) {
                        id = id + (typeof obj.columnGroups[ii] != 'undefined' ? parseInt(obj.columnGroups[ii].span) : 0);
                        ii++;
                    }
                    if (typeof obj.columnGroups[ii - 1] != 'undefined') var colg = obj.columnGroups[ii - 1];
                    if (col.hidden) continue;
                    var sortStyle = '';
                    for (var si in obj.sortData) {
                        if (obj.sortData[si].field == col.field) {
                            if (RegExp('asc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-up';
                            if (RegExp('desc', 'i').test(obj.sortData[si].direction)) sortStyle = 'w2ui-sort-down';
                        }
                    }
                    if (colg['master'] !== true || master) { // grouping of columns
                        var resizer = "";
                        if (col.resizable !== false) {
                            resizer = '<div class="w2ui-resizer" name="' + i + '"></div>';
                        }
                        html += '<td col="' + i + '" class="w2ui-head ' + sortStyle + reorderCols + '" ' +
                            '    onclick="w2ui[\'' + obj.name + '\'].columnClick(\'' + col.field + '\', event);">' +
                            resizer +
                            '    <div class="w2ui-col-header ' + (sortStyle ? 'w2ui-col-sorted' : '') + '">' +
                            '        <div class="' + sortStyle + '"></div>' +
                            (!col.caption ? '&nbsp;' : col.caption) +
                            '    </div>' +
                            '</td>';
                    }
                }
                html += '<td class="w2ui-head w2ui-head-last"><div>&nbsp;</div></td>';
                html += '</tr>';
                return html;
            }
        },

        getRecordsHTML: function() {
            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            // larget number works better with chrome, smaller with FF.
            if (buffered > 300) this.show_extra = 30;
            else this.show_extra = 300;
            var records = $('#grid_' + this.name + '_records');
            var limit = Math.floor(records.height() / this.recordHeight) + this.show_extra + 1;
            if (!this.fixedBody || limit > buffered) limit = buffered;
            // always need first record for resizing purposes
            var html = '<table>' + this.getRecordHTML(-1, 0);
            // first empty row with height
            html += '<tr id="grid_' + this.name + '_rec_top" line="top" style="height: ' + 0 + 'px">' +
                '    <td colspan="200"></td>' +
                '</tr>';
            for (var i = 0; i < limit; i++) {
                html += this.getRecordHTML(i, i + 1);
            }
            html += '<tr id="grid_' + this.name + '_rec_bottom" line="bottom" style="height: ' + ((buffered - limit) * this.recordHeight) + 'px">' +
                '    <td colspan="200"></td>' +
                '</tr>' +
                '<tr id="grid_' + this.name + '_rec_more" style="display: none">' +
                '    <td colspan="200" class="w2ui-load-more"></td>' +
                '</tr>' +
                '</table>';
            this.last.range_start = 0;
            this.last.range_end = limit;
            return html;
        },

        getSummaryHTML: function() {
            if (this.summary.length == 0) return;
            var html = '<table>';
            for (var i = 0; i < this.summary.length; i++) {
                html += this.getRecordHTML(i, i + 1, true);
            }
            html += '</table>';
            return html;
        },

        getSummaryRecordHTML: function(ind, lineNum) {
            if (this.summaryTemplates && this.summaryTemplates.length > 0) {
                if (ind >= this.summary.length) return '';
                record = this.summary[ind];
                if (!record) return '';
            } else {
                return this.getRecordHTML(i, h, true);
            }
        },

        toggleGroup: function(recid) {
            var rec = this.get(recid);
            if (rec.expanded === true) return this.groupCollapse(recid);
            else return this.groupExpand(recid);
        },

        groupExpand: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length > 0) return false;
            if (rec.expanded == 'none') return false;
            // insert expand row
            var tmp = 1 + (this.show.selectColumn ? 1 : 0);
            var addClass = ''; // ($('#grid_'+this.name +'_rec_'+ w2utils.escapeId(recid)).hasClass('w2ui-odd') ? 'w2ui-odd' : 'w2ui-even');
            $('#grid_' + this.name + '_rec_' + id).after(
                '<tr id="grid_' + this.name + '_rec_' + recid + '_expanded_row" class="w2ui-expanded-row ' + addClass + '">' +
                (this.show.lineNumbers ? '<td class="w2ui-col-number"></td>' : '') +
                '    <td class="w2ui-grid-data w2ui-expanded1" colspan="' + tmp + '"><div style="display: none"></div></td>' +
                '    <td colspan="100" class="w2ui-expanded2">' +
                '        <div id="grid_' + this.name + '_rec_' + recid + '_expanded" style="opacity: 0"></div>' +
                '    </td>' +
                '</tr>');
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'groupExpand',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + recid + '_expanded',
                ready: ready
            });
            if (eventData.isCancelled === true) {
                $('#grid_' + this.name + '_rec_' + id + '_expanded_row').remove();
                return;
            }
            // default action
            $('#grid_' + this.name + '_rec_' + id).attr('expanded', 'yes').addClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded_row').show();
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('<div class="w2ui-spinner" style="width: 16px; height: 16px; margin: -2px 2px;"></div>');
            rec.expanded = true;
            // check if height of expanded row > 5 then remove spinner
            setTimeout(ready, 300);

            function ready() {
                var div1 = $('#grid_' + obj.name + '_rec_' + id + '_expanded');
                var div2 = $('#grid_' + obj.name + '_rec_' + id + '_expanded_row .w2ui-expanded1 > div');
                div2.show().css('opacity', 1);
                div1.html('lorem ipsum');
                obj.showGroup(recid);
                if (div1.height() < 5) return;
                div1.css('opacity', 1);
                $('#grid_' + obj.name + '_cell_' + obj.get(recid, true) + '_expand div').html('-');
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.resizeRecords();
            return true;
        },

        groupCollapse: function(recid) {
            var rec = this.get(recid);
            var obj = this;
            var mainGrid = obj.mainGrid ? obj.mainGrid : obj;
            var id = w2utils.escapeId(recid);
            if ($('#grid_' + this.name + '_rec_' + id + '_expanded_row').length == 0) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'groupCollapse',
                target: this.name,
                recid: recid,
                box_id: 'grid_' + this.name + '_rec_' + id + '_expanded'
            });
            if (eventData.isCancelled === true) return;
            // default action
            $('#grid_' + this.name + '_rec_' + id).removeAttr('expanded').removeClass('w2ui-expanded');
            $('#grid_' + this.name + '_rec_' + id + '_expanded').css('opacity', 0);
            $('#grid_' + this.name + '_cell_' + this.get(recid, true) + '_expand div').html('+');
            setTimeout(function() {
                $('#grid_' + obj.name + '_rec_' + id + '_expanded').height('0px');
                setTimeout(function() {
                    $('#grid_' + obj.name + '_rec_' + id + '_expanded_row').remove();
                    delete rec.expanded;
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    //console.log('name:' + obj.name + '\nparent:' + this.parentGrid);
                    //var name = obj.name + '_grp_' + recid;
                    var grids = obj.expandedGrids || [];
                    // mainGrid.childrenGrids = _.reject(mainGrid.childrenGrids, function(ob) {
                    //     console.log('parent:' + obj.name + '\nchildren:' + ob.name);
                    //     return obj.getRoot(ob.name) === name;
                    // }, true);
                    for (var x in grids) {
                        if (w2ui[grids[x]].expandedGrids) {
                            for (var y in w2ui[grids[x]].expandedGrids) {
                                if (w2ui.hasOwnProperty(w2ui[grids[x]].expandedGrids[y]))
                                    w2ui[w2ui[grids[x]].expandedGrids[y]].destroy();
                            }
                        }
                        w2ui[grids[x]].destroy();
                        obj.expandedGrids.splice(x, 1);
                    }

                    obj.resizeRecords();
                    obj.resize();
                }, 300);
            }, 200);
            return true;
        },

        showGroup: function(recid) {
            var obj = this;
            //get current record which is expanded
            var record = obj.get(recid);
            //copy current grid
            var tmp = $.extend(true, {}, this);
            //set new grid name
            var name = this.name + '_grp_' + recid;
            if (!tmp.url) {
                tmp.records = obj.getRecordsOfGroup(obj.postData.groupOn, record[obj.postData.groupOn]);
            } else {
                //reset records
                tmp.records = [];
            }

            // get element to render
            var box_id = 'grid_' + obj.name + '_rec_' + recid + '_expanded';
            $('#grid_' + obj.name + '_records').css('overflow-x', 'hidden');
            tmp.name = name;
            //no toolbar
            delete tmp.toolbar;
            //no need to show
            delete tmp.show.toolbar;
            delete tmp.show.footer;
            delete tmp.show.columnHeaders;

            //tmp.fixedBody = false;
            //hide x-overflow - not nice - will be checked on resizeRecords and if true - set overflowX hidden
            //main grid will have overflow - good enough
            tmp.isGroupGrid = true;

            //set main grid reference
            tmp.mainGrid = this.mainGrid ? this.mainGrid : this;
            //conditionals here!!!!!!!!!
            //need to know group level here. We should get the column that current grid is grouped on,
            //find its position in the groupData and set the group level
            var currentGroupLevel = obj.groupData.indexOf(obj.postData.groupOn);
            var nextGroupLevel;
            // if we are at last level we should render a regular grid
            if (currentGroupLevel === obj.groupData.length - 1) {
                tmp.enableGrouping = false;
                delete tmp.groupData;
                delete tmp.postData.groupOn;
                // tmp.postData.groupOn = obj.groupData[currentGroupLevel];
                tmp.isLastGroup = true;
                tmp.show.expandColumn = tmp.mainGrid.onExpand !== null;
            } else {
                // set new group on column
                nextGroupLevel = currentGroupLevel + 1
                tmp.postData.groupOn = obj.groupData[nextGroupLevel];
            }
            //Now we should set some filters so that the group we render has only the records
            //coresponding to parent record.
            //First we have to find the column value we are grouping data
            var groupValue = record[obj.postData.groupOn];

            // We have to extend post data with group data so that server will know what data to return
            // first we ensure that group_data exists in postData
            var group_data = obj.postData.group_data || [];
            //we need to find if there is a group data with the same parent group and extend it, if exists
            //otherwise we add it to post data
            var existing = $.grep(group_data, function(o) {
                return o.parentGroup === obj.groupData[currentGroupLevel];
            })[0];
            if (existing) {
                existing.parentGroup = obj.groupData[currentGroupLevel];
                existing.parentGroupValue = groupValue;
                existing.groupColumn = obj.groupData[nextGroupLevel] || '';
            } else {
                var currentGroupData = {
                    parentGroup: obj.groupData[currentGroupLevel],
                    parentGroupValue: groupValue,
                    groupColumn: obj.groupData[nextGroupLevel] || ''
                };
                group_data.push(currentGroupData);
            }

            tmp.postData.group_data = group_data;

            //assign new grid to framework
            w2ui[name] = tmp;

            //render new grid animated
            $('#' + box_id).css({
                margin: '0px',
                padding: '0px',
                width: '100%',
                'min-height': '300px'
            }).animate({
                height: '305px'
            }, {
                duration: 10,
                complete: function() {
                    //We have to resize the first column to align with parent grid
                    if (tmp.enableGrouping || tmp.show.expandColumn) {
                        var isFirstColumn = true;
                        $.each(tmp.columns, function(i, col) {
                            if (!col.hidden) {
                                var firstSize = obj.columns[i].sizeCalculated.replace('px', '');
                                var offset = isFirstColumn ? 25 : 0;
                                col.size = parseInt(firstSize - offset) + 'px';
                                isFirstColumn = false;
                            }
                        });
                    }
                    $('#' + box_id).w2render(name);
                    //tmp.resizeRecords();
                    record.expanded = true;
                    //push new grid name into expanded grid array of current grid
                    obj.expandedGrids.push(name);
                }
            });

            this.resize();
        },

        getGroupRecordHtml: function(ind, lineNum) {
            var self = this;
            var rec_html = '';
            var record;
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (this.searchData.length > 0 && !url) {
                if (ind >= this.last.searchIds.length) return '';
                ind = this.last.searchIds[ind];
                record = this.records[ind];
            } else {
                if (ind >= this.records.length) return '';
                record = this.records[ind];
            }
            if (!record) return '';
            var id = w2utils.escapeId(record.recid);

            rec_html += '<tr id="grid_' + this.name + '_rec_' + record.recid + '" recid="' + record.recid + '" line="' + lineNum + '" ' +
                ' class="' + (lineNum % 2 == 0 ? 'w2ui-even' : 'w2ui-odd') + (record.expanded === true ? ' w2ui-expanded' : '') + '" ' +
                (w2utils.isIOS ?
                    '    onclick  = "w2ui[\'' + this.name + '\'].dblClick(\'' + record.recid + '\', event);"' :
                    '    onclick  = "w2ui[\'' + this.name + '\'].click(\'' + record.recid + '\', event);"' +
                    '    oncontextmenu = "w2ui[\'' + this.name + '\'].contextMenu(\'' + record.recid + '\', event);"'
                ) +
                ' style="height: ' + this.recordHeight + 'px; ' + '" ' +
                (typeof record['style'] == 'string' ? 'custom_style="' + record['style'] + '"' : '') +
                '>';

            var tmp_img = '';
            if (record.expanded === true) tmp_img = '-';
            else tmp_img = '+';
            if (record.expanded == 'none') tmp_img = '';
            if (record.expanded == 'spinner') tmp_img = '<div class="w2ui-spinner" style="width: 16px; margin: -2px 2px;"></div>';
            rec_html +=
                '<td id="grid_' + this.name + '_cell_' + ind + '_expand' + '" class="w2ui-grid-data w2ui-col-expand">' +
                '    <div ondblclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;" ' +
                '            onclick="w2ui[\'' + this.name + '\'].toggleGroup(' + record.recid + ', event); ' +
                '                if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                '        ' + tmp_img + ' </div>'
            '</td>';

            var col = $.grep(this.columns, function(c) {
                return c.field === self.postData.groupOn;
            })[0];
            var col_ind = this.columns.indexOf(col);
            if (col.hidden) {
                if (typeof this.columns[col_ind] == 'undefined') return '';
            }
            var rec_cell = this.getCellHTML(ind, col_ind, false);
            var addStyle = '';
            if (typeof col.render == 'string') {
                var tmp = col.render.toLowerCase().split(':');
                if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(tmp[0]) != -1) addStyle += 'text-align: right;';
            }
            if (typeof record.style == 'object' && typeof record.style[col_ind] == 'string') {
                addStyle += record.style[col_ind] + ';';
            }
            rec_html += '<td colspan="' + this.columns.length + '" class="w2ui-grid-data' + '" col="' + col_ind + '" ' +
                '    style="' + addStyle + (typeof col.style != 'undefined' ? col.style : '') + '" ' +
                (typeof col.attr != 'undefined' ? col.attr : '') + '>' +
                rec_cell +
                '</td>';
            if (typeof this.columns[col_ind] == 'undefined') return '';

            rec_html += '<td class="w2ui-grid-data-last"></td>';
            rec_html += '</tr>';

            return rec_html;
        },

        getRecordHTML: function(ind, lineNum, summary) {
            var rec_html = '';
            var sel = this.last.selection;
            var record;
            if (this.enableGrouping && !this.isLastGroup && !summary && ind !== -1) {
                return this.getGroupRecordHtml(ind, lineNum);
            }
            // first record needs for resize purposes
            if (ind == -1) {
                rec_html += '<tr line="0">';
                if (this.show.lineNumbers) rec_html += '<td class="w2ui-col-number" style="height: 0px;"></td>';
                if (this.show.selectColumn) rec_html += '<td class="w2ui-col-select" style="height: 0px;"></td>';
                if (this.show.expandColumn || this.enableGrouping) rec_html += '<td class="w2ui-col-expand" style="height: 0px;"></td>';
                for (var i in this.columns) {
                    if (this.columns[i].hidden) continue;
                    rec_html += '<td class="w2ui-grid-data" col="' + i + '" style="height: 0px;"></td>';
                }
                rec_html += '<td class="w2ui-grid-data-last" style="height: 0px;"></td>';
                rec_html += '</tr>';
                return rec_html;
            }
            // regular record
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (summary !== true) {
                if (this.searchData.length > 0 && !url) {
                    if (ind >= this.last.searchIds.length) return '';
                    ind = this.last.searchIds[ind];
                    record = this.records[ind];
                } else {
                    if (ind >= this.records.length) return '';
                    record = this.records[ind];
                }
            } else {
                if (ind >= this.summary.length) return '';
                record = this.summary[ind];
            }
            if (!record) return '';
            var id = w2utils.escapeId(record.recid);
            var isRowSelected = false;
            if (sel.indexes.indexOf(ind) != -1) isRowSelected = true;
            // render TR
            rec_html += '<tr id="grid_' + this.name + '_rec_' + record.recid + '" recid="' + record.recid + '" line="' + lineNum + '" ' +
                ' class="' + (lineNum % 2 == 0 ? 'w2ui-even' : 'w2ui-odd') + (isRowSelected && this.selectType == 'row' ? ' w2ui-selected' : '') + (record.expanded === true ? ' w2ui-expanded' : '') + '" ' +
                (summary !== true ?
                    (w2utils.isIOS ?
                        '    onclick  = "w2ui[\'' + this.name + '\'].dblClick(\'' + record.recid + '\', event);"' :
                        '    onclick  = "w2ui[\'' + this.name + '\'].click(\'' + record.recid + '\', event);"' +
                        '    oncontextmenu = "w2ui[\'' + this.name + '\'].contextMenu(\'' + record.recid + '\', event);"'
                    ) : ''
                ) +
                ' style="height: ' + this.recordHeight + 'px; ' + (!isRowSelected && typeof record['style'] == 'string' ? record['style'] : '') + '" ' +
                (typeof record['style'] == 'string' ? 'custom_style="' + record['style'] + '"' : '') +
                '>';
            if (this.show.lineNumbers) {
                rec_html += '<td id="grid_' + this.name + '_cell_' + ind + '_number' + (summary ? '_s' : '') + '" class="w2ui-col-number">' +
                    (summary !== true ? '<div>' + lineNum + '</div>' : '') +
                    '</td>';
            }
            if (this.show.selectColumn) {
                rec_html +=
                    '<td id="grid_' + this.name + '_cell_' + ind + '_select' + (summary ? '_s' : '') + '" class="w2ui-grid-data w2ui-col-select" ' +
                    '        onclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                    (summary !== true ?
                        '    <div>' +
                        '        <input class="w2ui-grid-select-check" type="checkbox" tabIndex="-1"' +
                        '            ' + (isRowSelected ? 'checked="checked"' : '') +
                        '            onclick="var obj = w2ui[\'' + this.name + '\']; ' +
                        '                if (!obj.multiSelect) { obj.selectNone(); }' +
                        '                if (this.checked) obj.select(\'' + record.recid + '\'); else obj.unselect(\'' + record.recid + '\'); ' +
                        '                if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '    </div>' :
                        '') +
                    '</td>';
            }
            if (this.show.expandColumn) {
                var tmp_img = '';
                if (record.expanded === true) tmp_img = '-';
                else tmp_img = '+';
                if (record.expanded == 'none') tmp_img = '';
                if (record.expanded == 'spinner') tmp_img = '<div class="w2ui-spinner" style="width: 16px; margin: -2px 2px;"></div>';
                rec_html +=
                    '<td id="grid_' + this.name + '_cell_' + ind + '_expand' + (summary ? '_s' : '') + '" class="w2ui-grid-data w2ui-col-expand">' +
                    (summary !== true ?
                        '    <div ondblclick="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;" ' +
                        '            onclick="w2ui[\'' + this.name + '\'].toggle(\'' + record.recid + '\', event); ' +
                        '                if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">' +
                        '        ' + tmp_img + ' </div>' :
                        '') +
                    '</td>';
            }
            var col_ind = 0;
            while (true) {
                var col = this.columns[col_ind];
                if (col.hidden) {
                    col_ind++;
                    if (typeof this.columns[col_ind] == 'undefined') break;
                    else continue;
                }
                var isChanged = !summary && record.changes && typeof record.changes[col.field] != 'undefined';
                var rec_cell = this.getCellHTML(ind, col_ind, summary);
                var addStyle = '';
                if (typeof col.render == 'string') {
                    var tmp = col.render.toLowerCase().split(':');
                    if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(tmp[0]) != -1) addStyle += 'text-align: right;';
                }
                if (typeof record.style == 'object' && typeof record.style[col_ind] == 'string') {
                    addStyle += record.style[col_ind] + ';';
                }
                var isCellSelected = false;
                if (isRowSelected && $.inArray(col_ind, sel.columns[ind]) != -1) isCellSelected = true;
                rec_html += '<td class="w2ui-grid-data' + (isCellSelected ? ' w2ui-selected' : '') + (isChanged ? ' w2ui-changed' : '') + '" col="' + col_ind + '" ' +
                    '    style="' + addStyle + (typeof col.style != 'undefined' ? col.style : '') + '" ' +
                    (typeof col.attr != 'undefined' ? col.attr : '') + '>' +
                    rec_cell +
                    '</td>';
                col_ind++;
                if (typeof this.columns[col_ind] == 'undefined') break;
            }
            rec_html += '<td class="w2ui-grid-data-last"></td>';
            rec_html += '</tr>';
            return rec_html;
        },

        scroll: function(event) {
            var time = (new Date()).getTime();
            var obj = this;
            var records = $('#grid_' + this.name + '_records');
            var buffered = this.records.length;
            if (this.searchData.length != 0 && !this.url) buffered = this.last.searchIds.length;
            if (buffered == 0 || records.length == 0 || records.height() == 0) return;
            if (buffered > 300) this.show_extra = 30;
            else this.show_extra = 300;
            // need this to enable scrolling when this.limit < then a screen can fit
            if (records.height() < buffered * this.recordHeight && records.css('overflow-y') == 'hidden') {
                if (this.total > 0) this.refresh();
                return;
            }
            // update footer
            var t1 = Math.round(records[0].scrollTop / this.recordHeight + 1);
            var t2 = t1 + (Math.round(records.height() / this.recordHeight) - 1);
            if (t1 > buffered) t1 = buffered;
            if (t2 > buffered) t2 = buffered;
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            $('#grid_' + this.name + '_footer .w2ui-footer-right').html(w2utils.formatNumber(this.offset + t1) + '-' + w2utils.formatNumber(this.offset + t2) + ' ' + w2utils.lang('of') + ' ' + w2utils.formatNumber(this.total) +
                (url ? ' (' + w2utils.lang('buffered') + ' ' + w2utils.formatNumber(buffered) + (this.offset > 0 ? ', skip ' + w2utils.formatNumber(this.offset) : '') + ')' : '')
            );
            // only for local data source, else no extra records loaded
            if (!url && (!this.fixedBody || this.total <= 300)) return;
            // regular processing
            var start = Math.floor(records[0].scrollTop / this.recordHeight) - this.show_extra;
            var end = start + Math.floor(records.height() / this.recordHeight) + this.show_extra * 2 + 1;
            // var div     = start - this.last.range_start;
            if (start < 1) start = 1;
            if (end > this.total) end = this.total;
            var tr1 = records.find('#grid_' + this.name + '_rec_top');
            var tr2 = records.find('#grid_' + this.name + '_rec_bottom');
            // if row is expanded
            if (String(tr1.next().prop('id')).indexOf('_expanded_row') != -1) tr1.next().remove();
            if (this.total > end && String(tr2.prev().prop('id')).indexOf('_expanded_row') != -1) tr2.prev().remove();
            var first = parseInt(tr1.next().attr('line'));
            var last = parseInt(tr2.prev().attr('line'));
            //$('#log').html('buffer: '+ this.buffered +' start-end: ' + start + '-'+ end + ' ===> first-last: ' + first + '-' + last);
            if (first < start || first == 1 || this.last.pull_refresh) { // scroll down
                // console.log('end', end, 'last', last, 'show_extre', this.show_extra, this.last.pull_refresh);
                if (end <= last + this.show_extra - 2 && end != this.total) return;
                this.last.pull_refresh = false;
                // remove from top
                while (true) {
                    var tmp = records.find('#grid_' + this.name + '_rec_top').next();
                    if (tmp.attr('line') == 'bottom') break;
                    if (parseInt(tmp.attr('line')) < start) tmp.remove();
                    else break;
                }
                // add at bottom
                var tmp = records.find('#grid_' + this.name + '_rec_bottom').prev();
                var rec_start = tmp.attr('line');
                if (rec_start == 'top') rec_start = start;
                for (var i = parseInt(rec_start) + 1; i <= end; i++) {
                    if (!this.records[i - 1]) continue;
                    if (this.records[i - 1].expanded === true) this.records[i - 1].expanded = false;
                    tr2.before(this.getRecordHTML(i - 1, i));
                }
                markSearch();
                setTimeout(function() {
                    obj.refreshRanges();
                }, 0);
            } else { // scroll up
                if (start >= first - this.show_extra + 2 && start > 1) return;
                // remove from bottom
                while (true) {
                    var tmp = records.find('#grid_' + this.name + '_rec_bottom').prev();
                    if (tmp.attr('line') == 'top') break;
                    if (parseInt(tmp.attr('line')) > end) tmp.remove();
                    else break;
                }
                // add at top
                var tmp = records.find('#grid_' + this.name + '_rec_top').next();
                var rec_start = tmp.attr('line');
                if (rec_start == 'bottom') rec_start = end;
                for (var i = parseInt(rec_start) - 1; i >= start; i--) {
                    if (!this.records[i - 1]) continue;
                    if (this.records[i - 1].expanded === true) this.records[i - 1].expanded = false;
                    tr1.after(this.getRecordHTML(i - 1, i));
                }
                markSearch();
                setTimeout(function() {
                    obj.refreshRanges();
                }, 0);
            }
            // first/last row size
            var h1 = (start - 1) * obj.recordHeight;
            var h2 = (buffered - end) * obj.recordHeight;
            if (h2 < 0) h2 = 0;
            tr1.css('height', h1 + 'px');
            tr2.css('height', h2 + 'px');
            obj.last.range_start = start;
            obj.last.range_end = end;
            // load more if needed
            var s = Math.floor(records[0].scrollTop / this.recordHeight);
            var e = s + Math.floor(records.height() / this.recordHeight);
            if (e + 10 > buffered && this.last.pull_more !== true && buffered < this.total - this.offset) {
                if (this.autoLoad === true) {
                    this.last.pull_more = true;
                    this.last.xhr_offset += this.limit;
                    this.request('get-records');
                } else {
                    var more = $('#grid_' + this.name + '_rec_more');
                    if (more.css('display') == 'none') {
                        more.show()
                            .on('click', function() {
                                obj.last.pull_more = true;
                                obj.last.xhr_offset += obj.limit;
                                obj.request('get-records');
                                // show spinner the last
                                $(this).find('td').html('<div><div style="width: 20px; height: 20px;" class="w2ui-spinner"></div></div>');
                            });
                    }
                    if (more.find('td').text().indexOf('Load') == -1) {
                        more.find('td').html('<div>' + w2utils.lang('Load') + ' ' + obj.limit + ' ' + w2utils.lang('More') + '...</div>');
                    }
                }
            }
            // check for grid end
            if (buffered >= this.total - this.offset) $('#grid_' + this.name + '_rec_more').hide();
            return;

            function markSearch() {
                // mark search
                if (obj.markSearch === false) return;
                clearTimeout(obj.last.marker_timer);
                obj.last.marker_timer = setTimeout(function() {
                    // mark all search strings
                    var str = [];
                    for (var s in obj.searchData) {
                        var tmp = obj.searchData[s];
                        if ($.inArray(tmp.value, str) == -1) str.push(tmp.value);
                    }
                    if (str.length > 0) $(obj.box).find('.w2ui-grid-data > div').w2marker(str);
                }, 50);
            }
        },



        getCellHTML: function(ind, col_ind, summary) {
            var col = this.columns[col_ind];
            var record = (summary !== true ? this.records[ind] : this.summary[ind]);
            var data = this.getCellValue(ind, col_ind, summary);
            var edit = col.editable;

            //handle group record
            if (!summary && col.field === this.postData.groupOn) {
                if (this.groupTemplates && this.groupTemplates.length > 0) {
                    var template = $.grep(this.groupTemplates, function(c) {
                        return c.field === col.field;
                    })[0];
                    if (template) {
                        if (template.render && typeof template.render === 'function') {
                            data = $.trim(template.render.call(this, record, ind, col_ind));
                            if (data.length < 4 || data.substr(0, 4).toLowerCase() != '<div') data = '<div>' + data + '</div>';
                            return data;
                        } else {
                            console.warn('Group templates has to contain a render function!');
                        }
                    }
                }
            }

            if (summary && this.summaryTemplates && this.summaryTemplates.length > 0) {
                var template = $.grep(this.summaryTemplates, function(c) {
                    return c.field === col.field;
                })[0];
                if (template) {
                    if (template.render && typeof template.render === 'function') {
                        data = $.trim(template.render.call(this, record, ind, col_ind));
                        if (data.length < 4 || data.substr(0, 4).toLowerCase() != '<div') data = '<div>' + data + '</div>';
                        return data;
                    } else {
                        console.warn('Summary templates has to contain a render function!');
                    }
                }
            }
            // various renderers
            if (typeof col.render != 'undefined' /*&& record[col.field]*/) {
                if (typeof col.render == 'function') {
                    data = $.trim(col.render.call(this, record, ind, col_ind));
                    if (data.length < 4 || data.substr(0, 4).toLowerCase() != '<div') data = '<div>' + data + '</div>';
                }
                if (typeof col.render == 'object') data = '<div>' + (col.render[data] || '') + '</div>';
                if (typeof col.render == 'string') {
                    var tmp = col.render.toLowerCase().split(':');
                    var prefix = '';
                    var suffix = '';
                    if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(tmp[0]) != -1) {
                        if (typeof tmp[1] == 'undefined' || !w2utils.isInt(tmp[1])) tmp[1] = 0;
                        if (tmp[1] > 20) tmp[1] = 20;
                        if (tmp[1] < 0) tmp[1] = 0;
                        if (['money', 'currency'].indexOf(tmp[0]) != -1) {
                            tmp[1] = w2utils.settings.currencyPrecision;
                            prefix = w2utils.settings.currencyPrefix;
                            suffix = w2utils.settings.currencySuffix
                        }
                        if (tmp[0] == 'percent') {
                            suffix = '%';
                            if (tmp[1] !== '0') tmp[1] = 1;
                        }
                        if (tmp[0] == 'int') {
                            tmp[1] = 0;
                        }
                        // format
                        data = '<div>' + (data !== '' ? prefix + w2utils.formatNumber(Number(data).toFixed(tmp[1])) + suffix : '') + '</div>';
                    }
                    if (tmp[0] == 'time') {
                        if (typeof tmp[1] == 'undefined' || tmp[1] == '') tmp[1] = w2utils.settings.time_format;
                        data = '<div>' + prefix + w2utils.formatTime(data, tmp[1] == 'h12' ? 'hh:mi pm' : 'h24:min') + suffix + '</div>';
                    }
                    if (tmp[0] == 'date') {
                        if (typeof tmp[1] == 'undefined' || tmp[1] == '') tmp[1] = w2utils.settings.date_display;
                        data = '<div>' + prefix + w2utils.formatDate(data, tmp[1]) + suffix + '</div>';
                    }
                    if (tmp[0] == 'age') {
                        data = '<div>' + prefix + w2utils.age(data) + suffix + '</div>';
                    }
                    if (tmp[0] == 'toggle') {
                        data = '<div>' + prefix + (data ? 'Yes' : '') + suffix + '</div>';
                    }
                }
            } else {
                // if editable checkbox
                var addStyle = '';
                if (edit && ['checkbox', 'check'].indexOf(edit.type) != -1) {
                    var changeInd = summary ? -(ind + 1) : ind;
                    addStyle = 'text-align: center';
                    data = '<input type="checkbox" ' + (data ? 'checked' : '') + ' onclick="' +
                        '    var obj = w2ui[\'' + this.name + '\']; ' +
                        '    obj.editChange.call(obj, this, ' + changeInd + ', ' + col_ind + ', event); ' +
                        '">';
                }
                if (!this.show.recordTitles) {
                    var data = '<div style="' + addStyle + '">' + data + '</div>';
                } else {
                    // title overwrite
                    var title = String(data).replace(/"/g, "''");
                    if (typeof col.title != 'undefined') {
                        if (typeof col.title == 'function') title = col.title.call(this, record, ind, col_ind);
                        if (typeof col.title == 'string') title = col.title;
                    }
                    var data = '<div title="' + w2utils.stripTags(title) + '" style="' + addStyle + '">' + data + '</div>';
                }
            }
            if (data == null || typeof data == 'undefined') data = '';
            return data;
        },

        getCellValue: function(ind, col_ind, summary) {
            var col = this.columns[col_ind];
            var record = (summary !== true ? this.records[ind] : this.summary[ind]);
            var data = this.parseField(record, col.field);
            if (record.changes && typeof record.changes[col.field] != 'undefined') data = record.changes[col.field];
            if (data == null || typeof data == 'undefined') data = '';
            return data;
        },

        getFooterHTML: function() {
            return '<div>' +
                '    <div class="w2ui-footer-left"></div>' +
                '    <div class="w2ui-footer-right"></div>' +
                '    <div class="w2ui-footer-center"></div>' +
                '</div>';
        },

        statustest: function(msg) {
            var grid = this.mainGrid || this;
            if (typeof msg != 'undefined') {
                $('#grid_' + grid.name + '_footer').find('.w2ui-footer-left').html(msg);
            } else {
                // show number of selected
                var msgLeft = '';
                var sel = grid.getSelection();
                if (sel.length > 0) {
                    msgLeft = String(sel.length).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + ' ' + w2utils.lang('selected');
                    var tmp = sel[0];
                    if (typeof tmp == 'object') tmp = tmp.recid + ', ' + w2utils.lang('Column') + ': ' + tmp.column;
                    if (sel.length == 1) msgLeft = w2utils.lang('Record ID') + ': ' + tmp + ' ';
                }
                $('#grid_' + grid.name + '_footer .w2ui-footer-left').html(msgLeft);
                // toolbar
                if (grid.toolbar) {
                    if (sel.length == 1) grid.toolbar.enable('w2ui-edit');
                    else grid.toolbar.disable('w2ui-edit');
                    if (sel.length >= 1) grid.toolbar.enable('w2ui-delete');
                    else grid.toolbar.disable('w2ui-delete');
                }
            }
        },

        status: function(msg) {
            var grid = this.mainGrid || this;
            if (typeof msg != 'undefined') {
                $('#grid_' + grid.name + '_footer').find('.w2ui-footer-left').html(msg);
            } else {
                // show number of selected
                var msgLeft = '';
                var sel = this.getSelection();
                if (sel.length > 0) {
                    msgLeft = String(sel.length).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") + ' ' + w2utils.lang('selected');
                    var tmp = sel[0];
                    if (typeof tmp == 'object') tmp = tmp.recid + ', ' + w2utils.lang('Column') + ': ' + tmp.column;
                    if (sel.length == 1) msgLeft = w2utils.lang('Record ID') + ': ' + tmp + ' ';
                }
                $('#grid_' + grid.name + '_footer .w2ui-footer-left').html(msgLeft);
                // toolbar
                if (grid.toolbar) {
                    if (sel.length == 1) grid.toolbar.enable('w2ui-edit');
                    else grid.toolbar.disable('w2ui-edit');
                    if (sel.length >= 1) grid.toolbar.enable('w2ui-delete');
                    else grid.toolbar.disable('w2ui-delete');
                }
            }
        },

        lock: function(msg, showSpinner) {
            var box = $(this.box).find('> div:first-child');
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(box);
            setTimeout(function() {
                w2utils.lock.apply(window, args);
            }, 10);
        },

        unlock: function() {
            var box = this.box;
            setTimeout(function() {
                w2utils.unlock(box);
            }, 25); // needed timer so if server fast, it will not flash
        },

        stateSave: function(returnOnly) {
            if (!localStorage) return null;
            var state = {
                columns: [],
                show: $.extend({}, this.show),
                last: {
                    search: this.last.search,
                    multi: this.last.multi,
                    logic: this.last.logic,
                    caption: this.last.caption,
                    field: this.last.field,
                    scrollTop: this.last.scrollTop,
                    scrollLeft: this.last.scrollLeft
                },
                sortData: [],
                searchData: []
            };
            for (var i in this.columns) {
                var col = this.columns[i];
                state.columns.push({
                    field: col.field,
                    hidden: col.hidden,
                    size: col.size,
                    sizeCalculated: col.sizeCalculated,
                    sizeOriginal: col.sizeOriginal,
                    sizeType: col.sizeType
                });
            }
            for (var i in this.sortData) state.sortData.push($.extend({}, this.sortData[i]));

            for (var i in this.searchData) state.searchData.push($.extend({}, this.searchData[i]));
            // save into local storage
            if (returnOnly !== true) {
                // event before
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'stateSave',
                    target: this.name,
                    state: state
                });
                if (eventData.isCancelled === true) {
                    if (typeof callBack == 'function') callBack({
                        status: 'error',
                        message: 'Request aborted.'
                    });
                    return;
                }
                try {
                    var savedState = $.parseJSON(localStorage.w2ui || '{}');
                    if (!savedState) savedState = {};
                    if (!savedState.states) savedState.states = {};
                    savedState.states[this.name] = state;
                    localStorage.w2ui = JSON.stringify(savedState);
                } catch (e) {
                    delete localStorage.w2ui;
                    return null;
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
            return state;
        },

        stateRestore: function(newState) {
            var obj = this;
            if (!newState) {
                // read it from local storage
                try {
                    if (!localStorage) return false;
                    var tmp = $.parseJSON(localStorage.w2ui || '{}');
                    if (!tmp) tmp = {};
                    if (!tmp.states) tmp.states = {};
                    newState = tmp.states[this.name];
                } catch (e) {
                    delete localStorage.w2ui;
                    return null;
                }
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'stateRestore',
                target: this.name,
                state: newState
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            // default behavior
            if ($.isPlainObject(newState)) {
                $.extend(this.show, newState.show);
                $.extend(this.last, newState.last);
                var sTop = this.last.scrollTop;
                var sLeft = this.last.scrollLeft;
                for (var c in newState.columns) {
                    var tmp = newState.columns[c];
                    var col = this.getColumn(tmp.field);
                    if (col) $.extend(col, tmp);
                }
                this.sortData.splice(0, this.sortData.length);
                for (var c in newState.sortData) this.sortData.push(newState.sortData[c]);
                this.searchData.splice(0, this.searchData.length);
                for (var c in newState.searchData) this.searchData.push(newState.searchData[c]);
                // apply sort and search
                setTimeout(function() {
                    // needs timeout as records need to be populated
                    if (obj.sortData.length > 0) obj.localSort();
                    if (obj.searchData.length > 0) obj.localSearch();
                    obj.last.scrollTop = sTop;
                    obj.last.scrollLeft = sLeft;
                    obj.refresh();
                }, 1);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return true;
        },

        stateReset: function() {
            this.stateRestore(this.last.state);
            // remove from local storage
            if (localStorage) {
                try {
                    var tmp = $.parseJSON(localStorage.w2ui || '{}');
                    if (tmp.states && tmp.states[this.name]) {
                        delete tmp.states[this.name];
                    }
                    localStorage.w2ui = JSON.stringify(tmp);
                } catch (e) {
                    delete localStorage.w2ui;
                    return null;
                }
            }
        },

        parseField: function(obj, field) {
            var val = '';
            try { // need this to make sure no error in fields
                val = obj;
                var tmp = String(field).split('.');
                for (var i in tmp) {
                    val = val[tmp[i]];
                }
            } catch (event) {
                val = '';
            }
            return val;
        },

        prepareData: function() {
            // loops thru records and prepares date and time objects
            for (var r in this.records) {
                var rec = this.records[r];
                for (var c in this.columns) {
                    var column = this.columns[c];
                    if (rec[column.field] == null || typeof column.render != 'string') continue;
                    // number
                    if (['number', 'int', 'float', 'money', 'currency', 'percent'].indexOf(column.render.split(':')[0]) != -1) {
                        if (typeof rec[column.field] != 'number') rec[column.field] = parseFloat(rec[column.field]);
                    }
                    // date
                    if (['date', 'age'].indexOf(column.render.split(':')[0]) != -1) {
                        if (!rec[column.field + '_']) {
                            var dt = rec[column.field];
                            if (w2utils.isInt(dt)) dt = parseInt(dt);
                            rec[column.field + '_'] = new Date(dt);
                        }
                    }
                    // time
                    if (['time'].indexOf(column.render) != -1) {
                        if (w2utils.isTime(rec[column.field])) { // if string
                            var tmp = w2utils.isTime(rec[column.field], true);
                            var dt = new Date();
                            dt.setHours(tmp.hours, tmp.minutes, (tmp.seconds ? tmp.seconds : 0), 0); // sets hours, min, sec, mills
                            if (!rec[column.field + '_']) rec[column.field + '_'] = dt;
                        } else { // if date object
                            var tmp = rec[column.field];
                            if (w2utils.isInt(tmp)) tmp = parseInt(tmp);
                            var tmp = (tmp != null ? new Date(tmp) : new Date());
                            var dt = new Date();
                            dt.setHours(tmp.getHours(), tmp.getMinutes(), tmp.getSeconds(), 0); // sets hours, min, sec, mills
                            if (!rec[column.field + '_']) rec[column.field + '_'] = dt;
                        }
                    }
                }
            }
        },

        nextCell: function(col_ind, editable) {
            var check = col_ind + 1;
            if (this.columns.length == check) return null;
            if (editable === true) {
                var edit = this.columns[check].editable;
                if (this.columns[check].hidden || typeof edit == 'undefined' || (edit && ['checkbox', 'check'].indexOf(edit.type) != -1)) return this.nextCell(check, editable);
            }
            return check;
        },

        prevCell: function(col_ind, editable) {
            var check = col_ind - 1;
            if (check < 0) return null;
            if (editable === true) {
                var edit = this.columns[check].editable;
                if (this.columns[check].hidden || typeof edit == 'undefined' || (edit && ['checkbox', 'check'].indexOf(edit.type) != -1)) return this.prevCell(check, editable);
            }
            return check;
        },

        nextRow: function(ind) {
            if ((ind + 1 < this.records.length && this.last.searchIds.length == 0) // if there are more records
                || (this.last.searchIds.length > 0 && ind < this.last.searchIds[this.last.searchIds.length - 1])) {
                ind++;
                if (this.last.searchIds.length > 0) {
                    while (true) {
                        if ($.inArray(ind, this.last.searchIds) != -1 || ind > this.records.length) break;
                        ind++;
                    }
                }
                return ind;
            } else {
                return null;
            }
        },

        prevRow: function(ind) {
            if ((ind > 0 && this.last.searchIds.length == 0) // if there are more records
                || (this.last.searchIds.length > 0 && ind > this.last.searchIds[0])) {
                ind--;
                if (this.last.searchIds.length > 0) {
                    while (true) {
                        if ($.inArray(ind, this.last.searchIds) != -1 || ind < 0) break;
                        ind--;
                    }
                }
                return ind;
            } else {
                return null;
            }
        }
    };

    $.extend(w2grid.prototype, w2utils.event);
    w2obj.grid = w2grid;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2layout        - layout widget
 *        - $().w2layout    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils, w2toolbar, w2tabs
 *
 * == NICE TO HAVE ==
 *   - onResize for the panel
 *   - add more panel title positions (left=rotated, right=rotated, bottom)
 *   - bug: resizer is visible (and onHover) when panel is hidden.
 *   - bug: when you assign content before previous transition completed.
 *
 ************************************************************************/

(function() {
    var w2layout = function(options) {
        this.box = null; // DOM Element that holds the element
        this.name = null; // unique name for w2ui
        this.panels = [];
        this.tmp = {};

        this.padding = 1; // panel padding
        this.resizer = 4; // resizer width or height
        this.style = '';

        this.onShow = null;
        this.onHide = null;
        this.onResizing = null;
        this.onResizerClick = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;


        $.extend(true, this, w2obj.layout, options);
    };

    /* @const */
    var w2layout_panels = ['top', 'left', 'main', 'preview', 'right', 'bottom'];

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2layout = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2layout')) return;
            var panels = method.panels || [];
            var object = new w2layout(method);
            $.extend(object, {
                handlers: [],
                panels: []
            });
            // add defined panels
            for (var p = 0, len = panels.length; p < len; p++) {
                object.panels[p] = $.extend(true, {}, w2layout.prototype.panel, panels[p]);
                if ($.isPlainObject(object.panels[p].tabs) || $.isArray(object.panels[p].tabs)) initTabs(object, panels[p].type);
                if ($.isPlainObject(object.panels[p].toolbar) || $.isArray(object.panels[p].toolbar)) initToolbar(object, panels[p].type);
            }
            // add all other panels
            for (var p1 in w2layout_panels) {
                p1 = w2layout_panels[p1];
                if (object.get(p1) !== null) continue;
                object.panels.push($.extend(true, {}, w2layout.prototype.panel, {
                    type: p1,
                    hidden: (p1 !== 'main'),
                    size: 50
                }));
            }
            if ($(this).length > 0) {
                object.render($(this)[0]);
            }
            w2ui[object.name] = object;
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2layout');
        }

        function initTabs(object, panel, tabs) {
            var pan = object.get(panel);
            if (pan !== null && typeof tabs == 'undefined') tabs = pan.tabs;
            if (pan === null || tabs === null) return false;
            // instanciate tabs
            if ($.isArray(tabs)) tabs = {
                tabs: tabs
            };
            $().w2destroy(object.name + '_' + panel + '_tabs'); // destroy if existed
            pan.tabs = $().w2tabs($.extend({}, tabs, {
                owner: object,
                name: object.name + '_' + panel + '_tabs'
            }));
            pan.show.tabs = true;
            return true;
        }

        function initToolbar(object, panel, toolbar) {
            var pan = object.get(panel);
            if (pan !== null && typeof toolbar == 'undefined') toolbar = pan.toolbar;
            if (pan === null || toolbar === null) return false;
            // instanciate toolbar
            if ($.isArray(toolbar)) toolbar = {
                items: toolbar
            };
            $().w2destroy(object.name + '_' + panel + '_toolbar'); // destroy if existed
            pan.toolbar = $().w2toolbar($.extend({}, toolbar, {
                owner: object,
                name: object.name + '_' + panel + '_toolbar'
            }));
            pan.show.toolbar = true;
            return true;
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2layout.prototype = {
        // default setting for a panel
        panel: {
            type: null, // left, right, top, bottom
            title: '',
            size: 100, // width or height depending on panel name
            minSize: 20,
            maxSize: false,
            hidden: false,
            resizable: false,
            overflow: 'auto',
            style: '',
            content: '', // can be String or Object with .render(box) method
            tabs: null,
            toolbar: null,
            width: null, // read only
            height: null, // read only
            show: {
                toolbar: false,
                tabs: false
            },
            onRefresh: null,
            onShow: null,
            onHide: null,
            hideInFullScreen: false
        },

        // alias for content
        html: function(panel, data, transition) {
            return this.content(panel, data, transition);
        },

        content: function(panel, data, transition) {
            var obj = this;
            var p = this.get(panel);
            // if it is CSS panel
            if (panel == 'css') {
                $('#layout_' + obj.name + '_panel_css').html('<style>' + data + '</style>');
                return true;
            }
            if (p === null) return false;
            if (typeof data == 'undefined' || data === null) {
                return p.content;
            } else {
                if (data instanceof jQuery) {
                    console.log('ERROR: You can not pass jQuery object to w2layout.content() method');
                    return false;
                }
                var pname = '#layout_' + this.name + '_panel_' + p.type;
                var current = $(pname + '> .w2ui-panel-content');
                var panelTop = 0;
                if (current.length > 0) {
                    $(pname).scrollTop(0);
                    panelTop = $(current).position().top;
                }
                if (p.content === '') {
                    p.content = data;
                    this.refresh(panel);
                } else {
                    p.content = data;
                    if (!p.hidden) {
                        if (transition !== null && transition !== '' && typeof transition != 'undefined') {
                            // apply transition
                            var div1 = $(pname + '> .w2ui-panel-content');
                            div1.after('<div class="w2ui-panel-content new-panel" style="' + div1[0].style.cssText + '"></div>');
                            var div2 = $(pname + '> .w2ui-panel-content.new-panel');
                            div1.css('top', panelTop);
                            div2.css('top', panelTop);
                            if (typeof data == 'object') {
                                data.box = div2[0]; // do not do .render(box);
                                data.render();
                            } else {
                                div2.html(data);
                            }
                            w2utils.transition(div1[0], div2[0], transition, function() {
                                div1.remove();
                                div2.removeClass('new-panel');
                                div2.css('overflow', p.overflow);
                                // IE Hack
                                obj.resize();
                                if (window.navigator.userAgent.indexOf('MSIE') != -1) setTimeout(function() {
                                    obj.resize();
                                }, 100);
                            });
                        }
                    }
                    this.refresh(panel);
                }
            }
            // IE Hack
            obj.resize();
            if (window.navigator.userAgent.indexOf('MSIE') != -1) setTimeout(function() {
                obj.resize();
            }, 100);
            return true;
        },

        load: function(panel, url, transition, onLoad) {
            var obj = this;
            if (panel == 'css') {
                $.get(url, function(data, status, xhr) { // should always be $.get as it is template
                    obj.content(panel, xhr.responseText);
                    if (onLoad) onLoad();
                });
                return true;
            }
            if (this.get(panel) !== null) {
                $.get(url, function(data, status, xhr) { // should always be $.get as it is template
                    obj.content(panel, xhr.responseText, transition);
                    if (onLoad) onLoad();
                    // IE Hack
                    obj.resize();
                    if (window.navigator.userAgent.indexOf('MSIE') != -1) setTimeout(function() {
                        obj.resize();
                    }, 100);
                });
                return true;
            }
            return false;
        },

        sizeTo: function(panel, size) {
            var obj = this;
            var pan = obj.get(panel);
            if (pan === null) return false;
            // resize
            $(obj.box).find(' > div > .w2ui-panel').css({
                '-webkit-transition': '.2s',
                '-moz-transition': '.2s',
                '-ms-transition': '.2s',
                '-o-transition': '.2s'
            });
            setTimeout(function() {
                obj.set(panel, {
                    size: size
                });
            }, 1);
            // clean
            setTimeout(function() {
                $(obj.box).find(' > div > .w2ui-panel').css({
                    '-webkit-transition': '0s',
                    '-moz-transition': '0s',
                    '-ms-transition': '0s',
                    '-o-transition': '0s'
                });
                obj.resize();
            }, 500);
            return true;
        },

        show: function(panel, immediate) {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'show',
                target: panel,
                object: this.get(panel),
                immediate: immediate
            });
            if (eventData.isCancelled === true) return;

            var p = obj.get(panel);
            if (p === null) return false;
            p.hidden = false;
            if (immediate === true) {
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '1'
                });
                if (p.resizable) $('#layout_' + obj.name + '_resizer_' + panel).show();
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                obj.resize();
            } else {
                if (p.resizable) $('#layout_' + obj.name + '_resizer_' + panel).show();
                // resize
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '0'
                });
                $(obj.box).find(' > div > .w2ui-panel').css({
                    '-webkit-transition': '.2s',
                    '-moz-transition': '.2s',
                    '-ms-transition': '.2s',
                    '-o-transition': '.2s'
                });
                setTimeout(function() {
                    obj.resize();
                }, 1);
                // show
                setTimeout(function() {
                    $('#layout_' + obj.name + '_panel_' + panel).css({
                        'opacity': '1'
                    });
                }, 250);
                // clean
                setTimeout(function() {
                    $(obj.box).find(' > div > .w2ui-panel').css({
                        '-webkit-transition': '0s',
                        '-moz-transition': '0s',
                        '-ms-transition': '0s',
                        '-o-transition': '0s'
                    });
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    obj.resize();
                    $('#layout_' + obj.name + '_collapser_' + panel).hide();
                }, 500);
            }
            return true;
        },

        hide: function(panel, immediate) {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'hide',
                target: panel,
                object: this.get(panel),
                immediate: immediate
            });
            if (eventData.isCancelled === true) return;

            var p = obj.get(panel);
            if (p === null) return false;
            p.hidden = true;
            if (immediate === true) {
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '0'
                });
                $('#layout_' + obj.name + '_resizer_' + panel).hide();
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                obj.resize();
            } else {
                $('#layout_' + obj.name + '_resizer_' + panel).hide();
                // hide
                $(obj.box).find(' > div > .w2ui-panel').css({
                    '-webkit-transition': '.2s',
                    '-moz-transition': '.2s',
                    '-ms-transition': '.2s',
                    '-o-transition': '.2s'
                });
                $('#layout_' + obj.name + '_panel_' + panel).css({
                    'opacity': '0'
                });
                setTimeout(function() {
                    obj.resize();
                }, 1);
                // clean
                setTimeout(function() {
                    $(obj.box).find(' > div > .w2ui-panel').css({
                        '-webkit-transition': '0s',
                        '-moz-transition': '0s',
                        '-ms-transition': '0s',
                        '-o-transition': '0s'
                    });
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));

                    $('#layout_' + obj.name + '_collapser_' + panel).show();
                    //$('#layout_' + obj.name + '_collapser_title').text(p.collapseTitle).css('-webkit-transform', 'rotate(-90deg)');
                    obj.resize();
                    $('#layout_' + obj.name + '_panel_main').css('left', '15px');
                }, 500);
            }
            return true;
        },

        toggle: function(panel, immediate) {
            var p = this.get(panel);
            if (p === null) return false;
            if (p.hidden) return this.show(panel, immediate);
            else return this.hide(panel, immediate);
        },

        set: function(panel, options) {
            var obj = this.get(panel, true);
            if (obj === null) return false;
            $.extend(this.panels[obj], options);
            if (typeof options['content'] != 'undefined') this.refresh(panel); // refresh only when content changed
            this.resize(); // resize is needed when panel size is changed
            return true;
        },

        setTitle: function(panel, title) {
            var obj = this.get(panel, true);
            if (obj === null) return false;
            var p = this.panels[obj];
            var pname = '#layout_' + this.name + '_panel_' + p.type;
            var tmp = $(this.box).find(pname + '> .w2ui-panel-title');
            if (title) {
                tmp.html(title).show();
            } else {
                tmp.html('').hide();
            }
        },

        get: function(panel, returnIndex) {
            for (var p in this.panels) {
                if (this.panels[p].type == panel) {
                    if (returnIndex === true) return p;
                    else return this.panels[p];
                }
            }
            return null;
        },

        el: function(panel) {
            var el = $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-content');
            if (el.length != 1) return null;
            return el[0];
        },

        hideToolbar: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.toolbar = false;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-toolbar').hide();
            this.resize();
        },

        showToolbar: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.toolbar = true;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-toolbar').show();
            this.resize();
        },

        toggleToolbar: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            if (pan.show.toolbar) this.hideToolbar(panel);
            else this.showToolbar(panel);
        },

        hideTabs: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.tabs = false;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-tabs').hide();
            this.resize();
        },

        showTabs: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            pan.show.tabs = true;
            $('#layout_' + this.name + '_panel_' + panel + '> .w2ui-panel-tabs').show();
            this.resize();
        },

        toggleTabs: function(panel) {
            var pan = this.get(panel);
            if (!pan) return;
            if (pan.show.tabs) this.hideTabs(panel);
            else this.showTabs(panel);
        },

        render: function(box) {
            var obj = this;
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            var time = (new Date()).getTime();
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'render',
                target: obj.name,
                box: box
            });
            if (eventData.isCancelled === true) return;

            if (typeof box != 'undefined' && box !== null) {
                if ($(obj.box).find('#layout_' + obj.name + '_panel_main').length > 0) {
                    $(obj.box)
                        .removeAttr('name')
                        .removeClass('w2ui-layout')
                        .html('');
                }
                obj.box = box;
            }
            if (!obj.box) return false;
            $(obj.box)
                .attr('name', obj.name)
                .addClass('w2ui-layout')
                .html('<div></div>');
            if ($(obj.box).length > 0) $(obj.box)[0].style.cssText += obj.style;
            // create all panels
            for (var p1 in w2layout_panels) {
                p1 = w2layout_panels[p1];
                var pan = obj.get(p1);
                var html = '<div id="layout_' + obj.name + '_panel_' + p1 + '" class="w2ui-panel">' +
                    '    <div class="w2ui-panel-mini-toolbar"></div>' +
                    '    <div class="w2ui-panel-title"></div>' +
                    '    <div class="w2ui-panel-tabs"></div>' +
                    '    <div class="w2ui-panel-toolbar"></div>' +
                    '    <div class="w2ui-panel-content"></div>' +
                    '</div>' +
                    '<div id="layout_' + obj.name + '_resizer_' + p1 + '" class="w2ui-resizer"></div>' +
                    '<div id="layout_' + obj.name + '_collapser_' + p1 + '" class="w2ui-collapsed"></div>';
                $(obj.box).find(' > div').append(html);
                // tabs are rendered in refresh()
            }
            $(obj.box).find(' > div')
                .append('<div id="layout_' + obj.name + '_panel_css" style="position: absolute; top: 10000px;"></div');
            obj.refresh(); // if refresh is not called here, the layout will not be available right after initialization
            // process event
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // reinit events
            setTimeout(function() { // needed this timeout to allow browser to render first if there are tabs or toolbar
                initEvents();
                obj.resize();
            }, 0);
            return (new Date()).getTime() - time;

            function initEvents() {
                obj.tmp.events = {
                    resize: function(event) {
                        w2ui[obj.name].resize();
                    },
                    resizeStart: resizeStart,
                    mouseMove: resizeMove,
                    mouseUp: resizeStop
                };
                $(window).on('resize', obj.tmp.events.resize);
            }

            function resizeStart(type, evnt) {
                if (!obj.box) return;
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                $(document).off('mousemove', obj.tmp.events.mouseMove).on('mousemove', obj.tmp.events.mouseMove);
                $(document).off('mouseup', obj.tmp.events.mouseUp).on('mouseup', obj.tmp.events.mouseUp);
                obj.tmp.resize = {
                    type: type,
                    x: evnt.screenX,
                    y: evnt.screenY,
                    diff_x: 0,
                    diff_y: 0,
                    value: 0
                };
                // lock all panels
                for (var p1 in w2layout_panels) {
                    p1 = w2layout_panels[p1];
                    obj.lock(p1, {
                        opacity: 0
                    });
                }
                if (type == 'left' || type == 'right') {
                    obj.tmp.resize.value = parseInt($('#layout_' + obj.name + '_resizer_' + type)[0].style.left);
                }
                if (type == 'top' || type == 'preview' || type == 'bottom') {
                    obj.tmp.resize.value = parseInt($('#layout_' + obj.name + '_resizer_' + type)[0].style.top);
                }
            }

            function resizeStop(evnt) {
                if (!obj.box) return;
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                $(document).off('mousemove', obj.tmp.events.mouseMove);
                $(document).off('mouseup', obj.tmp.events.mouseUp);
                if (typeof obj.tmp.resize == 'undefined') return;
                // unlock all panels
                for (var p1 in w2layout_panels) {
                    obj.unlock(w2layout_panels[p1]);
                }
                // set new size
                if (obj.tmp.diff_x !== 0 || obj.tmp.resize.diff_y !== 0) { // only recalculate if changed
                    var ptop = obj.get('top');
                    var pbottom = obj.get('bottom');
                    var panel = obj.get(obj.tmp.resize.type);
                    var height = parseInt($(obj.box).height());
                    var width = parseInt($(obj.box).width());
                    var str = String(panel.size);
                    var ns, nd;
                    switch (obj.tmp.resize.type) {
                        case 'top':
                            ns = parseInt(panel.sizeCalculated) + obj.tmp.resize.diff_y;
                            nd = 0;
                            break;
                        case 'bottom':
                            ns = parseInt(panel.sizeCalculated) - obj.tmp.resize.diff_y;
                            nd = 0;
                            break;
                        case 'preview':
                            ns = parseInt(panel.sizeCalculated) - obj.tmp.resize.diff_y;
                            nd = (ptop && !ptop.hidden ? ptop.sizeCalculated : 0) +
                                (pbottom && !pbottom.hidden ? pbottom.sizeCalculated : 0);
                            break;
                        case 'left':
                            ns = parseInt(panel.sizeCalculated) + obj.tmp.resize.diff_x;
                            nd = 0;
                            break;
                        case 'right':
                            ns = parseInt(panel.sizeCalculated) - obj.tmp.resize.diff_x;
                            nd = 0;
                            break;
                    }
                    // set size
                    if (str.substr(str.length - 1) == '%') {
                        panel.size = Math.floor(ns * 100 /
                            (panel.type == 'left' || panel.type == 'right' ? width : height - nd) * 100) / 100 + '%';
                    } else {
                        panel.size = ns;
                    }
                    obj.resize();
                }
                $('#layout_' + obj.name + '_resizer_' + obj.tmp.resize.type).removeClass('active');
                delete obj.tmp.resize;
            }

            function resizeMove(evnt) {
                if (!obj.box) return;
                if (!evnt) evnt = window.event;
                if (typeof obj.tmp.resize == 'undefined') return;
                var panel = obj.get(obj.tmp.resize.type);
                // event before
                var tmp = obj.tmp.resize;
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'resizing',
                    target: obj.name,
                    object: panel,
                    originalEvent: evnt,
                    panel: tmp ? tmp.type : 'all',
                    diff_x: tmp ? tmp.diff_x : 0,
                    diff_y: tmp ? tmp.diff_y : 0
                });
                if (eventData.isCancelled === true) return;

                var p = $('#layout_' + obj.name + '_resizer_' + tmp.type);
                var resize_x = (evnt.screenX - tmp.x);
                var resize_y = (evnt.screenY - tmp.y);
                var mainPanel = obj.get('main');

                if (!p.hasClass('active')) p.addClass('active');

                switch (tmp.type) {
                    case 'left':
                        if (panel.minSize - resize_x > panel.width) {
                            resize_x = panel.minSize - panel.width;
                        }
                        if (panel.maxSize && (panel.width + resize_x > panel.maxSize)) {
                            resize_x = panel.maxSize - panel.width;
                        }
                        if (mainPanel.minSize + resize_x > mainPanel.width) {
                            resize_x = mainPanel.width - mainPanel.minSize;
                        }
                        break;

                    case 'right':
                        if (panel.minSize + resize_x > panel.width) {
                            resize_x = panel.width - panel.minSize;
                        }
                        if (panel.maxSize && (panel.width - resize_x > panel.maxSize)) {
                            resize_x = panel.width - panel.maxSize;
                        }
                        if (mainPanel.minSize - resize_x > mainPanel.width) {
                            resize_x = mainPanel.minSize - mainPanel.width;
                        }
                        break;

                    case 'top':
                        if (panel.minSize - resize_y > panel.height) {
                            resize_y = panel.minSize - panel.height;
                        }
                        if (panel.maxSize && (panel.height + resize_y > panel.maxSize)) {
                            resize_y = panel.maxSize - panel.height;
                        }
                        if (mainPanel.minSize + resize_y > mainPanel.height) {
                            resize_y = mainPanel.height - mainPanel.minSize;
                        }
                        break;

                    case 'preview':
                    case 'bottom':
                        if (panel.minSize + resize_y > panel.height) {
                            resize_y = panel.height - panel.minSize;
                        }
                        if (panel.maxSize && (panel.height - resize_y > panel.maxSize)) {
                            resize_y = panel.height - panel.maxSize;
                        }
                        if (mainPanel.minSize - resize_y > mainPanel.height) {
                            resize_y = mainPanel.minSize - mainPanel.height;
                        }
                        break;
                }
                tmp.diff_x = resize_x;
                tmp.diff_y = resize_y;

                switch (tmp.type) {
                    case 'top':
                    case 'preview':
                    case 'bottom':
                        tmp.diff_x = 0;
                        if (p.length > 0) p[0].style.top = (tmp.value + tmp.diff_y) + 'px';
                        break;

                    case 'left':
                    case 'right':
                        tmp.diff_y = 0;
                        if (p.length > 0) p[0].style.left = (tmp.value + tmp.diff_x) + 'px';
                        break;
                }
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        refresh: function(panel) {
            var obj = this;
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (typeof panel == 'undefined') panel = null;
            var time = (new Date()).getTime();
            // event before
            var eventData = obj.trigger({
                phase: 'before',
                type: 'refresh',
                target: (typeof panel != 'undefined' ? panel : obj.name),
                object: obj.get(panel)
            });
            if (eventData.isCancelled === true) return;
            // obj.unlock(panel);
            if (typeof panel == 'string') {
                var p = obj.get(panel);
                if (p === null) return;
                var pname = '#layout_' + obj.name + '_panel_' + p.type;
                var rname = '#layout_' + obj.name + '_resizer_' + p.type;
                if (p.minibar) {
                    $(pname).find('.w2ui-panel-mini-toolbar').html('<i class="w2ui-icon-pin" onclick="w2ui[\'' + obj.name + '\'].toggle(\'' + p.type + '\')"></i>').show();
                } else {
                    $(pname).find('.w2ui-panel-mini-toolbar').hide();
                }
                // apply properties to the panel
                $(pname).css({
                    display: p.hidden ? 'none' : 'block'
                });
                if (p.resizable) $(rname).show();
                else $(rname).hide();
                // insert content
                if (typeof p.content == 'object' && typeof p.content.render === 'function') {
                    p.content.box = $(pname + '> .w2ui-panel-content')[0];
                    setTimeout(function() {
                        // need to remove unnecessary classes
                        if ($(pname + '> .w2ui-panel-content').length > 0) {
                            $(pname + '> .w2ui-panel-content')
                                .removeClass()
                                .removeAttr('name')
                                .addClass('w2ui-panel-content')
                                .css('overflow', p.overflow)[0].style.cssText += ';' + p.style;
                        }
                        p.content.render(); // do not do .render(box);
                    }, 1);
                } else {
                    // need to remove unnecessary classes
                    if ($(pname + '> .w2ui-panel-content').length > 0) {
                        $(pname + '> .w2ui-panel-content')
                            .removeClass()
                            .removeAttr('name')
                            .addClass('w2ui-panel-content')
                            .html(p.content)
                            .css('overflow', p.overflow)[0].style.cssText += ';' + p.style;
                    }
                }
                if (p.minibar) {
                    if ($(pname + '> .w2ui-panel-content').length > 0) {
                        $(pname + '> .w2ui-panel-content').css('top', '15px');
                    }
                }
                // if there are tabs and/or toolbar - render it
                var tmp = $(obj.box).find(pname + '> .w2ui-panel-tabs');

                if (p.show.tabs) {
                    if (tmp.find('[name=' + p.tabs.name + ']').length === 0 && p.tabs !== null) tmp.w2render(p.tabs);
                    else p.tabs.refresh();
                } else {
                    tmp.html('').removeClass('w2ui-tabs').hide();
                }
                tmp = $(obj.box).find(pname + '> .w2ui-panel-toolbar');
                if (p.show.toolbar) {
                    if (tmp.find('[name=' + p.toolbar.name + ']').length === 0 && p.toolbar !== null) tmp.w2render(p.toolbar);
                    else p.toolbar.refresh();
                } else {
                    tmp.html('').removeClass('w2ui-toolbar').hide();
                }
                // show title
                tmp = $(obj.box).find(pname + '> .w2ui-panel-title');
                if (p.title) {
                    tmp.html(p.title).show();
                } else {
                    tmp.html('').hide();
                }
            } else {
                if ($('#layout_' + obj.name + '_panel_main').length == 0) {
                    obj.render();
                    return;
                }
                obj.resize();
                // refresh all of them
                for (var p1 in this.panels) {
                    obj.refresh(this.panels[p1].type);
                }
            }
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        resize: function() {
            // if (window.getSelection) window.getSelection().removeAllRanges();    // clear selection
            if (!this.box) return false;
            var time = (new Date()).getTime();
            // event before
            var tmp = this.tmp.resize;
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name,
                panel: tmp ? tmp.type : 'all',
                diff_x: tmp ? tmp.diff_x : 0,
                diff_y: tmp ? tmp.diff_y : 0
            });
            if (eventData.isCancelled === true) return;
            if (this.padding < 0) this.padding = 0;

            // layout itself
            var width = parseInt($(this.box).width());
            var height = parseInt($(this.box).height());
            $(this.box).find(' > div').css({
                width: width + 'px',
                height: height + 'px'
            });
            var obj = this;
            // panels
            var pmain = this.get('main');
            var pprev = this.get('preview');
            var pleft = this.get('left');
            var pright = this.get('right');
            var ptop = this.get('top');
            var pbottom = this.get('bottom');
            var smain = true; // main always on
            var sprev = (pprev !== null && pprev.hidden !== true ? true : false);
            var sleft = (pleft !== null && pleft.hidden !== true ? true : false);
            var sright = (pright !== null && pright.hidden !== true ? true : false);
            var stop = (ptop !== null && ptop.hidden !== true ? true : false);
            var sbottom = (pbottom !== null && pbottom.hidden !== true ? true : false);
            var l, t, w, h, e;
            // calculate %
            for (var p in w2layout_panels) {
                p = w2layout_panels[p];
                if (p === 'main') continue;
                var tmp = this.get(p);
                if (!tmp) continue;
                var str = String(tmp.size || 0);
                if (str.substr(str.length - 1) == '%') {
                    var tmph = height;
                    if (tmp.type == 'preview') {
                        tmph = tmph -
                            (ptop && !ptop.hidden ? ptop.sizeCalculated : 0) -
                            (pbottom && !pbottom.hidden ? pbottom.sizeCalculated : 0);
                    }
                    tmp.sizeCalculated = parseInt((tmp.type == 'left' || tmp.type == 'right' ? width : tmph) * parseFloat(tmp.size) / 100);
                } else {
                    tmp.sizeCalculated = parseInt(tmp.size);
                }
                tmp.sizeCalculated = Math.max(tmp.sizeCalculated, parseInt(tmp.minSize));
            }
            // top if any
            if (ptop !== null && ptop.hidden !== true) {
                l = 0;
                t = 0;
                w = width;
                h = ptop.sizeCalculated;
                $('#layout_' + this.name + '_panel_top').css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                ptop.width = w;
                ptop.height = h;
                // resizer
                if (ptop.resizable) {
                    t = ptop.sizeCalculated - (this.padding === 0 ? this.resizer : 0);
                    h = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_top').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ns-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'top',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('top', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_top').hide();
            }
            // left if any
            if (pleft !== null && pleft.hidden !== true) {
                l = 0;
                t = 0 + (stop ? ptop.sizeCalculated + this.padding : 0);
                if (pleft.minibar) t = t + 15;
                w = pleft.sizeCalculated;
                h = height - (stop ? ptop.sizeCalculated + this.padding : 0) -
                    (sbottom ? pbottom.sizeCalculated + this.padding : 0);
                e = $('#layout_' + this.name + '_panel_left');
                if (window.navigator.userAgent.indexOf('MSIE') != -1 && e.length > 0 && e[0].clientHeight < e[0].scrollHeight) w += 17; // IE hack
                e.css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pleft.width = w;
                pleft.height = h;
                if (pleft.minibar) {
                    $('#layout_' + this.name + '_collapser_left').html('<div id="layout_' + this.name + '_collapser_title" class="w2ui-collapsed-title"><i class="w2ui-icon-send"></i></div>').css({
                        'display': 'none',
                        'left': '0px',
                        'top': (t - 15) + 'px',
                        'width': '15px',
                        'height': h + 'px'
                    }).off('mousedown').on('mousedown', function(event) {
                        w2ui[obj.name].show(pleft.type);
                    });
                }
                // resizer
                if (pleft.resizable) {
                    l = pleft.sizeCalculated - (this.padding === 0 ? this.resizer : 0);
                    w = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_left').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ew-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'left',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('left', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));

                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_left').hide();
                $('#layout_' + this.name + '_resizer_left').hide();
            }
            // right if any
            if (pright !== null && pright.hidden !== true) {
                l = width - pright.sizeCalculated;
                t = 0 + (stop ? ptop.sizeCalculated + this.padding : 0);
                w = pright.sizeCalculated;
                h = height - (stop ? ptop.sizeCalculated + this.padding : 0) -
                    (sbottom ? pbottom.sizeCalculated + this.padding : 0);
                $('#layout_' + this.name + '_panel_right').css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pright.width = w;
                pright.height = h;
                // resizer
                if (pright.resizable) {
                    l = l - this.padding;
                    w = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_right').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ew-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'right',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('right', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_right').hide();
            }
            // bottom if any
            if (pbottom !== null && pbottom.hidden !== true) {
                l = 0;
                t = height - pbottom.sizeCalculated;
                w = width;
                h = pbottom.sizeCalculated;
                $('#layout_' + this.name + '_panel_bottom').css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pbottom.width = w;
                pbottom.height = h;
                // resizer
                if (pbottom.resizable) {
                    t = t - (this.padding === 0 ? 0 : this.padding);
                    h = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_bottom').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ns-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'bottom',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('bottom', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_bottom').hide();
            }
            // main - always there
            l = 0 + (sleft ? pleft.sizeCalculated + this.padding : 0);
            t = 0 + (stop ? ptop.sizeCalculated + this.padding : 0);
            w = width - (sleft ? pleft.sizeCalculated + this.padding : 0) -
                (sright ? pright.sizeCalculated + this.padding : 0);
            h = height - (stop ? ptop.sizeCalculated + this.padding : 0) -
                (sbottom ? pbottom.sizeCalculated + this.padding : 0) -
                (sprev ? pprev.sizeCalculated + this.padding : 0);
            e = $('#layout_' + this.name + '_panel_main');
            if (window.navigator.userAgent.indexOf('MSIE') != -1 && e.length > 0 && e[0].clientHeight < e[0].scrollHeight) w += 17; // IE hack
            e.css({
                'display': 'block',
                'left': l + 'px',
                'top': t + 'px',
                'width': w + 'px',
                'height': h + 'px'
            });
            pmain.width = w;
            pmain.height = h;

            // preview if any
            if (pprev !== null && pprev.hidden !== true) {
                l = 0 + (sleft ? pleft.sizeCalculated + this.padding : 0);
                t = height - (sbottom ? pbottom.sizeCalculated + this.padding : 0) - pprev.sizeCalculated;
                w = width - (sleft ? pleft.sizeCalculated + this.padding : 0) -
                    (sright ? pright.sizeCalculated + this.padding : 0);
                h = pprev.sizeCalculated;
                e = $('#layout_' + this.name + '_panel_preview');
                if (window.navigator.userAgent.indexOf('MSIE') != -1 && e.length > 0 && e[0].clientHeight < e[0].scrollHeight) w += 17; // IE hack
                e.css({
                    'display': 'block',
                    'left': l + 'px',
                    'top': t + 'px',
                    'width': w + 'px',
                    'height': h + 'px'
                }).show();
                pprev.width = w;
                pprev.height = h;
                // resizer
                if (pprev.resizable) {
                    t = t - (this.padding === 0 ? 0 : this.padding);
                    h = (this.resizer > this.padding ? this.resizer : this.padding);
                    $('#layout_' + this.name + '_resizer_preview').show().css({
                        'display': 'block',
                        'left': l + 'px',
                        'top': t + 'px',
                        'width': w + 'px',
                        'height': h + 'px',
                        'cursor': 'ns-resize'
                    }).off('mousedown').on('mousedown', function(event) {
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'resizerClick',
                            target: 'preview',
                            originalEvent: event
                        });
                        if (eventData.isCancelled === true) return;
                        // default action
                        w2ui[obj.name].tmp.events.resizeStart('preview', event);
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        return false;
                    });
                }
            } else {
                $('#layout_' + this.name + '_panel_preview').hide();
            }

            // display tabs and toolbar if needed
            for (var p1 in w2layout_panels) {
                p1 = w2layout_panels[p1];
                var pan = this.get(p1);
                var tmp2 = '#layout_' + this.name + '_panel_' + p1 + ' > .w2ui-panel-';
                var tabHeight = 0;
                if (pan) {
                    if (pan.title) {
                        tabHeight += w2utils.getSize($(tmp2 + 'title').css({
                            top: tabHeight + 'px',
                            display: 'block'
                        }), 'height');
                    }
                    if (pan.show.tabs) {
                        if (pan.tabs !== null && w2ui[this.name + '_' + p1 + '_tabs']) w2ui[this.name + '_' + p1 + '_tabs'].resize();
                        tabHeight += w2utils.getSize($(tmp2 + 'tabs').css({
                            top: tabHeight + 'px',
                            display: 'block'
                        }), 'height');
                    }
                    if (pan.show.toolbar) {
                        if (pan.toolbar !== null && w2ui[this.name + '_' + p1 + '_toolbar']) w2ui[this.name + '_' + p1 + '_toolbar'].resize();
                        tabHeight += w2utils.getSize($(tmp2 + 'toolbar').css({
                            top: tabHeight + 'px',
                            display: 'block'
                        }), 'height');
                    }
                }
                $(tmp2 + 'content').css({
                    display: 'block'
                }).css({
                    top: tabHeight + 'px'
                });
            }
            // send resize to all objects
            clearTimeout(this._resize_timer);
            this._resize_timer = setTimeout(function() {
                for (var e in w2ui) {
                    if (typeof w2ui[e].resize == 'function') {
                        // sent to all none-layouts
                        if (w2ui[e].panels == 'undefined') w2ui[e].resize();
                        // only send to nested layouts
                        var parent = $(w2ui[e].box).parents('.w2ui-layout');
                        if (parent.length > 0 && parent.attr('name') == obj.name) w2ui[e].resize();
                    }
                }
            }, 100);
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'destroy',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            if (typeof w2ui[this.name] == 'undefined') return false;
            // clean up
            if ($(this.box).find('#layout_' + this.name + '_panel_main').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-layout')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            if (this.tmp.events && this.tmp.events.resize) $(window).off('resize', this.tmp.events.resize);
            return true;
        },

        lock: function(panel, msg, showSpinner) {
            if (w2layout_panels.indexOf(panel) == -1) {
                console.log('ERROR: First parameter needs to be the a valid panel name.');
                return;
            }
            var args = Array.prototype.slice.call(arguments, 0);
            args[0] = '#layout_' + this.name + '_panel_' + panel;
            w2utils.lock.apply(window, args);
        },

        unlock: function(panel) {
            if (w2layout_panels.indexOf(panel) == -1) {
                console.log('ERROR: First parameter needs to be the a valid panel name.');
                return;
            }
            var nm = '#layout_' + this.name + '_panel_' + panel;
            w2utils.unlock(nm);
        }
    };

    $.extend(w2layout.prototype, w2utils.event);
    w2obj.layout = w2layout;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2popup      - popup widget
 *        - $().w2popup  - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - transition should include title, body and buttons, not just body
 *
 ************************************************************************/

var w2popup = {};

(function() {

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2popup = function(method, options) {
        if (typeof method === 'undefined') {
            options = {};
            method = 'open';
        }
        if ($.isPlainObject(method)) {
            options = method;
            method = 'open';
        }
        method = method.toLowerCase();
        if (method === 'load' && typeof options === 'string') {
            options = $.extend({
                url: options
            }, arguments.length > 2 ? arguments[2] : {});
        }
        if (method === 'open' && options.url != null) method = 'load';
        options = options || {};
        // load options from markup
        var dlgOptions = {};
        if ($(this).length > 0) {
            if ($(this).find('div[rel=title], div[rel=body], div[rel=buttons]').length > 0) {
                if ($(this).find('div[rel=title]').length > 0) {
                    dlgOptions['title'] = $(this).find('div[rel=title]').html();
                }
                if ($(this).find('div[rel=body]').length > 0) {
                    dlgOptions['body'] = $(this).find('div[rel=body]').html();
                    dlgOptions['style'] = $(this).find('div[rel=body]')[0].style.cssText;
                }
                if ($(this).find('div[rel=buttons]').length > 0) {
                    dlgOptions['buttons'] = $(this).find('div[rel=buttons]').html();
                }
            } else {
                dlgOptions['title'] = '&nbsp;';
                dlgOptions['body'] = $(this).html();
            }
            if (parseInt($(this).css('width')) != 0) dlgOptions['width'] = parseInt($(this).css('width'));
            if (parseInt($(this).css('height')) != 0) dlgOptions['height'] = parseInt($(this).css('height'));
        }
        // show popup
        return w2popup[method]($.extend({}, dlgOptions, options));
    };

    // ====================================================
    // -- Implementation of core functionality (SINGELTON)

    w2popup = {
        defaults: {
            title: '',
            body: '',
            buttons: '',
            style: '',
            color: '#000',
            opacity: 0.4,
            speed: 0.3,
            modal: false,
            maximized: false,
            keyboard: true, // will close popup on esc if not modal
            width: 500,
            height: 300,
            showClose: true,
            showMax: false,
            transition: null
        },
        status: 'closed', // string that describes current status
        handlers: [],
        onOpen: null,
        onClose: null,
        onMax: null,
        onMin: null,
        onToggle: null,
        onKeydown: null,

        open: function(options) {
            var obj = this;
            if (w2popup.status == 'closing') {
                setTimeout(function() {
                    obj.open.call(obj, options);
                }, 100);
                return;
            }
            // get old options and merge them
            var old_options = $('#w2ui-popup').data('options');
            var options = $.extend({}, this.defaults, old_options, {
                title: '',
                body: '',
                buttons: ''
            }, options, {
                maximized: false
            });
            // need timer because popup might not be open
            setTimeout(function() {
                $('#w2ui-popup').data('options', options);
            }, 100);
            // if new - reset event handlers
            if ($('#w2ui-popup').length == 0) {
                w2popup.handlers = [];
                w2popup.onMax = null;
                w2popup.onMin = null;
                w2popup.onToggle = null;
                w2popup.onOpen = null;
                w2popup.onClose = null;
                w2popup.onKeydown = null;
            }
            if (options.onOpen) w2popup.onOpen = options.onOpen;
            if (options.onClose) w2popup.onClose = options.onClose;
            if (options.onMax) w2popup.onMax = options.onMax;
            if (options.onMin) w2popup.onMin = options.onMin;
            if (options.onToggle) w2popup.onToggle = options.onToggle;
            if (options.onKeydown) w2popup.onKeydown = options.onKeydown;

            if (window.innerHeight == undefined) {
                var width = document.documentElement.offsetWidth;
                var height = document.documentElement.offsetHeight;
                if (w2utils.engine === 'IE7') {
                    width += 21;
                    height += 4;
                }
            } else {
                var width = window.innerWidth;
                var height = window.innerHeight;
            }
            if (parseInt(width) - 10 < parseInt(options.width)) options.width = parseInt(width) - 10;
            if (parseInt(height) - 10 < parseInt(options.height)) options.height = parseInt(height) - 10;
            var top = parseInt(((parseInt(height) - parseInt(options.height)) / 2) * 0.6);
            var left = parseInt((parseInt(width) - parseInt(options.width)) / 2);
            // check if message is already displayed
            if ($('#w2ui-popup').length == 0) {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: false
                });
                if (eventData.isCancelled === true) return;
                w2popup.status = 'opening';
                // output message
                w2popup.lockScreen(options);
                var btn = '';
                if (options.showClose) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-close" onmousedown="event.stopPropagation()" onclick="w2popup.close()">Close</div>';
                }
                if (options.showMax) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-max" onmousedown="event.stopPropagation()" onclick="w2popup.toggle()">Max</div>';
                }
                var msg = '<div id="w2ui-popup" class="w2ui-popup" style="opacity: 0; left: ' + left + 'px; top: ' + top + 'px;' +
                    '     width: ' + parseInt(options.width) + 'px; height: ' + parseInt(options.height) + 'px; ' +
                    '    -webkit-transform: scale(0.8); -moz-transform: scale(0.8); -ms-transform: scale(0.8); -o-transform: scale(0.8); "' +
                    '>' +
                    '   <div class="w2ui-msg-title" style="' + (options.title == '' ? 'display: none' : '') + '">' + btn + options.title + '</div>' +
                    '   <div class="w2ui-box1" style="' + (options.title == '' ? 'top: 0px !important;' : '') +
                    (options.buttons == '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body' + (!options.title != '' ? ' w2ui-msg-no-title' : '') +
                    (!options.buttons != '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '">' + options.body + '</div>' +
                    '   </div>' +
                    '   <div class="w2ui-box2" style="' + (options.title == '' ? 'top: 0px !important;' : '') +
                    (options.buttons == '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body' + (!options.title != '' ? ' w2ui-msg-no-title' : '') +
                    (!options.buttons != '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '"></div>' +
                    '       </div>' +
                    '   <div class="w2ui-msg-buttons" style="' + (options.buttons == '' ? 'display: none' : '') + '">' + options.buttons + '</div>' +
                    '</div>';
                $('body').append(msg);
                // allow element to render
                setTimeout(function() {
                    $('#w2ui-popup .w2ui-box2').hide();
                    $('#w2ui-popup').css({
                        '-webkit-transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                        '-webkit-transform': 'scale(1)',
                        '-moz-transition': options.speed + 's opacity, ' + options.speed + 's -moz-transform',
                        '-moz-transform': 'scale(1)',
                        '-ms-transition': options.speed + 's opacity, ' + options.speed + 's -ms-transform',
                        '-ms-transform': 'scale(1)',
                        '-o-transition': options.speed + 's opacity, ' + options.speed + 's -o-transform',
                        '-o-transform': 'scale(1)',
                        'opacity': '1'
                    });
                }, 1);
                // clean transform
                setTimeout(function() {
                    $('#w2ui-popup').css({
                        '-webkit-transform': '',
                        '-moz-transform': '',
                        '-ms-transform': '',
                        '-o-transform': ''
                    });
                    // event after
                    w2popup.status = 'open';
                    setTimeout(function() {
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }, 100);
                }, options.speed * 1000);
            } else {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: true
                });
                if (eventData.isCancelled === true) return;
                // check if size changed
                w2popup.status = 'opening';
                if (typeof old_options == 'undefined' || old_options['width'] != options['width'] || old_options['height'] != options['height']) {
                    w2popup.resize(options.width, options.height);
                }
                if (typeof old_options != 'undefined') {
                    options.prevSize = options.width + ':' + options.height;
                    options.maximized = old_options.maximized;
                }
                // show new items
                var body = $('#w2ui-popup .w2ui-box2 > .w2ui-msg-body').html(options.body);
                if (body.length > 0) body[0].style.cssText = options.style;
                if (options.buttons != '') {
                    $('#w2ui-popup .w2ui-msg-buttons').show().html(options.buttons);
                    $('#w2ui-popup .w2ui-msg-body').removeClass('w2ui-msg-no-buttons');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('bottom', '');
                } else {
                    $('#w2ui-popup .w2ui-msg-buttons').hide().html('');
                    $('#w2ui-popup .w2ui-msg-body').addClass('w2ui-msg-no-buttons');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('bottom', '0px');
                }
                if (options.title != '') {
                    $('#w2ui-popup .w2ui-msg-title').show().html(
                        (options.showClose ? '<div class="w2ui-msg-button w2ui-msg-close" onmousedown="event.stopPropagation()" onclick="w2popup.close()">Close</div>' : '') +
                        (options.showMax ? '<div class="w2ui-msg-button w2ui-msg-max" onmousedown="event.stopPropagation()" onclick="w2popup.toggle()">Max</div>' : '') +
                        options.title);
                    $('#w2ui-popup .w2ui-msg-body').removeClass('w2ui-msg-no-title');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('top', '');
                } else {
                    $('#w2ui-popup .w2ui-msg-title').hide().html('');
                    $('#w2ui-popup .w2ui-msg-body').addClass('w2ui-msg-no-title');
                    $('#w2ui-popup .w2ui-box1, #w2ui-popup .w2ui-box2').css('top', '0px');
                }
                // transition
                var div_old = $('#w2ui-popup .w2ui-box1')[0];
                var div_new = $('#w2ui-popup .w2ui-box2')[0];
                w2utils.transition(div_old, div_new, options.transition);
                div_new.className = 'w2ui-box1';
                div_old.className = 'w2ui-box2';
                $(div_new).addClass('w2ui-current-box');
                // remove max state
                $('#w2ui-popup').data('prev-size', null);
                // call event onChange
                setTimeout(function() {
                    w2popup.status = 'open';
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, 100);
            }
            // save new options
            options._last_w2ui_name = w2utils.keyboard.active();
            w2utils.keyboard.active(null);
            // keyboard events
            if (options.keyboard) $(document).on('keydown', this.keydown);

            // initialize move
            var tmp = {
                resizing: false,
                mvMove: mvMove,
                mvStop: mvStop
            };
            $('#w2ui-popup .w2ui-msg-title').on('mousedown', function(event) {
                mvStart(event);
            })

            // handlers
            function mvStart(evnt) {
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                w2popup.status = 'moving';
                tmp.resizing = true;
                tmp.x = evnt.screenX;
                tmp.y = evnt.screenY;
                tmp.pos_x = $('#w2ui-popup').position().left;
                tmp.pos_y = $('#w2ui-popup').position().top;
                w2popup.lock({
                    opacity: 0
                });
                $(document).on('mousemove', tmp.mvMove);
                $(document).on('mouseup', tmp.mvStop);
                if (evnt.stopPropagation) evnt.stopPropagation();
                else evnt.cancelBubble = true;
                if (evnt.preventDefault) evnt.preventDefault();
                else return false;
            }

            function mvMove(evnt) {
                if (tmp.resizing != true) return;
                if (!evnt) evnt = window.event;
                tmp.div_x = evnt.screenX - tmp.x;
                tmp.div_y = evnt.screenY - tmp.y;
                $('#w2ui-popup').css({
                    '-webkit-transition': 'none',
                    '-webkit-transform': 'translate3d(' + tmp.div_x + 'px, ' + tmp.div_y + 'px, 0px)',
                    '-moz-transition': 'none',
                    '-moz-transform': 'translate(' + tmp.div_x + 'px, ' + tmp.div_y + 'px)',
                    '-ms-transition': 'none',
                    '-ms-transform': 'translate(' + tmp.div_x + 'px, ' + tmp.div_y + 'px)',
                    '-o-transition': 'none',
                    '-o-transform': 'translate(' + tmp.div_x + 'px, ' + tmp.div_y + 'px)'
                });
            }

            function mvStop(evnt) {
                if (tmp.resizing != true) return;
                if (!evnt) evnt = window.event;
                w2popup.status = 'open';
                tmp.div_x = (evnt.screenX - tmp.x);
                tmp.div_y = (evnt.screenY - tmp.y);
                $('#w2ui-popup').css({
                    'left': (tmp.pos_x + tmp.div_x) + 'px',
                    'top': (tmp.pos_y + tmp.div_y) + 'px',
                    '-webkit-transition': 'none',
                    '-webkit-transform': 'translate3d(0px, 0px, 0px)',
                    '-moz-transition': 'none',
                    '-moz-transform': 'translate(0px, 0px)',
                    '-ms-transition': 'none',
                    '-ms-transform': 'translate(0px, 0px)',
                    '-o-transition': 'none',
                    '-o-transform': 'translate(0px, 0px)'
                });
                tmp.resizing = false;
                $(document).off('mousemove', tmp.mvMove);
                $(document).off('mouseup', tmp.mvStop);
                w2popup.unlock();
            }
            return this;
        },

        keydown: function(event) {
            var options = $('#w2ui-popup').data('options');
            if (!options || !options.keyboard) return;
            // trigger event
            var eventData = w2popup.trigger({
                phase: 'before',
                type: 'keydown',
                target: 'popup',
                options: options,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            switch (event.keyCode) {
                case 27:
                    event.preventDefault();
                    if ($('#w2ui-popup .w2ui-popup-message').length > 0) w2popup.message();
                    else w2popup.close();
                    break;
            }
            // event after
            w2popup.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        close: function(options) {
            var obj = this;
            var options = $.extend({}, $('#w2ui-popup').data('options'), options);
            if ($('#w2ui-popup').length == 0) return;
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'close',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2popup.status = 'closing';
            $('#w2ui-popup').css({
                '-webkit-transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                '-webkit-transform': 'scale(0.9)',
                '-moz-transition': options.speed + 's opacity, ' + options.speed + 's -moz-transform',
                '-moz-transform': 'scale(0.9)',
                '-ms-transition': options.speed + 's opacity, ' + options.speed + 's -ms-transform',
                '-ms-transform': 'scale(0.9)',
                '-o-transition': options.speed + 's opacity, ' + options.speed + 's -o-transform',
                '-o-transform': 'scale(0.9)',
                'opacity': '0'
            });
            w2popup.unlockScreen(options);
            setTimeout(function() {
                $('#w2ui-popup').remove();
                w2popup.status = 'closed';
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, options.speed * 1000);
            // restore active
            w2utils.keyboard.active(options._last_w2ui_name);
            // remove keyboard events
            if (options.keyboard) $(document).off('keydown', this.keydown);
        },

        toggle: function() {
            var obj = this;
            var options = $('#w2ui-popup').data('options');
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'toggle',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // defatul action
            if (options.maximized === true) w2popup.min();
            else w2popup.max();
            // event after
            setTimeout(function() {
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, (options.speed * 1000) + 50);
        },

        max: function() {
            var obj = this;
            var options = $('#w2ui-popup').data('options');
            if (options.maximized === true) return;
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'max',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2popup.status = 'resizing';
            options.prevSize = $('#w2ui-popup').css('width') + ':' + $('#w2ui-popup').css('height');
            // do resize
            w2popup.resize(10000, 10000, function() {
                w2popup.status = 'open';
                options.maximized = true;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            });
        },

        min: function() {
            var obj = this;
            var options = $('#w2ui-popup').data('options');
            if (options.maximized !== true) return;
            var size = options.prevSize.split(':');
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'min',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2popup.status = 'resizing';
            // do resize
            w2popup.resize(size[0], size[1], function() {
                w2popup.status = 'open';
                options.maximized = false;
                options.prevSize = null;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            });
        },

        get: function() {
            return $('#w2ui-popup').data('options');
        },

        set: function(options) {
            w2popup.open(options);
        },

        clear: function() {
            $('#w2ui-popup .w2ui-msg-title').html('');
            $('#w2ui-popup .w2ui-msg-body').html('');
            $('#w2ui-popup .w2ui-msg-buttons').html('');
        },

        reset: function() {
            w2popup.open(w2popup.defaults);
        },

        load: function(options) {
            w2popup.status = 'loading';
            if (String(options.url) == 'undefined') {
                console.log('ERROR: The url parameter is empty.');
                return;
            }
            var tmp = String(options.url).split('#');
            var url = tmp[0];
            var selector = tmp[1];
            if (String(options) == 'undefined') options = {};
            // load url
            var html = $('#w2ui-popup').data(url);
            if (typeof html != 'undefined' && html != null) {
                popup(html, selector);
            } else {
                $.get(url, function(data, status, obj) { // should always be $.get as it is template
                    popup(obj.responseText, selector);
                    $('#w2ui-popup').data(url, obj.responseText); // remember for possible future purposes
                });
            }

            function popup(html, selector) {
                delete options.url;
                $('body').append('<div id="w2ui-tmp" style="display: none">' + html + '</div>');
                if (typeof selector != 'undefined' && $('#w2ui-tmp #' + selector).length > 0) {
                    $('#w2ui-tmp #' + selector).w2popup(options);
                } else {
                    $('#w2ui-tmp > div').w2popup(options);
                }
                // link styles
                if ($('#w2ui-tmp > style').length > 0) {
                    var style = $('<div>').append($('#w2ui-tmp > style').clone()).html();
                    if ($('#w2ui-popup #div-style').length == 0) {
                        $('#w2ui-popup').append('<div id="div-style" style="position: absolute; left: -100; width: 1px"></div>');
                    }
                    $('#w2ui-popup #div-style').html(style);
                }
                $('#w2ui-tmp').remove();
            }
        },

        message: function(options) {
            $().w2tag(); // hide all tags
            if (!options) options = {
                width: 200,
                height: 100
            };
            if (parseInt(options.width) < 10) options.width = 10;
            if (parseInt(options.height) < 10) options.height = 10;
            if (typeof options.hideOnClick == 'undefined') options.hideOnClick = false;
            var poptions = $('#w2ui-popup').data('options') || {};
            if (typeof options.width == 'undefined' || options.width > poptions.width - 10) options.width = poptions.width - 10;
            if (typeof options.height == 'undefined' || options.height > poptions.height - 40) options.height = poptions.height - 40; // title is 30px or so

            var head = $('#w2ui-popup .w2ui-msg-title');
            var pwidth = parseInt($('#w2ui-popup').width());
            var msgCount = $('#w2ui-popup .w2ui-popup-message').length;
            // remove message
            if ($.trim(options.html) == '') {
                $('#w2ui-popup #w2ui-message' + (msgCount - 1)).css('z-Index', 250);
                var options = $('#w2ui-popup #w2ui-message' + (msgCount - 1)).data('options') || {};
                $('#w2ui-popup #w2ui-message' + (msgCount - 1)).remove();
                if (typeof options.onClose == 'function') options.onClose();
                if (msgCount == 1) {
                    w2popup.unlock();
                } else {
                    $('#w2ui-popup #w2ui-message' + (msgCount - 2)).show();
                }
            } else {
                // hide previous messages
                $('#w2ui-popup .w2ui-popup-message').hide();
                // add message
                $('#w2ui-popup .w2ui-box1')
                    .before('<div id="w2ui-message' + msgCount + '" class="w2ui-popup-message" style="display: none; ' +
                        (head.length == 0 ? 'top: 0px;' : 'top: ' + w2utils.getSize(head, 'height') + 'px;') +
                        (typeof options.width != 'undefined' ? 'width: ' + options.width + 'px; left: ' + ((pwidth - options.width) / 2) + 'px;' : 'left: 10px; right: 10px;') +
                        (typeof options.height != 'undefined' ? 'height: ' + options.height + 'px;' : 'bottom: 6px;') +
                        '-webkit-transition: .3s; -moz-transition: .3s; -ms-transition: .3s; -o-transition: .3s;"' +
                        (options.hideOnClick === true ? 'onclick="w2popup.message();"' : '') + '>' +
                        '</div>');
                $('#w2ui-popup #w2ui-message' + msgCount).data('options', options);
                var display = $('#w2ui-popup #w2ui-message' + msgCount).css('display');
                $('#w2ui-popup #w2ui-message' + msgCount).css({
                    '-webkit-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)'),
                    '-moz-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)'),
                    '-ms-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)'),
                    '-o-transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)')
                });
                if (display == 'none') {
                    $('#w2ui-popup #w2ui-message' + msgCount).show().html(options.html);
                    // timer needs to animation
                    setTimeout(function() {
                        $('#w2ui-popup #w2ui-message' + msgCount).css({
                            '-webkit-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)'),
                            '-moz-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)'),
                            '-ms-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)'),
                            '-o-transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)')
                        });
                    }, 1);
                    // timer for lock
                    setTimeout(function() {
                        $('#w2ui-popup #w2ui-message' + msgCount).css({
                            '-webkit-transition': '0s',
                            '-moz-transition': '0s',
                            '-ms-transition': '0s',
                            '-o-transition': '0s',
                            'z-Index': 1500
                        }); // has to be on top of lock
                        if (msgCount == 0) w2popup.lock();
                        if (typeof options.onOpen == 'function') options.onOpen();
                    }, 300);
                }
            }
        },

        lock: function(msg, showSpinner) {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift($('#w2ui-popup'));
            w2utils.lock.apply(window, args);
        },

        unlock: function() {
            w2utils.unlock($('#w2ui-popup'));
        },

        // --- INTERNAL FUNCTIONS

        lockScreen: function(options) {
            if ($('#w2ui-lock').length > 0) return false;
            if (typeof options == 'undefined') options = $('#w2ui-popup').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2popup.defaults, options);
            // show element
            $('body').append('<div id="w2ui-lock" ' +
                '    onmousewheel="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true; if (event.preventDefault) event.preventDefault(); else return false;"' +
                '    style="position: ' + (w2utils.engine == 'IE5' ? 'absolute' : 'fixed') + '; z-Index: 1199; left: 0px; top: 0px; ' +
                '           padding: 0px; margin: 0px; background-color: ' + options.color + '; width: 100%; height: 100%; opacity: 0;"></div>');
            // lock screen
            setTimeout(function() {
                $('#w2ui-lock').css({
                    '-webkit-transition': options.speed + 's opacity',
                    '-moz-transition': options.speed + 's opacity',
                    '-ms-transition': options.speed + 's opacity',
                    '-o-transition': options.speed + 's opacity',
                    'opacity': options.opacity
                });
            }, 1);
            // add events
            if (options.modal == true) {
                $('#w2ui-lock').on('mousedown', function() {
                    $('#w2ui-lock').css({
                        '-webkit-transition': '.1s',
                        '-moz-transition': '.1s',
                        '-ms-transition': '.1s',
                        '-o-transition': '.1s',
                        'opacity': '0.6'
                    });
                    // if (window.getSelection) window.getSelection().removeAllRanges();
                });
                $('#w2ui-lock').on('mouseup', function() {
                    setTimeout(function() {
                        $('#w2ui-lock').css({
                            '-webkit-transition': '.1s',
                            '-moz-transition': '.1s',
                            '-ms-transition': '.1s',
                            '-o-transition': '.1s',
                            'opacity': options.opacity
                        });
                    }, 100);
                    // if (window.getSelection) window.getSelection().removeAllRanges();
                });
            } else {
                $('#w2ui-lock').on('mouseup', function() {
                    w2popup.close();
                });
            }
            return true;
        },

        unlockScreen: function(options) {
            if ($('#w2ui-lock').length == 0) return false;
            if (typeof options == 'undefined') options = $('#w2ui-popup').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2popup.defaults, options);
            $('#w2ui-lock').css({
                '-webkit-transition': options.speed + 's opacity',
                '-moz-transition': options.speed + 's opacity',
                '-ms-transition': options.speed + 's opacity',
                '-o-transition': options.speed + 's opacity',
                'opacity': 0
            });
            setTimeout(function() {
                $('#w2ui-lock').remove();
            }, options.speed * 1000);
            return true;
        },

        resize: function(width, height, callBack) {
            var options = $('#w2ui-popup').data('options');
            // calculate new position
            if (parseInt($(window).width()) - 10 < parseInt(width)) width = parseInt($(window).width()) - 10;
            if (parseInt($(window).height()) - 10 < parseInt(height)) height = parseInt($(window).height()) - 10;
            var top = ((parseInt($(window).height()) - parseInt(height)) / 2) * 0.8;
            var left = (parseInt($(window).width()) - parseInt(width)) / 2;
            // resize there
            $('#w2ui-popup').css({
                '-webkit-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                '-moz-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                '-ms-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                '-o-transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top',
                'top': top,
                'left': left,
                'width': width,
                'height': height
            });
            setTimeout(function() {
                options.width = width;
                options.height = height;
                if (typeof callBack == 'function') callBack();
            }, (options.speed * 1000) + 50); // give extra 50 ms
        }
    }

    // merge in event handling
    $.extend(w2popup, w2utils.event);

})();

// ============================================
// --- Common dialogs

var w2alert = function(msg, title, callBack) {
    if (title == null) title = w2utils.lang('Notification');
    if ($('#w2ui-popup').length > 0 && w2popup.status != 'closing') {
        w2popup.message({
            width: 400,
            height: 170,
            html: '<div style="position: absolute; top: 0px; left: 0px; right: 0px; bottom: 45px; overflow: auto">' +
                '        <div class="w2ui-centered" style="font-size: 13px;">' + msg + '</div>' +
                '</div>' +
                '<div style="position: absolute; bottom: 7px; left: 0px; right: 0px; text-align: center; padding: 5px">' +
                '        <button onclick="w2popup.message();" class="w2ui-popup-btn btn">' + w2utils.lang('Ok') + '</button>' +
                '</div>',
            onClose: function() {
                if (typeof callBack == 'function') callBack();
            }
        });
    } else {
        w2popup.open({
            width: 450,
            height: 220,
            showMax: false,
            showClose: false,
            title: title,
            body: '<div class="w2ui-centered" style="font-size: 13px;">' + msg + '</div>',
            buttons: '<button onclick="w2popup.close();" class="w2ui-popup-btn btn">' + w2utils.lang('Ok') + '</button>',
            onClose: function() {
                if (typeof callBack == 'function') callBack();
            }
        });
    }
};

var w2confirm = function(msg, title, callBack) {
    var options = {};
    var defaults = {
        msg: '',
        title: w2utils.lang('Confirmation'),
        width: ($('#w2ui-popup').length > 0 ? 400 : 450),
        height: ($('#w2ui-popup').length > 0 ? 170 : 220),
        yes_text: 'Yes',
        yes_class: '',
        yes_style: '',
        yes_callBack: null,
        no_text: 'No',
        no_class: '',
        no_style: '',
        no_callBack: null,
        opt:false,
        opt_text: 'No',
        opt_class: '',
        opt_style: '',
        opt_callBack: null,
        callBack: null
    };
    if (arguments.length == 1 && typeof msg == 'object') {
        $.extend(options, defaults, msg);
    } else {
        if (typeof title == 'function') {
            $.extend(options, defaults, {
                msg: msg,
                callBack: title
            });
        } else {
            $.extend(options, defaults, {
                msg: msg,
                title: title,
                callBack: callBack
            });
        }
    }
    if ($('#w2ui-popup').length > 0 && w2popup.status != 'closing') {
        var opts = w2popup.get();
        if (opts) {
            if (options.width > opts.width) options.width = opts.width;
            if (options.height > (opts.height - 50)) options.height = opts.height - 50;
        }
        w2popup.message({
            width: options.width,
            height: options.height,
            html: '<div style="position: absolute; top: 0px; left: 0px; right: 0px; bottom: 40px; overflow: auto">' +
                '        <div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>' +
                '</div>' +
                '<div style="position: absolute; bottom: 7px; left: 0px; right: 0px; text-align: center; padding: 5px">' +
                '        <button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '        <button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>' +
                (options.opt?'<button id="Opt" class="w2ui-popup-btn btn ' + options.opt_class + '" style="' + options.opt_style + '">' + w2utils.lang(options.opt_text) + '</button>':'') +
                '</div>',
            onOpen: function() {
                $('#w2ui-popup .w2ui-popup-message .btn').on('click', function(event) {
                    w2popup.message();
                    if (typeof options.callBack == 'function') options.callBack(event.target.id);
                    if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack();
                    if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                    if (event.target.id == 'Opt' && typeof options.opt_callBack == 'function') options.opt_callBack();
                });
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack('Yes');
                        if (typeof options.yes_callBack == 'function') options.yes_callBack();
                        w2popup.message();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.message();
                        break;
                }
            }
        });

    } else {

        if (!w2utils.isInt(options.height)) options.height = options.height + 50;
        w2popup.open({
            width: options.width,
            height: options.height,
            title: options.title,
            modal: true,
            showClose: false,
            body: '<div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>',
            buttons: '<button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '<button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>'+
                (options.opt?'<button id="Opt" class="w2ui-popup-btn btn ' + options.opt_class + '" style="' + options.opt_style + '">' + w2utils.lang(options.opt_text) + '</button>':'') ,
            onOpen: function(event) {
                event.onComplete = function() {
                    $('#w2ui-popup .w2ui-popup-btn').on('click', function(event) {
                        w2popup.close();
                        if (typeof options.callBack == 'function') options.callBack(event.target.id);
                        if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack();
                        if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                        if (event.target.id == 'Opt' && typeof options.opt_callBack == 'function') options.opt_callBack();
                    });
                };
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack('Yes');
                        if (typeof options.yes_callBack == 'function') options.yes_callBack();
                        w2popup.close();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.close();
                        break;
                }
            }
        });
    }

    return {
        yes: function(fun) {
            options.yes_callBack = fun;
            return this;
        },
        no: function(fun) {
            options.no_callBack = fun;
            return this;
        },
        opt:function(fun){
            options.opt_callBack = fun;
            return this;
        }
    };


};

var w2prompt = function(msg, title, callBack) {
    var prompt;
    var options = {};
    var defaults = {
        msg: '',
        title: w2utils.lang('Confirmation'),
        width: ($('#w2ui-popup').length > 0 ? 400 : 450),
        height: ($('#w2ui-popup').length > 0 ? 170 : 220),
        yes_text: 'Yes',
        yes_class: 'btn-primary',
        yes_style: 'margin-right:15px;',
        yes_callBack: null,
        no_text: 'No',
        no_class: 'btn-default',
        no_style: '',
        no_callBack: null,
        callBack: null
    };
    if (arguments.length == 1 && typeof msg == 'object') {
        $.extend(options, defaults, msg);
    } else {
        if (typeof title == 'function') {
            $.extend(options, defaults, {
                msg: msg,
                callBack: title
            });
        } else {
            $.extend(options, defaults, {
                msg: msg,
                title: title,
                callBack: callBack
            });
        }
    }
    if ($('#w2ui-popup').length > 0 && w2popup.status != 'closing') {
        if (options.width > w2popup.get().width) options.width = w2popup.get().width;
        if (options.height > (w2popup.get().height - 50)) options.height = w2popup.get().height - 50;
        w2popup.message({
            width: options.width,
            height: options.height,
            html: '<div style="position: absolute; top: 0px; left: 0px; right: 0px; bottom: 40px; overflow: auto">' +
                '        <div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>' +
                '        <div class="w2ui-centered" style="font-size: 13px;margin-top:30px"><input type="text" id="w2promptInput" /></div>' +
                '</div>' +
                '<div style="position: absolute; bottom: 7px; left: 0px; right: 0px; text-align: center; padding: 5px">' +
                '        <button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '        <button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>' +
                '</div>',
            onOpen: function() {
                $('#w2ui-popup .w2ui-popup-message #w2promptInput').on('keyup', function(e) {
                    if (e.which !== 13)
                        prompt = $(e.target).val();
                });
                $('#w2ui-popup .w2ui-popup-message .btn').on('click', function(event) {
                    w2popup.message();
                    if (typeof options.callBack == 'function') options.callBack(prompt);
                    if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                    if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                });
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack(prompt);
                        if (typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                        w2popup.message();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.message();
                        break;
                }
            }
        });

    } else {

        if (!w2utils.isInt(options.height)) options.height = options.height + 50;
        w2popup.open({
            width: options.width,
            height: options.height,
            title: options.title,
            modal: true,
            showClose: false,
            body: '<div class="w2ui-centered" style="font-size: 13px;">' + options.msg + '</div>' +
                '        <div class="w2ui-centered" style="font-size: 13px;margin-top:30px;"><input type="text" id="w2promptInput" /></div>',
            buttons: '<button id="Yes" class="w2ui-popup-btn btn ' + options.yes_class + '" style="' + options.yes_style + '">' + w2utils.lang(options.yes_text) + '</button>' +
                '<button id="No" class="w2ui-popup-btn btn ' + options.no_class + '" style="' + options.no_style + '">' + w2utils.lang(options.no_text) + '</button>',
            onOpen: function(event) {
                event.onComplete = function() {
                    $('#w2ui-popup .w2ui-msg-body #w2promptInput').on('keyup', function(e) {
                        if (e.which !== 13)
                            prompt = $(e.target).val();
                    });
                    $('#w2ui-popup .w2ui-popup-btn').on('click', function(event) {
                        w2popup.close();
                        if (typeof options.callBack == 'function') options.callBack(prompt);
                        if (event.target.id == 'Yes' && typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                        if (event.target.id == 'No' && typeof options.no_callBack == 'function') options.no_callBack();
                    });
                };
            },
            onKeydown: function(event) {
                switch (event.originalEvent.keyCode) {
                    case 13: // enter
                        if (typeof options.callBack == 'function') options.callBack(prompt);
                        if (typeof options.yes_callBack == 'function') options.yes_callBack(prompt);
                        w2popup.close();
                        break;
                    case 27: // esc
                        if (typeof options.callBack == 'function') options.callBack('No');
                        if (typeof options.no_callBack == 'function') options.no_callBack();
                        w2popup.close();
                        break;
                }
            }
        });
    }

    return {
        yes: function(fun) {
            options.yes_callBack = fun;
            return this;
        },
        no: function(fun) {
            options.no_callBack = fun;
            return this;
        }
    };
};

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2panel      - popup widget
 *        - $().w2panel  - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - transition should include title, body and buttons, not just body
 *   - .message() should have same props (body, buttons, title?)
 *   - hide overlay on esc
 *   - make popup width/height in %
 *
 * == 1.5 changes
 *   - new: resizeMessages()
 *   - popup can be moved/resized/closed when locked or has messages
 *   - messages negative widht/height means margin
 *   - added btn_yes and btn_no
 *   - dismissed message will slide up - added parameter unlock(speed)
 *   - refactore -webkit-* -moz-* to a function
 *   - resize nested elements in popup for onMin, onMax
 *   - rename btn -> w2ui-btn and same for colored ones
 *   - added options.body and options.buttons for w2panel.message
 *
 ************************************************************************/

var w2panel = {};
//TODO: check name and assign one if not found
//
(function() {

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2panel = function(method, options) {
        //append taskbar for minimized windows
        if ($('#w2taskbar-container').length === 0) {
            if ($('#tb_footerToolbar_item_taskbar').length > 0)
                $('#tb_footerToolbar_item_taskbar').append('<div class="w2taskbar-toolbar" id="w2taskbar-container"></div>');
            else
                $('body').append('<div class="w2taskbar" id="w2taskbar-container"></div>');
            // $('body').on('mousedown', function(e) {
            //     e.stopPropagation();
            //     w2panel.focus('none');
            // });

        }
        if (typeof method === 'undefined') {
            options = {};
            method = 'open';
        }
        if ($.isPlainObject(method)) {
            options = method;
            method = 'open';
        }
        method = method.toLowerCase();
        if (method === 'load' && typeof options === 'string') {
            options = $.extend({
                url: options
            }, arguments.length > 2 ? arguments[2] : {});
        }
        if (method === 'open' && options.url) method = 'load';
        options = options || {};

        if (options.modal) {
            options.name = 'modal-'; //we don't want multiple modals - we give it a name to diferentiate from original popup
        } else if (!options.name) {
            options.name = 'panel1'; // for now we give it a default name and force user to provide for multiple windows
        }
        for (var i in w2ui.panels) {
            if (w2ui.panels[i].name === options.name) {
                console.log("ERROR: A panel with the same name is opened!");
                // if(w2ui.panels[i].minimized){
                    w2ui.panels[i].restoreMin();
                // }
                return;
            }
            if (w2ui.panels[i].get().modal) // not allow multiple panels in modal mode
                return;
        }
        // load options from markup
        var dlgOptions = {};
        if ($(this).length > 0) {
            var el = $(this);

            if (options.preserveContent && $('#parentTo' + options.name).length === 0) {
                el.wrap('<div id="parentTo' + options.name + '"></div>');
            }

            if (el.find('div[rel=title], div[rel=body], div[rel=buttons]').length > 0) {
                if (el.find('div[rel=title]').length > 0) {
                    dlgOptions.title = el.find('div[rel=title]').html();
                }
                if (el.find('div[rel=body]').length > 0) {
                    dlgOptions.body = el.find('div[rel=body]');
                    dlgOptions.style = el.find('div[rel=body]')[0].style.cssText;
                }
                if (el.find('div[rel=buttons]').length > 0) {
                    dlgOptions.buttons = el.find('div[rel=buttons]').html();
                }
            } else {
                dlgOptions.title = '&nbsp;';
                dlgOptions.body = el;
            }
            if (parseInt(el.css('width')) !== 0) dlgOptions.width = parseInt(el.css('width'));
            if (parseInt(el.css('height')) !== 0) dlgOptions.height = parseInt(el.css('height'));
        }

        //check if allready opened

        // show popup
        if (options.modal) {
            // //close other panels - multiple in modal mode is not supported
            // w2panel.destroyAll(function() {
            //     w2ui.panels = [];
            return w2panel[method]($.extend({}, dlgOptions, options));
            // });

        } else {
            var panel = $.extend({}, w2panel, options);
            return panel[method]($.extend({}, dlgOptions, options));
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2panel = {
        defaults: {
            title: '',
            body: '',
            buttons: '',
            name: '',
            style: '',
            color: '#000',
            opacity: 0.4,
            speed: 0.3,
            startZ: 1150,
            modal: false,
            maximized: false,
            minimized: false,
            keyboard: true, // will close popup on esc if not modal
            width: 500,
            height: 300,
            showClose: true,
            showMax: false,
            showMin: false,
            transition: null,
            
        },
        useraction:null,
        status: 'closed', // string that describes current status
        handlers: [],
        onOpen: null,
        onClose: null,
        onMax: null,
        onRestore: null,
        onMin: null,
        onToggle: null,
        onKeydown: null,

        init: function(options) {
            $.extend(this.defaults, options);
            return this;
        },

        open: function(options) {
            var obj = this;
            if(options.useraction){
                obj.useraction = options.useraction;
            }
            this.name = options.name; //handle here no name provided
            if (w2panel.status == 'closing') {
                setTimeout(function() {
                    obj.open.call(obj, options);
                }, 100);
                return;
            }
            // get old options and merge them
            var old_options = $('#' + this.name + 'w2ui-window').data('options');
            var options = $.extend({}, this.defaults, old_options, {
                title: '',
                body: '',
                buttons: ''
            }, options, {
                maximized: false,
                minimized: false
            });
            // need timer because popup might not be open
            setTimeout(function() {
                $('#' + obj.name + 'w2ui-window').data('options', options);
            }, 100);
            // if new - reset event handlers
            if ($('#' + obj.name + 'w2ui-window').length === 0) {
                w2panel.handlers = [];
                w2panel.onMax = null;
                w2panel.onMin = null;
                w2panel.onToggle = null;
                w2panel.onOpen = null;
                w2panel.onClose = null;
                w2panel.onKeydown = null;
            }
            if (options.onOpen) w2panel.onOpen = options.onOpen;
            if (options.onClose) w2panel.onClose = options.onClose;
            if (options.onMax) w2panel.onMax = options.onMax;
            if (options.onMin) w2panel.onMin = options.onMin;
            if (options.onToggle) w2panel.onToggle = options.onToggle;
            if (options.onKeydown) w2panel.onKeydown = options.onKeydown;
            if(options.toolbarButtons) w2panel.toolbarButtons = options.toolbarButtons;

            var width, height;
            if (window.innerHeight === undefined) {
                width = document.documentElement.offsetWidth;
                height = document.documentElement.offsetHeight;
                if (w2utils.engine === 'IE7') {
                    width += 21;
                    height += 4;
                }
            } else {
                width = window.innerWidth;
                height = window.innerHeight;
            }
            if (parseInt(width) - 10 < parseInt(options.width)) options.width = parseInt(width) - 10;
            if (parseInt(height) - 10 < parseInt(options.height)) options.height = parseInt(height) - 10;
            var top = parseInt(((parseInt(height) - parseInt(options.height)) / 2) * 0.6);
            var left = parseInt((parseInt(width) - parseInt(options.width)) / 2);
            // check if message is already displayed
            if ($('#' + obj.name + 'w2ui-window').length === 0) {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: false
                });
                if (eventData.isCancelled === true) return;
                w2panel.status = 'opening';
                // output message
                if (options.modal)
                    w2panel.lockScreen(options);
                var btn = '<div class="w2ui-window-buttons">';
                if (options.showClose) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-close" data-panel="' + obj.name + '" data-action="close" onmousedown="event.stopPropagation()" onclick="w2panel.action(event)">&nbsp;</div>';
                }
                if (options.showMax) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-max" data-panel="' + obj.name + '" data-action="toggle" onmousedown="event.stopPropagation()" onclick="w2panel.action(event)">&nbsp;</div>';
                }
                if (options.showMin) {
                    btn += '<div class="w2ui-msg-button w2ui-msg-min" data-panel="' + obj.name + '" data-action="min" onmousedown="event.stopPropagation()" onclick="w2panel.action(event)">&nbsp;</div>';
                }
                if(options.toolbarButtons){
                  options.toolbarButtons.map(function(b){
                      btn += '<div class="w2ui-msg-button" style="background-position:25px;" data-panel="' + obj.name + '" data-action="'+b.id+'" onmousedown="event.stopPropagation()" onclick="w2panel.customaction(event)"><span style="color:#4BA05E;margin-top:-2px" class="w2ui-icon '+b.className+'"></span></div>';
                  });
                }
                btn += '</div>';
                var msg = '<div id="' + obj.name + 'w2ui-window" class="w2ui-window ' + (options.modal ? ' w2modal' : '') + '" style="opacity: 0; left: ' + left + 'px; top: ' + top + 'px;' +
                    '     width: ' + parseInt(options.width) + 'px; height: ' + parseInt(options.height) + 'px; ' +
                    //(options.resizable ? 'resize:both;' : '') +
                    w2utils.cssPrefix('transform', 'scale(0.8)', true) + '"' +
                    '>' +
                    '   <div class="w2ui-msg-title" style="' + (options.title === '' ? 'display: none' : '') + '">' + btn + options.title + '</div>' +
                    '   <div class="w2ui-box1" style="' + (options.title === '' ? 'top: 0px !important;' : '') +
                    (options.buttons === '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body w2panel-content-' + obj.name + (options.title === '' ? ' w2ui-msg-no-title' : '') +
                    (options.buttons === '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '">' /*+ options.body*/ + '</div>' +
                    '   </div>' +
                    '   <div class="w2ui-box2" style="' + (options.title === '' ? 'top: 0px !important;' : '') +
                    (options.buttons === '' ? 'bottom: 0px !important;' : '') + '">' +
                    '       <div class="w2ui-msg-body' + (options.title === '' ? ' w2ui-msg-no-title' : '') +
                    (options.buttons === '' ? ' w2ui-msg-no-buttons' : '') + '" style="' + options.style + '"></div>' +
                    '       </div>' +
                    '   <div class="w2ui-msg-buttons" style="' + (options.buttons === '' ? 'display: none' : '') + '">' + options.buttons + '</div>' +
                    (options.resizable ? '<div class="w2panel-resizer"><i class="w2ui-icon-resize"></i></div>' : '') +
                    '</div>';
                $('body').append(msg);
                //if (options.modal) {
                //   $(options.body).appendTo('.w2ui-msg-body');
                //} else {
                $(options.body).appendTo('.w2panel-content-' + obj.name);
                // $('<div>' + options.body + '</div>').appendTo('.w2panel-content-' + obj.name);
                //}

                // allow element to render
                setTimeout(function() {
                    $('#' + obj.name + 'w2ui-window .w2ui-box2').hide();
                    $('#' + obj.name + 'w2ui-window')
                        .css('opacity', '1')
                        .css(w2utils.cssPrefix({
                            'transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                            'transform': 'scale(1)'
                        }));
                }, 1);
                // clean transform
                setTimeout(function() {
                    $('#' + obj.name + 'w2ui-window').css(w2utils.cssPrefix('transform', ''));
                    // event after
                    w2panel.status = 'open';
                    setTimeout(function() {
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    }, 100);
                }, options.speed * 1000);
            } else {
                // trigger event
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'open',
                    target: 'popup',
                    options: options,
                    present: true
                });
                if (eventData.isCancelled === true) return;
                // check if size changed
                w2panel.status = 'opening';
                if (typeof old_options != 'undefined') {
                    if (!old_options.maximized && (old_options['width'] !== options['width'] || old_options['height'] !== options['height'])) {
                        w2panel.resize({
                            width: options.width,
                            height: options.height
                        });
                    }
                    options.prevSize = options.width + 'px:' + options.height + 'px';
                    options.maximized = old_options.maximized;
                }
                // show new items
                var body = $('#' + obj.name + 'w2ui-window .w2ui-box2 > .w2ui-msg-body').html(options.body);
                if (body.length > 0) body[0].style.cssText = options.style;
                if (options.buttons !== '') {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-buttons').show().html(options.buttons);
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').removeClass('w2ui-msg-no-buttons');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('bottom', '');
                } else {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-buttons').hide().html('');
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').addClass('w2ui-msg-no-buttons');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('bottom', '0px');
                }
                if (options.title !== '') {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-title').show().html(
                        (options.showClose ? '<div class="w2ui-msg-button w2ui-msg-close" onmousedown="event.stopPropagation()" onclick="w2panel.close()">Close</div>' : '') +
                        (options.showMax ? '<div class="w2ui-msg-button w2ui-msg-max" onmousedown="event.stopPropagation()" onclick="w2panel.toggle()">Max</div>' : '') +
                        options.title);
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').removeClass('w2ui-msg-no-title');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('top', '');
                } else {
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-title').hide().html('');
                    $('#' + obj.name + 'w2ui-window .w2ui-msg-body').addClass('w2ui-msg-no-title');
                    $('#' + obj.name + 'w2ui-window .w2ui-box1, #' + obj.name + 'w2ui-window .w2ui-box2').css('top', '0px');
                }
                // transition
                var div_old = $('#' + obj.name + 'w2ui-window .w2ui-box1')[0];
                var div_new = $('#' + obj.name + 'w2ui-window .w2ui-box2')[0];
                w2utils.transition(div_old, div_new, options.transition);
                div_new.className = 'w2ui-box1';
                div_old.className = 'w2ui-box2';
                $(div_new).addClass('w2ui-current-box');
                // remove max state
                $('#' + obj.name + 'w2ui-window').data('prev-size', null);
                // call event onChange
                setTimeout(function() {
                    w2panel.status = 'open';
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, 100);

            }
            // save new options
            options._last_w2ui_name = w2utils.keyboard.active();
            w2utils.keyboard.clear();
            // keyboard events
            if (options.keyboard) $(document).on('keydown', this.keydown);

            // initialize move and resize
            var tmp = {
                resizing: false,
                mvMove: mvMove,
                mvStop: mvStop,
                rsExpand: rsExpand,
                rsStop: rsStop
            };
            $('#' + obj.name + 'w2ui-window').on('click', function(event) {
                if (!obj.isActive) {
                    w2panel.setActive(obj.name);
                }
            });
            $('#' + obj.name + 'w2ui-window .w2ui-msg-title').on('mousedown', function(event) {
                // w2panel.setActive(obj.name);
                if (!w2panel.get().maximized && !w2panel.get().minimized) mvStart(event);
            });

            $('#' + obj.name + 'w2ui-window .w2panel-resizer').on('mousedown', function(event) {
                if (!w2panel.get().maximized && !w2panel.get().minimized) rsStart(event);
            });

            function rsStart(evnt) {
                if (!options.resizable) {
                    return;
                }
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }

                var el = $('#' + obj.name + 'w2ui-window');
                tmp.size_w = el.width();
                tmp.size_h = el.height();

                tmp.x = evnt.screenX;
                tmp.y = evnt.screenY;
                tmp.resizing = true;

                $(document).on('mousemove', tmp.rsExpand);
                $(document).on('mouseup', tmp.rsStop);
                if (evnt.stopPropagation) evnt.stopPropagation();
                else evnt.cancelBubble = true;
                if (evnt.preventDefault) evnt.preventDefault();
                else return false;
            }

            function rsExpand(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                tmp.div_w = tmp.size_w + evnt.screenX - tmp.x;
                tmp.div_h = tmp.size_h + evnt.screenY - tmp.y;
                $('#' + obj.name + 'w2ui-window').css({
                    'width': tmp.div_w,
                    'height': tmp.div_h
                });
                //var tmp_int = setInterval(function() {
                obj.resizeMessages();
                //}, 10);
            }

            function rsStop(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                w2panel.status = 'open';
                tmp.resizing = false;
                tmp.div_w = 0;
                tmp.div_h = 0;
                $(document).off('mousemove', tmp.rsExpand);
                $(document).off('mouseup', tmp.rsStop);
                if (!tmp.isLocked) {
                    w2panel.unlock();
                }
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) {
                        w2ui[name].resize();
                    }
                });
            }

            // handlers
            function mvStart(evnt) {
                if (!evnt) evnt = window.event;
                if (!window.addEventListener) {
                    window.document.attachEvent('onselectstart', function() {
                        return false;
                    });
                }
                w2panel.status = 'moving';
                tmp.resizing = true;
                tmp.isLocked = $('#' + obj.name + 'w2ui-window > .w2ui-lock').length == 1 ? true : false;
                tmp.x = evnt.screenX;
                tmp.y = evnt.screenY;
                tmp.pos_x = $('#' + obj.name + 'w2ui-window').position().left;
                tmp.pos_y = $('#' + obj.name + 'w2ui-window').position().top;
                if (!tmp.isLocked) w2panel.lock({
                    opacity: 0
                });
                $(document).on('mousemove', tmp.mvMove);
                $(document).on('mouseup', tmp.mvStop);
                if (evnt.stopPropagation) evnt.stopPropagation();
                else evnt.cancelBubble = true;
                if (evnt.preventDefault) evnt.preventDefault();
                else return false;
            }

            function mvMove(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                tmp.div_x = evnt.screenX - tmp.x;
                tmp.div_y = evnt.screenY - tmp.y;
                $('#' + obj.name + 'w2ui-window').css(w2utils.cssPrefix({
                    'transition': 'none',
                    'transform': 'translate3d(' + tmp.div_x + 'px, ' + tmp.div_y + 'px, 0px)'
                }));
            }

            function mvStop(evnt) {
                if (tmp.resizing !== true) return;
                if (!evnt) evnt = window.event;
                w2panel.status = 'open';
                tmp.div_x = (evnt.screenX - tmp.x);
                tmp.div_y = (evnt.screenY - tmp.y);
                $('#' + obj.name + 'w2ui-window').css({
                    'left': (tmp.pos_x + tmp.div_x) + 'px',
                    'top': (tmp.pos_y + tmp.div_y) + 'px'
                }).css(w2utils.cssPrefix({
                    'transition': 'none',
                    'transform': 'translate3d(0px, 0px, 0px)'
                }));
                tmp.resizing = false;
                $(document).off('mousemove', tmp.mvMove);
                $(document).off('mouseup', tmp.mvStop);
                if (!tmp.isLocked) w2panel.unlock();
            }
            if (!w2ui.panels) w2ui.panels = [];
            obj.isActive = true;
            obj.last_active = true;
            w2ui.panels.push(obj);
            w2panel.setActive(obj.name);
            if (obj.maximized) w2panel.max();
            return this;
        },

        action: function(e) {
            var el = $(e.currentTarget);
            var panelName = el.data('panel');
            var action = el.data('action');
            var panel = w2panel.setActive(panelName);
            switch (action) {
                case 'toggle':
                    w2panel.toggle(panel);
                    break;
                case 'close':
                    w2panel.destroy(panel.get());
                    break;
                case 'min':
                    // w2panel.lastFocus();
                    w2panel.minimize(panel);
                    break;
            }

        },
        customaction: function(e) {
            var el = $(e.currentTarget);
            var panelName = el.data('panel');
            var action = el.data('action');
            var panel = w2panel.setActive(panelName);
            panel.toolbarButtons.map(function(btn){
              if(btn.id === action){
                if(btn.click) btn.click(e);
              }
            });

        },

        keydown: function(event) {
            if ($('#w2ui-window').length > 0) {
                return; // we have a popup opened - it is suposed to be above - so it will handle the event
            }
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options');
            if (options && !options.keyboard) return;
            // trigger event
            var eventData = w2panel.trigger({
                phase: 'before',
                type: 'keydown',
                target: 'popup',
                options: options,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            switch (event.keyCode) {
                case 27:
                    event.preventDefault();
                    if ($('#' + obj.name + 'w2ui-window .w2ui-popup-message').length > 0) w2panel.message();
                    else w2panel.destroy();
                    break;
            }
            // event after
            w2panel.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        _getHighestIndex: function() {
            var highest_index = 1150;
            $(".w2ui-window").each(function() {
                // always use a radix when using parseInt
                var current_index = parseInt($(this).css("zIndex"), 10);
                if (current_index > current_index) {
                    highest_index = current_index;
                }
            });
            return highest_index;
        },

        focus: function(panel) {
            $(".w2ui-window").addClass('inactive');
            if (panel === 'none') {
                return;
            } else {
                var index_highest = w2panel._getHighestIndex();
                var index_current = parseInt($('#' + panel.name + 'w2ui-window').css('z-index'), 10);
                //add style and set index as highest
                $('#' + panel.name + 'w2ui-window').removeClass('inactive').css('z-index', index_highest + 1);
                // set the other under
                $(".w2ui-window").each(function() {
                    if ($(this).attr('id') !== panel.name + 'w2ui-window') {
                        var current_index = parseInt($(this).css("z-index"), 10);
                        $(this).css('z-index', (current_index - 1));
                    }
                });
            }

        },
        //public close function
        close: function() {
            event.preventDefault();
            var panelName = $(event.currentTarget).closest('.w2ui-window').attr('id').replace('w2ui-window', '');
            var panel = w2panel.setActive(panelName);
            w2panel.destroy(panel.get());
        },
        destroy: function(opts) {
            var obj;
            if (event && event.type === 'click') {
                var panelName = $(event.currentTarget).closest('.w2ui-window').attr('id').replace('w2ui-window', '');
                obj = w2panel.setActive(panelName);
            } else {
                obj = w2panel.getActive();
            }
            var options = $.extend({}, $('#' + obj.name + 'w2ui-window').data('options'), opts);
            if ($('#' + obj.name + 'w2ui-window').length === 0) return;
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'close',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'closing';
            $('#' + obj.name + 'w2ui-window')
                .css('opacity', '0')
                .css(w2utils.cssPrefix({
                    'transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                    'transform': 'scale(0.9)'
                }));
            w2panel.unlockScreen(options);
            setTimeout(function() {
                //revert to initial state
                if (options.preserveContent) {
                    $(options.body).appendTo('#parentTo' + obj.name);
                    $(options.body).unwrap();
                }
                $('#' + obj.name + 'w2ui-window').remove();
                w2ui.panels.splice(w2ui.panels.indexOf(obj), 1);
                w2panel.status = 'closed';
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                w2panel.lastFocus();
            }, options.speed * 1000);
            // restore active

            w2utils.keyboard.active(options._last_w2ui_name, {});
            // remove keyboard events
            if (options.keyboard) $(document).off('keydown', obj.keydown);
        },
        destroyAll: function(callBack) {
            for (var i in w2ui.panels) {
                var obj = w2ui.panels[i];
                var options = $.extend({}, $('#' + obj.name + 'w2ui-window').data('options'), {});
                if ($('#' + obj.name + 'w2ui-window').length === 0) return;
                // trigger event
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'close',
                    target: 'popup',
                    options: options
                });
                if (eventData.isCancelled === true) return;
                // default behavior
                w2panel.status = 'closing';
                $('#' + obj.name + 'w2ui-window')
                    .css('opacity', '0')
                    .css(w2utils.cssPrefix({
                        'transition': options.speed + 's opacity, ' + options.speed + 's -webkit-transform',
                        'transform': 'scale(0.9)'
                    }));
                w2panel.unlockScreen(options);
                setTimeout(function() {
                    //revert to initial state
                    if (options.preserveContent) {
                        $(options.body).appendTo('#parentTo' + obj.name);
                        $(options.body).unwrap();
                    }
                    $('#' + obj.name + 'w2ui-window').remove();
                    w2panel.status = 'closed';
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    if (i === w2ui.panels.length) {
                        callBack.call();
                    }
                }, options.speed * 1000);
                // restore active

                w2utils.keyboard.active(options._last_w2ui_name, {});
                // remove keyboard events
                if (options.keyboard) $(document).off('keydown', obj.keydown);
            }

        },
        toggle: function(panel) {
            var name = panel.get().name;
            var options = $('#' + name + 'w2ui-window').data('options') || {
                speed: 0.2
            };
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'toggle',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // defatul action
            if (options.maximized === true) w2panel.restoreMax();
            else w2panel.max();
            // event after
            setTimeout(function() {
                panel.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, (options.speed * 1000) + 50);
        },

        max: function() {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            if (options.maximized === true) return;


            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'max',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'resizing';
            if (options.minimized) { //remove it from taskbar
                $('#' + obj.name + 'w2ui-window').appendTo('body');
                options.minimized = false;
            } else {
                options.prevPosition = $('#' + obj.name + 'w2ui-window').css('top') + ':' + $('#' + obj.name + 'w2ui-window').css('left');
                options.prevSize = $('#' + obj.name + 'w2ui-window').css('width') + ':' + $('#' + obj.name + 'w2ui-window').css('height');
            }
            // do resize
            w2panel.resize({
                width: 10000,
                height: 10000
            }, function() {
                w2panel.status = 'open';
                options.maximized = true;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
                // resize gird, form, layout inside popup
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) w2ui[name].resize();
                });
            });
        },

        minimize: function(panel) {
            var obj = panel;
            if (!obj.isActive) return;
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'min',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            if (options.minimized === true) {
                w2panel.restoreMin();
            } else {
                w2panel.status = 'minimizing';
                if (options.maximized) {
                    options.maximized = false;
                } else {
                    options.prevSize = $('#' + obj.name + 'w2ui-window').css('width') + ':' + $('#' + obj.name + 'w2ui-window').css('height');
                    options.prevPosition = $('#' + obj.name + 'w2ui-window').css('top') + ':' + $('#' + obj.name + 'w2ui-window').css('left');
                }

                w2panel.resize({
                    width: 150,
                    height: 25
                }, function() {
                    $('#' + obj.name + 'w2ui-window').appendTo($('#w2taskbar-container'));
                    w2panel.status = 'open';
                    options.minimized = true;
                    w2panel.lastFocus();
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));

                });
            }

        },

        restoreMax: function() {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            if (options.maximized !== true) return;
            //TODO Check if maximized from mimized and backwards - we have to restore to original size
            var size = options.prevSize.split(':');
            var pos = options.prevPosition.split(':');

            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'restore',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'resizing';
            // do resize
            w2panel.resize({
                width: parseInt(size[0]),
                height: parseInt(size[1]),
                top: parseInt(pos[0]),
                left: parseInt(pos[1])
            }, function() {
                w2panel.status = 'open';
                options.maximized = false;
                options.prevSize = null;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));

                // resize gird, form, layout inside popup
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) w2ui[name].resize();
                });
            });
        },
        restoreMin: function() {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            if (options.minimized !== true) return;
            //TODO Check if maximized from mimized and backwards - we have to restore to original size
            var size = options.prevSize.split(':');
            var pos = options.prevPosition.split(':');
            // trigger event
            var eventData = this.trigger({
                phase: 'before',
                type: 'restore',
                target: 'popup',
                options: options
            });
            if (eventData.isCancelled === true) return;
            // default behavior
            w2panel.status = 'resizing';
            // do resize
            if (options.minimized)
                $('#' + obj.name + 'w2ui-window').appendTo('body');
            w2panel.resize({
                width: parseInt(size[0]),
                height: parseInt(size[1]),
                top: parseInt(pos[0]),
                left: parseInt(pos[1])
            }, function() {
                w2panel.status = 'open';
                options.minimized = false;
                options.prevSize = null;
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));

                // resize gird, form, layout inside popup
                $('#' + obj.name + 'w2ui-window .w2ui-grid, #' + obj.name + 'w2ui-window .w2ui-form, #' + obj.name + 'w2ui-window .w2ui-layout').each(function() {
                    var name = $(this).attr('name');
                    if (w2ui[name] && w2ui[name].resize) w2ui[name].resize();
                });
            });
        },
        get: function() {
            var panels = $.grep(w2ui.panels, function(panel) {
                return panel.isActive;
            });
            var obj = panels[0];
            return $('#' + obj.name + 'w2ui-window').data('options');
        },

        set: function(options) {
            w2panel.open(options);
        },

        getActive: function() {
            var panels = $.grep(w2ui.panels, function(panel) {
                return panel.isActive;
            });
            if (panels.length > 0) {
                return panels[0];
            }

        },

        // if (w2ui.panels[i]).isActive) {
        //
        lastFocus: function() {
            var index_highest = 0,
                el;
            // more effective to have a class for the div you want to search and
            // pass that to your selector
            $(".w2ui-window").each(function() {
                // always use a radix when using parseInt
                var index_current = parseInt($(this).css("zIndex"), 10);
                if (index_current > index_highest) {
                    el = $(this);
                }
            });
            if (el) {
                var elName = el.attr('id').replace('w2ui-window', '');
                w2panel.setActive(elName);
            }
        },
        setActive: function(panelName) {
            var panel;
            if (w2ui.panels.length > 0) {
                for (var i in w2ui.panels) {
                    if (w2ui.panels[i].name === panelName) {
                        w2ui.panels[i].isActive = true;
                        panel = w2ui.panels[i];
                        w2panel.focus(panel);
                    } else {
                        if (w2ui.panels[i].isActive) {
                            w2ui.panels[i].isActive = false;
                        }
                    }
                }
            }
            return panel;


        },
        clear: function() {
            var obj = w2panel.getActive();
            $('#' + obj.name + 'w2ui-window .w2ui-msg-title').html('');
            $('#' + obj.name + 'w2ui-window .w2ui-msg-body').html('');
            $('#' + obj.name + 'w2ui-window .w2ui-msg-buttons').html('');
        },

        reset: function() {
            w2panel.open(w2panel.defaults);
        },

        load: function(options) {
            w2panel.status = 'loading';
            if (String(options.url) == 'undefined') {
                console.log('ERROR: The url parameter is empty.');
                return;
            }
            var tmp = String(options.url).split('#');
            var url = tmp[0];
            var selector = tmp[1];
            if (String(options) == 'undefined') options = {};
            // load url
            var html = $('#' + options.name + 'w2ui-window').data(url);
            if (typeof html !== 'undefined' && html !== null) {
                popup(html, selector);
            } else {
                $.get(url, function(data, status, obj) { // should always be $.get as it is template
                    popup(obj.responseText, selector);
                    $('#' + options.name + 'w2ui-window').data(url, obj.responseText); // remember for possible future purposes
                });
            }

            function popup(html, selector) {
                delete options.url;
                $('body').append('<div id="w2ui-tmp' + options.name + '" style="display: none">' + html + '</div>');
                if (typeof selector != 'undefined' && $('#w2ui-tmp #' + selector).length > 0) {
                    $('#w2ui-tmp' + options.name + ' #' + selector).w2panel(options);
                } else {
                    $('#w2ui-tmp' + options.name).w2panel(options);
                }
                // link styles
                if ($('#w2ui-tmp' + options.name + ' > style').length > 0) {
                    var style = $('<div>').append($('#w2ui-tmp' + options.name + ' > style').clone()).html();
                    if ($('#' + options.name + 'w2ui-window #div-style').length == 0) {
                        $('#' + options.name + 'w2ui-window').append('<div id="div-style" style="position: absolute; left: -100; width: 1px"></div>');
                    }
                    $('#' + options.name + 'w2ui-window #div-style').html(style);
                }
                $('#w2ui-tmp' + options.name).remove();
            }
        },

        message: function(options) {
            var obj = w2panel.getActive();
            $().w2tag(); // hide all tags
            if (!options) options = {
                width: 200,
                height: 100
            };
            var pWidth = parseInt($('#' + obj.name + 'w2ui-window').width());
            var pHeight = parseInt($('#' + obj.name + 'w2ui-window').height());
            options.originalWidth = options.width;
            options.originalHeight = options.height;
            if (parseInt(options.width) < 10) options.width = 10;
            if (parseInt(options.height) < 10) options.height = 10;
            if (typeof options.hideOnClick == 'undefined') options.hideOnClick = false;
            var poptions = $('#' + obj.name + 'w2ui-window').data('options') || {};
            var titleHeight = parseInt($('#' + obj.name + 'w2ui-window > .w2ui-msg-title').css('height'));
            if (typeof options.width == 'undefined' || options.width > poptions.width - 10) {
                options.width = poptions.width - 10;
            }
            if (typeof options.height == 'undefined' || options.height > poptions.height - titleHeight - 5) {
                options.height = poptions.height - titleHeight - 5; // need margin from bottom only
            }
            // negative value means margin
            if (options.originalHeight < 0) options.height = pHeight + options.originalHeight - titleHeight;
            if (options.originalWidth < 0) options.width = pWidth + options.originalWidth * 2; // x 2 because there is left and right margin

            var head = $('#' + obj.name + 'w2ui-window .w2ui-msg-title');
            var msgCount = $('#' + obj.name + 'w2ui-window .w2ui-popup-message').length;
            // remove message
            if ($.trim(options.html) == '' && $.trim(options.body) == '' && $.trim(options.buttons) == '') {
                var $msg = $('#' + obj.name + 'w2ui-window #w2ui-message' + (msgCount - 1));
                var options = $msg.data('options') || {};
                $msg.css(w2utils.cssPrefix({
                    'transition': '0.15s',
                    'transform': 'translateY(-' + options.height + 'px)'
                }));
                if (msgCount == 1) {
                    w2panel.unlock(150);
                } else {
                    $('#' + obj.name + 'w2ui-window #w2ui-message' + (msgCount - 2)).css('z-index', 1500);
                }
                setTimeout(function() {
                    $msg.remove();
                    if (typeof options.onClose == 'function') options.onClose();
                }, 150);
            } else {
                if ($.trim(options.body) != '' || $.trim(options.buttons) != '') {
                    options.html = '<div class="w2ui-popup-message-body">' + options.body + '</div>' +
                        '<div class="w2ui-popup-message-buttons">' + options.buttons + '</div>';
                }
                // hide previous messages
                $('#' + obj.name + 'w2ui-window .w2ui-popup-message').css('z-index', 1390);
                head.css('z-index', 1501);
                // add message
                $('#' + obj.name + 'w2ui-window .w2ui-box1')
                    .before('<div id="w2ui-message' + msgCount + '" class="w2ui-popup-message" style="display: none; z-index: 1500; ' +
                        (head.length == 0 ? 'top: 0px;' : 'top: ' + w2utils.getSize(head, 'height') + 'px;') +
                        (typeof options.width != 'undefined' ? 'width: ' + options.width + 'px; left: ' + ((pWidth - options.width) / 2) + 'px;' : 'left: 10px; right: 10px;') +
                        (typeof options.height != 'undefined' ? 'height: ' + options.height + 'px;' : 'bottom: 6px;') +
                        w2utils.cssPrefix('transition', '.3s', true) + '"' +
                        (options.hideOnClick === true ? 'onclick="w2panel.message();"' : '') + '>' +
                        '</div>');
                $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).data('options', options);
                var display = $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css('display');
                $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css(w2utils.cssPrefix({
                    'transform': (display == 'none' ? 'translateY(-' + options.height + 'px)' : 'translateY(0px)')
                }));
                if (display == 'none') {
                    $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).show().html(options.html);
                    // timer needs to animation
                    setTimeout(function() {
                        $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css(w2utils.cssPrefix({
                            'transform': (display == 'none' ? 'translateY(0px)' : 'translateY(-' + options.height + 'px)')
                        }));
                    }, 1);
                    // timer for lock
                    if (msgCount == 0) w2panel.lock();
                    setTimeout(function() {
                        // has to be on top of lock
                        $('#' + obj.name + 'w2ui-window #w2ui-message' + msgCount).css(w2utils.cssPrefix({
                            'transition': '0s'
                        }));
                        if (typeof options.onOpen == 'function') options.onOpen();
                    }, 350);
                }
            }
        },

        lock: function(msg, showSpinner) {
            var obj = w2panel.getActive();
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift($('#' + obj.name + 'w2ui-window'));
            w2utils.lock.apply(window, args);
        },

        unlock: function(speed) {
            var obj = w2panel.getActive();
            w2utils.unlock($('#' + obj.name + 'w2ui-window'), speed);
        },

        // --- INTERNAL FUNCTIONS

        lockScreen: function(options) {
            if ($('#w2ui-lock').length > 0) return false;
            if (typeof options == 'undefined') options = $('#' + options.name + 'w2ui-window').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2panel.defaults, options);
            // show element
            $('body').append('<div id="w2ui-lock" ' +
                '    onmousewheel="if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true; if (event.preventDefault) event.preventDefault(); else return false;"' +
                '    style="position: ' + (w2utils.engine == 'IE5' ? 'absolute' : 'fixed') + '; z-index: 1049; left: 0px; top: 0px; ' +
                '           padding: 0px; margin: 0px; background-color: ' + options.color + '; width: 100%; height: 100%; opacity: 0;"></div>');
            // lock screen
            setTimeout(function() {
                $('#w2ui-lock')
                    .css('opacity', options.opacity)
                    .css(w2utils.cssPrefix('transition', options.speed + 's opacity'));
            }, 1);
            // add events
            if (options.modal === true) {
                $('#w2ui-lock').on('mousedown', function() {
                    $('#w2ui-lock')
                        .css('opacity', '0.6')
                        .css(w2utils.cssPrefix('transition', '.1s'));
                });
                $('#w2ui-lock').on('mouseup', function() {
                    setTimeout(function() {
                        $('#w2ui-lock')
                            .css('opacity', options.opacity)
                            .css(w2utils.cssPrefix('transition', '.1s'));
                    }, 100);
                });
            } else {
                $('#w2ui-lock').on('mousedown', function() {
                    w2panel.destroy();
                });
            }
            return true;
        },

        unlockScreen: function(options) {
            if ($('#w2ui-lock').length == 0) return false;
            if (typeof options == 'undefined') options = $('#' + options.name + 'w2ui-window').data('options');
            if (typeof options == 'undefined') options = {};
            options = $.extend({}, w2panel.defaults, options);
            $('#w2ui-lock')
                .css('opacity', '0')
                .css(w2utils.cssPrefix('transition', options.speed + 's opacity'));
            setTimeout(function() {
                $('#w2ui-lock').remove();
            }, options.speed * 1000);
            return true;
        },

        resizeMessages: function() {
            var obj = this;
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            // see if there are messages and resize them
            $('#' + obj.name + 'w2ui-window .w2ui-popup-message').each(function() {
                var moptions = $(this).data('options');
                var $popup = $('#' + obj.name + 'w2ui-window');
                if (parseInt(moptions.width) < 10) moptions.width = 10;
                if (parseInt(moptions.height) < 10) moptions.height = 10;
                var titleHeight = parseInt($popup.find('> .w2ui-msg-title').css('height'));
                var pWidth = parseInt($popup.width());
                var pHeight = parseInt($popup.height());
                // recalc width
                moptions.width = moptions.originalWidth;
                if (moptions.width > pWidth - 10) {
                    moptions.width = pWidth - 10;
                }
                // recalc height
                moptions.height = moptions.originalHeight;
                if (moptions.height > pHeight - titleHeight - 5) {
                    moptions.height = pHeight - titleHeight - 5;
                }
                if (moptions.originalHeight < 0) moptions.height = pHeight + moptions.originalHeight - titleHeight;
                if (moptions.originalWidth < 0) moptions.width = pWidth + moptions.originalWidth * 2; // x 2 because there is left and right margin
                $(this).css({
                    left: ((pWidth - moptions.width) / 2) + 'px',
                    width: moptions.width + 'px',
                    height: moptions.height + 'px'
                });
            });
        },

        resize: function(matrix, callBack) {
            var obj = w2panel.getActive();
            var options = $('#' + obj.name + 'w2ui-window').data('options') || {};
            width = parseInt(matrix.width);
            height = parseInt(matrix.height);
            // calculate new position
            var top, left;
            if (matrix.top && matrix.left) {
                top = parseInt(matrix.top);
                left = parseInt(matrix.left);
            } else {
                if ($(window).width() - 10 < width) width = $(window).width() - 10;
                if ($(window).height() - 10 < height) height = $(window).height() - 10;
                top = ($(window).height() - height) / 2 * 0.8;
                left = ($(window).width() - width) / 2;
            }
            // resize there
            $('#' + obj.name + 'w2ui-window')
                .css(w2utils.cssPrefix({
                    'transition': options.speed + 's width, ' + options.speed + 's height, ' + options.speed + 's left, ' + options.speed + 's top'
                }))
                .css({
                    'top': top,
                    'left': left,
                    'width': width,
                    'height': height
                });
            var tmp_int = setInterval(function() {
                obj.resizeMessages();
            }, 10); // then messages resize nicely
            setTimeout(function() {
                clearInterval(tmp_int);
                options.width = width;
                options.height = height;
                obj.resizeMessages();
                if (typeof callBack == 'function') callBack();
            }, (options.speed * 1000) + 50); // give extra 50 ms
        }
    };

    // merge in event handling
    $.extend(w2panel, w2utils.event);

})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2tabs        - tabs widget
 *        - $().w2tabs    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - on overflow display << >>
 *
 ************************************************************************/

(function() {
    var w2tabs = function(options) {
        this.box = null; // DOM Element that holds the element
        this.name = null; // unique name for w2ui
        this.active = null;
        this.tabs = [];
        this.routeData = {}; // data for dynamic routes
        this.right = '';
        this.style = '';
        this.onClick = null;
        this.onClose = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;
        this.overflow = true;

        $.extend(this, {
            handlers: []
        });
        $.extend(true, this, w2obj.tabs, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2tabs = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2tabs')) return;
            // extend tabs
            var tabs = method.tabs || [];
            var object = new w2tabs(method);
            for (var i = 0; i < tabs.length; i++) {
                object.tabs[i] = $.extend({}, w2tabs.prototype.tab, tabs[i]);
            }
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            // register new object
            w2ui[object.name] = object;
            return object;
        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2tabs');
            return undefined;
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2tabs.prototype = {
        tab: {
            id: null, // command to be sent to all event handlers
            text: '',
            route: null,
            hidden: false,
            disabled: false,
            closable: false,
            hint: '',
            onClick: null,
            onRefresh: null,
            onClose: null
        },

        add: function(tab) {
            return this.insert(null, tab);
        },

        insert: function(id, tab) {
            if (!$.isArray(tab)) tab = [tab];
            // assume it is array
            for (var i = 0; i < tab.length; i++) {
                // checks
                if (typeof tab[i].id === 'undefined') {
                    console.log('ERROR: The parameter "id" is required but not supplied. (obj: ' + this.name + ')');
                    return;
                }
                if (!w2utils.checkUniqueId(tab[i].id, this.tabs, 'tabs', this.name)) return;
                // add tab
                var newTab = $.extend({}, w2tabs.prototype.tab, tab[i]);
                if (id === null || typeof id === 'undefined') {
                    this.tabs.push(newTab);
                } else {
                    var middle = this.get(id, true);
                    this.tabs = this.tabs.slice(0, middle).concat([newTab], this.tabs.slice(middle));
                }
                this.refresh(tab[i].id);
            }
        },

        remove: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab) return false;
                removed++;
                // remove from array
                this.tabs.splice(this.get(tab.id, true), 1);
                // remove from screen
                $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id)).remove();
            }
            return removed;
        },

        select: function(id) {
            if (this.active == id || this.get(id) === null) return false;
            this.active = id;
            this.refresh();
            return true;
        },

        set: function(id, tab) {
            var index = this.get(id, true);
            if (index === null) return false;
            $.extend(this.tabs[index], tab);
            this.refresh(id);
            return true;
        },

        get: function(id, returnIndex) {
            if (arguments.length === 0) {
                var all = [];
                for (var i1 = 0; i1 < this.tabs.length; i1++) {
                    if (this.tabs[i1].id != null) {
                        all.push(this.tabs[i1].id);
                    }
                }
                return all;
            } else {
                for (var i2 = 0; i2 < this.tabs.length; i2++) {
                    if (this.tabs[i2].id == id) { // need to be == since id can be numeric
                        return (returnIndex === true ? i2 : this.tabs[i2]);
                    }
                }
            }
            return null;
        },

        show: function() {
            var obj = this;
            var shown = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.hidden === false) continue;
                shown++;
                tab.hidden = false;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return shown;
        },

        hide: function() {
            var obj = this;
            var hidden = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.hidden === true) continue;
                hidden++;
                tab.hidden = true;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return hidden;
        },

        enable: function() {
            var obj = this;
            var enabled = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.disabled === false) continue;
                enabled++;
                tab.disabled = false;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return enabled;
        },

        disable: function() {
            var obj = this;
            var disabled = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var tab = this.get(arguments[a]);
                if (!tab || tab.disabled === true) continue;
                disabled++;
                tab.disabled = true;
                tmp.push(tab.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return disabled;
        },

        refresh: function(id) {
            var time = (new Date()).getTime();
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'refresh',
                target: (typeof id !== 'undefined' ? id : this.name),
                object: this.get(id)
            });
            if (eventData.isCancelled === true) return;
            if (typeof id === 'undefined') {
                // refresh all
                for (var i = 0; i < this.tabs.length; i++) this.refresh(this.tabs[i].id);
            } else {
                // create or refresh only one item
                var tab = this.get(id);
                if (tab === null) return false;
                if (typeof tab.caption !== 'undefined') tab.text = tab.caption;

                var jq_el = $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id));
                var tabHTML = (tab.closable ? '<div class="w2ui-tab-close" onclick="w2ui[\'' + this.name + '\'].animateClose(\'' + tab.id + '\', event);"></div>' : '') +
                    '    <div class="w2ui-tab' + (this.active === tab.id ? ' active' : '') + (tab.closable ? ' closable' : '') + '" ' +
                    '        title="' + (typeof tab.hint !== 'undefined' ? tab.hint : '') + '"' +
                    '        onclick="w2ui[\'' + this.name + '\'].click(\'' + tab.id + '\', event);">' + tab.text + '</div>';
                if (jq_el.length === 0) {
                    // does not exist - create it
                    var addStyle = '';
                    if (tab.hidden) {
                        addStyle += 'display: none;';
                    }
                    if (tab.disabled) {
                        addStyle += 'opacity: 0.2; -moz-opacity: 0.2; -webkit-opacity: 0.2; -o-opacity: 0.2; filter:alpha(opacity=20);';
                    }
                    var html = '<td id="tabs_' + this.name + '_tab_' + tab.id + '" style="' + addStyle + '" valign="middle">' + tabHTML + '</td>';
                    if (this.get(id, true) !== this.tabs.length - 1 && $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true)) + 1].id)).length > 0) {
                        $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true)) + 1].id)).before(html);
                    } else {
                        $(this.box).find('#tabs_' + this.name + '_right').before(html);
                    }
                } else {
                    // refresh
                    jq_el.html(tabHTML);
                    if (tab.hidden) {
                        jq_el.css('display', 'none');
                    } else {
                        jq_el.css('display', '');
                    }
                    if (tab.disabled) {
                        jq_el.css({
                            'opacity': '0.2',
                            '-moz-opacity': '0.2',
                            '-webkit-opacity': '0.2',
                            '-o-opacity': '0.2',
                            'filter': 'alpha(opacity=20)'
                        });
                    } else {
                        jq_el.css({
                            'opacity': '1',
                            '-moz-opacity': '1',
                            '-webkit-opacity': '1',
                            '-o-opacity': '1',
                            'filter': 'alpha(opacity=100)'
                        });
                    }
                }
            }
            // right html
            $('#tabs_' + this.name + '_right').html(this.right);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // var boxwidth = $(this.box).width() + 'px';
            // $('<div class="tabs-wrapper" style="width:' + boxwidth + ';overflow:auto"></div>').prependTo($(this.box));
            return (new Date()).getTime() - time;
        },

        render: function(box) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'render',
                target: this.name,
                box: box
            });
            if (eventData.isCancelled === true) return;
            // default action
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            if (typeof box !== 'undefined' && box !== null) {
                if ($(this.box).find('> table #tabs_' + this.name + '_right').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-tabs')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return false;
            // render all buttons
            var html = '<table cellspacing="0" cellpadding="1" width="100%">' +
                '    <tr><td width="100%" id="tabs_' + this.name + '_right" align="right">' + this.right + '</td></tr>' +
                '</table>';
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-tabs')
                .html(html);
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.refresh();
            return (new Date()).getTime() - time;
        },

        resize: function() {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name
            });
            if (eventData.isCancelled === true) return;

            // intentionaly blank

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'destroy',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            // clean up
            if ($(this.box).find('> table #tabs_' + this.name + '_right').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-tabs')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ===================================================
        // -- Internal Event Handlers

        click: function(id, event) {
            var tab = this.get(id);
            if (tab === null || tab.disabled) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'click',
                target: id,
                tab: tab,
                object: tab,
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.active) + ' .w2ui-tab').removeClass('active');
            this.active = tab.id;
            // route processing
            if (tab.route) {
                var route = String('/' + tab.route).replace(/\/{2,}/g, '/');
                var info = w2utils.parseRoute(route);
                if (info.keys.length > 0) {
                    for (var k = 0; k < info.keys.length; k++) {
                        if (this.routeData[info.keys[k].name] == null) continue;
                        route = route.replace((new RegExp(':' + info.keys[k].name, 'g')), this.routeData[info.keys[k].name]);
                    }
                }
                setTimeout(function() {
                    window.location.hash = route;
                }, 1);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.refresh(id);
        },

        animateClose: function(id, event) {
            var tab = this.get(id);
            if (tab === null || tab.disabled) return false;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'close',
                target: id,
                object: this.get(id),
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default action
            var obj = this;
            $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id)).css({
                '-webkit-transition': '.2s',
                '-moz-transition': '2s',
                '-ms-transition': '.2s',
                '-o-transition': '.2s',
                opacity: '0'
            });
            setTimeout(function() {
                var width = $(obj.box).find('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id)).width();
                $(obj.box).find('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id))
                    .html('<div style="width: ' + width + 'px; -webkit-transition: .2s; -moz-transition: .2s; -ms-transition: .2s; -o-transition: .2s"></div>');
                setTimeout(function() {
                    $(obj.box).find('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id)).find(':first-child').css({
                        'width': '0px'
                    });
                }, 50);
            }, 200);
            setTimeout(function() {
                obj.remove(id);
            }, 450);
            // event before
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.refresh();
        },

        animateInsert: function(id, tab) {
            if (this.get(id) === null) return;
            if (!$.isPlainObject(tab)) return;
            // check for unique
            if (!w2utils.checkUniqueId(tab.id, this.tabs, 'tabs', this.name)) return;
            // insert simple div
            var jq_el = $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(tab.id));
            if (jq_el.length !== 0) return; // already exists
            // measure width
            if (typeof tab.caption !== 'undefined') tab.text = tab.caption;
            var tmp = '<div id="_tmp_tabs" class="w2ui-reset w2ui-tabs" style="position: absolute; top: -1000px;">' +
                '<table cellspacing="0" cellpadding="1" width="100%"><tr>' +
                '<td id="_tmp_simple_tab" style="" valign="middle">' +
                (tab.closable ? '<div class="w2ui-tab-close"></div>' : '') +
                '    <div class="w2ui-tab ' + (this.active === tab.id ? 'active' : '') + '">' + tab.text + '</div>' +
                '</td></tr></table>' +
                '</div>';
            $('body').append(tmp);
            // create dummy element
            var tabHTML = '<div style="width: 1px; -webkit-transition: 0.2s; -moz-transition: 0.2s; -ms-transition: 0.2s; -o-transition: 0.2s;">&nbsp;</div>';
            var addStyle = '';
            if (tab.hidden) {
                addStyle += 'display: none;';
            }
            if (tab.disabled) {
                addStyle += 'opacity: 0.2; -moz-opacity: 0.2; -webkit-opacity: 0.2; -o-opacity: 0.2; filter:alpha(opacity=20);';
            }
            var html = '<td id="tabs_' + this.name + '_tab_' + tab.id + '" style="' + addStyle + '" valign="middle">' + tabHTML + '</td>';
            if (this.get(id, true) !== this.tabs.length && $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true))].id)).length > 0) {
                $(this.box).find('#tabs_' + this.name + '_tab_' + w2utils.escapeId(this.tabs[parseInt(this.get(id, true))].id)).before(html);
            } else {
                $(this.box).find('#tabs_' + this.name + '_right').before(html);
            }
            // -- move
            var obj = this;
            setTimeout(function() {
                var width = $('#_tmp_simple_tab').width();
                $('#_tmp_tabs').remove();
                $('#tabs_' + obj.name + '_tab_' + w2utils.escapeId(tab.id) + ' > div').css('width', width + 'px');
            }, 1);
            setTimeout(function() {
                // insert for real
                obj.insert(id, tab);
            }, 200);
        }
    };

    $.extend(w2tabs.prototype, w2utils.event);
    w2obj.tabs = w2tabs;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2toolbar        - toolbar widget
 *        - $().w2toolbar    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - on overflow display << >>
 *   - verticle toolbar
 *
 ************************************************************************/

(function() {
    var w2toolbar = function(options) {
        this.box = null; // DOM Element that holds the element
        this.name = null; // unique name for w2ui
        this.routeData = {}; // data for dynamic routes
        this.items = [];
        this.right = ''; // HTML text on the right of toolbar
        this.onClick = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;

        $.extend(true, this, w2obj.toolbar, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2toolbar = function(method) {
        if (typeof method === 'object' || !method) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2toolbar')) return;
            // extend items
            var items = method.items || [];
            var object = new w2toolbar(method);
            $.extend(object, {
                items: [],
                handlers: []
            });
            for (var i = 0; i < items.length; i++) {
                object.items[i] = $.extend({}, w2toolbar.prototype.item, items[i]);
            }
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            // register new object
            w2ui[object.name] = object;
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2toolbar');
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2toolbar.prototype = {
        item: {
            id: null, // command to be sent to all event handlers
            type: 'button', // button, check, radio, drop, menu, break, html, spacer
            text: '',
            route: null, // if not null, it is route to go
            html: '',
            img: null,
            icon: null,
            count: null,
            hidden: false,
            disabled: false,
            checked: false, // used for radio buttons
            arrow: true, // arrow down for drop/menu types
            hint: '',
            group: null, // used for radio buttons
            items: null, // for type menu it is an array of items in the menu
            overlay: {},
            onClick: null
        },

        add: function(items) {
            this.insert(null, items);
        },

        insert: function(id, items) {
            if (!$.isArray(items)) items = [items];
            for (var o = 0; o < items.length; o++) {
                // checks
                if (typeof items[o].type === 'undefined') {
                    console.log('ERROR: The parameter "type" is required but not supplied in w2toolbar.add() method.');
                    return;
                }
                if ($.inArray(String(items[o].type), ['button', 'check', 'radio', 'drop', 'menu', 'break', 'html', 'spacer']) === -1) {
                    console.log('ERROR: The parameter "type" should be one of the following [button, check, radio, drop, menu, break, html, spacer] ' +
                        'in w2toolbar.add() method.');
                    return;
                }
                if (typeof items[o].id === 'undefined') {
                    console.log('ERROR: The parameter "id" is required but not supplied in w2toolbar.add() method.');
                    return;
                }
                if (!w2utils.checkUniqueId(items[o].id, this.items, 'toolbar items', this.name)) return;
                // add item
                var it = $.extend({}, w2toolbar.prototype.item, items[o]);
                if (id == null) {
                    this.items.push(it);
                } else {
                    var middle = this.get(id, true);
                    this.items = this.items.slice(0, middle).concat([it], this.items.slice(middle));
                }
                this.refresh(it.id);
            }
        },

        remove: function() {
            var removed = 0;
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                removed++;
                // remove from screen
                $(this.box).find('#tb_' + this.name + '_item_' + w2utils.escapeId(it.id)).remove();
                // remove from array
                var ind = this.get(it.id, true);
                if (ind) this.items.splice(ind, 1);
            }
            return removed;
        },

        set: function(id, item) {
            var index = this.get(id, true);
            if (index === null) return false;
            $.extend(this.items[index], item);
            this.refresh(id);
            return true;
        },

        get: function(id, returnIndex) {
            if (arguments.length === 0) {
                var all = [];
                for (var i1 = 0; i1 < this.items.length; i1++)
                    if (this.items[i1].id !== null) all.push(this.items[i1].id);
                return all;
            }
            for (var i2 = 0; i2 < this.items.length; i2++) {
                if (this.items[i2].id === id) {
                    if (returnIndex === true) return i2;
                    else return this.items[i2];
                }
            }
            return null;
        },

        show: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.hidden = false;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        hide: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.hidden = true;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        /**
         * modified : to enable and disable menu items recursevly
         * usage: Pass an array as param , first item: menu item id, second item: menu parent id
         */

        enable: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) {
                    if (typeof arguments[a] == 'object') {
                        var menu = this.get(arguments[a][1]);
                        if (menu.type === 'menu') {
                            for (var x = 0; x < menu.items.length; x++) {
                                var ix = menu.items[x];
                                if (!ix || ix.id !== arguments[a][0]) continue;
                                items++;
                                ix.disabled = false;
                                tmp.push(ix.id);
                            }
                        }
                        continue;
                    } else {
                        continue;
                    }
                    continue;
                }

                items++;
                it.disabled = false;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },
        disable: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) {
                    if (typeof arguments[a] == 'object') {
                        var menu = this.get(arguments[a][1]);
                        if (menu.type === 'menu') {
                            for (var x = 0; x < menu.items.length; x++) {
                                var ix = menu.items[x];
                                if (!ix || ix.id !== arguments[a][0]) continue;
                                items++;
                                ix.disabled = true;
                                tmp.push(ix.id);
                            }
                        }
                        continue;
                    } else {
                        continue;
                    }
                    continue;
                }

                items++;
                it.disabled = true;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        // enable: function() {
        //     var obj = this;
        //     var items = 0;
        //     var tmp = [];
        //     for (var a = 0; a < arguments.length; a++) {
        //         var it = this.get(arguments[a]);
        //         if (!it) continue;
        //         items++;
        //         it.disabled = false;
        //         tmp.push(it.id);
        //     }
        //     setTimeout(function() {
        //         for (var t in tmp) obj.refresh(tmp[t]);
        //     }, 15); // needs timeout 
        //     return items;
        // },

        // disable: function() {
        //     var obj = this;
        //     var items = 0;
        //     var tmp = [];
        //     for (var a = 0; a < arguments.length; a++) {
        //         var it = this.get(arguments[a]);
        //         if (!it) continue;
        //         items++;
        //         it.disabled = true;
        //         tmp.push(it.id);
        //     }
        //     setTimeout(function() {
        //         for (var t in tmp) obj.refresh(tmp[t]);
        //     }, 15); // needs timeout 
        //     return items;
        // },

        check: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.checked = true;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        uncheck: function() {
            var obj = this;
            var items = 0;
            var tmp = [];
            for (var a = 0; a < arguments.length; a++) {
                var it = this.get(arguments[a]);
                if (!it) continue;
                items++;
                it.checked = false;
                tmp.push(it.id);
            }
            setTimeout(function() {
                for (var t in tmp) obj.refresh(tmp[t]);
            }, 15); // needs timeout 
            return items;
        },

        render: function(box) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'render',
                target: this.name,
                box: box
            });
            if (eventData.isCancelled === true) return;

            if (box != null) {
                if ($(this.box).find('> table #tb_' + this.name + '_right').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-toolbar')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return;
            // render all buttons
            var html = '<table cellspacing="0" cellpadding="0" width="100%">' +
                '<tr>';
            for (var i = 0; i < this.items.length; i++) {
                var it = this.items[i];
                if (it.id == null) it.id = "item_" + i;
                if (it === null) continue;
                if (it.type === 'spacer') {
                    html += '<td width="100%" id="tb_' + this.name + '_item_' + it.id + '" align="right"></td>';
                } else {
                    html += '<td id="tb_' + this.name + '_item_' + it.id + '" style="' + (it.hidden ? 'display: none' : '') + '" ' +
                        '    class="' + (it.disabled ? 'disabled' : '') + '" valign="middle">' + this.getItemHTML(it) +
                        '</td>';
                }
            }
            html += '<td width="100%" id="tb_' + this.name + '_right" align="right">' + this.right + '</td>';
            html += '</tr>' +
                '</table>';
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-toolbar')
                .html(html);
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        refresh: function(id) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'refresh',
                target: (typeof id !== 'undefined' ? id : this.name),
                item: this.get(id)
            });
            if (eventData.isCancelled === true) return;

            if (id == null) {
                // refresh all
                for (var i = 0; i < this.items.length; i++) {
                    var it1 = this.items[i];
                    if (it1.id == null) it1.id = "item_" + i;
                    this.refresh(it1.id);
                }
            }
            // create or refresh only one item
            var it = this.get(id);
            if (it === null) return false;

            var el = $(this.box).find('#tb_' + this.name + '_item_' + w2utils.escapeId(it.id));
            var html = this.getItemHTML(it);
            if (el.length === 0) {
                // does not exist - create it
                if (it.type === 'spacer') {
                    html = '<td width="100%" id="tb_' + this.name + '_item_' + it.id + '" align="right"></td>';
                } else {
                    html = '<td id="tb_' + this.name + '_item_' + it.id + '" style="' + (it.hidden ? 'display: none' : '') + '" ' +
                        '    class="' + (it.disabled ? 'disabled' : '') + '" valign="middle">' + html +
                        '</td>';
                }
                if (this.get(id, true) === this.items.length - 1) {
                    $(this.box).find('#tb_' + this.name + '_right').before(html);
                } else {
                    $(this.box).find('#tb_' + this.name + '_item_' + w2utils.escapeId(this.items[parseInt(this.get(id, true)) + 1].id)).before(html);
                }
            } else {
                // refresh
                el.html(html);
                if (it.hidden) {
                    el.css('display', 'none');
                } else {
                    el.css('display', '');
                }
                if (it.disabled) {
                    el.addClass('disabled');
                } else {
                    el.removeClass('disabled');
                }
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        resize: function() {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'resize',
                target: this.name
            });
            if (eventData.isCancelled === true) return;

            // intentionaly blank

            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'destroy',
                target: this.name
            });
            if (eventData.isCancelled === true) return;
            // clean up
            if ($(this.box).find('> table #tb_' + this.name + '_right').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-toolbar')
                    .html('');
            }
            $(this.box).html('').remove();
            delete w2ui[this.name];
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        // ========================================
        // --- Internal Functions

        getItemHTML: function(item) {
            var html = '';

            if (typeof item.caption !== 'undefined') item.text = item.caption;
            if (typeof item.hint === 'undefined') item.hint = '';
            if (typeof item.text === 'undefined') item.text = '';

            switch (item.type) {
                case 'menu':
                case 'button':
                case 'check':
                case 'radio':
                case 'drop':
                    var img = '<td>&nbsp;</td>';
                    if (item.img) img = '<td><div class="w2ui-tb-image w2ui-icon ' + item.img + '"></div></td>';
                    if (item.icon) img = '<td><div class="w2ui-tb-image"><span class="' + item.icon + '"></span></div></td>';
                    html += '<table cellpadding="0" cellspacing="0" title="' + item.hint + '" class="w2ui-button ' + (item.checked ? 'checked' : '') + '" ' +
                        '       onclick     = "var el=w2ui[\'' + this.name + '\']; if (el) el.click(\'' + item.id + '\', event);" ' +
                        '       onmouseover = "' + (!item.disabled ? "$(this).addClass('over');" + (item.submenu ? "var el=w2ui[\"" + this.name + "\"]; if (el) el.openSubmenu(\"" + item.id + "\", event);" : "") : "") + '"' +
                        '       onmouseout  = "' + (!item.disabled ? "$(this).removeClass('over').removeClass('down');" : "") + '"' +
                        '       onmousedown = "' + (!item.disabled ? "$(this).addClass('down');" : "") + '"' +
                        '       onmouseup   = "' + (!item.disabled ? "$(this).removeClass('down');" : "") + '"' +
                        '>' +
                        '<tr><td>' +
                        '  <table cellpadding="1" cellspacing="0">' +
                        '  <tr>' +
                        img +
                        (item.text !== '' ? '<td class="w2ui-tb-caption" nowrap>' + item.text + '</td>' : '') +
                        (item.count != null ? '<td class="w2ui-tb-count" nowrap><span>' + item.count + '</span></td>' : '') +
                        (((item.type === 'drop' || item.type === 'menu') && item.arrow !== false) ?
                            '<td class="w2ui-tb-down" nowrap><div></div></td>' : '') +
                        '  </tr></table>' +
                        '</td></tr></table>';
                    break;

                case 'break':
                    html += '<table cellpadding="0" cellspacing="0"><tr>' +
                        '    <td><div class="w2ui-break">&nbsp;</div></td>' +
                        '</tr></table>';
                    break;

                case 'html':
                    html += '<table cellpadding="0" cellspacing="0"><tr>' +
                        '    <td nowrap>' + item.html + '</td>' +
                        '</tr></table>';
                    break;
            }

            var newHTML = '';
            if (typeof item.onRender === 'function') newHTML = item.onRender.call(this, item.id, html);
            if (typeof this.onRender === 'function') newHTML = this.onRender(item.id, html);
            if (newHTML !== '' && newHTML != null) html = newHTML;
            return html;
        },
        openSubmenu: function(el, event) {
            alert(el);
        },

        menuClick: function(event) {
            var obj = this;
            if (event.item && !event.item.disabled) {
                // event before
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'click',
                    target: event.item.id + ':' + event.subItem.id,
                    item: event.item,
                    subItem: event.subItem,
                    originalEvent: event.originalEvent
                });
                if (eventData.isCancelled === true) return;

                // route processing
                var it = event.subItem;
                if (it.route) {
                    var route = String('/' + it.route).replace(/\/{2,}/g, '/');
                    var info = w2utils.parseRoute(route);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            if (obj.routeData[info.keys[k].name] == null) continue;
                            route = route.replace((new RegExp(':' + info.keys[k].name, 'g')), this.routeData[info.keys[k].name]);
                        }
                    }
                    setTimeout(function() {
                        window.location.hash = route;
                    }, 1);
                }

                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        },

        click: function(id, event) {
            var obj = this;
            var it = this.get(id);
            if (it && !it.disabled) {
                // event before
                var eventData = this.trigger({
                    phase: 'before',
                    type: 'click',
                    target: (typeof id !== 'undefined' ? id : this.name),
                    item: it,
                    object: it,
                    originalEvent: event
                });
                if (eventData.isCancelled === true) return;

                var btn = $('#tb_' + this.name + '_item_' + w2utils.escapeId(it.id) + ' table.w2ui-button');
                btn.removeClass('down');

                if (it.type === 'radio') {
                    for (var i = 0; i < this.items.length; i++) {
                        var itt = this.items[i];
                        if (itt == null || itt.id === it.id || itt.type !== 'radio') continue;
                        if (itt.group === it.group && itt.checked) {
                            itt.checked = false;
                            this.refresh(itt.id);
                        }
                    }
                    it.checked = true;
                    btn.addClass('checked');
                }

                if (it.type === 'drop' || it.type === 'menu') {
                    if (it.checked) {
                        // if it was already checked, second click will hide it
                        it.checked = false;
                    } else {
                        // show overlay
                        setTimeout(function() {
                            var el = $('#tb_' + obj.name + '_item_' + w2utils.escapeId(it.id));
                            if (!$.isPlainObject(it.overlay)) it.overlay = {};
                            var left = (el.width() - 50) / 2;
                            if (left > 19) left = 19;
                            if (it.type === 'drop') {
                                el.w2overlay(it.html, $.extend({
                                    left: left,
                                    top: 3
                                }, it.overlay));
                            }
                            if (it.type === 'menu') {
                                el.w2menu(it.items, $.extend({
                                    left: left,
                                    top: 3
                                }, it.overlay, {
                                    select: function(event) {
                                        obj.menuClick({
                                            item: it,
                                            subItem: event.item,
                                            originalEvent: event.originalEvent
                                        });
                                        hideDrop();
                                    }
                                }));
                            }
                            // window.click to hide it
                            $(document).on('click', hideDrop);

                            function hideDrop() {
                                $(document).off('click', hideDrop);
                                it.checked = false;
                                btn.removeClass('checked');
                            }
                        }, 1);
                    }
                }

                if (it.type === 'check' || it.type === 'drop' || it.type === 'menu') {
                    it.checked = !it.checked;
                    if (it.checked) {
                        btn.addClass('checked');
                    } else {
                        btn.removeClass('checked');
                    }
                }
                // route processing
                if (it.route) {
                    var route = String('/' + it.route).replace(/\/{2,}/g, '/');
                    var info = w2utils.parseRoute(route);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            route = route.replace((new RegExp(':' + info.keys[k].name, 'g')), this.routeData[info.keys[k].name]);
                        }
                    }
                    setTimeout(function() {
                        window.location.hash = route;
                    }, 1);
                }
                // event after
                this.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }
        }
    };

    $.extend(w2toolbar.prototype, w2utils.event);
    w2obj.toolbar = w2toolbar;
})();

/************************************************************************
*   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
*   - Following objects defined
*        - w2sidebar        - sidebar widget
*        - $().w2sidebar    - jQuery wrapper
*   - Dependencies: jQuery, w2utils
*
* == NICE TO HAVE ==
*   - return ids of all subitems
*   - add find() method to find nodes by a specific criteria (I want all nodes for exampe)
*   - dbl click should be like it is in grid (with timer not HTML dbl click event)
*   - reorder with grag and drop
*   - add route property that would navigate to a #route
*   - node.style is missleading - should be there to apply color for example
*
************************************************************************/

(function () {
    var w2sidebar = function (options) {
        this.name          = null;
        this.box           = null;
        this.sidebar       = null;
        this.parent        = null;
        this.nodes         = [];        // Sidebar child nodes
        this.menu          = [];
        this.routeData     = {};        // data for dynamic routes
        this.selected      = null;      // current selected node (readonly)
        this.img           = null;
        this.icon          = null;
        this.style         = '';
        this.topHTML       = '';
        this.bottomHTML    = '';
        this.keyboard      = true;
        this.onClick       = null;      // Fire when user click on Node Text
        this.onDblClick    = null;      // Fire when user dbl clicks
        this.onContextMenu = null;
        this.onMenuClick   = null;      // when context menu item selected
        this.onExpand      = null;      // Fire when node Expands
        this.onCollapse    = null;      // Fire when node Colapses
        this.onKeydown     = null;
        this.onRender      = null;
        this.onRefresh     = null;
        this.onResize      = null;
        this.onDestroy     = null;

        $.extend(true, this, w2obj.sidebar, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2sidebar = function(method) {
        if (typeof method === 'object' || !method ) {
            // check name parameter
            if (!w2utils.checkName(method, 'w2sidebar')) return;
            // extend items
            var nodes  = method.nodes;
            var object = new w2sidebar(method);
            $.extend(object, { handlers: [], nodes: [] });
            if (typeof nodes != 'undefined') {
                object.add(object, nodes);
            }
            if ($(this).length !== 0) {
                object.render($(this)[0]);
            }
            object.sidebar = object;
            // register new object
            w2ui[object.name] = object;
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' +  method + ' does not exist on jQuery.w2sidebar' );
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2sidebar.prototype = {

        node: {
            id              : null,
            text            : '',
            count           : null,
            img             : null,
            icon            : null,
            nodes           : [],
            style           : '',            // additional style for subitems
            route           : null,
            selected        : false,
            expanded        : false,
            hidden          : false,
            disabled        : false,
            group           : false,        // if true, it will build as a group
            groupShowHide   : true,
            plus            : false,        // if true, plus will be shown even if there is no sub nodes
            // events
            onClick         : null,
            onDblClick      : null,
            onContextMenu   : null,
            onExpand        : null,
            onCollapse      : null,
            // internal
            parent          : null,    // node object
            sidebar         : null
        },

        add: function (parent, nodes) {
            if (arguments.length == 1) {
                // need to be in reverse order
                nodes  = arguments[0];
                parent = this;
            }
            if (typeof parent == 'string') parent = this.get(parent);
            return this.insert(parent, null, nodes);
        },

        insert: function (parent, before, nodes) {
            var txt, ind, tmp, node, nd;
            if (arguments.length == 2) {
                // need to be in reverse order
                nodes  = arguments[1];
                before = arguments[0];
                ind    = this.get(before);
                if (ind === null) {
                    if (!$.isArray(nodes)) nodes = [nodes];
                    txt = (nodes[0].caption != null ? nodes[0].caption : nodes[0].text);
                    console.log('ERROR: Cannot insert node "'+ txt +'" because cannot find node "'+ before +'" to insert before.');
                    return null;
                }
                parent = this.get(before).parent;
            }
            if (typeof parent == 'string') parent = this.get(parent);
            if (!$.isArray(nodes)) nodes = [nodes];
            for (var o in nodes) {
                node = nodes[o];
                if (typeof node.id == null) {
                    txt = (node.caption != null ? node.caption : node.text);
                    console.log('ERROR: Cannot insert node "'+ txt +'" because it has no id.');
                    continue;
                }
                if (this.get(this, node.id) !== null) {
                    txt = (node.caption != null ? node.caption : node.text);
                    console.log('ERROR: Cannot insert node with id='+ node.id +' (text: '+ txt + ') because another node with the same id already exists.');
                    continue;
                }
                tmp = $.extend({}, w2sidebar.prototype.node, node);
                tmp.sidebar = this;
                tmp.parent  = parent;
                nd = tmp.nodes || [];
                tmp.nodes = []; // very important to re-init empty nodes array
                if (before === null) { // append to the end
                    parent.nodes.push(tmp);
                } else {
                    ind = this.get(parent, before, true);
                    if (ind === null) {
                        txt = (node.caption != null ? node.caption : node.text);
                        console.log('ERROR: Cannot insert node "'+ txt +'" because cannot find node "'+ before +'" to insert before.');
                        return null;
                }
                    parent.nodes.splice(ind, 0, tmp);
                }
                if (nd.length > 0) {
                    this.insert(tmp, null, nd);
                }
            }
            this.refresh(parent.id);
            return tmp;
        },

        remove: function () { // multiple arguments
            var deleted = 0;
            var tmp;
            for (var a = 0; a < arguments.length; a++) {
                tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                if (this.selected !== null && this.selected === tmp.id) {
                    this.selected = null;
                }
                var ind  = this.get(tmp.parent, arguments[a], true);
                if (ind === null) continue;
                if (tmp.parent.nodes[ind].selected)    tmp.sidebar.unselect(tmp.id);
                tmp.parent.nodes.splice(ind, 1);
                deleted++;
            }
            if (deleted > 0 && arguments.length == 1) this.refresh(tmp.parent.id); else this.refresh();
            return deleted;
        },

        set: function (parent, id, node) {
            if (arguments.length == 2) {
                // need to be in reverse order
                node    = id;
                id        = parent;
                parent    = this;
            }
            // searches all nested nodes
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return null;
            for (var i = 0; i < parent.nodes.length; i++) {
                if (parent.nodes[i].id === id) {
                    // make sure nodes inserted correctly
                    var nodes = node.nodes;
                    $.extend(parent.nodes[i], node, { nodes: [] });
                    if (nodes != null) {
                        this.add(parent.nodes[i], nodes);
                    }
                    this.refresh(id);
                    return true;
                } else {
                    var rv = this.set(parent.nodes[i], id, node);
                    if (rv) return true;
                }
            }
            return false;
        },

        get: function (parent, id, returnIndex) { // can be just called get(id) or get(id, true)
            if (arguments.length === 0) {
                var all = [];
                var tmp = this.find({});
                for (var t = 0; t < tmp.length; t++) {
                    if (tmp[t].id != null) all.push(tmp[t].id);
                }
                return all;
            } else {
                if (arguments.length == 1 || (arguments.length == 2 && id === true) ) {
                    // need to be in reverse order
                    returnIndex    = id;
                    id            = parent;
                    parent        = this;
                }
                // searches all nested nodes
                if (typeof parent == 'string') parent = this.get(parent);
                if (parent.nodes == null) return null;
                for (var i = 0; i < parent.nodes.length; i++) {
                    if (parent.nodes[i].id == id) {
                        if (returnIndex === true) return i; else return parent.nodes[i];
                    } else {
                        var rv = this.get(parent.nodes[i], id, returnIndex);
                        if (rv || rv === 0) return rv;
                    }
                }
                return null;
            }
        },

        find: function (parent, params, results) { // can be just called find({ selected: true })
            if (arguments.length == 1) {
                // need to be in reverse order
                params = parent;
                parent = this;
            }
            if (!results) results = [];
            // searches all nested nodes
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return results;
            for (var i = 0; i < parent.nodes.length; i++) {
                var match = true;
                for (var prop in params) {
                    if (parent.nodes[i][prop] != params[prop]) match = false;
                }
                if (match) results.push(parent.nodes[i]);
                if (parent.nodes[i].nodes.length > 0) results = this.find(parent.nodes[i], params, results);
            }
            return results;
        },

        hide: function () { // multiple arguments
            var hidden = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.hidden = true;
                hidden++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return hidden;
        },

        show: function () { // multiple arguments
            var shown = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.hidden = false;
                shown++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return shown;
        },

        disable: function () { // multiple arguments
            var disabled = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.disabled = true;
                if (tmp.selected) this.unselect(tmp.id);
                disabled++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return disabled;
        },

        enable: function () { // multiple arguments
            var enabled = 0;
            for (var a = 0; a < arguments.length; a++) {
                var tmp = this.get(arguments[a]);
                if (tmp === null) continue;
                tmp.disabled = false;
                enabled++;
            }
            if (arguments.length == 1) this.refresh(arguments[0]); else this.refresh();
            return enabled;
        },

        select: function (id) {
            var new_node = this.get(id);
            if (!new_node) return false;
            if (this.selected == id && new_node.selected) return false;
            this.unselect(this.selected);
            $(this.box).find('#node_'+ w2utils.escapeId(id))
                .addClass('w2ui-selected')
                .find('.w2ui-icon').addClass('w2ui-icon-selected');
            new_node.selected = true;
            this.selected = id;
            return true;
        },

        unselect: function (id) {
            var current = this.get(id);
            if (!current) return false;
            current.selected = false;
            $(this.box).find('#node_'+ w2utils.escapeId(id))
                .removeClass('w2ui-selected')
                .find('.w2ui-icon').removeClass('w2ui-icon-selected');
            if (this.selected == id) this.selected = null;
            return true;
        },

        toggle: function(id) {
            var nd = this.get(id);
            if (nd === null) return false;
            if (nd.plus) {
                this.set(id, { plus: false });
                this.expand(id);
                this.refresh(id);
                return;
            }
            if (nd.nodes.length === 0) return false;
            if (this.get(id).expanded) return this.collapse(id); else return this.expand(id);
        },

        collapse: function (id) {
            var obj = this;
            var nd  = this.get(id);
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'collapse', target: id, object: nd });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('#node_'+ w2utils.escapeId(id) +'_sub').slideUp(200);
            $(this.box).find('#node_'+ w2utils.escapeId(id) +' .w2ui-node-dots:first-child').html('<div class="w2ui-expand">+</div>');
            nd.expanded = false;
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            setTimeout(function () { obj.refresh(id); }, 200);
            return true;
        },

        collapseAll: function (parent) {
            if (typeof parent == 'undefined') parent = this;
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return false;
            for (var i = 0; i < parent.nodes.length; i++) {
                if (parent.nodes[i].expanded === true) parent.nodes[i].expanded = false;
                if (parent.nodes[i].nodes && parent.nodes[i].nodes.length > 0) this.collapseAll(parent.nodes[i]);
            }
            this.refresh(parent.id);
            return true;
        },

        expand: function (id) {
            var obj = this;
            var nd  = this.get(id);
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'expand', target: id, object: nd });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('#node_'+ w2utils.escapeId(id) +'_sub').slideDown(200);
            $(this.box).find('#node_'+ w2utils.escapeId(id) +' .w2ui-node-dots:first-child').html('<div class="w2ui-expand">-</div>');
            nd.expanded = true;
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            setTimeout(function () { obj.refresh(id); }, 200);
            return true;
        },

        expandAll: function (parent) {
            if (typeof parent == 'undefined') parent = this;
            if (typeof parent == 'string') parent = this.get(parent);
            if (parent.nodes == null) return false;
            for (var i = 0; i < parent.nodes.length; i++) {
                if (parent.nodes[i].expanded === false) parent.nodes[i].expanded = true;
                if (parent.nodes[i].nodes && parent.nodes[i].nodes.length > 0) this.collapseAll(parent.nodes[i]);
            }
            this.refresh(parent.id);
        },

        expandParents: function (id) {
            var node = this.get(id);
            if (node === null) return false;
            if (node.parent) {
                node.parent.expanded = true;
                this.expandParents(node.parent.id);
            }
            this.refresh(id);
            return true;
        },

        click: function (id, event) {
            var obj = this;
            var nd  = this.get(id);
            if (nd === null) return;
            if (nd.disabled || nd.group) return; // should click event if already selected
            // unselect all previsously
            $(obj.box).find('.w2ui-node.w2ui-selected').each(function (index, el) {
                var oldID     = $(el).attr('id').replace('node_', '');
                var oldNode = obj.get(oldID);
                if (oldNode != null) oldNode.selected = false;
                $(el).removeClass('w2ui-selected').find('.w2ui-icon').removeClass('w2ui-icon-selected');
            });
            // select new one
            var newNode = $(obj.box).find('#node_'+ w2utils.escapeId(id));
            var oldNode = $(obj.box).find('#node_'+ w2utils.escapeId(obj.selected));
            newNode.addClass('w2ui-selected').find('.w2ui-icon').addClass('w2ui-icon-selected');
            // need timeout to allow rendering
            setTimeout(function () {
                // event before
                var eventData = obj.trigger({ phase: 'before', type: 'click', target: id, originalEvent: event, node: nd, object: nd });
                if (eventData.isCancelled === true) {
                    // restore selection
                    newNode.removeClass('w2ui-selected').find('.w2ui-icon').removeClass('w2ui-icon-selected');
                    oldNode.addClass('w2ui-selected').find('.w2ui-icon').addClass('w2ui-icon-selected');
                    return;
                }
                // default action
                if (oldNode !== null) oldNode.selected = false;
                obj.get(id).selected = true;
                obj.selected = id;
                // route processing
                if (nd.route) {
                    var route = String('/'+ nd.route).replace(/\/{2,}/g, '/');
                    var info  = w2utils.parseRoute(route);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            if (obj.routeData[info.keys[k].name] == null) continue;
                            route = route.replace((new RegExp(':'+ info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                        }
                    }
                    setTimeout(function () { window.location.hash = route; }, 1);
                }
                // event after
                obj.trigger($.extend(eventData, { phase: 'after' }));
            }, 1);
        },

        keydown: function (event) {
            var obj = this;
            var nd  = obj.get(obj.selected);
            if (!nd || obj.keyboard !== true) return;
            // trigger event
            var eventData = obj.trigger({ phase: 'before', type: 'keydown', target: obj.name, originalEvent: event });
            if (eventData.isCancelled === true) return;
            // default behaviour
            if (event.keyCode == 13 || event.keyCode == 32) { // enter or space
                if (nd.nodes.length > 0) obj.toggle(obj.selected);
            }
            if (event.keyCode == 37) { // left
                if (nd.nodes.length > 0 && nd.expanded) {
                    obj.collapse(obj.selected);
                } else {
                    selectNode(nd.parent);
                    if (!nd.parent.group) obj.collapse(nd.parent.id);
                }
            }
            if (event.keyCode == 39) { // right
                if ((nd.nodes.length > 0 || nd.plus) && !nd.expanded) obj.expand(obj.selected);
            }
            if (event.keyCode == 38) { // up
                selectNode(neighbor(nd, prev));
            }
            if (event.keyCode == 40) { // down
                selectNode(neighbor(nd, next));
            }
            // cancel event if needed
            if ($.inArray(event.keyCode, [13, 32, 37, 38, 39, 40]) != -1) {
                if (event.preventDefault) event.preventDefault();
                if (event.stopPropagation) event.stopPropagation();
            }
            // event after
            obj.trigger($.extend(eventData, { phase: 'after' }));

            function selectNode (node, event) {
                if (node !== null && !node.hidden && !node.disabled && !node.group) {
                    obj.click(node.id, event);
                    setTimeout(function () { obj.scrollIntoView(); }, 50);
                }
            }

            function neighbor (node, neighborFunc) {
                node = neighborFunc(node);
                while (node !== null && (node.hidden || node.disabled)) {
                    if (node.group) break; else node = neighborFunc(node);
                }
                return node;
            }

            function next (node, noSubs) {
                if (node === null) return null;
                var parent   = node.parent;
                var ind      = obj.get(node.id, true);
                var nextNode = null;
                // jump inside
                if (node.expanded && node.nodes.length > 0 && noSubs !== true) {
                    var t = node.nodes[0];
                    if (t.hidden || t.disabled || t.group) nextNode = next(t); else nextNode = t;
                } else {
                    if (parent && ind + 1 < parent.nodes.length) {
                        nextNode = parent.nodes[ind + 1];
                    } else {
                        nextNode = next(parent, true); // jump to the parent
                    }
                }
                if (nextNode !== null && (nextNode.hidden || nextNode.disabled || nextNode.group)) nextNode = next(nextNode);
                return nextNode;
            }

            function prev (node) {
                if (node === null) return null;
                var parent   = node.parent;
                var ind      = obj.get(node.id, true);
                var prevNode = (ind > 0) ? lastChild(parent.nodes[ind - 1]) : parent;
                if (prevNode !== null && (prevNode.hidden || prevNode.disabled || prevNode.group)) prevNode = prev(prevNode);
                return prevNode;
            }

            function lastChild (node) {
                if (node.expanded && node.nodes.length > 0) {
                    var t = node.nodes[node.nodes.length - 1];
                    if (t.hidden || t.disabled || t.group) return prev(t); else return lastChild(t);
                }
                return node;
            }
        },

        scrollIntoView: function (id) {
            if (typeof id == 'undefined') id = this.selected;
            var nd = this.get(id);
            if (nd === null) return;
            var body   = $(this.box).find('.w2ui-sidebar-div');
            var item   = $(this.box).find('#node_'+ w2utils.escapeId(id));
            var offset = item.offset().top - body.offset().top;
            if (offset + item.height() > body.height()) {
                body.animate({ 'scrollTop': body.scrollTop() + body.height() / 1.3 }, 250, 'linear');
            }
            if (offset <= 0) {
                body.animate({ 'scrollTop': body.scrollTop() - body.height() / 1.3 }, 250, 'linear');
            }
        },

        dblClick: function (id, event) {
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            var nd = this.get(id);
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'dblClick', target: id, originalEvent: event, object: nd });
            if (eventData.isCancelled === true) return;
            // default action
            this.toggle(id);
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
        },

        contextMenu: function (id, event) {
            var obj = this;
            var nd  = obj.get(id);
            if (id != obj.selected) obj.click(id);
            // need timeout to allow click to finish first
            setTimeout(function () {
                // event before
                var eventData = obj.trigger({ phase: 'before', type: 'contextMenu', target: id, originalEvent: event, object: nd });
                if (eventData.isCancelled === true) return;
                // default action
                if (nd.group || nd.disabled) return;
                if (obj.menu.length > 0) {
                    $(obj.box).find('#node_'+ w2utils.escapeId(id))
                        .w2menu(obj.menu, {
                            left    : (event ? event.offsetX || event.pageX : 50) - 25,
                            onSelect: function (event) { 
                                obj.menuClick(id, parseInt(event.index), event.originalEvent); 
                            }
                        }
                    );
                }
                // event after
                obj.trigger($.extend(eventData, { phase: 'after' }));
            }, 150); // need timer 150 for FF
        },

        menuClick: function (itemId, index, event) {
            var obj = this;
            // event before
            var eventData = obj.trigger({ phase: 'before', type: 'menuClick', target: itemId, originalEvent: event, menuIndex: index, menuItem: obj.menu[index] });
            if (eventData.isCancelled === true) return;
            // default action
            // -- empty
            // event after
            obj.trigger($.extend(eventData, { phase: 'after' }));
        },

        render: function (box) {
            var time = (new Date()).getTime();
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'render', target: this.name, box: box });
            if (eventData.isCancelled === true) return;
            // default action
            if (typeof box != 'undefined' && box !== null) {
                if ($(this.box).find('> div > div.w2ui-sidebar-div').length > 0) {
                    $(this.box)
                        .removeAttr('name')
                        .removeClass('w2ui-reset w2ui-sidebar')
                        .html('');
                }
                this.box = box;
            }
            if (!this.box) return;
            $(this.box)
                .attr('name', this.name)
                .addClass('w2ui-reset w2ui-sidebar')
                .html('<div>'+
                        '<div class="w2ui-sidebar-top"></div>' +
                        '<div class="w2ui-sidebar-div"></div>'+
                        '<div class="w2ui-sidebar-bottom"></div>'+
                    '</div>'
                );
            $(this.box).find('> div').css({
                width    : $(this.box).width() + 'px',
                height: $(this.box).height() + 'px'
            });
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;
            // adjust top and bottom
            if (this.topHTML !== '') {
                $(this.box).find('.w2ui-sidebar-top').html(this.topHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('top', $(this.box).find('.w2ui-sidebar-top').height() + 'px');
            }
            if (this.bottomHTML !== '') {
                $(this.box).find('.w2ui-sidebar-bottom').html(this.bottomHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('bottom', $(this.box).find('.w2ui-sidebar-bottom').height() + 'px');
            }
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            // ---
            this.refresh();
            return (new Date()).getTime() - time;
        },

        refresh: function (id) {
            var time = (new Date()).getTime();
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'refresh', target: (typeof id != 'undefined' ? id : this.name) });
            if (eventData.isCancelled === true) return;
            // adjust top and bottom
            if (this.topHTML !== '') {
                $(this.box).find('.w2ui-sidebar-top').html(this.topHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('top', $(this.box).find('.w2ui-sidebar-top').height() + 'px');
            }
            if (this.bottomHTML !== '') {
                $(this.box).find('.w2ui-sidebar-bottom').html(this.bottomHTML);
                $(this.box).find('.w2ui-sidebar-div')
                    .css('bottom', $(this.box).find('.w2ui-sidebar-bottom').height() + 'px');
            }
            // default action
            $(this.box).find('> div').css({
                width : $(this.box).width() + 'px',
                height: $(this.box).height() + 'px'
            });
            var obj = this;
            var node, nd;
            var nm;
            if (typeof id == 'undefined') {
                node = this;
                nm   = '.w2ui-sidebar-div';
            } else {
                node = this.get(id);
                if (node === null) return;
                nm   = '#node_'+ w2utils.escapeId(node.id) + '_sub';
            }
            var nodeHTML;
            if (node !== this) {
                var tmp    = '#node_'+ w2utils.escapeId(node.id);
                nodeHTML    = getNodeHTML(node);
                $(this.box).find(tmp).before('<div id="sidebar_'+ this.name + '_tmp"></div>');
                $(this.box).find(tmp).remove();
                $(this.box).find(nm).remove();
                $('#sidebar_'+ this.name + '_tmp').before(nodeHTML);
                $('#sidebar_'+ this.name + '_tmp').remove();
            }
            // refresh sub nodes
            $(this.box).find(nm).html('');
            for (var i = 0; i < node.nodes.length; i++) {
                nd = node.nodes[i];
                nodeHTML = getNodeHTML(nd);
                $(this.box).find(nm).append(nodeHTML);
                if (nd.nodes.length !== 0) { this.refresh(nd.id); }
            }
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            return (new Date()).getTime() - time;

            function getNodeHTML(nd) {
                var html = '';
                var img  = nd.img;
                if (img === null) img = this.img;
                var icon = nd.icon;
                if (icon === null) icon = this.icon;
                // -- find out level
                var tmp   = nd.parent;
                var level = 0;
                while (tmp && tmp.parent !== null) {
                    if (tmp.group) level--;
                    tmp = tmp.parent;
                    level++;
                }
                if (typeof nd.caption != 'undefined') nd.text = nd.caption;
                if (nd.group) {
                    html =
                        '<div class="w2ui-node-group"  id="node_'+ nd.id +'"'+
                        '        onclick="w2ui[\''+ obj.name +'\'].toggle(\''+ nd.id +'\')"'+
                        '        onmouseout="$(this).find(\'span:nth-child(1)\').css(\'color\', \'transparent\')" '+
                        '        onmouseover="$(this).find(\'span:nth-child(1)\').css(\'color\', \'inherit\')">'+
                        (nd.groupShowHide ? '<span>'+ (!nd.hidden && nd.expanded ? w2utils.lang('Hide') : w2utils.lang('Show')) +'</span>' : '<span></span>') +
                        '    <span>'+ nd.text +'</span>'+
                        '</div>'+
                        '<div class="w2ui-node-sub" id="node_'+ nd.id +'_sub" style="'+ nd.style +';'+ (!nd.hidden && nd.expanded ? '' : 'display: none;') +'"></div>';
                } else {
                    if (nd.selected && !nd.disabled) obj.selected = nd.id;
                    tmp = '';
                    if (img) tmp = '<div class="w2ui-node-image w2ui-icon '+ img +    (nd.selected && !nd.disabled ? " w2ui-icon-selected" : "") +'"></div>';
                    if (icon) tmp = '<div class="w2ui-node-image"><span class="'+ icon +'"></span></div>';
                    html =
                    '<div class="w2ui-node '+ (nd.selected ? 'w2ui-selected' : '') +' '+ (nd.disabled ? 'w2ui-disabled' : '') +'" id="node_'+ nd.id +'" style="'+ (nd.hidden ? 'display: none;' : '') +'"'+
                        '    ondblclick="w2ui[\''+ obj.name +'\'].dblClick(\''+ nd.id +'\', event);"'+
                        '    oncontextmenu="w2ui[\''+ obj.name +'\'].contextMenu(\''+ nd.id +'\', event); '+
                        '        if (event.preventDefault) event.preventDefault();"'+
                        '    onClick="w2ui[\''+ obj.name +'\'].click(\''+ nd.id +'\', event); ">'+
                        '<table cellpadding="0" cellspacing="0" style="margin-left:'+ (level*18) +'px; padding-right:'+ (level*18) +'px"><tr>'+
                        '<td class="w2ui-node-dots" nowrap onclick="w2ui[\''+ obj.name +'\'].toggle(\''+ nd.id +'\'); '+
                        '        if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;">'+
                        '    <div class="w2ui-expand">'    + (nd.nodes.length > 0 ? (nd.expanded ? '-' : '+') : (nd.plus ? '+' : '')) + '</div>' +
                        '</td>'+
                        '<td class="w2ui-node-data" nowrap>'+
                            tmp +
                            (nd.count || nd.count === 0 ? '<div class="w2ui-node-count">'+ nd.count +'</div>' : '') +
                            '<div class="w2ui-node-caption">'+ nd.text +'</div>'+
                        '</td>'+
                        '</tr></table>'+
                    '</div>'+
                    '<div class="w2ui-node-sub" id="node_'+ nd.id +'_sub" style="'+ nd.style +';'+ (!nd.hidden && nd.expanded ? '' : 'display: none;') +'"></div>';
                }
                return html;
            }
        },

        resize: function () {
            var time = (new Date()).getTime();
            // if (window.getSelection) window.getSelection().removeAllRanges(); // clear selection
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'resize', target: this.name });
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).css('overflow', 'hidden');    // container should have no overflow
            //$(this.box).find('.w2ui-sidebar-div').css('overflow', 'hidden');
            $(this.box).find('> div').css({
                width        : $(this.box).width() + 'px',
                height    : $(this.box).height() + 'px'
            });
            //$(this.box).find('.w2ui-sidebar-div').css('overflow', 'auto');
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
            return (new Date()).getTime() - time;
        },

        destroy: function () {
            // event before
            var eventData = this.trigger({ phase: 'before', type: 'destroy', target: this.name });
            if (eventData.isCancelled === true) return;
            // clean up
            if ($(this.box).find('> div > div.w2ui-sidebar-div').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-sidebar')
                    .html('');
            }
            delete w2ui[this.name];
            // event after
            this.trigger($.extend(eventData, { phase: 'after' }));
        },

        lock: function (msg, showSpinner) {
            var box = $(this.box).find('> div:first-child');
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(box);
            w2utils.lock.apply(window, args);
        },

        unlock: function () {
            w2utils.unlock(this.box);
        }
    };

    $.extend(w2sidebar.prototype, w2utils.event);
    w2obj.sidebar = w2sidebar;
})();

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2field        - various field controls
 *        - $().w2field    - jQuery wrapper
 *   - Dependencies: jQuery, w2utils
 *
 * == NICE TO HAVE ==
 *   - upload (regular files)
 *   - BUG with prefix/postfix and arrows (test in different contexts)
 *   - prefix and suffix are slow (100ms or so)
 *   - multiple date selection
 *   - month selection, year selections
 *   - arrows no longer work (for int)
 *   - form to support custom types
 *   - bug: if input is hidden and then enum is applied, then when it becomes visible, it will be 110px
 *
 ************************************************************************/

(function($) {

    var w2field = function(options) {
        // public properties
        this.el = null;
        this.helpers = {}; // object or helper elements
        this.type = options.type || 'text';
        this.options = $.extend(true, {}, options);
        this.onSearch = options.onSearch || null;
        this.onRequest = options.onRequest || null;
        this.onLoad = options.onLoad || null;
        this.onError = options.onError || null;
        this.onChange = options.onChange || null;
        this.onClick = options.onClick || null;
        this.onAdd = options.onAdd || null;
        this.onNew = options.onNew || null;
        this.onRemove = options.onRemove || null;
        this.onMouseOver = options.onMouseOver || null;
        this.onMouseOut = options.onMouseOut || null;
        this.onIconClick = options.onIconClick || null;
        this.tmp = {}; // temp object
        // clean up some options
        delete this.options.type;
        delete this.options.onSearch;
        delete this.options.onRequest;
        delete this.options.onChange;
        delete this.options.onLoad;
        delete this.options.onError;
        delete this.options.onClick;
        delete this.options.onMouseOver;
        delete this.options.onMouseOut;
        delete this.options.onIconClick;
        // extend with defaults
        $.extend(true, this, w2obj.field);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2field = function(method, options) {
        // call direct
        if (this.length == 0) {
            var pr = w2field.prototype;
            if (pr[method]) {
                return pr[method].apply(pr, Array.prototype.slice.call(arguments, 1));
            }
        } else {
            // if without arguments - return the object
            if (arguments.length == 0) {
                var obj = $(this).data('w2field');
                return obj;
            }
            if (typeof method == 'string' && typeof options == 'object') {
                method = $.extend(true, {}, options, {
                    type: method
                });
            }
            if (typeof method == 'string' && typeof options == 'undefined') {
                method = {
                    type: method
                };
            }
            method.type = String(method.type).toLowerCase();
            return this.each(function(index, el) {
                var obj = $(el).data('w2field');
                // if object is not defined, define it
                if (typeof obj == 'undefined') {
                    var obj = new w2field(method);
                    $.extend(obj, {
                        handlers: []
                    });
                    if (el) obj.el = $(el)[0];
                    obj.init();
                    $(el).data('w2field', obj);
                    return obj;
                } else { // fully re-init
                    obj.clear();
                    if (method.type == 'clear') return;
                    var obj = new w2field(method);
                    $.extend(obj, {
                        handlers: []
                    });
                    if (el) obj.el = $(el)[0];
                    obj.init();
                    $(el).data('w2field', obj);
                    return obj;
                }
                return null;
            });
        }
    }

    // ====================================================
    // -- Implementation of core functionality

    /*     To add custom types
        $().w2field('addType', 'myType', function (options) {
            $(this.el).on('keypress', function (event) {
                if (event.metaKey || event.ctrlKey || event.altKey
                    || (event.charCode != event.keyCode && event.keyCode > 0)) return;
                var ch = String.fromCharCode(event.charCode);
                if (ch != 'a' && ch != 'b' && ch != 'c') {
                    if (event.stopPropagation) event.stopPropagation(); else event.cancelBubble = true;
                    return false;
                }
            });
            $(this.el).on('blur', function (event)  { // keyCode & charCode differ in FireFox
                var ch = this.value;
                if (ch != 'a' && ch != 'b' && ch != 'c') {
                    $(this).w2tag(w2utils.lang("Not a single charecter from the set of 'abc'"));
                }
            });
        });
    */

    w2field.prototype = {

        custom: {}, // map of custom types

        pallete: [
            ['000000', '444444', '666666', '999999', 'CCCCCC', 'EEEEEE', 'F3F3F3', 'FFFFFF'],
            ['FF011B', 'FF9838', 'FFFD59', '01FD55', '00FFFE', '0424F3', '9B24F4', 'FF21F5'],
            ['F4CCCC', 'FCE5CD', 'FFF2CC', 'D9EAD3', 'D0E0E3', 'CFE2F3', 'D9D1E9', 'EAD1DC'],
            ['EA9899', 'F9CB9C', 'FEE599', 'B6D7A8', 'A2C4C9', '9FC5E8', 'B4A7D6', 'D5A6BD'],
            ['E06666', 'F6B26B', 'FED966', '93C47D', '76A5AF', '6FA8DC', '8E7CC3', 'C27BA0'],
            ['CC0814', 'E69138', 'F1C232', '6AA84F', '45818E', '3D85C6', '674EA7', 'A54D79'],
            ['99050C', 'B45F17', 'BF901F', '37761D', '124F5C', '0A5394', '351C75', '741B47'],
            ['660205', '783F0B', '7F6011', '274E12', '0C343D', '063762', '20124D', '4C1030']
        ],

        addType: function(type, handler) {
            type = String(type).toLowerCase();
            this.custom[type] = handler;
            return true;
        },

        removeType: function(type) {
            type = String(type).toLowerCase();
            if (!this.custom[type]) return false;
            delete this.custom[type];
            return true
        },
        //init w2field
        init: function() {
            var obj = this;
            var options = this.options;
            var defaults;

            // Custom Types
            if (typeof this.custom[this.type] == 'function') {
                this.custom[this.type].call(this, options);
                return;
            }
            // only for INPUT or TEXTAREA
            if (['INPUT', 'TEXTAREA'].indexOf(this.el.tagName) == -1) {
                console.log('ERROR: w2field could only be applied to INPUT or TEXTAREA.', this.el);
                return;
            }

            switch (this.type) {
                case 'text':
                case 'int':
                case 'float':
                case 'money':
                case 'currency':
                case 'percent':
                case 'alphanumeric':
                case 'hex':
                    defaults = {
                        min: null,
                        max: null,
                        step: 1,
                        placeholder: '',
                        autoFormat: true,
                        currencyPrefix: w2utils.settings.currencyPrefix,
                        currencySuffix: w2utils.settings.currencySuffix,
                        currencyPrecision: w2utils.settings.currencyPrecision,
                        decimalSymbol: w2utils.settings.decimalSymbol,
                        groupSymbol: w2utils.settings.groupSymbol,
                        arrows: false,
                        keyboard: true,
                        precision: null,
                        silent: true,
                        prefix: '',
                        suffix: ''
                    };
                    this.options = $.extend(true, {}, defaults, options);
                    options = this.options; // since object is re-created, need to re-assign
                    options.numberRE = new RegExp('[' + options.groupSymbol + ']', 'g');
                    options.moneyRE = new RegExp('[' + options.currencyPrefix + options.currencySuffix + options.groupSymbol + ']', 'g');
                    options.percentRE = new RegExp('[' + options.groupSymbol + '%]', 'g');
                    // no keyboard support needed
                    if (['text', 'alphanumeric', 'hex'].indexOf(this.type) != -1) {
                        options.arrows = false;
                        options.keyboard = false;
                    }
                    this.addPrefix(); // only will add if needed
                    this.addSuffix();
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder);
                    break;

                case 'color':
                    defaults = {
                        prefix: '#',
                        suffix: '<div style="width: ' + (parseInt($(this.el).css('font-size')) || 12) + 'px">&nbsp;</div>',
                        placeholder: '',
                        arrows: false,
                        keyboard: false
                    };
                    $.extend(options, defaults);
                    this.addPrefix(); // only will add if needed
                    this.addSuffix(); // only will add if needed
                    // additional checks
                    $(this.el).attr('maxlength', 6);
                    if ($(this.el).val() != '') setTimeout(function() {
                        $(obj.el).change();
                    }, 1);
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder);
                    break;

                case 'date':
                    defaults = {
                        format: w2utils.settings.date_format, // date format
                        placeholder: '',
                        keyboard: true,
                        silent: true,
                        start: '', // string or jquery object
                        end: '', // string or jquery object
                        blocked: {}, // { '4/11/2011': 'yes' }
                        colored: {} // { '4/11/2011': 'red:white' }
                    };
                    this.options = $.extend(true, {}, defaults, options);
                    options = this.options; // since object is re-created, need to re-assign
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder ? options.placeholder : options.format);
                    break;

                case 'time':
                    defaults = {
                        format: w2utils.settings.time_format,
                        placeholder: '',
                        keyboard: true,
                        silent: true,
                        start: '',
                        end: ''
                    };
                    this.options = $.extend(true, {}, defaults, options);
                    options = this.options; // since object is re-created, need to re-assign
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder ? options.placeholder : (options.format == 'h12' ? 'hh:mi pm' : 'hh:mi'));
                    break;

                case 'datetime':
                    break;

                case 'list':
                case 'combo':
                    defaults = {
                        items: [],
                        selected: {},
                        placeholder: '',
                        url: null, // url to pull data from
                        postData: {},
                        minLength: 1,
                        cacheMax: 250,
                        maxDropHeight: 350, // max height for drop down menu
                        match: 'begins', // ['contains', 'is', 'begins', 'ends']
                        silent: true,
                        icon: null,
                        iconStyle: '',
                        onSearch: null, // when search needs to be performed
                        onChange: null,
                        onRequest: null, // when request is submitted
                        onLoad: null, // when data is received
                        onError: null, // when data fails to load due to server error or other failure modes
                        onIconClick: null,
                        renderDrop: null, // render function for drop down item
                        prefix: '',
                        suffix: '',
                        openOnFocus: false, // if to show overlay onclick or when typing
                        markSearch: false
                    };
                    if(typeof options.items === 'function')
                        options.items = options.items.call();
                    options.items = this.normMenu(options.items); // need to be first
                    if (this.type == 'list' || this.type == 'combo') {
                        // defaults.search = (options.items && options.items.length >= 10 ? true : false);
                        defaults.openOnFocus = true;
                        defaults.suffix = '<div class="arrow-down" style="margin-top: ' + ((parseInt($(this.el).height()) - 6) / 2) + 'px;"></div>';
                        //console.log(parseInt($(this.el).height()));
                        if (this.type == 'list') {
                            $(this.el).addClass('w2ui-select');

                            // if simple value - look it up
                            if (!$.isPlainObject(options.selected)) {
                                for (var i in options.items) {
                                    var item = options.items[i];
                                    if (item && item.id == options.selected) {
                                        options.selected = $.extend(true, {}, item);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    options = $.extend({}, defaults, options, {
                        align: 'both', // same width as control
                        altRows: true // alternate row color
                    });
                    this.options = options;
                    if (!$.isPlainObject(options.selected)) options.selected = {};
                    $(this.el).data('selected', options.selected);
                    if (options.url) this.request(0);
                    if (this.type == 'list') this.addFocus();
                    this.addPrefix();
                    this.addSuffix();
                    setTimeout(function() {
                        obj.refresh();
                    }, 10); // need this for icon refresh
                    if ($(this.el).attr('placeholder') && options.placeholder == '') options.placeholder = $(this.el).attr('placeholder');
                    $(this.el).attr('placeholder', options.placeholder).attr('autocomplete', 'off');
                    if (typeof options.selected.text != 'undefined') $(this.el).val(options.selected.text);
                    break;

                case 'enum':
                    defaults = {
                        items: [],
                        selected: [],
                        placeholder: '',
                        max: 0, // max number of selected items, 0 - unlim
                        url: null, // not implemented
                        postData: {},
                        minLength: 1,
                        cacheMax: 250,
                        maxWidth: 250, // max width for a single item
                        maxHeight: 350, // max height for input control to grow
                        maxDropHeight: 350, // max height for drop down menu
                        match: 'contains', // ['contains', 'is', 'begins', 'ends']
                        silent: true,
                        openOnFocus: false, // if to show overlay onclick or when typing
                        markSearch: true,
                        renderDrop: null, // render function for drop down item
                        renderItem: null, // render selected item
                        style: '', // style for container div
                        onSearch: null, // when search needs to be performed
                        onRequest: null, // when request is submitted
                        onLoad: null, // when data is received
                        onError: null, // when data fails to load due to server error or other failure modes
                        onClick: null, // when an item is clicked
                        onAdd: null, // when an item is added
                        onNew: null, // when new item should be added
                        onRemove: null, // when an item is removed
                        onMouseOver: null, // when an item is mouse over
                        onMouseOut: null // when an item is mouse out
                    };
                    options = $.extend({}, defaults, options, {
                        align: 'both', // same width as control
                        suffix: '',
                        altRows: true // alternate row color
                    });
                    options.items = this.normMenu(options.items);
                    options.selected = this.normMenu(options.selected);
                    this.options = options;
                    if (!$.isArray(options.selected)) options.selected = [];
                    $(this.el).data('selected', options.selected);
                    if (options.url) this.request(0);
                    this.addSuffix();
                    this.addMulti();
                    break;

                case 'file':
                    defaults = {
                        selected: [],
                        placeholder: w2utils.lang('Attach files by dragging and dropping or Click to Select'),
                        max: 0,
                        maxSize: 0, // max size of all files, 0 - unlim
                        maxFileSize: 0, // max size of a single file, 0 -unlim
                        maxWidth: 250, // max width for a single item
                        maxHeight: 350, // max height for input control to grow
                        maxDropHeight: 350, // max height for drop down menu
                        silent: true,
                        renderItem: null, // render selected item
                        style: '', // style for container div
                        onClick: null, // when an item is clicked
                        onAdd: null, // when an item is added
                        onRemove: null, // when an item is removed
                        onMouseOver: null, // when an item is mouse over
                        onMouseOut: null // when an item is mouse out
                    };
                    options = $.extend({}, defaults, options, {
                        align: 'both', // same width as control
                        altRows: true // alternate row color
                    });
                    this.options = options;
                    if (!$.isArray(options.selected)) options.selected = [];
                    $(this.el).data('selected', options.selected);
                    if ($(this.el).attr('placeholder')) options.placeholder = $(this.el).attr('placeholder');
                    this.addMulti();
                    break;
            }
            // attach events
            this.tmp = {
                onChange: function(event) {
                    obj.change.call(obj, event)
                },
                onClick: function(event) {
                    obj.click.call(obj, event)
                },
                onFocus: function(event) {
                    obj.focus.call(obj, event)
                },
                onBlur: function(event) {
                    obj.blur.call(obj, event)
                },
                onKeydown: function(event) {
                    obj.keyDown.call(obj, event)
                },
                onKeyup: function(event) {
                    obj.keyUp.call(obj, event)
                },
                onKeypress: function(event) {
                    obj.keyPress.call(obj, event)
                }
            }
            $(this.el)
                .addClass('w2field')
                .data('w2field', this)
                .on('change', this.tmp.onChange)
                .on('click', this.tmp.onClick) // ignore click because it messes overlays
                .on('focus', this.tmp.onFocus)
                .on('blur', this.tmp.onBlur)
                .on('keydown', this.tmp.onKeydown)
                .on('keyup', this.tmp.onKeyup)
                .on('keypress', this.tmp.onKeypress)
                .css({
                    'box-sizing': 'border-box',
                    '-webkit-box-sizing': 'border-box',
                    '-moz-box-sizing': 'border-box',
                    '-ms-box-sizing': 'border-box',
                    '-o-box-sizing': 'border-box'
                });
            // format initial value
            this.change($.Event('change'));
        },



        clear: function() {
            var obj = this;
            var options = this.options;
            // if money then clear value
            if (['money', 'currency'].indexOf(this.type) != -1) {
                $(this.el).val($(this.el).val().replace(options.moneyRE, ''));
            }
            if (this.type == 'percent') {
                $(this.el).val($(this.el).val().replace(/%/g, ''));
            }
            if (this.type == 'color') {
                $(this.el).removeAttr('maxlength');
            }
            if (this.type == 'list') {
                $(this.el).removeClass('w2ui-select');
            }
            if (['date', 'time'].indexOf(this.type) != -1) {
                if ($(this.el).attr('placeholder') == options.format) $(this.el).attr('placeholder', '');
            }
            this.type = 'clear';
            var tmp = $(this.el).data('tmp');
            if (!this.tmp) return;
            // restore paddings
            if (typeof tmp != 'undefined') {
                if (tmp && tmp['old-padding-left']) $(this.el).css('padding-left', tmp['old-padding-left']);
                if (tmp && tmp['old-padding-right']) $(this.el).css('padding-right', tmp['old-padding-right']);
            }
            // remove events and data
            $(this.el)
                .val(this.clean($(this.el).val()))
                .removeClass('w2field')
                .removeData() // removes all attached data
                .off('change', this.tmp.onChange)
                .off('click', this.tmp.onClick)
                .off('focus', this.tmp.onFocus)
                .off('blur', this.tmp.onBlur)
                .off('keydown', this.tmp.onKeydown)
                .off('keyup', this.tmp.onKeyup)
                .off('keypress', this.tmp.onKeypress);
            // remove helpers
            for (var h in this.helpers) $(this.helpers[h]).remove();
            this.helpers = {};
        },
        //REFRESH W2FIELD
        refresh: function() {
            var obj = this;
            var options = this.options;
            var selected = $(this.el).data('selected');
            var time = (new Date()).getTime();
            // enum
            if (['list'].indexOf(this.type) != -1) {
                $(obj.el).parent().css('white-space', 'nowrap'); // needs this for arrow alway to appear on the right side
                // hide focus and show text
                if (obj.helpers.prefix) obj.helpers.prefix.hide();
                setTimeout(function() {
                    if (!obj.helpers.focus) return;
                    // if empty show no icon
                    if (!$.isEmptyObject(selected) && options.icon) {
                        options.prefix = '<span class="w2ui-icon ' + options.icon + '"style="cursor: pointer; font-size: 14px;' +
                            ' display: inline-block; margin-top: -1px; color: #7F98AD;' + options.iconStyle + '">' +
                            '</span>';
                        obj.addPrefix();
                    } else {
                        options.prefix = '';
                        obj.addPrefix();
                    }
                    // focus helpder
                    var focus = obj.helpers.focus.find('input');
                    if ($(focus).val() == '') {

                        $(focus).css('opacity', 1).prev().css('opacity', 1);
                        if (!$.isPlainObject(selected)) {
                            for (var i in options.items) {
                                var item = options.items[i];
                                if (item && item.id == selected) {
                                    selected = $.extend(true, {}, item);
                                    break;
                                }
                            }
                        }
                        $(obj.el).val(selected && selected.text != null ? selected.text : '');
                        $(obj.el).attr('placeholder', options.placeholder || '');
                    } else {
                        $(focus).css('opacity', 1).prev().css('opacity', 1);
                        $(obj.el).val('');
                        $(obj.el).removeAttr('placeholder');
                        setTimeout(function() {
                            if (obj.helpers.prefix) obj.helpers.prefix.hide();
                            var tmp = 'position: absolute; opacity: 0; margin: 4px 0px 0px 2px; background-position: left !important;';
                            if (options.icon) {
                                $(focus).css('margin-left', '17px');
                                $(obj.helpers.focus).find('.icon-search').attr('style', tmp + 'width: 11px !important; opacity: 1');
                            } else {
                                $(focus).css('margin-left', '0px');
                                $(obj.helpers.focus).find('.icon-search').attr('style', tmp + 'width: 0px !important; opacity: 0');
                            }
                        }, 1);
                    }
                    // if readonly or disabled
                    if ($(obj.el).prop('readonly') || $(obj.el).prop('disabled')) {
                        setTimeout(function() {
                            $(obj.helpers.prefix).css('opacity', '0.6');
                            $(obj.helpers.suffix).css('opacity', '0.6');
                        }, 1);
                    } else {
                        setTimeout(function() {
                            $(obj.helpers.prefix).css('opacity', '1');
                            $(obj.helpers.suffix).css('opacity', '1');
                        }, 1);
                    }
                }, 1);
            }
            if (['enum', 'file'].indexOf(this.type) != -1) {
                var html = '';
                for (var s in selected) {
                    var it = selected[s];
                    var ren = '';
                    if (typeof options.renderItem == 'function') {
                        ren = options.renderItem(it, s, '<div class="w2ui-list-remove" title="' + w2utils.lang('Remove') + '" index="' + s + '">&nbsp;&nbsp;</div>');
                    } else {
                        ren = '<div class="w2ui-list-remove" title="' + w2utils.lang('Remove') + '" index="' + s + '">&nbsp;&nbsp;</div>' +
                            (obj.type == 'enum' ? it.text : it.name + '<span class="file-size"> - ' + w2utils.size(it.size) + '</span>');
                    }
                    html += '<li index="' + s + '" style="max-width: ' + parseInt(options.maxWidth) + 'px; ' + (it.style ? it.style : '') + '">' +
                        ren + '</li>';
                }
                var div = obj.helpers.multi;
                var ul = div.find('ul');
                div.attr('style', div.attr('style') + ';' + options.style);
                if ($(obj.el).prop('readonly') || $(obj.el).prop('disabled')) {
                    div.addClass('w2ui-readonly');
                    div.css('pointer-events', 'none').find('li').css('opacity', '0.6');
                    $(obj.helpers.multi).find('input').prop('readonly', true);
                } else {
                    div.removeClass('w2ui-readonly');
                    div.css('pointer-events', 'auto').find('li').css('opacity', '1');
                    $(obj.helpers.multi).find('input').prop('readonly', false);
                }
                // celan
                div.find('.w2ui-enum-placeholder').remove();
                ul.find('li').not('li.nomouse').remove();
                // add new list
                if (html != '') {
                    ul.prepend(html);
                } else if (typeof options.placeholder != 'undefined') {
                    var style =
                        'padding-top: ' + $(this.el).css('padding-top') + ';' +
                        'padding-left: ' + $(this.el).css('padding-left') + '; ' +
                        'box-sizing: ' + $(this.el).css('box-sizing') + '; ' +
                        'line-height: ' + $(this.el).css('line-height') + '; ' +
                        'font-size: ' + $(this.el).css('font-size') + '; ' +
                        'font-family: ' + $(this.el).css('font-family') + '; ';
                    div.prepend('<div class="w2ui-enum-placeholder" style="' + style + '">' + options.placeholder + '</div>');
                }
                // ITEMS events
                div.find('li')
                    .data('mouse', 'out')
                    .on('click', function(event) {
                        var item = selected[$(event.target).attr('index')];
                        if ($(event.target).hasClass('nomouse')) return;
                        event.stopPropagation();
                        // trigger event
                        var eventData = obj.trigger({
                            phase: 'before',
                            type: 'click',
                            target: obj.el,
                            originalEvent: event.originalEvent,
                            item: item
                        });
                        if (eventData.isCancelled === true) return;
                        // default behavior
                        if ($(event.target).hasClass('w2ui-list-remove')) {
                            if ($(obj.el).attr('readonly') || $(obj.el).attr('disabled')) return;
                            // trigger event
                            var eventData = obj.trigger({
                                phase: 'before',
                                type: 'remove',
                                target: obj.el,
                                originalEvent: event.originalEvent,
                                item: item
                            });
                            if (eventData.isCancelled === true) return;
                            // default behavior
                            $().w2overlay();
                            selected.splice($(event.target).attr('index'), 1);
                            $(obj.el).trigger('change');
                            $(event.target).parent().fadeOut('fast');
                            setTimeout(function() {
                                obj.refresh();
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }, 300);
                        }
                        if (obj.type == 'file' && !$(event.target).hasClass('w2ui-list-remove')) {
                            var preview = '';
                            if ((/image/i).test(item.type)) { // image
                                preview = '<div style="padding: 3px;">' +
                                    '    <img src="' + (item.content ? 'data:' + item.type + ';base64,' + item.content : '') + '" style="max-width: 300px;" ' +
                                    '        onload="var w = $(this).width(); var h = $(this).height(); ' +
                                    '            if (w < 300 & h < 300) return; ' +
                                    '            if (w >= h && w > 300) $(this).width(300);' +
                                    '            if (w < h && h > 300) $(this).height(300);"' +
                                    '        onerror="this.style.display = \'none\'"' +
                                    '    >' +
                                    '</div>';
                            }
                            var td1 = 'style="padding: 3px; text-align: right; color: #777;"';
                            var td2 = 'style="padding: 3px"';
                            preview += '<div style="padding: 8px;">' +
                                '    <table cellpadding="2">' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Name') + ':</td><td ' + td2 + '>' + item.name + '</td></tr>' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Size') + ':</td><td ' + td2 + '>' + w2utils.size(item.size) + '</td></tr>' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Type') + ':</td><td ' + td2 + '>' +
                                '        <span style="width: 200px; display: block-inline; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">' + item.type + '</span>' +
                                '    </td></tr>' +
                                '    <tr><td ' + td1 + '>' + w2utils.lang('Modified') + ':</td><td ' + td2 + '>' + w2utils.date(item.modified) + '</td></tr>' +
                                '    </table>' +
                                '</div>';
                            $(event.target).w2overlay(preview);
                        }
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    })
                    .on('mouseover', function(event) {
                        var tmp = event.target;
                        if (tmp.tagName != 'LI') tmp = tmp.parentNode;
                        if ($(tmp).hasClass('nomouse')) return;
                        if ($(tmp).data('mouse') == 'out') {
                            var item = selected[$(tmp).attr('index')];
                            // trigger event
                            var eventData = obj.trigger({
                                phase: 'before',
                                type: 'mouseOver',
                                target: obj.el,
                                originalEvent: event.originalEvent,
                                item: item
                            });
                            if (eventData.isCancelled === true) return;
                            // event after
                            obj.trigger($.extend(eventData, {
                                phase: 'after'
                            }));
                        }
                        $(tmp).data('mouse', 'over');
                    })
                    .on('mouseout', function(event) {
                        var tmp = event.target;
                        if (tmp.tagName != 'LI') tmp = tmp.parentNode;
                        if ($(tmp).hasClass('nomouse')) return;
                        $(tmp).data('mouse', 'leaving');
                        setTimeout(function() {
                            if ($(tmp).data('mouse') == 'leaving') {
                                $(tmp).data('mouse', 'out');
                                var item = selected[$(tmp).attr('index')];
                                // trigger event
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'f',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }
                        }, 0);
                    });
                // adjust height
                $(this.el).height('auto');
                var cntHeight = $(div).find('> div').height() + w2utils.getSize(div, '+height') * 2;
                if (cntHeight < 26) cntHeight = 26;
                if (cntHeight > options.maxHeight) cntHeight = options.maxHeight;
                if (div.length > 0) div[0].scrollTop = 1000;
                var inpHeight = w2utils.getSize($(this.el), 'height') - 2;
                if (inpHeight > cntHeight) cntHeight = inpHeight
                $(div).css({
                    'height': cntHeight + 'px',
                    overflow: (cntHeight == options.maxHeight ? 'auto' : 'hidden')
                });
                if (cntHeight < options.maxHeight) $(div).prop('scrollTop', 0);
                $(this.el).css({
                    'height': (cntHeight + 2) + 'px'
                });
            }
            return (new Date()).getTime() - time;
        },

        reset: function() {
            var obj = this;
            var type = this.type;
            this.clear();
            this.type = type;
            this.init();
        },

        clean: function(val) {
            var options = this.options;
            val = String(val).trim();
            // clean
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(this.type) != -1) {
                if (typeof val == 'string') val = val.replace(options.decimalSymbol, '.');
                if (options.autoFormat && ['money', 'currency'].indexOf(this.type) != -1) val = String(val).replace(options.moneyRE, '');
                if (options.autoFormat && this.type == 'percent') val = String(val).replace(options.percentRE, '');
                if (options.autoFormat && ['int', 'float'].indexOf(this.type) != -1) val = String(val).replace(options.numberRE, '');
                if (parseFloat(val) == val) {
                    if (options.min !== null && val < options.min) {
                        val = options.min;
                        $(this.el).val(options.min);
                    }
                    if (options.max !== null && val > options.max) {
                        val = options.max;
                        $(this.el).val(options.max);
                    }
                }
                if (val !== '' && w2utils.isFloat(val)) val = Number(val);
                else val = '';
            }
            return val;
        },

        format: function(val) {
            var options = this.options;
            // autoformat numbers or money
            if (options.autoFormat && val != '') {
                switch (this.type) {
                    case 'money':
                    case 'currency':
                        val = w2utils.formatNumber(Number(val).toFixed(options.currencyPrecision), options.groupSymbol);
                        if (val != '') val = options.currencyPrefix + val + options.currencySuffix;
                        break;
                    case 'percent':
                        val = w2utils.formatNumber(options.precision ? Number(val).toFixed(options.precision) : val, options.groupSymbol);
                        if (val != '') val += '%';
                        break;
                    case 'float':
                        val = w2utils.formatNumber(options.precision ? Number(val).toFixed(options.precision) : val, options.groupSymbol);
                        break;
                    case 'int':
                        val = w2utils.formatNumber(val, options.groupSymbol);
                        break;
                }
            }
            return val;
        },
        //field change event
        change: function(event) {
            var obj = this;
            var options = obj.options;
            // numeric
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(this.type) != -1) {
                // check max/min
                var val = $(this.el).val();
                var new_val = this.format(this.clean($(this.el).val()));
                // if was modified
                if (val != '' && val != new_val) {
                    $(this.el).val(new_val).change();
                    // cancel event
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
            }
            // color
            if (this.type == 'color') {
                var color = '#' + $(this.el).val();
                if ($(this.el).val().length != 6 && $(this.el).val().length != 3) color = '';
                $(this.el).next().find('div').css('background-color', color);
                if ($(obj.el).is(':focus')) this.updateOverlay();
            }
            // list, enum
            if (['list', 'combo'].indexOf(this.type) != -1) {
                if (options.cascadeTo) {
                    obj.cascadeTo(options.cascadeTo);
                }
            }
            if (['list', 'enum', 'file'].indexOf(this.type) != -1) {

                obj.refresh();
                // need time out to show icon indent properly
                setTimeout(function() {
                    obj.refresh();
                }, 5);
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'change',
                    target: obj.el,
                    originalEvent: event.originalEvent,
                    item: $(obj.el).data('selected')
                });
            }
            // date, time
            if (['date', 'time'].indexOf(this.type) != -1) {
                // convert linux timestamps
                var tmp = parseInt(obj.el.value);
                if (w2utils.isInt(obj.el.value) && tmp > 3000) {
                    if (this.type == 'time') $(obj.el).val(w2utils.formatTime(new Date(tmp), options.format)).change();
                    if (this.type == 'date') $(obj.el).val(w2utils.formatDate(new Date(tmp), options.format)).change();
                }
            }
        },

        click: function(event) {
            event.stopPropagation();
            // lists
            if (['list', 'combo', 'enum'].indexOf(this.type) != -1) {
                if (!$(this.el).is(':focus')) {
                    this.focus(event);
                }
            }
            // other fields with drops
            if (['date', 'time', 'color'].indexOf(this.type) != -1) {
                this.updateOverlay();
            }
        },

        focus: function(event) {
            var obj = this;
            var options = this.options;
            // color, date, time
            if (['color', 'date', 'time'].indexOf(obj.type) !== -1) {
                if ($(obj.el).attr('readonly') || $(obj.el).attr('disabled')) return;
                if ($("#w2ui-overlay").length > 0) {
                    $('#w2ui-overlay')[0].hide();
                }
                setTimeout(function() {
                    obj.updateOverlay();
                }, 150);
            }
            // menu
            if (['list', 'combo', 'enum'].indexOf(obj.type) != -1) {
                if ($(obj.el).attr('readonly') || $(obj.el).attr('disabled')) return;
                if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                setTimeout(function() {
                    if (obj.type == 'list' && $(obj.el).is(':focus')) {
                        $(obj.helpers.focus).find('input').focus();
                        //obj.request();
                        return;
                    }

                    setTimeout(function() {
                        //obj.request();
                        obj.updateOverlay();
                    }, 1);
                }, 1);
            }
            // file
            if (obj.type == 'file') {
                $(obj.helpers.multi).css({
                    'outline': 'auto 5px #7DB4F3',
                    'outline-offset': '-2px'
                });
            }
        },

        blur: function(event) {
            var obj = this;
            var options = obj.options;
            var val = $(obj.el).val().trim();
            // hide overlay
            if (['color', 'date', 'time', 'list', 'combo', 'enum'].indexOf(obj.type) != -1) {
                if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
            }
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(obj.type) != -1) {
                if (val !== '' && !obj.checkType(val)) {
                    $(obj.el).val('').change();
                    if (options.silent === false) {
                        $(obj.el).w2tag('Not a valid number');
                        setTimeout(function() {
                            $(obj.el).w2tag('');
                        }, 3000);
                    }
                }
            }
            // date or time
            if (['date', 'time'].indexOf(obj.type) != -1) {
                // check if in range
                if (val !== '' && !obj.inRange(obj.el.value)) {
                    $(obj.el).val('').removeData('selected').change();
                    if (options.silent === false) {
                        $(obj.el).w2tag('Not in range');
                        setTimeout(function() {
                            $(obj.el).w2tag('');
                        }, 3000);
                    }
                } else {
                    if (obj.type == 'date' && val !== '' && !w2utils.isDate(obj.el.value, options.format)) {
                        $(obj.el).val('').removeData('selected').change();
                        if (options.silent === false) {
                            $(obj.el).w2tag('Not a valid date');
                            setTimeout(function() {
                                $(obj.el).w2tag('');
                            }, 3000);
                        }
                    }
                    if (obj.type == 'time' && val !== '' && !w2utils.isTime(obj.el.value)) {
                        $(obj.el).val('').removeData('selected').change();
                        if (options.silent === false) {
                            $(obj.el).w2tag('Not a valid time');
                            setTimeout(function() {
                                $(obj.el).w2tag('');
                            }, 3000);
                        }
                    }
                }
            }
            // clear search input
            if (obj.type == 'enum') {
                $(obj.helpers.multi).find('input').val('').width(20);
            }
            // file
            if (obj.type == 'file') {
                $(obj.helpers.multi).css({
                    'outline': 'none'
                });
            }

        },

        keyPress: function(event) {
            var obj = this;
            var options = obj.options;
            // ignore wrong pressed key
            if (['int', 'float', 'money', 'currency', 'percent', 'hex', 'color', 'alphanumeric'].indexOf(obj.type) != -1) {
                // keyCode & charCode differ in FireFox
                if (event.metaKey || event.ctrlKey || event.altKey || (event.charCode != event.keyCode && event.keyCode > 0)) return;
                var ch = String.fromCharCode(event.charCode);
                if (!obj.checkType(ch, true) && event.keyCode != 13) {
                    event.preventDefault();
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                    return false;
                }
            }
            // update date popup
            if (['date', 'time'].indexOf(obj.type) != -1) {
                setTimeout(function() {
                    obj.updateOverlay();
                }, 1);
            }
        },

        keyDown: function(event, extra) {
            var obj = this;
            var options = obj.options;
            var key = event.keyCode || (extra && extra.keyCode);
            // numeric
            if (['int', 'float', 'money', 'currency', 'percent'].indexOf(obj.type) != -1) {
                if (!options.keyboard || $(obj.el).attr('readonly')) return;
                var cancel = false;
                var val = parseFloat($(obj.el).val().replace(options.moneyRE, '')) || 0;
                var inc = options.step;
                if (event.ctrlKey || event.metaKey) inc = 10;
                switch (key) {
                    case 38: // up
                        if (event.shiftKey) break; // no action if shift key is pressed
                        $(obj.el).val((val + inc <= options.max || options.max === null ? Number((val + inc).toFixed(12)) : options.max)).change();
                        cancel = true;
                        break;
                    case 40: // down
                        if (event.shiftKey) break; // no action if shift key is pressed
                        $(obj.el).val((val - inc >= options.min || options.min === null ? Number((val - inc).toFixed(12)) : options.min)).change();
                        cancel = true;
                        break;
                }
                if (cancel) {
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                    }, 0);
                }
            }
            // date
            if (obj.type == 'date') {
                if (!options.keyboard || $(obj.el).attr('readonly')) return;
                var cancel = false;
                var daymil = 24 * 60 * 60 * 1000;
                var inc = 1;
                if (event.ctrlKey || event.metaKey) inc = 10;
                var dt = w2utils.isDate($(obj.el).val(), options.format, true);
                if (!dt) {
                    dt = new Date();
                    daymil = 0;
                }
                switch (key) {
                    case 38: // up
                        if (event.shiftKey) break; // no action if shift key is pressed
                        var newDT = w2utils.formatDate(dt.getTime() + daymil, options.format);
                        if (inc == 10) newDT = w2utils.formatDate(new Date(dt.getFullYear(), dt.getMonth() + 1, dt.getDate()), options.format);
                        $(obj.el).val(newDT).change();
                        cancel = true;
                        break;
                    case 40: // down
                        if (event.shiftKey) break; // no action if shift key is pressed
                        var newDT = w2utils.formatDate(dt.getTime() - daymil, options.format);
                        if (inc == 10) newDT = w2utils.formatDate(new Date(dt.getFullYear(), dt.getMonth() - 1, dt.getDate()), options.format);
                        $(obj.el).val(newDT).change();
                        cancel = true;
                        break;
                }
                if (cancel) {
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                        obj.updateOverlay();
                    }, 0);
                }
            }
            // time
            if (obj.type == 'time') {
                if (!options.keyboard || $(obj.el).attr('readonly')) return;
                var cancel = false;
                var inc = (event.ctrlKey || event.metaKey ? 60 : 1);
                var val = $(obj.el).val();
                var time = obj.toMin(val) || obj.toMin((new Date()).getHours() + ':' + ((new Date()).getMinutes() - 1));
                switch (key) {
                    case 38: // up
                        if (event.shiftKey) break; // no action if shift key is pressed
                        time += inc;
                        cancel = true;
                        break;
                    case 40: // down
                        if (event.shiftKey) break; // no action if shift key is pressed
                        time -= inc;
                        cancel = true;
                        break;
                }
                if (cancel) {
                    $(obj.el).val(obj.fromMin(time)).change();
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                    }, 0);
                }
            }
            // color
            if (obj.type == 'color') {
                if ($(obj.el).attr('readonly')) return;
                // paste
                if (event.keyCode == 86 && (event.ctrlKey || event.metaKey)) {
                    $(obj.el).prop('maxlength', 7);
                    setTimeout(function() {
                        var val = $(obj).val();
                        if (val.substr(0, 1) == '#') val = val.substr(1);
                        if (!w2utils.isHex(val)) val = '';
                        $(obj).val(val).prop('maxlength', 6).change();
                    }, 20);
                }
                if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {
                    if (typeof obj.tmp.cind1 == 'undefined') {
                        obj.tmp.cind1 = -1;
                        obj.tmp.cind2 = -1;
                    } else {
                        switch (key) {
                            case 38: // up
                                obj.tmp.cind1--;
                                break;
                            case 40: // down
                                obj.tmp.cind1++;
                                break;
                            case 39: // right
                                obj.tmp.cind2++;
                                break;
                            case 37: // left
                                obj.tmp.cind2--;
                                break;
                        }
                        if (obj.tmp.cind1 < 0) obj.tmp.cind1 = 0;
                        if (obj.tmp.cind1 > this.pallete.length - 1) obj.tmp.cind1 = this.pallete.length - 1;
                        if (obj.tmp.cind2 < 0) obj.tmp.cind2 = 0;
                        if (obj.tmp.cind2 > this.pallete[0].length - 1) obj.tmp.cind2 = this.pallete[0].length - 1;
                    }
                    if ([37, 38, 39, 40].indexOf(key) != -1) {
                        $(obj.el).val(this.pallete[obj.tmp.cind1][obj.tmp.cind2]).change();
                        event.preventDefault();
                    }
                }
            }
            // list/select/combo
            if (['list', 'combo', 'enum'].indexOf(obj.type) != -1) {
                if ($(obj.el).attr('readonly')) return;
                var cancel = false;
                var selected = $(obj.el).data('selected');
                var focus = $(obj.helpers.focus).find('input');
                if (obj.type == 'list') {
                    if ([37, 38, 39, 40].indexOf(key) == -1) obj.refresh(); // arrows
                }
                // apply arrows
                switch (key) {
                    case 27: // escape
                        if (obj.type == 'list') {
                            if ($(focus).val() != '') $(focus).val('');
                            event.stopPropagation(); // escape in field should not close popup
                        }
                        break;
                    case 37: // left
                    case 39: // right
                        // cancel = true;
                        break;
                    case 13: // enter
                        if ($('#w2ui-overlay').length == 0) break; // no action if overlay not open
                        var item = options.items[options.index];
                        var multi = $(obj.helpers.multi).find('input');
                        if (obj.type == 'enum') {
                            if (item != null) {
                                // trigger event
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'add',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                item = eventData.item; // need to reassign because it could be recreated by user
                                // default behavior
                                if (selected.length >= options.max && options.max > 0) selected.pop();
                                delete item.hidden;
                                delete obj.tmp.force_open;
                                selected.push(item);
                                $(obj.el).change();
                                multi.val('').width(20);
                                obj.refresh();
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            } else {
                                // trigger event
                                item = {
                                    id: multi.val(),
                                    text: multi.val()
                                }
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'new',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                item = eventData.item; // need to reassign because it could be recreated by user
                                // default behavior
                                if (typeof obj.onNew == 'function') {
                                    if (selected.length >= options.max && options.max > 0) selected.pop();
                                    delete obj.tmp.force_open;
                                    selected.push(item);
                                    $(obj.el).change();
                                    multi.val('').width(20);
                                    obj.refresh();
                                }
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }
                        } else {
                            if (item) $(obj.el).data('selected', item).val(item.text).change();
                            if ($(obj.el).val() == '' && $(obj.el).data('selected')) $(obj.el).removeData('selected').val('').change();
                            if (obj.type == 'list') {
                                focus.val('');
                                obj.refresh();
                            }
                            // hide overlay
                            obj.tmp.force_hide = true;
                        }
                        break;
                    case 8: // backspace
                    case 46: // delete
                        if (obj.type == 'enum' && key == 8) {
                            if ($(obj.helpers.multi).find('input').val() == '' && selected.length > 0) {
                                var item = selected[selected.length - 1];
                                // trigger event
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'remove',
                                    target: obj.el,
                                    originalEvent: event.originalEvent,
                                    item: item
                                });
                                if (eventData.isCancelled === true) return;
                                // default behavior
                                selected.pop();
                                $(obj.el).trigger('change');
                                obj.refresh();
                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            }
                        }
                        if (obj.type == 'list' && $(focus).val() == '') {
                            $(obj.el).data('selected', {}).change();
                            obj.refresh();
                        }
                        break;
                    case 38: // up
                        options.index = w2utils.isInt(options.index) ? parseInt(options.index) : 0;
                        options.index--;
                        while (options.index > 0 && options.items[options.index].hidden) options.index--;
                        if (options.index == 0 && options.items[options.index].hidden) {
                            while (options.items[options.index] && options.items[options.index].hidden) options.index++;
                        }
                        cancel = true;
                        break;
                    case 40: // down
                        options.index = w2utils.isInt(options.index) ? parseInt(options.index) : -1;
                        options.index++;
                        while (options.index < options.items.length - 1 && options.items[options.index].hidden) options.index++;
                        if (options.index == options.items.length - 1 && options.items[options.index].hidden) {
                            while (options.items[options.index] && options.items[options.index].hidden) options.index--;
                        }
                        // show overlay if not shown
                        var input = obj.el;
                        if (['enum'].indexOf(obj.type) != -1) input = obj.helpers.multi.find('input');
                        if ($(input).val() == '' && $('#w2ui-overlay').length == 0) {
                            obj.tmp.force_open = true;
                        } else {
                            cancel = true;
                        }
                        break;
                }
                if (cancel) {
                    if (options.index < 0) options.index = 0;
                    if (options.index >= options.items.length) options.index = options.items.length - 1;
                    obj.updateOverlay();
                    // cancel event
                    event.preventDefault();
                    setTimeout(function() {
                        // set cursor to the end
                        if (obj.type == 'enum') {
                            var tmp = obj.helpers.multi.find('input').get(0);
                            tmp.setSelectionRange(tmp.value.length, tmp.value.length);
                        } else if (obj.type == 'list') {
                            var tmp = obj.helpers.focus.find('input').get(0);
                            tmp.setSelectionRange(tmp.value.length, tmp.value.length);
                        } else {
                            obj.el.setSelectionRange(obj.el.value.length, obj.el.value.length);
                        }
                    }, 0);
                    return;
                }
                // expand input
                if (obj.type == 'enum') {
                    var input = obj.helpers.multi.find('input');
                    var search = input.val();
                    input.width(((search.length + 2) * 8) + 'px');
                }
                // run search
                if ([16, 17, 18, 20, 37, 39, 91].indexOf(key) == -1) { // no refreah on crtl, shift, left/right arrows, etc
                    setTimeout(function() {
                        if (!obj.tmp.force_hide) obj.request();
                        obj.search();
                    }, 1);
                }
            }
        },

        keyUp: function(event) {
            if (this.type == 'color') {
                if (event.keyCode == 86 && (event.ctrlKey || event.metaKey)) $(this).prop('maxlength', 6);
            }
        },

        clearCache: function() {
            var options = this.options;
            options.items = [];
            this.tmp.xhr_loading = false;
            this.tmp.xhr_search = '';
            this.tmp.xhr_total = -1;
            this.search();
        },
        cascadeTo: function(els) {
            for (var i in els) {
                var el = els[i];
                try {
                    $(el).w2field().reinit();
                } catch (e) {
                    console.warn('There is no w2filed definition for el ' + el + '!\\nPlease define the field before call "cascadeTo"!');
                }
            }
        },
        reinit: function() {
            this.options.items = [];
            this.tmp.xhr_loading = false;
            this.tmp.xhr_search = '';
            this.tmp.xhr_total = -1;
            //this.clearCache();
            this.options.selected = {};
            this.minLength = this.options.minLength;
            $(this.el).data('selected', []);
            $(this.el).val('');
            if (this.type === 'enum') {
                var div = this.helpers.multi;
                if (div) {
                    div.find('ul').find('li:not(.nomouse)').remove();
                }
            }
            this.request();
        },

        request: function(interval) {
            var obj = this;
            var options = this.options;

            var search = $(obj.el).val() || '';
            // if no url - do nothing
            if (!options.url) return;
            if (typeof options.url === 'function')
                options.url = options.url.call();
            // --
            if (obj.type == 'enum') {
                var tmp = $(obj.helpers.multi).find('input');
                if (tmp.length == 0) search = '';
                else search = tmp.val();
            }
            if (obj.type == 'list') {
                var tmp = $(obj.helpers.focus).find('input');
                if (tmp.length == 0) search = '';
                else search = tmp.val();
            }
            if (options.minLength != 0 && search.length < options.minLength) {
                options.items = []; // need to empty the list
                this.updateOverlay();
                return;
            }
            if (typeof interval == 'undefined') interval = 350;
            if (typeof obj.tmp.xhr_search == 'undefined') obj.tmp.xhr_search = '';
            if (typeof obj.tmp.xhr_total == 'undefined') obj.tmp.xhr_total = -1;
            // check if need to search
            if (options.url && $(obj.el).prop('readonly') != true && (
                    (options.items.length === 0 && obj.tmp.xhr_total !== 0) ||
                    (obj.tmp.xhr_total == options.cacheMax && search.length > obj.tmp.xhr_search.length) ||
                    (search.length >= obj.tmp.xhr_search.length && search.substr(0, obj.tmp.xhr_search.length) != obj.tmp.xhr_search) ||
                    (search.length < obj.tmp.xhr_search.length)
                )) {
                // empty list
                obj.tmp.xhr_loading = true;
                obj.search();
                // timeout
                clearTimeout(obj.tmp.timeout);
                obj.tmp.timeout = setTimeout(function() {
                    // trigger event
                    var url = options.url;
                    var query;
                    var postData = {
                        search: search,
                        max: options.cacheMax
                    };
                    if (options.postData && typeof(options.postData) === 'function') {
                        query = options.postData.apply(this, arguments);
                    } else {
                        query = options.postData;
                    }
                    $.extend(postData, query);
                    var eventData = obj.trigger({
                        phase: 'before',
                        type: 'request',
                        target: obj.el,
                        url: url,
                        postData: postData
                    });
                    if (eventData.isCancelled === true) return;
                    url = eventData.url;
                    postData = eventData.postData;
                    // console.log('REMOTE SEARCH:', search);
                    if (obj.tmp.xhr) obj.tmp.xhr.abort();
                    var ajaxOptions = {
                        type: 'GET',
                        url: url,
                        data: postData,
                        dataType: 'JSON' // expected from server
                    };
                    if (w2utils.settings.dataType == 'JSON') {
                        ajaxOptions.type = 'POST';
                        ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                        ajaxOptions.contentType = 'application/json';
                    }
                    obj.tmp.xhr = $.ajax(ajaxOptions)
                        .done(function(data, status, xhr) {
                            // trigger event
                            var eventData2 = obj.trigger({
                                phase: 'before',
                                type: 'load',
                                target: obj.el,
                                search: postData.search,
                                data: data,
                                xhr: xhr
                            });
                            if (eventData2.isCancelled === true) return;
                            // default behavior
                            data = eventData2.data;
                            if (typeof data == 'string') data = JSON.parse(data);
                            if (data.status != 'success') {
                                console.log('ERROR: server did not return proper structure. It should return', {
                                    status: 'success',
                                    items: [{
                                        id: 1,
                                        text: 'item'
                                    }]
                                });
                                return;
                            }
                            // remove all extra items if more then needed for cache
                            if (data.items.length > options.cacheMax) data.items.splice(options.cacheMax, 100000);
                            // remember stats
                            obj.tmp.xhr_loading = false;
                            obj.tmp.xhr_search = search;
                            obj.tmp.xhr_total = data.items.length;
                            options.items = obj.normMenu(data.items);
                            if (search == '' && data.items.length == 0) obj.tmp.emptySet = true;
                            else obj.tmp.emptySet = false;
                            obj.search();
                            // console.log('-->', 'retrieved:', obj.tmp.xhr_total);
                            // event after
                            obj.trigger($.extend(eventData2, {
                                phase: 'after'
                            }));
                        })
                        .fail(function(xhr, status, error) {
                            // trigger event
                            var errorObj = {
                                status: status,
                                error: error,
                                rawResponseText: xhr.responseText
                            };
                            var eventData2 = obj.trigger({
                                phase: 'before',
                                type: 'error',
                                target: obj.el,
                                search: search,
                                error: errorObj,
                                xhr: xhr
                            });
                            if (eventData2.isCancelled === true) return;
                            // default behavior
                            if (status != 'abort') {
                                var data;
                                try {
                                    data = $.parseJSON(xhr.responseText)
                                } catch (e) {}
                                console.log('ERROR: Server communication failed.',
                                    '\n   EXPECTED:', {
                                        status: 'success',
                                        items: [{
                                            id: 1,
                                            text: 'item'
                                        }]
                                    },
                                    '\n         OR:', {
                                        status: 'error',
                                        message: 'error message'
                                    },
                                    '\n   RECEIVED:', typeof data == 'object' ? data : xhr.responseText);
                            }
                            // reset stats
                            obj.clearCache();
                            // event after
                            obj.trigger($.extend(eventData2, {
                                phase: 'after'
                            }));
                        });
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                }, interval);
            }
        },
        //FIELD SEARCH
        search: function() {
            var obj = this;
            var options = this.options;
            var search = $(obj.el).val();
            var target = obj.el;
            var ids = [];
            var selected = $(obj.el).data('selected');
            if (obj.type == 'enum') {
                target = $(obj.helpers.multi).find('input');
                search = target.val();
                for (var s in selected) {
                    if (selected[s]) ids.push(selected[s].id);
                }
            }
            if (obj.type == 'list') {
                target = $(obj.helpers.focus).find('input');
                search = target.val();
                for (var s in selected) {
                    if (selected[s]) ids.push(selected[s].id);
                }
            }
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'search',
                target: target,
                search: search
            });
            if (eventData.isCancelled === true) return;
            if (obj.tmp.xhr_loading !== true) {
                var shown = 0;
                for (var i in options.items) {
                    var item = options.items[i];
                    var prefix = '';
                    var suffix = '';
                    if (['is', 'begins'].indexOf(options.match) != -1) prefix = '^';
                    if (['is', 'ends'].indexOf(options.match) != -1) suffix = '$';
                    try {
                        var srch = w2utils.escapeRegExp(search);
                        var re = new RegExp(prefix + srch + suffix, 'i');
                        if (re.test(item.text) || item.text == '...') item.hidden = false;
                        else item.hidden = true;
                    } catch (e) {}
                    // do not show selected items
                    if (obj.type == 'enum' && $.inArray(item.id, ids) != -1) item.hidden = true;
                    if (item.hidden !== true) shown++;
                }
                if (obj.type != 'combo') { // don't preselect first for combo
                    options.index = 0;
                    while (options.items[options.index] && options.items[options.index].hidden) options.index++;
                } else {
                    options.index = -1;
                }
                if (shown <= 0) options.index = -1;
                options.spinner = false;
                obj.updateOverlay();
                setTimeout(function() {
                    var html = $('#w2ui-overlay').html() || '';
                    if (options.markSearch && html.indexOf('$.fn.w2menuHandler') != -1) { // do not highlight when no items
                        $('#w2ui-overlay').w2marker(search);
                    }
                }, 1);
            } else {
                options.items.splice(0, options.cacheMax);
                options.spinner = true;
                obj.updateOverlay();
            }
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        updateOverlay: function() {
            var obj = this;
            var options = this.options;
            // color
            if (this.type == 'color') {
                if ($(obj.el).attr('readonly')) return;
                if ($('#w2ui-overlay').length == 0) {
                    $(obj.el).w2overlay(obj.getColorHTML());
                } else {
                    $('#w2ui-overlay').html(obj.getColorHTML());
                }
                // bind events
                $('#w2ui-overlay .color')
                    .on('mousedown', function(event) {
                        var color = $(event.originalEvent.target).attr('name');
                        var index = $(event.originalEvent.target).attr('index').split(':');
                        obj.tmp.cind1 = index[0];
                        obj.tmp.cind2 = index[1];
                        $(obj.el).val(color).change();
                        $(this).html('&#149;');
                    })
                    .on('mouseup', function() {
                        setTimeout(function() {
                            if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay').removeData('keepOpen')[0].hide();
                        }, 10);
                    });
            }
            // date
            if (this.type == 'date') {
                if ($(obj.el).attr('readonly')) return;
                if ($('#w2ui-overlay').length == 0) {
                    $(obj.el).w2overlay('<div class="w2ui-reset w2ui-calendar" onclick="event.stopPropagation();"></div>', {
                        css: {
                            "background-color": "#f5f5f5"
                        }
                    });
                }
                var month, year;
                var dt = w2utils.isDate($(obj.el).val(), obj.options.format, true);
                if (dt) {
                    month = dt.getMonth() + 1;
                    year = dt.getFullYear();
                }
                (function refreshCalendar(month, year) {
                    $('#w2ui-overlay > div > div').html(obj.getMonthHTML(month, year));
                    $('#w2ui-overlay .w2ui-calendar-title')
                        .on('mousedown', function() {
                            if ($(this).next().hasClass('w2ui-calendar-jump')) {
                                $(this).next().remove();
                            } else {
                                var selYear, selMonth;
                                $(this).after('<div class="w2ui-calendar-jump" style=""></div>');
                                $(this).next().hide().html(obj.getYearHTML()).fadeIn(200);
                                setTimeout(function() {
                                    $('#w2ui-overlay .w2ui-calendar-jump')
                                        .find('.w2ui-jump-month, .w2ui-jump-year')
                                        .on('click', function() {
                                            if ($(this).hasClass('w2ui-jump-month')) {
                                                $(this).parent().find('.w2ui-jump-month').removeClass('selected');
                                                $(this).addClass('selected');
                                                selMonth = $(this).attr('name');
                                            }
                                            if ($(this).hasClass('w2ui-jump-year')) {
                                                $(this).parent().find('.w2ui-jump-year').removeClass('selected');
                                                $(this).addClass('selected');
                                                selYear = $(this).attr('name');
                                            }
                                            if (selYear != null && selMonth != null) {
                                                $('#w2ui-overlay .w2ui-calendar-jump').fadeOut(100);
                                                setTimeout(function() {
                                                    refreshCalendar(parseInt(selMonth) + 1, selYear);
                                                }, 100);
                                            }
                                        });
                                    $('#w2ui-overlay .w2ui-calendar-jump >:last-child').prop('scrollTop', 2000);
                                }, 1);
                            }
                        });
                    $('#w2ui-overlay .w2ui-date')
                        .on('mousedown', function() {
                            var day = $(this).attr('date');
                            $(obj.el).val(day).change();
                            $(this).css({
                                'background-color': '#B6D5FB',
                                'border-color': '#aaa'
                            });
                        })
                        .on('mouseup', function() {
                            setTimeout(function() {
                                if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay').removeData('keepOpen')[0].hide();
                            }, 10);
                        });
                    $('#w2ui-overlay .previous').on('mousedown', function() {
                        var tmp = obj.options.current.split('/');
                        tmp[0] = parseInt(tmp[0]) - 1;
                        refreshCalendar(tmp[0], tmp[1]);
                    });
                    $('#w2ui-overlay .next').on('mousedown', function() {
                        var tmp = obj.options.current.split('/');
                        tmp[0] = parseInt(tmp[0]) + 1;
                        refreshCalendar(tmp[0], tmp[1]);
                    });
                })(month, year);
            }
            // date
            if (this.type == 'time') {
                if ($(obj.el).attr('readonly')) return;
                if ($('#w2ui-overlay').length == 0) {
                    $(obj.el).w2overlay('<div class="w2ui-reset w2ui-calendar-time" onclick="event.stopPropagation();"></div>', {
                        css: {
                            "background-color": "#fff"
                        }
                    });
                }
                var h24 = (this.options.format == 'h24' ? true : false);
                $('#w2ui-overlay > div').html(obj.getHourHTML());
                $('#w2ui-overlay .w2ui-time')
                    .on('mousedown', function(event) {
                        $(this).css({
                            'background-color': '#B6D5FB',
                            'border-color': '#aaa'
                        });
                        var hour = $(this).attr('hour');
                        $(obj.el).val((hour > 12 && !h24 ? hour - 12 : hour) + ':00' + (!h24 ? (hour < 12 ? ' am' : ' pm') : '')).change();
                    })
                    .on('mouseup', function() {
                        var hour = $(this).attr('hour');
                        if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                        $(obj.el).w2overlay('<div class="w2ui-reset w2ui-calendar-time"></div>', {
                            css: {
                                "background-color": "#fff"
                            }
                        });
                        $('#w2ui-overlay > div').html(obj.getMinHTML(hour));
                        $('#w2ui-overlay .w2ui-time')
                            .on('mousedown', function() {
                                $(this).css({
                                    'background-color': '#B6D5FB',
                                    'border-color': '#aaa'
                                });
                                var min = $(this).attr('min');
                                $(obj.el).val((hour > 12 && !h24 ? hour - 12 : hour) + ':' + (min < 10 ? 0 : '') + min + (!h24 ? (hour < 12 ? ' am' : ' pm') : '')).change();
                            })
                            .on('mouseup', function() {
                                setTimeout(function() {
                                    if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay').removeData('keepOpen')[0].hide();
                                }, 10);
                            });
                    });
            }
            // list
            if (['list', 'combo', 'enum'].indexOf(this.type) != -1) {
                var el = this.el;
                var input = this.el;
                if (this.type == 'enum') {
                    el = $(this.helpers.multi);
                    input = $(el).find('input');
                }
                if (this.type == 'list') {
                    input = $(this.helpers.focus).find('input');
                }
                if ($(input).is(':focus')) {
                    if (options.openOnFocus === false && $(input).val() == '' && obj.tmp.force_open !== true) {
                        $().w2overlay();
                        return;
                    }
                    if (obj.tmp.force_hide) {
                        $().w2overlay();
                        setTimeout(function() {
                            delete obj.tmp.force_hide;
                        }, 1);
                        return;
                    }
                    if ($(input).val() != '') delete obj.tmp.force_open;
                    if ($('#w2ui-overlay').length == 0) options.index = 0;
                    var msgNoItems = w2utils.lang('No matches');
                    if (options.url != null && $(input).val().length < options.minLength && obj.tmp.emptySet !== true) msgNoItems = options.minLength + ' ' + w2utils.lang('letters or more...');
                    if (options.url != null && $(input).val() == '' && obj.tmp.emptySet !== true) msgNoItems = w2utils.lang('Type to search....');
                    //updateoverlay refresh menu
                    $(el).w2menu('refresh', $.extend(true, {}, options, {
                        search: false,
                        render: options.renderDrop,
                        maxHeight: options.maxDropHeight,
                        msgNoItems: msgNoItems,
                        // selected with mouse
                        onSelect: function(event) {
                            if (obj.type == 'enum') {
                                var selected = $(obj.el).data('selected');
                                if (event.item) {
                                    // trigger event
                                    var eventData = obj.trigger({
                                        phase: 'before',
                                        type: 'add',
                                        target: obj.el,
                                        originalEvent: event.originalEvent,
                                        item: event.item
                                    });
                                    if (eventData.isCancelled === true) return;
                                    // default behavior
                                    if (selected.length >= options.max && options.max > 0) selected.pop();
                                    delete event.item.hidden;
                                    selected.push(event.item);
                                    $(obj.el).data('selected', selected).change();
                                    $(obj.helpers.multi).find('input').val('').width(20);
                                    obj.refresh();
                                    if ($("#w2ui-overlay").length > 0) $('#w2ui-overlay')[0].hide();
                                    // event after
                                    obj.trigger($.extend(eventData, {
                                        phase: 'after'
                                    }));
                                }
                            } else {
                                var selected = $(obj.el).data('selected');
                                if(selected){
                                    if(!selected.id){//is not object
                                        if(selected===event.item.id){//no change
                                            $(obj.el).data('selected', event.item)
                                        }else{
                                            $(obj.el).data('selected', event.item).val(event.item.text).change();
                                        }
                                    }else{
                                        //selected is object
                                        if(selected.id === event.item.id && selected.text === event.item.text){
                                            //no change
                                        }else{
                                            $(obj.el).data('selected', event.item).val(event.item.text).change();
                                        }
                                    }
                                }
                                    
                                if (obj.helpers.focus) obj.helpers.focus.find('input').val('');
                            }
                        }
                    }));
                }
            }
        },

        inRange: function(str) {
            var inRange = false;
            if (this.type == 'date') {
                var dt = w2utils.isDate(str, this.options.format, true);
                if (dt) {
                    // enable range
                    if (this.options.start || this.options.end) {
                        var st = (typeof this.options.start == 'string' ? this.options.start : $(this.options.start).val());
                        var en = (typeof this.options.end == 'string' ? this.options.end : $(this.options.end).val());
                        var start = w2utils.isDate(st, this.options.format, true);
                        var end = w2utils.isDate(en, this.options.format, true);
                        var current = new Date(dt);
                        if (!start) start = current;
                        if (!end) end = current;
                        if (current >= start && current <= end) inRange = true;
                    } else {
                        inRange = true;
                    }
                    // block predefined dates
                    if (this.options.blocked && $.inArray(str, this.options.blocked) != -1) inRange = false;
                }
            }
            if (this.type == 'time') {
                if (this.options.start || this.options.end) {
                    var tm = this.toMin(str);
                    var tm1 = this.toMin(this.options.start);
                    var tm2 = this.toMin(this.options.end);
                    if (!tm1) tm1 = tm;
                    if (!tm2) tm2 = tm;
                    if (tm >= tm1 && tm <= tm2) inRange = true;
                } else {
                    inRange = true;
                }
            }
            return inRange;
        },

        /*
         *  INTERNAL FUNCTIONS
         */

        checkType: function(ch, loose) {
            var obj = this;
            switch (obj.type) {
                case 'int':
                    if (loose && ['-', obj.options.groupSymbol].indexOf(ch) != -1) return true;
                    return w2utils.isInt(ch.replace(obj.options.numberRE, ''));
                case 'percent':
                    ch = ch.replace(/%/g, '');
                case 'float':
                    if (loose && ['-', w2utils.settings.decimalSymbol, obj.options.groupSymbol].indexOf(ch) != -1) return true;
                    return w2utils.isFloat(ch.replace(obj.options.numberRE, ''));
                case 'money':
                case 'currency':
                    if (loose && ['-', obj.options.decimalSymbol, obj.options.groupSymbol, obj.options.currencyPrefix, obj.options.currencySuffix].indexOf(ch) != -1) return true;
                    return w2utils.isFloat(ch.replace(obj.options.moneyRE, ''));
                case 'hex':
                case 'color':
                    return w2utils.isHex(ch);
                case 'alphanumeric':
                    return w2utils.isAlphaNumeric(ch);
            }
            return true;
        },

        addPrefix: function() {
            var obj = this;
            setTimeout(function() {
                if (obj.type === 'clear') return;
                var helper;
                var tmp = $(obj.el).data('tmp') || {};
                if (tmp['old-padding-left']) $(obj.el).css('padding-left', tmp['old-padding-left']);
                tmp['old-padding-left'] = $(obj.el).css('padding-left');
                $(obj.el).data('tmp', tmp);
                // remove if already displaed
                if (obj.helpers.prefix) $(obj.helpers.prefix).remove();
                if (obj.options.prefix !== '') {
                    // add fresh
                    $(obj.el).before(
                        '<div class="w2ui-field-helper">' +
                        obj.options.prefix +
                        '</div>'
                    );
                    helper = $(obj.el).prev();
                    helper
                        .css({
                            'color': $(obj.el).css('color'),
                            'font-family': $(obj.el).css('font-family'),
                            'font-size': $(obj.el).css('font-size'),
                            'padding-top': $(obj.el).css('padding-top'),
                            'padding-bottom': $(obj.el).css('padding-bottom'),
                            'padding-left': $(obj.el).css('padding-left'),
                            'padding-right': 0,
                            'margin-top': (parseInt($(obj.el).css('margin-top'), 10) + 2) + 'px',
                            'margin-bottom': (parseInt($(obj.el).css('margin-bottom'), 10) + 1) + 'px',
                            'margin-left': $(obj.el).css('margin-left'),
                            'margin-right': 0
                        })
                        .on('click', function(event) {
                            if (obj.options.icon && typeof obj.onIconClick == 'function') {
                                // event before
                                var eventData = obj.trigger({
                                    phase: 'before',
                                    type: 'iconClick',
                                    target: obj.el,
                                    el: $(this).find('span.w2ui-icon')[0]
                                });
                                if (eventData.isCancelled === true) return;

                                // intentionally empty

                                // event after
                                obj.trigger($.extend(eventData, {
                                    phase: 'after'
                                }));
                            } else {
                                if (obj.type == 'list') {
                                    $(obj.helpers.focus).find('input').focus();
                                } else {
                                    $(obj.el).focus();
                                }
                            }
                        });
                    $(obj.el).css('padding-left', (helper.width() + parseInt($(obj.el).css('padding-left'), 10)) + 'px');
                    // remember helper
                    obj.helpers.prefix = helper;
                }
            }, 1);
        },

        addSuffix: function() {
            var obj = this;
            var helper, pr;
            setTimeout(function() {
                if (obj.type === 'clear') return;
                var tmp = $(obj.el).data('tmp') || {};
                if (tmp['old-padding-right']) $(obj.el).css('padding-right', tmp['old-padding-right']);
                tmp['old-padding-right'] = $(obj.el).css('padding-right');
                $(obj.el).data('tmp', tmp);
                pr = parseInt($(obj.el).css('padding-right'), 10);
                if (obj.type === 'list' || obj.type === 'combo') {
                    $(obj.el).wrap('<span class="w2ui-select-arrow"></span>');
                    helper = $(obj.el).parent();
                    helper.on('click', function(event) {
                        if (obj.type == 'list') {
                            $(obj.helpers.focus).find('input').focus();
                        } else {
                            $(obj.el).focus();
                        }
                    });
                    obj.helpers.suffix = helper;

                } else {
                    if (obj.options.arrows) {
                        // remove if already displaed
                        if (obj.helpers.arrows) $(obj.helpers.arrows).remove();
                        // add fresh
                        $(obj.el).after(
                            '<div class="w2ui-field-helper" style="border: 1px solid transparent">&nbsp;' +
                            '    <div class="w2ui-field-up" type="up">' +
                            '        <div class="arrow-up" type="up"></div>' +
                            '    </div>' +
                            '    <div class="w2ui-field-down" type="down">' +
                            '        <div class="arrow-down" type="down"></div>' +
                            '    </div>' +
                            '</div>');
                        var height = w2utils.getSize(obj.el, 'height');
                        helper = $(obj.el).next();
                        helper.css({
                                'color': $(obj.el).css('color'),
                                'font-family': $(obj.el).css('font-family'),
                                'font-size': $(obj.el).css('font-size'),
                                'height': ($(obj.el).height() + parseInt($(obj.el).css('padding-top'), 10) + parseInt($(obj.el).css('padding-bottom'), 10)) + 'px',
                                'padding': 0,
                                'margin-top': (parseInt($(obj.el).css('margin-top'), 10) + 1) + 'px',
                                'margin-bottom': 0,
                                'border-left': '1px solid silver'
                            })
                            .css('margin-left', '-' + (helper.width() + parseInt($(obj.el).css('margin-right'), 10) + 12) + 'px')
                            .on('mousedown', function(event) {
                                $('body').on('mouseup', tmp);
                                $('body').data('_field_update_timer', setTimeout(update, 700));
                                update(false);
                                // timer function
                                function tmp() {
                                    clearTimeout($('body').data('_field_update_timer'));
                                    $('body').off('mouseup', tmp);
                                }
                                // update function

                                function update(notimer) {
                                    $(obj.el).focus();
                                    obj.keyDown($.Event("keydown"), {
                                        keyCode: ($(event.target).attr('type') == 'up' ? 38 : 40)
                                    });
                                    if (notimer !== false) $('body').data('_field_update_timer', setTimeout(update, 60));
                                }
                            });
                        pr += helper.width() + 12;
                        $(obj.el).css('padding-right', pr + 'px');
                        // remember helper
                        obj.helpers.arrows = helper;
                    }
                    if (obj.options.suffix !== '') {
                        // remove if already displaed
                        if (obj.helpers.suffix) $(obj.helpers.suffix).remove();
                        // add fresh

                        $(obj.el).after(
                            '<div class="w2ui-field-helper">' +
                            obj.options.suffix +
                            '</div>');
                        helper = $(obj.el).next();
                        helper
                            .css({
                                'color': $(obj.el).css('color'),
                                'font-family': $(obj.el).css('font-family'),
                                'font-size': $(obj.el).css('font-size'),
                                'padding-top': $(obj.el).css('padding-top'),
                                'padding-bottom': $(obj.el).css('padding-bottom'),
                                'padding-left': '3px',
                                'padding-right': $(obj.el).css('padding-right'),
                                'margin-top': (parseInt($(obj.el).css('margin-top'), 10) + 2) + 'px',
                                'margin-bottom': (parseInt($(obj.el).css('margin-bottom'), 10) + 1) + 'px'
                            })
                            .on('click', function(event) {
                                if (obj.type == 'list') {
                                    $(obj.helpers.focus).find('input').focus();
                                } else {
                                    $(obj.el).focus();
                                }
                            });

                        helper.css('margin-left', '-' + (w2utils.getSize(helper, 'width') + parseInt($(obj.el).css('margin-right'), 10) + 2) + 'px');
                        pr += helper.width() + 3;
                        $(obj.el).css('padding-right', pr + 'px');
                        // remember helper
                        obj.helpers.suffix = helper;
                    }
                }
            }, 1);
        },

        addFocus: function() {
            var obj = this;
            var options = this.options;
            var width = 0; // 11 - show search icon, 0 do not show
            // clean up & init
            $(obj.helpers.focus).remove();
            // build helper
            var html =
                '<div class="w2ui-field-helper">' +
                // '    <div class="w2ui-icon icon-search"></div>' +
                '    <input type="text" autocomplete="off">' +
                '<div>';
            $(obj.el).attr('tabindex', -1).before(html);
            var helper = $(obj.el).prev();
            obj.helpers.focus = helper;
            helper.css({
                    width: $(obj.el).width(),//'100%',
                    "margin-top": $(obj.el).css('margin-top'),
                    "margin-left": (parseInt($(obj.el).css('margin-left')) + parseInt($(obj.el).css('padding-left'))) + 'px',
                    "margin-bottom": $(obj.el).css('margin-bottom'),
                    "margin-right": $(obj.el).css('margin-right')
                })
                .find('input')
                .css({
                    cursor: 'default',
                    width: '100%',
                    outline: 'none',
                    opacity: 1,
                    margin: 0,
                    border: '1px solid transparent',
                    padding: $(obj.el).css('padding-top'),
                    "padding-left": 0,
                    "margin-left": (width > 0 ? width + 6 : 0),
                    "background-color": 'transparent'
                });
            // INPUT events
            helper.find('input')
                .on('click', function(event) {
                    if ($('#w2ui-overlay').length == 0) obj.focus(event);
                    event.stopPropagation();
                })
                .on('focus', function(event) {
                    $(obj.el).css({
                        'outline': 'auto 5px #7DB4F3',
                        'outline-offset': '-2px'
                    });
                    $(this).val('');
                    $(obj.el).triggerHandler('focus');
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                })
                .on('blur', function(event) {
                    $(obj.el).css('outline', 'none');
                    $(this).val('');
                    obj.refresh();
                    $(obj.el).triggerHandler('blur');
                    if (event.stopPropagation) event.stopPropagation();
                    else event.cancelBubble = true;
                })
                .on('keyup', function(event) {
                    obj.keyUp(event)
                })
                .on('keydown', function(event) {
                    obj.keyDown(event)
                })
                .on('keypress', function(event) {
                    obj.keyPress(event);
                });
            // MAIN div
            helper.on('click', function(event) {
                $(this).find('input').focus();
            });
            obj.refresh();
        },

        addMulti: function() {
            var obj = this;
            var options = this.options;
            // clean up & init
            $(obj.helpers.multi).remove();
            // build helper
            var html = '';
            var margin =
                'margin-top     : 0px; ' +
                'margin-bottom  : 0px; ' +
                'margin-left    : ' + $(obj.el).css('margin-left') + '; ' +
                'margin-right   : ' + $(obj.el).css('margin-right') + '; ' +
                'width          : ' + (w2utils.getSize(obj.el, 'width') - parseInt($(obj.el).css('margin-left'), 10) - parseInt($(obj.el).css('margin-right'), 10)) + 'px;';
            if (obj.type == 'enum') {
                html = '<div class="w2ui-field-helper w2ui-list" style="' + margin + '; box-sizing: border-box">' +
                    '    <div style="padding: 0px; margin: 0px; margin-right: 20px; display: inline-block">' +
                    '    <ul>' +
                    '        <li style="padding-left: 0px; padding-right: 0px" class="nomouse">' +
                    '            <input type="text" style="width: 20px" autocomplete="off" ' + ($(obj.el).attr('readonly') ? 'readonly' : '') + '>' +
                    '        </li>'
                '    </ul>' +
                '    </div>' +
                '</div>';
            }
            if (obj.type == 'file') {
                html = '<div class="w2ui-field-helper w2ui-list" style="' + margin + '; box-sizing: border-box">' +
                    '    <div style="padding: 0px; margin: 0px; margin-right: 20px; display: inline-block">' +
                    '    <ul><li style="padding-left: 0px; padding-right: 0px" class="nomouse"></li></ul>' +
                    '    <input class="file-input" type="file" name="attachment" multiple style="display: none" tabindex="-1">'
                '    </div>' +
                '</div>';
            }
            $(obj.el)
                .before(html)
                .css({
                    'background-color': 'transparent',
                    'border-color': 'transparent'
                });

            var div = $(obj.el).prev();
            obj.helpers.multi = div;
            if (obj.type == 'enum') {
                $(obj.el).attr('tabindex', -1);
                // INPUT events
                div.find('input')
                    .on('click', function(event) {
                        if ($('#w2ui-overlay').length == 0) obj.focus(event);
                        $(obj.el).triggerHandler('click');
                    })
                    .on('focus', function(event) {
                        $(div).css({
                            'outline': 'auto 5px #7DB4F3',
                            'outline-offset': '-2px'
                        });
                        $(obj.el).triggerHandler('focus');
                        if (event.stopPropagation) event.stopPropagation();
                        else event.cancelBubble = true;
                    })
                    .on('blur', function(event) {
                        $(div).css('outline', 'none');
                        $(obj.el).triggerHandler('blur');
                        if (event.stopPropagation) event.stopPropagation();
                        else event.cancelBubble = true;
                    })
                    .on('keyup', function(event) {
                        obj.keyUp(event)
                    })
                    .on('keydown', function(event) {
                        obj.keyDown(event)
                    })
                    .on('keypress', function(event) {
                        div.find('.w2ui-enum-placeholder').remove();
                        obj.keyPress(event);
                    });
                // MAIN div
                div.on('click', function(event) {
                    $(this).find('input').focus();
                });
            }
            if (obj.type == 'file') {
                $(obj.el).css('outline', 'none');
                div.on('click', function(event) {
                        $(obj.el).focus();
                        if ($(obj.el).attr('readonly')) return;
                        obj.blur(event);
                        div.find('input').click();
                    })
                    .on('dragenter', function(event) {
                        if ($(obj.el).attr('readonly')) return;
                        $(div).addClass('w2ui-file-dragover');
                    })
                    .on('dragleave', function(event) {
                        if ($(obj.el).attr('readonly')) return;
                        var tmp = $(event.target).parents('.w2ui-field-helper');
                        if (tmp.length == 0) $(div).removeClass('w2ui-file-dragover');
                    })
                    .on('drop', function(event) {
                        if ($(obj.el).attr('readonly')) return;
                        $(div).removeClass('w2ui-file-dragover');
                        var files = event.originalEvent.dataTransfer.files;
                        for (var i = 0, l = files.length; i < l; i++) obj.addFile.call(obj, files[i]);
                        // cancel to stop browser behaviour
                        event.preventDefault();
                        event.stopPropagation();
                    })
                    .on('dragover', function(event) {
                        // cancel to stop browser behaviour
                        event.preventDefault();
                        event.stopPropagation();
                    });
                div.find('input')
                    .on('click', function(event) {
                        event.stopPropagation();
                    })
                    .on('change', function() {
                        if (typeof this.files !== "undefined") {
                            for (var i = 0, l = this.files.length; i < l; i++) {
                                obj.addFile.call(obj, this.files[i]);
                            }
                        }
                    });
            }
            obj.refresh();
        },

        addFile: function(file) {
            var obj = this;
            var options = this.options;
            var selected = $(obj.el).data('selected');
            var newItem = {
                name: file.name,
                type: file.type,
                modified: file.lastModifiedDate,
                size: file.size,
                content: null
            };
            var size = 0;
            var cnt = 0;
            var err;
            for (var s in selected) {
                // check for dups
                if (selected[s].name == file.name && selected[s].size == file.size) return;
                size += selected[s].size;
                cnt++;
            }
            // trigger event
            var eventData = obj.trigger({
                phase: 'before',
                type: 'add',
                target: obj.el,
                file: newItem,
                total: cnt,
                totalSize: size
            });
            if (eventData.isCancelled === true) return;
            // check params
            if (options.maxFileSize !== 0 && newItem.size > options.maxFileSize) {
                err = 'Maximum file size is ' + w2utils.size(options.maxFileSize);
                if (options.silent === false) $(obj.el).w2tag(err);
                console.log('ERROR: ' + err);
                return;
            }
            if (options.maxSize !== 0 && size + newItem.size > options.maxSize) {
                err = 'Maximum total size is ' + w2utils.size(options.maxSize);
                if (options.silent === false) $(obj.el).w2tag(err);
                console.log('ERROR: ' + err);
                return;
            }
            if (options.max !== 0 && cnt >= options.max) {
                err = 'Maximum number of files is ' + options.max;
                if (options.silent === false) $(obj.el).w2tag(err);
                console.log('ERROR: ' + err);
                return;
            }
            selected.push(newItem);
            // read file as base64
            if (typeof FileReader !== "undefined") {
                var reader = new FileReader();
                // need a closure
                reader.onload = (function() {
                    return function(event) {
                        var fl = event.target.result;
                        var ind = fl.indexOf(',');
                        newItem.content = fl.substr(ind + 1);
                        obj.refresh();
                        $(obj.el).trigger('change');
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                    };
                })();
                reader.readAsDataURL(file);
            } else {
                obj.refresh();
                $(obj.el).trigger('change');
            }
        },

        normMenu: function(menu) {
            if ($.isArray(menu)) {
                for (var m = 0; m < menu.length; m++) {
                    if (typeof menu[m] == 'string') {
                        menu[m] = {
                            id: menu[m],
                            text: menu[m]
                        };
                    } else {
                        if (typeof menu[m].text != 'undefined' && typeof menu[m].id == 'undefined') menu[m].id = menu[m].text;
                        if (typeof menu[m].text == 'undefined' && typeof menu[m].id != 'undefined') menu[m].text = menu[m].id;
                        if (typeof menu[m].caption != 'undefined') menu[m].text = menu[m].caption;
                    }
                }
                return menu;
            } else if (typeof menu == 'object') {
                var tmp = []
                for (var m in menu) tmp.push({
                    id: m,
                    text: menu[m]
                });
                return tmp;
            }
        },

        getColorHTML: function() {
            var html = '<div class="w2ui-color">' +
                '<table cellspacing="5">';
            for (var i = 0; i < 8; i++) {
                html += '<tr>';
                for (var j = 0; j < 8; j++) {
                    html += '<td>' +
                        '    <div class="color" style="background-color: #' + this.pallete[i][j] + ';" name="' + this.pallete[i][j] + '" index="' + i + ':' + j + '">' +
                        '        ' + ($(this.el).val() == this.pallete[i][j] ? '&#149;' : '&nbsp;') +
                        '    </div>' +
                        '</td>';
                }
                html += '</tr>';
                if (i < 2) html += '<tr><td style="height: 8px" colspan="8"></td></tr>';
            }
            html += '</table></div>';
            return html;
        },

        getMonthHTML: function(month, year) {
            var td = new Date();
            var months = w2utils.settings.fullmonths;
            var days = w2utils.settings.fulldays;
            var daysCount = ['31', '28', '31', '30', '31', '30', '31', '31', '30', '31', '30', '31'];
            var today = td.getFullYear() + '/' + (Number(td.getMonth()) + 1) + '/' + td.getDate();
            // normalize date
            year = w2utils.isInt(year) ? parseInt(year) : td.getFullYear();
            month = w2utils.isInt(month) ? parseInt(month) : td.getMonth() + 1;
            if (month > 12) {
                month -= 12;
                year++;
            }
            if (month < 1 || month === 0) {
                month += 12;
                year--;
            }
            if (year / 4 == Math.floor(year / 4)) {
                daysCount[1] = '29';
            } else {
                daysCount[1] = '28';
            }
            this.options.current = month + '/' + year;

            // start with the required date
            td = new Date(year, month - 1, 1);
            var weekDay = td.getDay();
            var tabDays = w2utils.settings.shortdays;
            var dayTitle = '';
            for (var i = 0, len = tabDays.length; i < len; i++) {
                dayTitle += '<td>' + tabDays[i] + '</td>';
            }
            var html =
                '<div class="w2ui-calendar-title title">' +
                '    <div class="w2ui-calendar-previous previous"> <div></div> </div>' +
                '    <div class="w2ui-calendar-next next"> <div></div> </div> ' +
                months[month - 1] + ', ' + year +
                '</div>' +
                '<table class="w2ui-calendar-days" cellspacing="0">' +
                '    <tr class="w2ui-day-title">' + dayTitle + '</tr>' +
                '    <tr>';

            var day = 1;
            for (var ci = 1; ci < 43; ci++) {
                if (weekDay === 0 && ci == 1) {
                    for (var ti = 0; ti < 6; ti++) html += '<td class="w2ui-day-empty">&nbsp;</td>';
                    ci += 6;
                } else {
                    if (ci < weekDay || day > daysCount[month - 1]) {
                        html += '<td class="w2ui-day-empty">&nbsp;</td>';
                        if ((ci) % 7 === 0) html += '</tr><tr>';
                        continue;
                    }
                }
                var dt = year + '/' + month + '/' + day;

                var className = '';
                if (ci % 7 == 6) className = ' w2ui-saturday';
                if (ci % 7 === 0) className = ' w2ui-sunday';
                if (dt == today) className += ' w2ui-today';

                var dspDay = day;
                var col = '';
                var bgcol = '';
                var tmp_dt = w2utils.formatDate(dt, this.options.format);
                if (this.options.colored && this.options.colored[tmp_dt] !== undefined) { // if there is predefined colors for dates
                    tmp = this.options.colored[tmp_dt].split(':');
                    bgcol = 'background-color: ' + tmp[0] + ';';
                    col = 'color: ' + tmp[1] + ';';
                }
                html += '<td class="' + (this.inRange(tmp_dt) ? 'w2ui-date ' : 'w2ui-blocked') + className + '" style="' + col + bgcol + '" date="' + tmp_dt + '">' +
                    dspDay +
                    '</td>';
                if (ci % 7 === 0 || (weekDay === 0 && ci == 1)) html += '</tr><tr>';
                day++;
            }
            html += '</tr></table>';
            return html;
        },

        getYearHTML: function() {
            var months = w2utils.settings.shortmonths;
            var mhtml = '';
            var yhtml = '';
            for (var m in months) {
                mhtml += '<div class="w2ui-jump-month" name="' + m + '">' + months[m] + '</div>';
            }
            for (var y = 1950; y <= 2020; y++) {
                yhtml += '<div class="w2ui-jump-year" name="' + y + '">' + y + '</div>'
            }
            return '<div>' + mhtml + '</div><div>' + yhtml + '</div>';
        },

        getHourHTML: function() {
            var tmp = [];
            var h24 = (this.options.format == 'h24' ? true : false);
            for (var a = 0; a < 24; a++) {
                var time = (a >= 12 && !h24 ? a - 12 : a) + ':00' + (!h24 ? (a < 12 ? ' am' : ' pm') : '');
                if (a == 12 && !h24) time = '12:00 pm';
                if (!tmp[Math.floor(a / 8)]) tmp[Math.floor(a / 8)] = '';
                var tm1 = this.fromMin(this.toMin(time));
                var tm2 = this.fromMin(this.toMin(time) + 59);
                tmp[Math.floor(a / 8)] += '<div class="' + (this.inRange(tm1) || this.inRange(tm2) ? 'w2ui-time ' : 'w2ui-blocked') + '" hour="' + a + '">' + time + '</div>';
            }
            var html =
                '<div class="w2ui-calendar-time"><table><tr>' +
                '    <td>' + tmp[0] + '</td>' +
                '    <td>' + tmp[1] + '</td>' +
                '    <td>' + tmp[2] + '</td>' +
                '</tr></table></div>';
            return html;
        },

        getMinHTML: function(hour) {
            if (typeof hour == 'undefined') hour = 0;
            var h24 = (this.options.format == 'h24' ? true : false);
            var tmp = [];
            for (var a = 0; a < 60; a += 5) {
                var time = (hour > 12 && !h24 ? hour - 12 : hour) + ':' + (a < 10 ? 0 : '') + a + ' ' + (!h24 ? (hour < 12 ? 'am' : 'pm') : '');
                var ind = a < 20 ? 0 : (a < 40 ? 1 : 2);
                if (!tmp[ind]) tmp[ind] = '';
                tmp[ind] += '<div class="' + (this.inRange(time) ? 'w2ui-time ' : 'w2ui-blocked') + '" min="' + a + '">' + time + '</div>';
            }
            var html =
                '<div class="w2ui-calendar-time"><table><tr>' +
                '    <td>' + tmp[0] + '</td>' +
                '    <td>' + tmp[1] + '</td>' +
                '    <td>' + tmp[2] + '</td>' +
                '</tr></table></div>';
            return html;
        },

        toMin: function(str) {
            if (typeof str != 'string') return null;
            var tmp = str.split(':');
            if (tmp.length == 2) {
                tmp[0] = parseInt(tmp[0]);
                tmp[1] = parseInt(tmp[1]);
                if (str.indexOf('pm') != -1 && tmp[0] != 12) tmp[0] += 12;
            } else {
                return null;
            }
            return tmp[0] * 60 + tmp[1];
        },

        fromMin: function(time) {
            var ret = '';
            if (time >= 24 * 60) time = time % (24 * 60);
            if (time < 0) time = 24 * 60 + time;
            var hour = Math.floor(time / 60);
            var min = ((time % 60) < 10 ? '0' : '') + (time % 60);
            if (this.options.format.indexOf('h24') != -1) {
                ret = hour + ':' + min;
            } else {
                ret = (hour <= 12 ? hour : hour - 12) + ':' + min + ' ' + (hour >= 12 ? 'pm' : 'am');
            }
            return ret;
        },
        enable: function() {
            $(this.el).attr('disabled', null);
        },
        disable: function() {
            $(this.el).attr('disabled', true);
        }
    }

    $.extend(w2field.prototype, w2utils.event);
    w2obj.field = w2field;

})(jQuery);

/************************************************************************
 *   Library: Web 2.0 UI for jQuery (using prototypical inheritance)
 *   - Following objects defined
 *        - w2form      - form widget
 *        - $().w2form  - jQuery wrapper
 *   - Dependencies: jQuery, w2utils, w2fields, w2tabs, w2toolbar, w2alert
 *
 * == NICE TO HAVE ==
 *   - refresh(field) - would refresh only one field
 *   - include delta on save
 *   - create an example how to do cascadic dropdown
 *   - form should read <select> <options> into items
 *   - two way data bindings
 *   - verify validation of fields
 *   - when field is blank, set record.field = null
 *   - show/hide a field
 *   - added getChanges() - not complete
 *
 ************************************************************************/


(function() {
    var w2form = function(options) {
        // public properties
        this.name = null;
        this.header = '';
        this.box = null; // HTML element that hold this element
        this.url = '';
        this.routeData = {}; // data for dynamic routes
        this.formURL = ''; // url where to get form HTML
        this.formHTML = ''; // form HTML (might be loaded from the url)
        this.page = 0; // current page
        this.recid = 0; // can be null or 0
        this.fields = [];
        this.actions = {};
        this.record = {};
        this.original = {};
        this.postData = {};
        this.toolbar = {}; // if not empty, then it is toolbar
        this.tabs = {}; // if not empty, then it is tabs object

        this.style = '';
        this.focus = 0; // focus first or other element
        this.msgNotJSON = w2utils.lang('Return data is not in JSON format.');
        this.msgAJAXerror = w2utils.lang('AJAX error. See console for more details.');
        this.msgRefresh = w2utils.lang('Refreshing...');
        this.msgSaving = w2utils.lang('Saving...');

        // events
        this.onRequest = null;
        this.onLoad = null;
        this.onValidate = null;
        this.onSubmit = null;
        this.onSave = null;
        this.onChange = null;
        this.onRender = null;
        this.onRefresh = null;
        this.onResize = null;
        this.onDestroy = null;
        this.onAction = null;
        this.onToolbar = null;
        this.onError = null;

        // internal
        this.isGenerated = false;
        this.last = {
            xhr: null // jquery xhr requests
        }

        $.extend(true, this, w2obj.form, options);
    };

    // ====================================================
    // -- Registers as a jQuery plugin

    $.fn.w2form = function(method) {
        if (typeof method === 'object' || !method) {
            var obj = this;
            // check name parameter
            if (!w2utils.checkName(method, 'w2form')) return;
            // remember items
            var record = method.record;
            var original = method.original;
            var fields = method.fields;
            var toolbar = method.toolbar;
            var tabs = method.tabs;
            // extend items
            var object = new w2form(method);
            $.extend(object, {
                record: {},
                original: {},
                fields: [],
                tabs: {},
                toolbar: {},
                handlers: []
            });
            if ($.isArray(tabs)) {
                $.extend(true, object.tabs, {
                    tabs: []
                });
                for (var t in tabs) {
                    var tmp = tabs[t];
                    if (typeof tmp === 'object') object.tabs.tabs.push(tmp);
                    else object.tabs.tabs.push({
                        id: tmp,
                        caption: tmp
                    });
                }
            } else {
                $.extend(true, object.tabs, tabs);
            }
            $.extend(true, object.toolbar, toolbar);
            // reassign variables
            for (var p in fields) {
                var field = $.extend(true, {}, fields[p]);
                if (typeof field.name == 'undefined' && typeof field.field != 'undefined') field.name = field.field;
                if (typeof field.field == 'undefined' && typeof field.name != 'undefined') field.field = field.name;
                object.fields[p] = field;
            }
            for (var p in record) {
                if ($.isPlainObject(record[p])) {
                    object.record[p] = $.extend(true, {}, record[p]);
                } else {
                    object.record[p] = record[p];
                }
            }
            for (var p in original) {
                if ($.isPlainObject(original[p])) {
                    object.original[p] = $.extend(true, {}, original[p]);
                } else {
                    object.original[p] = original[p];
                }
            }
            if (obj.length > 0) object.box = obj[0];
            // render if necessary
            if (object.formURL != '') {
                $.get(object.formURL, function(data) { // should always be $.get as it is template
                    object.formHTML = data;
                    object.isGenerated = true;
                    if ($(object.box).length != 0 || data.length != 0) {
                        $(object.box).html(data);
                        object.render(object.box);
                    }
                });
            } else if (object.formHTML != '') {
                // it is already loaded into formHTML
            } else if ($(this).length != 0 && $.trim($(this).html()) != '') {
                object.formHTML = $(this).html();
            } else { // try to generate it
                object.formHTML = object.generateHTML();
            }
            // register new object
            w2ui[object.name] = object;
            // render if not loaded from url
            if (object.formURL == '') {
                if (String(object.formHTML).indexOf('w2ui-page') == -1) {
                    object.formHTML = '<div class="w2ui-page page-0">' + object.formHTML + '</div>';
                }
                $(object.box).html(object.formHTML);
                object.isGenerated = true;
                object.render(object.box);
            }
            return object;

        } else if (w2ui[$(this).attr('name')]) {
            var obj = w2ui[$(this).attr('name')];
            obj[method].apply(obj, Array.prototype.slice.call(arguments, 1));
            return this;
        } else {
            console.log('ERROR: Method ' + method + ' does not exist on jQuery.w2form');
        }
    };

    // ====================================================
    // -- Implementation of core functionality

    w2form.prototype = {

        get: function(field, returnIndex) {
            if (arguments.length === 0) {
                var all = [];
                for (var f1 in this.fields) {
                    if (this.fields[f1].name != null) all.push(this.fields[f1].name);
                }
                return all;
            } else {
                for (var f2 in this.fields) {
                    if (this.fields[f2].name == field) {
                        if (returnIndex === true) return f2;
                        else return this.fields[f2];
                    }
                }
                return null;
            }
        },

        set: function(field, obj) {
            for (var f in this.fields) {
                if (this.fields[f].name == field) {
                    $.extend(this.fields[f], obj);
                    this.refresh();
                    return true;
                }
            }
            return false;
        },

        reload: function(callBack) {
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url && this.recid != 0) {
                // this.clear();
                this.request(callBack);
            } else {
                // this.refresh(); // no need to refresh
                if (typeof callBack == 'function') callBack();
            }
        },

        clear: function() {
            this.recid = 0;
            this.record = {};
            $().w2tag();
            this.refresh();
        },

        error: function(msg) {
            var obj = this;
            // let the management of the error outside of the grid
            var eventData = this.trigger({
                target: this.name,
                type: 'error',
                message: msg,
                xhr: this.last.xhr
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack();
                return;
            }
            // need a time out because message might be already up)
            setTimeout(function() {
                w2alert(msg, 'Error');
            }, 1);
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        validate: function(showErrors) {
            if (typeof showErrors == 'undefined') showErrors = true;
            $().w2tag(); // hide all tags before validating
            // validate before saving
            var errors = [];
            for (var f in this.fields) {
                var field = this.fields[f];
                if (this.record[field.name] == null) this.record[field.name] = '';
                switch (field.type) {
                    case 'int':
                        if (this.record[field.name] && !w2utils.isInt(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not an integer')
                            });
                        }
                        break;
                    case 'float':
                        if (this.record[field.name] && !w2utils.isFloat(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a float')
                            });
                        }
                        break;
                    case 'money':
                        if (this.record[field.name] && !w2utils.isMoney(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not in money format')
                            });
                        }
                        break;
                    case 'color':
                    case 'hex':
                        if (this.record[field.name] && !w2utils.isHex(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a hex number')
                            });
                        }
                        break;
                    case 'email':
                        if (this.record[field.name] && !w2utils.isEmail(this.record[field.name])) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a valid email')
                            });
                        }
                        break;
                    case 'checkbox':
                        // convert true/false
                        if (this.record[field.name] == true) this.record[field.name] = 1;
                        else this.record[field.name] = 0;
                        break;
                    case 'date':
                        // format date before submit
                        if (!field.options.format) field.options.format = w2utils.settings.date_format;
                        if (this.record[field.name] && !w2utils.isDate(this.record[field.name], field.options.format)) {
                            errors.push({
                                field: field,
                                error: w2utils.lang('Not a valid date') + ': ' + field.options.format
                            });
                        } else {}
                        break;
                    case 'list':
                    case 'combo':
                        break;
                    case 'enum':
                        break;
                }
                // === check required - if field is '0' it should be considered not empty
                var val = this.record[field.name];
                if (field.required && (val === '' || ($.isArray(val) && val.length == 0) || ($.isPlainObject(val) && $.isEmptyObject(val)))) {
                    errors.push({
                        field: field,
                        error: w2utils.lang('Required field')
                    });
                }
                if (field.equalto && this.record[field.name] != this.record[field.equalto]) {
                    errors.push({
                        field: field,
                        error: w2utils.lang('Field should be equal to ') + field.equalto
                    });
                }
            }
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'validate',
                errors: errors
            });
            if (eventData.isCancelled === true) return;
            // show error
            if (showErrors)
                for (var e in eventData.errors) {
                    var err = eventData.errors[e];
                    if (err.field.type == 'radio') { // for radio and checkboxes
                        $($(err.field.el).parents('div')[0]).w2tag(err.error, {
                            "class": 'w2ui-error'
                        });
                    } else if (['enum', 'file'].indexOf(err.field.type) != -1) {
                        (function(err) {
                            setTimeout(function() {
                                var fld = $(err.field.el).data('w2field').helpers.multi;
                                $(err.field.el).w2tag(err.error);
                                $(fld).addClass('w2ui-error');
                            }, 1);
                        })(err);
                    } else {
                        $(err.field.el).w2tag(err.error, {
                            "class": 'w2ui-error'
                        });
                    }
                    this.goto(errors[0].field.page);
                }
                // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            return errors;
        },

        getChanges: function() {
            var differ = function(record, original, result) {
                for (var i in record) {
                    if (typeof record[i] == "object") {
                        result[i] = differ(record[i], original[i] || {}, {});
                        if (!result[i] || $.isEmptyObject(result[i])) delete result[i];
                    } else if (record[i] != original[i]) {
                        result[i] = record[i];
                    }
                }
                return result;
            }
            return differ(this.record, this.original, {});
        },

        request: function(postData, callBack) { // if (1) param then it is call back if (2) then postData and callBack
            var obj = this;
            // check for multiple params
            if (typeof postData == 'function') {
                callBack = postData;
                postData = null;
            }
            if (typeof postData == 'undefined' || postData == null) postData = {};
            if (!this.url || (typeof this.url == 'object' && !this.url.get)) return;
            if (this.recid == null || typeof this.recid == 'undefined') this.recid = 0;
            // build parameters list
            var params = {};
            // add list params
            params['cmd'] = 'get-record';
            params['recid'] = this.recid;
            // append other params
            $.extend(params, this.postData);
            $.extend(params, postData);
            // event before
            var eventData = this.trigger({
                phase: 'before',
                type: 'request',
                target: this.name,
                url: this.url,
                postData: params
            });
            if (eventData.isCancelled === true) {
                if (typeof callBack == 'function') callBack({
                    status: 'error',
                    message: 'Request aborted.'
                });
                return;
            }
            // default action
            this.record = {};
            this.original = {};
            // call server to get data
            this.lock(this.msgRefresh);
            var url = eventData.url;
            if (typeof eventData.url == 'object' && eventData.url.get) url = eventData.url.get;
            if (this.last.xhr) try {
                this.last.xhr.abort();
            } catch (e) {};
            // process url with routeData
            if (!$.isEmptyObject(obj.routeData)) {
                var info = w2utils.parseRoute(url);
                if (info.keys.length > 0) {
                    for (var k = 0; k < info.keys.length; k++) {
                        if (obj.routeData[info.keys[k].name] == null) continue;
                        url = url.replace((new RegExp(':' + info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                    }
                }
            }
            var ajaxOptions = {
                type: 'POST',
                url: url,
                data: eventData.postData,
                dataType: 'text' // expected from server
            };
            if (w2utils.settings.dataType == 'HTTP') {
                ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
            }
            if (w2utils.settings.dataType == 'RESTFULL') {
                ajaxOptions.type = 'GET';
                ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
            }
            if (w2utils.settings.dataType == 'JSON') {
                ajaxOptions.type = 'POST';
                ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                ajaxOptions.contentType = 'application/json';
            }
            this.last.xhr = $.ajax(ajaxOptions)
                .done(function(data, status, xhr) {
                    obj.unlock();
                    // event before
                    var eventData = obj.trigger({
                        phase: 'before',
                        target: obj.name,
                        type: 'load',
                        xhr: xhr
                    });
                    if (eventData.isCancelled === true) {
                        if (typeof callBack == 'function') callBack({
                            status: 'error',
                            message: 'Request aborted.'
                        });
                        return;
                    }
                    // parse server response
                    var data;
                    var responseText = obj.last.xhr.responseText;
                    if (status != 'error') {
                        // default action
                        if (typeof responseText != 'undefined' && responseText != '') {
                            // check if the onLoad handler has not already parsed the data
                            if (typeof responseText == "object") {
                                data = responseText;
                            } else {
                                // $.parseJSON or $.getJSON did not work because those expect perfect JSON data - where everything is in double quotes
                                //
                                // TODO: avoid (potentially malicious) code injection from the response.
                                try {
                                    eval('data = ' + responseText);
                                } catch (e) {}
                            }
                            if (typeof data == 'undefined') {
                                data = {
                                    status: 'error',
                                    message: obj.msgNotJSON,
                                    responseText: responseText
                                }
                            }
                            if (data['status'] == 'error') {
                                obj.error(data['message']);
                            } else {
                                obj.record = $.extend({}, data.record);
                                obj.original = $.extend({}, data.record);
                            }
                        }
                    } else {
                        obj.error('AJAX Error ' + xhr.status + ': ' + xhr.statusText);
                        data = {
                            status: 'error',
                            message: obj.msgAJAXerror,
                            responseText: responseText
                        };
                    }
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                    obj.refresh();
                    // call back
                    if (typeof callBack == 'function') callBack(data);
                })
                .fail(function(xhr, status, error) {
                    // trigger event
                    var errorObj = {
                        status: status,
                        error: error,
                        rawResponseText: xhr.responseText
                    };
                    var eventData2 = obj.trigger({
                        phase: 'before',
                        type: 'error',
                        error: errorObj,
                        xhr: xhr
                    });
                    if (eventData2.isCancelled === true) return;
                    // default behavior
                    if (status != 'abort') {
                        var data;
                        try {
                            data = $.parseJSON(xhr.responseText)
                        } catch (e) {}
                        console.log('ERROR: Server communication failed.',
                            '\n   EXPECTED:', {
                                status: 'success',
                                items: [{
                                    id: 1,
                                    text: 'item'
                                }]
                            },
                            '\n         OR:', {
                                status: 'error',
                                message: 'error message'
                            },
                            '\n   RECEIVED:', typeof data == 'object' ? data : xhr.responseText);
                    }
                    // event after
                    obj.trigger($.extend(eventData2, {
                        phase: 'after'
                    }));
                });
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        submit: function(postData, callBack) {
            return this.save(postData, callBack);
        },

        save: function(postData, callBack) {
            var obj = this;
            $(this.box).find(':focus').change(); // trigger onchange
            // check for multiple params
            if (typeof postData == 'function') {
                callBack = postData;
                postData = null;
            }
            // validation
            var errors = obj.validate(true);
            if (errors.length !== 0) return;
            // submit save
            if (typeof postData == 'undefined' || postData == null) postData = {};
            if (!obj.url || (typeof obj.url == 'object' && !obj.url.save)) {
                console.log("ERROR: Form cannot be saved because no url is defined.");
                return;
            }
            obj.lock(obj.msgSaving + ' <span id="' + obj.name + '_progress"></span>');
            // need timer to allow to lock
            setTimeout(function() {
                // build parameters list
                var params = {};
                // add list params
                params['cmd'] = 'save-record';
                params['recid'] = obj.recid;
                // append other params
                $.extend(params, obj.postData);
                $.extend(params, postData);
                params.record = $.extend(true, {}, obj.record);
                // event before
                var eventData = obj.trigger({
                    phase: 'before',
                    type: 'submit',
                    target: obj.name,
                    url: obj.url,
                    postData: params
                });
                if (eventData.isCancelled === true) return;
                // default action
                var url = eventData.url;
                if (typeof eventData.url == 'object' && eventData.url.save) url = eventData.url.save;
                if (obj.last.xhr) try {
                    obj.last.xhr.abort();
                } catch (e) {};
                // process url with routeData
                if (!$.isEmptyObject(obj.routeData)) {
                    var info = w2utils.parseRoute(url);
                    if (info.keys.length > 0) {
                        for (var k = 0; k < info.keys.length; k++) {
                            if (obj.routeData[info.keys[k].name] == null) continue;
                            url = url.replace((new RegExp(':' + info.keys[k].name, 'g')), obj.routeData[info.keys[k].name]);
                        }
                    }
                }
                var ajaxOptions = {
                    type: 'POST',
                    url: url,
                    data: eventData.postData,
                    dataType: 'text', // expected from server
                    xhr: function() {
                        var xhr = new window.XMLHttpRequest();
                        // upload
                        xhr.upload.addEventListener("progress", function(evt) {
                            if (evt.lengthComputable) {
                                var percent = Math.round(evt.loaded / evt.total * 100);
                                $('#' + obj.name + '_progress').text('' + percent + '%');
                            }
                        }, false);
                        return xhr;
                    }
                };
                if (w2utils.settings.dataType == 'HTTP') {
                    ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
                }
                if (w2utils.settings.dataType == 'RESTFULL') {
                    if (obj.recid != 0) ajaxOptions.type = 'PUT';
                    ajaxOptions.data = String($.param(ajaxOptions.data, false)).replace(/%5B/g, '[').replace(/%5D/g, ']');
                }
                if (w2utils.settings.dataType == 'JSON') {
                    ajaxOptions.type = 'POST';
                    ajaxOptions.data = JSON.stringify(ajaxOptions.data);
                    ajaxOptions.contentType = 'application/json';
                }

                obj.last.xhr = $.ajax(ajaxOptions)
                    .done(function(data, status, xhr) {
                        obj.unlock();
                        // event before
                        var eventData = obj.trigger({
                            phase: 'before',
                            target: obj.name,
                            type: 'save',
                            xhr: xhr,
                            status: status
                        });
                        if (eventData.isCancelled === true) return;
                        // parse server response
                        var data;
                        var responseText = xhr.responseText;
                        if (status != 'error') {
                            // default action
                            if (typeof responseText != 'undefined' && responseText != '') {
                                // check if the onLoad handler has not already parsed the data
                                if (typeof responseText == "object") {
                                    data = responseText;
                                } else {
                                    // $.parseJSON or $.getJSON did not work because those expect perfect JSON data - where everything is in double quotes
                                    //
                                    // TODO: avoid (potentially malicious) code injection from the response.
                                    try {
                                        eval('data = ' + responseText);
                                    } catch (e) {}
                                }
                                if (typeof data == 'undefined') {
                                    data = {
                                        status: 'error',
                                        message: obj.msgNotJSON,
                                        responseText: responseText
                                    }
                                }
                                if (data['status'] == 'error') {
                                    obj.error(data['message']);
                                } else {
                                    obj.original = $.extend({}, obj.record);
                                }
                            }
                        } else {
                            obj.error('AJAX Error ' + xhr.status + ': ' + xhr.statusText);
                            data = {
                                status: 'error',
                                message: obj.msgAJAXerror,
                                responseText: responseText
                            };
                        }
                        // event after
                        obj.trigger($.extend(eventData, {
                            phase: 'after'
                        }));
                        obj.refresh();
                        // call back
                        if (data.status == 'success' && typeof callBack == 'function') callBack(data);
                    })
                    .fail(function(xhr, status, error) {
                        // trigger event
                        var errorObj = {
                            status: status,
                            error: error,
                            rawResponseText: xhr.responseText
                        };
                        var eventData2 = obj.trigger({
                            phase: 'before',
                            type: 'error',
                            error: errorObj,
                            xhr: xhr
                        });
                        if (eventData2.isCancelled === true) return;
                        // default behavior
                        console.log('ERROR: server communication failed. The server should return', {
                                status: 'success'
                            }, 'OR', {
                                status: 'error',
                                message: 'error message'
                            },
                            ', instead the AJAX request produced this: ', errorObj);
                        // event after
                        obj.trigger($.extend(eventData2, {
                            phase: 'after'
                        }));
                    });
                // event after
                obj.trigger($.extend(eventData, {
                    phase: 'after'
                }));
            }, 50);
        },

        lock: function(msg, showSpinner) {
            var box = $(this.box).find('> div:first-child');
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(box);
            w2utils.lock.apply(window, args);
        },

        unlock: function() {
            var obj = this;
            setTimeout(function() {
                w2utils.unlock(obj.box);
            }, 25); // needed timer so if server fast, it will not flash
        },

        goto: function(page) {
            if (typeof page != 'undefined') this.page = page;
            // if it was auto size, resize it
            if ($(this.box).data('auto-size') === true) $(this.box).height(0);
            this.refresh();
        },

        generateHTML: function() {
            var pages = []; // array for each page
            var group = '';
            var page;
            for (var f in this.fields) {
                var html = '';
                var field = this.fields[f];
                if (typeof field.html == 'undefined') field.html = {};
                field.html = $.extend(true, {
                    caption: '',
                    span: 6,
                    attr: '',
                    text: '',
                    page: 0
                }, field.html);
                if (typeof page == 'undefined') page = field.html.page;
                if (field.html.caption == '') field.html.caption = field.name;
                var input = '<input name="' + field.name + '" type="text" ' + field.html.attr + '/>';
                if ((field.type === 'pass') || (field.type === 'password')) {
                    input = '<input name="' + field.name + '" type = "password" ' + field.html.attr + '/>';
                }
                if (field.type == 'checkbox') input = '<input name="' + field.name + '" type="checkbox" ' + field.html.attr + '/>';
                if (field.type == 'textarea') input = '<textarea name="' + field.name + '" ' + field.html.attr + '></textarea>';
                if (field.type == 'toggle') input = '<input name="' + field.name + '" type="checkbox" ' + field.html.attr + ' class="w2ui-toggle"/><div><div></div></div>';
                if (field.html.group) {
                    if (group != '') html += '\n   </div>';
                    html += '\n   <div class="w2ui-group-title">' + field.html.group + '</div>\n   <div class="w2ui-group">';
                    group = field.html.group;
                }
                if (field.html.page != page && group != '') {
                    pages[pages.length - 1] += '\n   </div>';
                    group = '';
                }
                html += '\n      <div class="w2ui-field ' + (typeof field.html.span != 'undefined' ? 'w2ui-span' + field.html.span : '') + '">' +
                    '\n         <label>' + w2utils.lang(field.html.caption) + '</label>' +
                    '\n         <div>' + input + w2utils.lang(field.html.text) + '</div>' +
                    '\n      </div>';
                if (typeof pages[field.html.page] == 'undefined') pages[field.html.page] = '';
                pages[field.html.page] += html;
                page = field.html.page;
            }
            if (group != '') pages[pages.length - 1] += '\n   </div>';
            if (this.tabs.tabs) {
                for (var i = 0; i < this.tabs.tabs.length; i++)
                    if (typeof pages[i] == 'undefined') pages[i] = '';
            }
            for (var p in pages) pages[p] = '<div class="w2ui-page page-' + p + '">' + pages[p] + '\n</div>';
            // buttons if any
            var buttons = '';
            if (!$.isEmptyObject(this.actions)) {
                var addClass = '';
                buttons += '\n<div class="w2ui-buttons">';
                for (var a in this.actions) {
                    if (['save', 'update', 'create'].indexOf(a.toLowerCase()) != -1) addClass = 'btn-green';
                    else addClass = '';
                    buttons += '\n    <button name="' + a + '" class="btn ' + addClass + '">' + w2utils.lang(a) + '</button>';
                }
                buttons += '\n</div>';
            }
            return pages.join('') + buttons;
        },

        action: function(action, event) {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: action,
                type: 'action',
                originalEvent: event
            });
            if (eventData.isCancelled === true) return;
            // default actions
            if (typeof(this.actions[action]) == 'function') {
                this.actions[action].call(this, event);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
        },

        resize: function() {
            var obj = this;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'resize'
            });
            if (eventData.isCancelled === true) return;
            // default behaviour
            var main = $(this.box).find('> div');
            var header = $(this.box).find('> div .w2ui-form-header');
            var toolbar = $(this.box).find('> div .w2ui-form-toolbar');
            var tabs = $(this.box).find('> div .w2ui-form-tabs');
            var page = $(this.box).find('> div .w2ui-page');
            var cpage = $(this.box).find('> div .w2ui-page.page-' + this.page);
            var dpage = $(this.box).find('> div .w2ui-page.page-' + this.page + ' > div');
            var buttons = $(this.box).find('> div .w2ui-buttons');
            // if no height, calculate it
            resizeElements();
            if (parseInt($(this.box).height()) == 0 || $(this.box).data('auto-size') === true) {
                $(this.box).height(
                    (header.length > 0 ? w2utils.getSize(header, 'height') : 0) +
                    ((typeof this.tabs === 'object' && $.isArray(this.tabs.tabs) && this.tabs.tabs.length > 0) ? w2utils.getSize(tabs, 'height') : 0) +
                    ((typeof this.toolbar == 'object' && $.isArray(this.toolbar.items) && this.toolbar.items.length > 0) ? w2utils.getSize(toolbar, 'height') : 0) +
                    (page.length > 0 ? w2utils.getSize(dpage, 'height') + w2utils.getSize(cpage, '+height') + 12 : 0) + // why 12 ???
                    (buttons.length > 0 ? w2utils.getSize(buttons, 'height') : 0)
                );
                $(this.box).data('auto-size', true);
            }
            resizeElements();
            // event after
            obj.trigger($.extend(eventData, {
                phase: 'after'
            }));

            function resizeElements() {
                // resize elements
                main.width($(obj.box).width()).height($(obj.box).height());
                toolbar.css('top', (obj.header != '' ? w2utils.getSize(header, 'height') : 0));
                tabs.css('top', (obj.header != '' ? w2utils.getSize(header, 'height') : 0) + ((typeof obj.toolbar == 'object' && $.isArray(obj.toolbar.items) && obj.toolbar.items.length > 0) ? w2utils.getSize(toolbar, 'height') : 0));
                page.css('top', (obj.header != '' ? w2utils.getSize(header, 'height') : 0) + ((typeof obj.toolbar == 'object' && $.isArray(obj.toolbar.items) && obj.toolbar.items.length > 0) ? w2utils.getSize(toolbar, 'height') + 5 : 0) + ((typeof obj.tabs === 'object' && $.isArray(obj.tabs.tabs) && obj.tabs.tabs.length > 0) ? w2utils.getSize(tabs, 'height') + 5 : 0));
                page.css('bottom', (buttons.length > 0 ? w2utils.getSize(buttons, 'height') : 0));
            }
        },

        refresh: function() {
            var time = (new Date()).getTime();
            var obj = this;
            if (!this.box) return;
            if (!this.isGenerated || typeof $(this.box).html() == 'undefined') return;
            // update what page field belongs
            $(this.box).find('input, textarea, select').each(function(index, el) {
                var name = (typeof $(el).attr('name') != 'undefined' ? $(el).attr('name') : $(el).attr('id'));
                var field = obj.get(name);
                if (field) {
                    // find page
                    var div = $(el).parents('.w2ui-page');
                    if (div.length > 0) {
                        for (var i = 0; i < 100; i++) {
                            if (div.hasClass('page-' + i)) {
                                field.page = i;
                                break;
                            }
                        }
                    }
                }
            });
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'refresh',
                page: this.page
            })
            if (eventData.isCancelled === true) return;
            // default action
            $(this.box).find('.w2ui-page').hide();
            $(this.box).find('.w2ui-page.page-' + this.page).show();
            $(this.box).find('.w2ui-form-header').html(this.header);
            // refresh tabs if needed
            if (typeof this.tabs === 'object' && $.isArray(this.tabs.tabs) && this.tabs.tabs.length > 0) {
                $('#form_' + this.name + '_tabs').show();
                this.tabs.active = this.tabs.tabs[this.page].id;
                this.tabs.refresh();
            } else {
                $('#form_' + this.name + '_tabs').hide();
            }
            // refresh tabs if needed
            if (typeof this.toolbar == 'object' && $.isArray(this.toolbar.items) && this.toolbar.items.length > 0) {
                $('#form_' + this.name + '_toolbar').show();
                this.toolbar.refresh();
            } else {
                $('#form_' + this.name + '_toolbar').hide();
            }
            // refresh values of all fields
            for (var f in this.fields) {
                var field = this.fields[f];
                if (typeof field.name == 'undefined' && typeof field.field != 'undefined') field.name = field.field;
                if (typeof field.field == 'undefined' && typeof field.name != 'undefined') field.field = field.name;
                field.$el = $(this.box).find('[name="' + String(field.name).replace(/\\/g, '\\\\') + '"]');
                field.el = field.$el[0];
                if (typeof field.el == 'undefined') {
                    console.log('ERROR: Cannot associate field "' + field.name + '" with html control. Make sure html control exists with the same name.');
                    //return;
                }
                if (field.el) field.el.id = field.name;
                var tmp = $(field).data('w2field');
                if (tmp) tmp.clear();
                $(field.$el).off('change').on('change', function() {
                    var value_new = this.value;
                    var value_previous = obj.record[this.name] ? obj.record[this.name] : '';
                    var field = obj.get(this.name);
                    if (['list', 'enum', 'file'].indexOf(field.type) != -1 && $(this).data('selected')) {
                        var nv = $(this).data('selected');
                        var cv = obj.record[this.name];
                        if ($.isArray(nv)) {
                            value_new = [];
                            for (var i in nv) value_new[i] = $.extend(true, {}, nv[i]); // clone array
                        }
                        if ($.isPlainObject(nv)) {
                            value_new = $.extend(true, {}, nv); // clone object
                        }
                        if ($.isArray(cv)) {
                            value_previous = [];
                            for (var i in cv) value_previous[i] = $.extend(true, {}, cv[i]); // clone array
                        }
                        if ($.isPlainObject(cv)) {
                            value_previous = $.extend(true, {}, cv); // clone object
                        }
                    }
                    if (field.type == 'toggle') value_new = ($(this).prop('checked') ? 1 : 0);
                    // clean extra chars
                    if (['int', 'float', 'percent', 'money', 'currency'].indexOf(field.type) != -1) {
                        value_new = $(this).data('w2field').clean(value_new);
                    }
                    if (value_new === value_previous) return;
                    // event before
                    var eventData = obj.trigger({
                        phase: 'before',
                        target: this.name,
                        type: 'change',
                        value_new: value_new,
                        value_previous: value_previous
                    });
                    if (eventData.isCancelled === true) {
                        $(this).val(obj.record[this.name]); // return previous value
                        return;
                    }
                    // default action
                    var val = this.value;
                    if (this.type == 'select') val = this.value;
                    if (this.type == 'checkbox') val = this.checked ? true : false;
                    if (this.type == 'radio') {
                        field.$el.each(function(index, el) {
                            if (el.checked) val = el.value;
                        });
                    }
                    if (['int', 'float', 'percent', 'money', 'currency', 'list', 'combo', 'enum', 'file', 'toggle'].indexOf(field.type) != -1) {
                        val = value_new;
                    }
                    if (['enum', 'file'].indexOf(field.type) != -1) {
                        if (val.length > 0) {
                            var fld = $(field.el).data('w2field').helpers.multi;
                            $(fld).removeClass('w2ui-error');
                        }
                    }
                    obj.record[this.name] = val;
                    // event after
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                });
                if (field.required) {
                    $(field.el).parent().parent().addClass('w2ui-required');
                } else {
                    $(field.el).parent().parent().removeClass('w2ui-required');
                }
            }
            // attach actions on buttons
            $(this.box).find('button, input[type=button]').each(function(index, el) {
                $(el).off('click').on('click', function(event) {
                    var action = this.value;
                    if (this.id) action = this.id;
                    if (this.name) action = this.name;
                    obj.action(action, event);
                });
            });
            // init controls with record
            for (var f in this.fields) {
                var field = this.fields[f];
                var value = (typeof this.record[field.name] != 'undefined' ? this.record[field.name] : '');
                if (!field.el) continue;
                field.type = String(field.type).toLowerCase();
                if (!field.options) field.options = {};
                switch (field.type) {
                    case 'text':
                    case 'textarea':
                    case 'email':
                    case 'pass':
                    case 'password':
                        field.el.value = value;
                        break;
                    case 'int':
                    case 'float':
                    case 'money':
                    case 'currency':
                    case 'percent':
                    case 'hex':
                    case 'alphanumeric':
                    case 'color':
                    case 'date':
                    case 'time':
                        field.el.value = value;
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type
                        }));
                        break;
                    case 'toggle':
                        if (w2utils.isFloat(value)) value = parseFloat(value);
                        $(field.el).prop('checked', (value ? true : false));
                        this.record[field.name] = (value ? 1 : 0);
                        break;
                        // enums
                    case 'list':
                    case 'combo':
                        if (field.type == 'list') {
                            var tmp_value = ($.isPlainObject(value) ? value.id : value);
                            // normalized options
                            var items = field.options.items;
                            if ($.isArray(items) && items.length > 0 && !$.isPlainObject(items[0])) {
                                field.options.items = w2obj.field.prototype.normMenu(items);
                            }
                            // find value from items 
                            for (var i in field.options.items) {
                                var item = field.options.items[i];
                                if (item.id == tmp_value) {
                                    value = $.extend(true, {}, item);
                                    obj.record[field.name] = value;
                                    break;
                                }
                            }
                        } else if (field.type == 'combo' && !$.isPlainObject(value)) {
                            field.el.value = value;
                        } else if ($.isPlainObject(value) && typeof value.text != 'undefined') {
                            field.el.value = value.text;
                        } else {
                            field.el.value = '';
                        }
                        if (!$.isPlainObject(value)) value = {};
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type,
                            selected: value
                        }));
                        break;
                    case 'enum':
                    case 'file':
                        if (!$.isArray(value)) value = [];
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type,
                            selected: value
                        }));
                        break;

                        // standard HTML
                    case 'select':
                        // generate options
                        var items = field.options.items;
                        if (typeof items != 'undefined' && items.length > 0) {
                            items = w2obj.field.prototype.normMenu(items);
                            $(field.el).html('');
                            for (var it in items) {
                                $(field.el).append('<option value="' + items[it].id + '">' + items[it].text + '</option');
                            }
                        }
                        $(field.el).val(value);
                        break;
                    case 'radio':
                        $(field.$el).prop('checked', false).each(function(index, el) {
                            if ($(el).val() == value) $(el).prop('checked', true);
                        });
                        break;
                    case 'checkbox':
                        $(field.el).prop('checked', value ? true : false);
                        break;
                    default:
                        $(field.el).w2field($.extend({}, field.options, {
                            type: field.type
                        }));
                        break;
                }
            }
            // wrap pages in div
            var tmp = $(this.box).find('.w2ui-page');
            for (var i = 0; i < tmp.length; i++) {
                if ($(tmp[i]).find('> *').length > 1) $(tmp[i]).wrapInner('<div></div>');
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            this.resize();
            return (new Date()).getTime() - time;
        },

        render: function(box) {
            var time = (new Date()).getTime();
            var obj = this;
            if (typeof box == 'object') {
                // remove from previous box
                if ($(this.box).find('#form_' + this.name + '_tabs').length > 0) {
                    $(this.box).removeAttr('name')
                        .removeClass('w2ui-reset w2ui-form')
                        .html('');
                }
                this.box = box;
            }
            if (!this.isGenerated) return;
            if (!this.box) return;
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'render',
                box: (typeof box != 'undefined' ? box : this.box)
            });
            if (eventData.isCancelled === true) return;
            // default actions
            if ($.isEmptyObject(this.original) && !$.isEmptyObject(this.record)) {
                this.original = $.extend(true, {}, this.record);
            }
            var html = '<div>' +
                (this.header != '' ? '<div class="w2ui-form-header">' + this.header + '</div>' : '') +
                '    <div id="form_' + this.name + '_toolbar" class="w2ui-form-toolbar"></div>' +
                '    <div id="form_' + this.name + '_tabs" class="w2ui-form-tabs"></div>' +
                this.formHTML +
                '</div>';
            $(this.box).attr('name', this.name)
                .addClass('w2ui-reset w2ui-form')
                .html(html);
            if ($(this.box).length > 0) $(this.box)[0].style.cssText += this.style;

            // init toolbar regardless it is defined or not
            if (typeof this.toolbar.render !== 'function') {
                this.toolbar = $().w2toolbar($.extend({}, this.toolbar, {
                    name: this.name + '_toolbar',
                    owner: this
                }));
                this.toolbar.on('click', function(event) {
                    var eventData = obj.trigger({
                        phase: 'before',
                        type: 'toolbar',
                        target: event.target,
                        originalEvent: event
                    });
                    if (eventData.isCancelled === true) return;
                    // no default action
                    obj.trigger($.extend(eventData, {
                        phase: 'after'
                    }));
                });
            }
            if (typeof this.toolbar == 'object' && typeof this.toolbar.render == 'function') {
                this.toolbar.render($('#form_' + this.name + '_toolbar')[0]);
            }
            // init tabs regardless it is defined or not
            if (typeof this.tabs.render !== 'function') {
                this.tabs = $().w2tabs($.extend({}, this.tabs, {
                    name: this.name + '_tabs',
                    owner: this
                }));
                this.tabs.on('click', function(event) {
                    obj.goto(this.get(event.target, true));
                });
            }
            if (typeof this.tabs == 'object' && typeof this.tabs.render == 'function') {
                this.tabs.render($('#form_' + this.name + '_tabs')[0]);
            }
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            // after render actions
            this.resize();
            var url = (typeof this.url != 'object' ? this.url : this.url.get);
            if (url && this.recid != 0) {
                this.request();
            } else {
                this.refresh();
            }
            // attach to resize event
            if ($('.w2ui-layout').length == 0) { // if there is layout, it will send a resize event
                this.tmp_resize = function(event) {
                    w2ui[obj.name].resize();
                }
                $(window).off('resize', 'body').on('resize', 'body', this.tmp_resize);
            }
            setTimeout(function() {
                obj.resize();
                obj.refresh();
            }, 150); // need timer because resize is on timer
            // focus on load
            function focusEl() {
                var inputs = $(obj.box).find('input, select, textarea');
                if (inputs.length > obj.focus) inputs[obj.focus].focus();
            }
            if (this.focus >= 0) setTimeout(focusEl, 500); // need timeout to allow form to render
            return (new Date()).getTime() - time;
        },

        destroy: function() {
            // event before
            var eventData = this.trigger({
                phase: 'before',
                target: this.name,
                type: 'destroy'
            });
            if (eventData.isCancelled === true) return;
            // clean up
            if (typeof this.toolbar == 'object' && this.toolbar.destroy) this.toolbar.destroy();
            if (typeof this.tabs == 'object' && this.tabs.destroy) this.tabs.destroy();
            if ($(this.box).find('#form_' + this.name + '_tabs').length > 0) {
                $(this.box)
                    .removeAttr('name')
                    .removeClass('w2ui-reset w2ui-form')
                    .html('');
            }
            delete w2ui[this.name];
            $(this.box).remove();
            // event after
            this.trigger($.extend(eventData, {
                phase: 'after'
            }));
            $(window).off('resize', 'body')
        }
    };

    $.extend(w2form.prototype, w2utils.event);
    w2obj.form = w2form;
})();
// if (module) {
//     module.exports = {
//         w2ui: w2ui,
//         w2utils: w2utils,
//         w2obj: w2obj,
//         w2popup: w2popup,
//         w2panel: w2panel,
//         w2alert: w2alert,
//         w2confirm: w2confirm,
//         w2prompt: w2prompt
//     }
// }

/* NicEdit - Micro Inline WYSIWYG
 * Copyright 2007-2008 Brian Kirchoff
 *
 * NicEdit is distributed under the terms of the MIT license
 * For more information visit http://nicedit.com/
 * Do not remove this copyright message
 */
var bkExtend = function() {
    var args = arguments;
    if (args.length == 1) args = [this, args[0]];
    for (var prop in args[1]) args[0][prop] = args[1][prop];
    return args[0];
};

function bkClass() {}
bkClass.prototype.construct = function() {};
bkClass.extend = function(def) {
    var classDef = function() {
        if (arguments[0] !== bkClass) {
            return this.construct.apply(this, arguments);
        }
    };
    var proto = new this(bkClass);
    bkExtend(proto, def);
    classDef.prototype = proto;
    classDef.extend = this.extend;
    return classDef;
};

var bkElement = bkClass.extend({
    construct: function(elm, d) {
        if (typeof(elm) == "string") {
            elm = (d || document).createElement(elm);
        }
        elm = $BK(elm);
        return elm;
    },

    appendTo: function(elm) {
        elm.appendChild(this);
        return this;
    },

    appendBefore: function(elm) {
        elm.parentNode.insertBefore(this, elm);
        return this;
    },

    addEvent: function(type, fn) {
        bkLib.addEvent(this, type, fn);
        return this;
    },

    setContent: function(c) {
        this.innerHTML = c;
        return this;
    },

    pos: function() {
        var curleft = curtop = 0;
        var o = obj = this;
        if (obj.offsetParent) {
            do {
                curleft += obj.offsetLeft;
                curtop += obj.offsetTop;
            } while (obj = obj.offsetParent);
        }
        var b = (!window.opera) ? parseInt(this.getStyle('border-width') || this.style.border) || 0 : 0;
        return [curleft + b, curtop + b + this.offsetHeight];
    },

    noSelect: function() {
        bkLib.noSelect(this);
        return this;
    },

    parentTag: function(t) {
        var elm = this;
        do {
            if (elm && elm.nodeName && elm.nodeName.toUpperCase() == t) {
                return elm;
            }
            elm = elm.parentNode;
        } while (elm);
        return false;
    },

    hasClass: function(cls) {
        return this.className.match(new RegExp('(\\s|^)nicEdit-' + cls + '(\\s|$)'));
    },

    addClass: function(cls) {
        if (!this.hasClass(cls)) {
            this.className += " nicEdit-" + cls
        };
        return this;
    },

    removeClass: function(cls) {
        if (this.hasClass(cls)) {
            this.className = this.className.replace(new RegExp('(\\s|^)nicEdit-' + cls + '(\\s|$)'), ' ');
        }
        return this;
    },
    inserthtml: function(markup) {
        this.innerHTML = markup;
        return this;
    },
    setStyle: function(st) {
        var elmStyle = this.style;
        for (var itm in st) {
            switch (itm) {
                case 'float':
                    elmStyle['cssFloat'] = elmStyle['styleFloat'] = st[itm];
                    break;
                case 'opacity':
                    elmStyle.opacity = st[itm];
                    elmStyle.filter = "alpha(opacity=" + Math.round(st[itm] * 100) + ")";
                    break;
                case 'className':
                    this.className = st[itm];
                    break;
                default:
                    //if(document.compatMode || itm != "cursor") { // Nasty Workaround for IE 5.5
                    elmStyle[itm] = st[itm];
                    //}     
            }
        }
        return this;
    },

    getStyle: function(cssRule, d) {
        var doc = (!d) ? document.defaultView : d;
        if (this.nodeType == 1)
            return (doc && doc.getComputedStyle) ? doc.getComputedStyle(this, null).getPropertyValue(cssRule) : this.currentStyle[bkLib.camelize(cssRule)];
    },

    remove: function() {
        this.parentNode.removeChild(this);
        return this;
    },

    setAttributes: function(at) {
        for (var itm in at) {
            this[itm] = at[itm];
        }
        return this;
    }
});

var bkLib = {
    isMSIE: (navigator.appVersion.indexOf("MSIE") != -1),

    addEvent: function(obj, type, fn) {
        (obj.addEventListener) ? obj.addEventListener(type, fn, false): obj.attachEvent("on" + type, fn);
    },

    toArray: function(iterable) {
        var length = iterable.length,
            results = new Array(length);
        while (length--) {
            results[length] = iterable[length]
        };
        return results;
    },

    noSelect: function(element) {
        if (element.setAttribute && element.nodeName.toLowerCase() != 'input' && element.nodeName.toLowerCase() != 'textarea') {
            element.setAttribute('unselectable', 'on');
        }
        for (var i = 0; i < element.childNodes.length; i++) {
            bkLib.noSelect(element.childNodes[i]);
        }
    },
    camelize: function(s) {
        return s.replace(/\-(.)/g, function(m, l) {
            return l.toUpperCase()
        });
    },
    inArray: function(arr, item) {
        return (bkLib.search(arr, item) != null);
    },
    search: function(arr, itm) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == itm)
                return i;
        }
        return null;
    },
    cancelEvent: function(e) {
        e = e || window.event;
        if (e.preventDefault && e.stopPropagation) {
            e.preventDefault();
            e.stopPropagation();
        }
        return false;
    },
    domLoad: [],
    domLoaded: function() {
        if (arguments.callee.done) return;
        arguments.callee.done = true;
        for (i = 0; i < bkLib.domLoad.length; i++) bkLib.domLoad[i]();
    },
    onDomLoaded: function(fireThis) {
        this.domLoad.push(fireThis);
        if (document.addEventListener) {
            document.addEventListener("DOMContentLoaded", bkLib.domLoaded, null);
        } else if (bkLib.isMSIE) {
            document.write("<style>.nicEdit-main p { margin: 0; }</style><scr" + "ipt id=__ie_onload defer " + ((location.protocol == "https:") ? "src='javascript:void(0)'" : "src=//0") + "><\/scr" + "ipt>");
            $BK("__ie_onload").onreadystatechange = function() {
                if (this.readyState == "complete") {
                    bkLib.domLoaded();
                }
            };
        }
        window.onload = bkLib.domLoaded;
    }
};

function $BK(elm) {
    if (typeof(elm) == "string") {
        elm = document.getElementById(elm);
    }
    return (elm && !elm.appendTo) ? bkExtend(elm, bkElement.prototype) : elm;
}

var bkEvent = {
    addEvent: function(evType, evFunc) {
        if (evFunc) {
            this.eventList = this.eventList || {};
            this.eventList[evType] = this.eventList[evType] || [];
            this.eventList[evType].push(evFunc);
        }
        return this;
    },
    fireEvent: function() {
        var args = bkLib.toArray(arguments),
            evType = args.shift();
        if (this.eventList && this.eventList[evType]) {
            for (var i = 0; i < this.eventList[evType].length; i++) {
                this.eventList[evType][i].apply(this, args);
            }
        }
    }
};

function __(s) {
    return s;
}

Function.prototype.closure = function() {
    var __method = this,
        args = bkLib.toArray(arguments),
        obj = args.shift();
    return function() {
        if (typeof(bkLib) != 'undefined') {
            return __method.apply(obj, args.concat(bkLib.toArray(arguments)));
        }
    };
}

Function.prototype.closureListener = function() {
    var __method = this,
        args = bkLib.toArray(arguments),
        object = args.shift();
    return function(e) {
        e = e || window.event;
        if (e.target) {
            var target = e.target;
        } else {
            var target = e.srcElement
        };
        return __method.apply(object, [e, target].concat(args));
    };
}


/* START CONFIG */

var nicEditorConfig = bkClass.extend({
    buttons: {
        'bold': {
            name: __('Click to Bold'),
            command: 'Bold',
            tags: ['B', 'STRONG'],
            css: {
                'font-weight': 'bold'
            },
            key: 'b'
        },
        'italic': {
            name: __('Click to Italic'),
            command: 'Italic',
            tags: ['EM', 'I'],
            css: {
                'font-style': 'italic'
            },
            key: 'i'
        },
        'underline': {
            name: __('Click to Underline'),
            command: 'Underline',
            tags: ['U'],
            css: {
                'text-decoration': 'underline'
            },
            key: 'u'
        },
        'left': {
            name: __('Left Align'),
            command: 'justifyleft',
            noActive: true
        },
        'center': {
            name: __('Center Align'),
            command: 'justifycenter',
            noActive: true
        },
        'right': {
            name: __('Right Align'),
            command: 'justifyright',
            noActive: true
        },
        'justify': {
            name: __('Justify Align'),
            command: 'justifyfull',
            noActive: true
        },
        'ol': {
            name: __('Insert Ordered List'),
            command: 'insertorderedlist',
            tags: ['OL']
        },
        'ul': {
            name: __('Insert Unordered List'),
            command: 'insertunorderedlist',
            tags: ['UL']
        },
        'subscript': {
            name: __('Click to Subscript'),
            command: 'subscript',
            tags: ['SUB']
        },
        'superscript': {
            name: __('Click to Superscript'),
            command: 'superscript',
            tags: ['SUP']
        },
        'strikethrough': {
            name: __('Click to Strike Through'),
            command: 'strikeThrough',
            css: {
                'text-decoration': 'line-through'
            }
        },
        'removeformat': {
            name: __('Remove Formatting'),
            command: 'removeformat',
            noActive: true
        },
        'indent': {
            name: __('Indent Text'),
            command: 'indent',
            noActive: true
        },
        'outdent': {
            name: __('Remove Indent'),
            command: 'outdent',
            noActive: true
        },
        'hr': {
            name: __('Horizontal Rule'),
            command: 'insertHorizontalRule',
            noActive: true
        }
    },
    iconsPath: '../nicEditorIcons.gif',
    buttonList: ['save', 'bold', 'italic', 'underline', 'left', 'center', 'right', 'justify', 'ol', 'ul', 'fontSize', 'fontFamily', 'fontFormat', 'indent', 'outdent', 'image', 'upload', 'link', 'unlink', 'forecolor', 'bgcolor'],
    iconList: {
        "bgcolor": "w2ui-icon-adn",
        "forecolor": "w2ui-icon-font",
        "bold": "w2ui-icon-bold",
        "center": "w2ui-icon-align-center",
        "hr": 5,
        "indent": "w2ui-icon-indent",
        "italic": "w2ui-icon-italic",
        "justify": "w2ui-icon-align-justify",
        "left": "w2ui-icon-align-left",
        "ol": "w2ui-icon-list-ol",
        "outdent": "w2ui-icon-outdent",
        "removeformat": "w2ui-icon-ban",
        "right": "w2ui-icon-align-right",
        "save": "w2ui-icon-save",
        "strikethrough": 15,
        "subscript": "w2ui-icon-subscript",
        "superscript": "w2ui-icon-superscript",
        "ul": "w2ui-icon-list-ul",
        "underline": "w2ui-icon-underline",
        "image": "w2ui-icon-file-image-o",
        "link": "w2ui-icon-link",
        "unlink": 22,
        "close": "w2ui-icon-cross",
        "arrow": "w2ui-icon-caret-down"
    }

});
/* END CONFIG */


var nicEditors = {
    nicPlugins: [],
    editors: [],

    registerPlugin: function(plugin, options) {
        this.nicPlugins.push({
            p: plugin,
            o: options
        });
    },

    // allTextAreas : function(nicOptions) {
    //  var textareas = document.getElementsByTagName("textarea");
    //  for(var i=0;i<textareas.length;i++) {
    //      nicEditors.editors.push(new nicEditor(nicOptions).panelInstance(textareas[i]));
    //  }
    //  return nicEditors.editors;
    // },

    findEditor: function(e) {
        var editors = nicEditors.editors;
        for (var i = 0; i < editors.length; i++) {
            if (editors[i].instanceById(e)) {
                return editors[i].instanceById(e);
            }
        }
    }
};


var nicEditor = bkClass.extend({
    construct: function(o) {
        this.options = new nicEditorConfig();
        bkExtend(this.options, o);
        this.nicInstances = new Array();
        this.loadedPlugins = new Array();

        var plugins = nicEditors.nicPlugins;
        for (var i = 0; i < plugins.length; i++) {
            this.loadedPlugins.push(new plugins[i].p(this, plugins[i].o));
        }
        nicEditors.editors.push(this);
        bkLib.addEvent(document.body, 'mousedown', this.selectCheck.closureListener(this));
    },

    panelInstance: function(e, o) {
        e = this.checkReplace($BK(e));
        if (e) {
            var panelElm = new bkElement('DIV').setStyle({
                width: (parseInt(e.getStyle('width')) || e.clientWidth) + 'px'
            }).appendBefore(e);
            this.setPanel(panelElm);
            return this.addInstance(e, o);
        }
    },

    checkReplace: function(e) {
        var r = nicEditors.findEditor(e);
        if (r) {
            r.removeInstance(e);
            r.removePanel();
        }
        return e;
    },

    addInstance: function(e, o) {
        e = this.checkReplace($BK(e));
        if (e.contentEditable || !!window.opera) {
            var newInstance = new nicEditorInstance(e, o, this);
        } else {
            var newInstance = new nicEditorIFrameInstance(e, o, this);
        }
        this.nicInstances.push(newInstance);
        return this;
    },

    removeInstance: function(e) {
        e = $BK(e);
        var instances = this.nicInstances;
        for (var i = 0; i < instances.length; i++) {
            if (instances[i].e == e) {
                instances[i].remove();
                this.nicInstances.splice(i, 1);
            }
        }
    },

    removePanel: function(e) {
        if (this.nicPanel) {
            this.nicPanel.remove();
            this.nicPanel = null;
        }
    },

    instanceById: function(e) {
        e = $BK(e);
        var instances = this.nicInstances;
        for (var i = 0; i < instances.length; i++) {
            if (instances[i].e == e) {
                return instances[i];
            }
        }
    },

    setPanel: function(e) {
        this.nicPanel = new nicEditorPanel($BK(e), this.options, this);
        this.fireEvent('panel', this.nicPanel);
        return this;
    },

    nicCommand: function(cmd, args) {
        if (this.selectedInstance) {
            this.selectedInstance.nicCommand(cmd, args);
        }
    },

    getIcon: function(iconName, options) {
        var icon = this.options.iconList[iconName];
        //var file = (options.iconFiles) ? options.iconFiles[iconName] : '';
        // return {
        //     backgroundImage: "url('" + ((icon) ? this.options.iconsPath : file) + "')",
        //     backgroundPosition: ((icon) ? ((icon - 1) * -18) : 0) + 'px 0px'
        // };
        return '<i class="' + icon + '"></i>';
    },

    selectCheck: function(e, t) {
        var found = false;
        do {
            if (t.className && t.className.indexOf('nicEdit') != -1) {
                return false;
            }
        } while (t = t.parentNode);
        this.fireEvent('blur', this.selectedInstance, t);
        this.lastSelectedInstance = this.selectedInstance;
        this.selectedInstance = null;
        return false;
    }

});
nicEditor = nicEditor.extend(bkEvent);


var nicEditorInstance = bkClass.extend({
    isSelected: false,

    construct: function(e, options, nicEditor) {
        this.ne = nicEditor;
        this.elm = this.e = e;
        this.options = options || {};

        newX = parseInt(e.getStyle('width')) || e.clientWidth;
        newY = parseInt(e.getStyle('height')) || e.clientHeight;
        this.initialHeight = newY - 8;

        var isTextarea = (e.nodeName.toLowerCase() == "textarea");
        if (isTextarea || this.options.hasPanel) {
            var ie7s = (bkLib.isMSIE && !((typeof document.body.style.maxHeight != "undefined") && document.compatMode == "CSS1Compat"))
            var s = {
                width: newX + 'px',
                border: '1px solid #ccc',
                borderTop: 0,
                overflowY: 'auto',
                overflowX: 'hidden'
            };
            s[(ie7s) ? 'height' : 'maxHeight'] = (this.ne.options.maxHeight) ? this.ne.options.maxHeight + 'px' : null;
            this.editorContain = new bkElement('DIV').setStyle(s).appendBefore(e);
            var editorElm = new bkElement('DIV').setStyle({
                width: (newX - 8) + 'px',
                margin: '4px',
                minHeight: newY + 'px'
            }).addClass('main').appendTo(this.editorContain);

            e.setStyle({
                display: 'none'
            });

            editorElm.innerHTML = e.innerHTML;
            if (isTextarea) {
                editorElm.setContent(e.value);
                this.copyElm = e;
                var f = e.parentTag('FORM');
                if (f) {
                    bkLib.addEvent(f, 'submit', this.saveContent.closure(this));
                }
            }
            editorElm.setStyle((ie7s) ? {
                height: newY + 'px'
            } : {
                overflow: 'hidden'
            });
            this.elm = editorElm;
        }
        this.ne.addEvent('blur', this.blur.closure(this));

        this.init();
        this.blur();
    },

    init: function() {
        this.elm.setAttribute('contentEditable', 'true');
        if (this.getContent() == "") {
            this.setContent('<br />');
        }
        this.instanceDoc = document.defaultView;
        this.elm.addEvent('mousedown', this.selected.closureListener(this)).addEvent('keypress', this.keyDown.closureListener(this)).addEvent('focus', this.selected.closure(this)).addEvent('blur', this.blur.closure(this)).addEvent('keyup', this.selected.closure(this));
        this.ne.fireEvent('add', this);
    },

    remove: function() {
        this.saveContent();
        if (this.copyElm || this.options.hasPanel) {
            this.editorContain.remove();
            this.e.setStyle({
                'display': 'block'
            });
            this.ne.removePanel();
        }
        this.disable();
        this.ne.fireEvent('remove', this);
    },

    disable: function() {
        this.elm.setAttribute('contentEditable', 'false');
    },

    getSel: function() {
        return (window.getSelection) ? window.getSelection() : document.selection;
    },

    getRng: function() {
        var s = this.getSel();
        if (!s || s.rangeCount === 0) {
            return;
        }
        return (s.rangeCount > 0) ? s.getRangeAt(0) : s.createRange();
    },

    selRng: function(rng, s) {
        if (window.getSelection) {
            s.removeAllRanges();
            s.addRange(rng);
        } else {
            rng.select();
        }
    },

    selElm: function() {
        var r = this.getRng();
        if (!r) {
            return;
        }
        if (r.startContainer) {
            var contain = r.startContainer;
            if (r.cloneContents().childNodes.length == 1) {
                for (var i = 0; i < contain.childNodes.length; i++) {
                    var rng = contain.childNodes[i].ownerDocument.createRange();
                    rng.selectNode(contain.childNodes[i]);
                    if (r.compareBoundaryPoints(Range.START_TO_START, rng) != 1 &&
                        r.compareBoundaryPoints(Range.END_TO_END, rng) != -1) {
                        return $BK(contain.childNodes[i]);
                    }
                }
            }
            return $BK(contain);
        } else {
            return $BK((this.getSel().type == "Control") ? r.item(0) : r.parentElement());
        }
    },

    saveRng: function() {
        this.savedRange = this.getRng();
        this.savedSel = this.getSel();
    },

    restoreRng: function() {
        if (this.savedRange) {
            this.selRng(this.savedRange, this.savedSel);
        }
    },

    keyDown: function(e, t) {
        if (e.ctrlKey) {
            this.ne.fireEvent('key', this, e);
        }
    },

    selected: function(e, t) {
        if (!t && !(t = this.selElm)) {
            t = this.selElm();
        }
        if (!e.ctrlKey) {
            var selInstance = this.ne.selectedInstance;
            if (selInstance != this) {
                if (selInstance) {
                    this.ne.fireEvent('blur', selInstance, t);
                }
                this.ne.selectedInstance = this;
                this.ne.fireEvent('focus', selInstance, t);
            }
            this.ne.fireEvent('selected', selInstance, t);
            this.isFocused = true;
            this.elm.addClass('selected');
        }
        return false;
    },

    blur: function() {
        this.isFocused = false;
        this.elm.removeClass('selected');
    },

    saveContent: function() {
        if (this.copyElm || this.options.hasPanel) {
            this.ne.fireEvent('save', this);
            (this.copyElm) ? this.copyElm.value = this.getContent(): this.e.innerHTML = this.getContent();
        }
    },

    getElm: function() {
        return this.elm;
    },

    getContent: function() {
        this.content = this.getElm().innerHTML;
        this.ne.fireEvent('get', this);
        return this.content;
    },

    setContent: function(e) {
        this.content = e;
        this.ne.fireEvent('set', this);
        this.elm.innerHTML = this.content;
    },

    nicCommand: function(cmd, args) {
        document.execCommand(cmd, false, args);
    }
});

var nicEditorIFrameInstance = nicEditorInstance.extend({
    savedStyles: [],

    init: function() {
        var c = this.elm.innerHTML.replace(/^\s+|\s+$/g, '');
        this.elm.innerHTML = '';
        (!c) ? c = "<br />": c;
        this.initialContent = c;

        this.elmFrame = new bkElement('iframe').setAttributes({
            'src': 'javascript:;',
            'frameBorder': 0,
            'allowTransparency': 'true',
            'scrolling': 'no'
        }).setStyle({
            height: '100px',
            width: '100%'
        }).addClass('frame').appendTo(this.elm);

        if (this.copyElm) {
            this.elmFrame.setStyle({
                width: (this.elm.offsetWidth - 4) + 'px'
            });
        }

        var styleList = ['font-size', 'font-family', 'font-weight', 'color'];
        for (itm in styleList) {
            this.savedStyles[bkLib.camelize(itm)] = this.elm.getStyle(itm);
        }

        setTimeout(this.initFrame.closure(this), 50);
    },

    disable: function() {
        this.elm.innerHTML = this.getContent();
    },

    initFrame: function() {
        var fd = $BK(this.elmFrame.contentWindow.document);
        fd.designMode = "on";
        fd.open();
        var css = this.ne.options.externalCSS;
        fd.write('<html><head>' + ((css) ? '<link href="' + css + '" rel="stylesheet" type="text/css" />' : '') + '</head><body id="nicEditContent" style="margin: 0 !important; background-color: transparent !important;">' + this.initialContent + '</body></html>');
        fd.close();
        this.frameDoc = fd;

        this.frameWin = $BK(this.elmFrame.contentWindow);
        this.frameContent = $BK(this.frameWin.document.body).setStyle(this.savedStyles);
        this.instanceDoc = this.frameWin.document.defaultView;

        this.heightUpdate();
        this.frameDoc.addEvent('mousedown', this.selected.closureListener(this)).addEvent('keyup', this.heightUpdate.closureListener(this)).addEvent('keydown', this.keyDown.closureListener(this)).addEvent('keyup', this.selected.closure(this));
        this.ne.fireEvent('add', this);
    },

    getElm: function() {
        return this.frameContent;
    },

    setContent: function(c) {
        this.content = c;
        this.ne.fireEvent('set', this);
        this.frameContent.innerHTML = this.content;
        this.heightUpdate();
    },

    getSel: function() {
        return (this.frameWin) ? this.frameWin.getSelection() : this.frameDoc.selection;
    },

    heightUpdate: function() {
        this.elmFrame.style.height = Math.max(this.frameContent.offsetHeight, this.initialHeight) + 'px';
    },

    nicCommand: function(cmd, args) {
        this.frameDoc.execCommand(cmd, false, args);
        setTimeout(this.heightUpdate.closure(this), 100);
    }


});
var nicEditorPanel = bkClass.extend({
    construct: function(e, options, nicEditor) {
        this.elm = e;
        this.options = options;
        this.ne = nicEditor;
        this.panelButtons = new Array();
        this.buttonList = bkExtend([], this.ne.options.buttonList);

        this.panelContain = new bkElement('DIV').setStyle({
            overflow: 'hidden',
            width: '100%',
            border: '1px solid #cccccc',
            backgroundColor: '#efefef'
        }).addClass('panelContain');
        this.panelElm = new bkElement('DIV').setStyle({
            margin: '2px',
            marginTop: '0px',
            zoom: 1,
            overflow: 'hidden'
        }).addClass('panel').appendTo(this.panelContain);
        this.panelContain.appendTo(e);

        var opt = this.ne.options;
        var buttons = opt.buttons;
        for (button in buttons) {
            this.addButton(button, opt, true);
        }
        this.reorder();
        e.noSelect();
    },

    addButton: function(buttonName, options, noOrder) {
        var button = options.buttons[buttonName];
        var type = (button['type']) ? eval('(typeof(' + button['type'] + ') == "undefined") ? null : ' + button['type'] + ';') : nicEditorButton;
        var hasButton = bkLib.inArray(this.buttonList, buttonName);
        if (type && (hasButton || this.ne.options.fullPanel)) {
            this.panelButtons.push(new type(this.panelElm, buttonName, options, this.ne));
            if (!hasButton) {
                this.buttonList.push(buttonName);
            }
        }
    },

    findButton: function(itm) {
        for (var i = 0; i < this.panelButtons.length; i++) {
            if (this.panelButtons[i].name == itm)
                return this.panelButtons[i];
        }
    },

    reorder: function() {
        var bl = this.buttonList;
        for (var i = 0; i < bl.length; i++) {
            var button = this.findButton(bl[i]);
            if (button) {
                this.panelElm.appendChild(button.margin);
            }
        }
    },

    remove: function() {
        this.elm.remove();
    }
});
var nicEditorButton = bkClass.extend({

    construct: function(e, buttonName, options, nicEditor) {
        this.options = options.buttons[buttonName];
        this.name = buttonName;
        this.ne = nicEditor;
        this.elm = e;

        this.margin = new bkElement('DIV').setStyle({
            'float': 'left',
            marginTop: '2px'
        }).appendTo(e);
        this.contain = new bkElement('DIV').setStyle({
            width: '20px',
            height: '20px',
            'text-align': 'center'
        }).addClass('buttonContain').appendTo(this.margin);
        this.border = new bkElement('DIV').setStyle({
            backgroundColor: '#efefef',
            border: '1px solid #efefef'
        }).appendTo(this.contain);
        this.button = new bkElement('DIV').setStyle({
            width: '18px',
            height: '18px',
            overflow: 'hidden',
            zoom: 1,
            cursor: 'pointer'
        }).addClass('button').inserthtml(this.ne.getIcon(buttonName, options)).appendTo(this.border);
        this.button.addEvent('mouseover', this.hoverOn.closure(this)).addEvent('mouseout', this.hoverOff.closure(this)).addEvent('mousedown', this.mouseClick.closure(this)).noSelect();

        if (!window.opera) {
            this.button.onmousedown = this.button.onclick = bkLib.cancelEvent;
        }

        nicEditor.addEvent('selected', this.enable.closure(this)).addEvent('blur', this.disable.closure(this)).addEvent('key', this.key.closure(this));

        this.disable();
        this.init();
    },

    init: function() {},

    hide: function() {
        this.contain.setStyle({
            display: 'none'
        });
    },

    updateState: function() {
        if (this.isDisabled) {
            this.setBg();
        } else if (this.isHover) {
            this.setBg('hover');
        } else if (this.isActive) {
            this.setBg('active');
        } else {
            this.setBg();
        }
    },

    setBg: function(state) {
        switch (state) {
            case 'hover':
                var stateStyle = {
                    border: '1px solid #666',
                    backgroundColor: '#ddd'
                };
                break;
            case 'active':
                var stateStyle = {
                    border: '1px solid #666',
                    backgroundColor: '#ccc'
                };
                break;
            default:
                var stateStyle = {
                    border: '1px solid #efefef',
                    backgroundColor: '#efefef'
                };
        }
        this.border.setStyle(stateStyle).addClass('button-' + state);
    },

    checkNodes: function(e) {
        var elm = e;
        do {
            if (this.options.tags && bkLib.inArray(this.options.tags, elm.nodeName)) {
                this.activate();
                return true;
            }
        } while (elm = elm.parentNode && elm.className != "nicEdit");
        elm = $BK(e);
        while (elm.nodeType == 3) {
            elm = $BK(elm.parentNode);
        }
        if (this.options.css) {
            for (itm in this.options.css) {
                if (elm.getStyle(itm, this.ne.selectedInstance.instanceDoc) == this.options.css[itm]) {
                    this.activate();
                    return true;
                }
            }
        }
        this.deactivate();
        return false;
    },

    activate: function() {
        if (!this.isDisabled) {
            this.isActive = true;
            this.updateState();
            this.ne.fireEvent('buttonActivate', this);
        }
    },

    deactivate: function() {
        this.isActive = false;
        this.updateState();
        if (!this.isDisabled) {
            this.ne.fireEvent('buttonDeactivate', this);
        }
    },

    enable: function(ins, t) {
        this.isDisabled = false;
        this.contain.setStyle({
            'opacity': 1
        }).addClass('buttonEnabled');
        this.updateState();
        this.checkNodes(t);
    },

    disable: function(ins, t) {
        this.isDisabled = true;
        this.contain.setStyle({
            'opacity': 0.6
        }).removeClass('buttonEnabled');
        this.updateState();
    },

    toggleActive: function() {
        (this.isActive) ? this.deactivate(): this.activate();
    },

    hoverOn: function() {
        if (!this.isDisabled) {
            this.isHover = true;
            this.updateState();
            this.ne.fireEvent("buttonOver", this);
        }
    },

    hoverOff: function() {
        this.isHover = false;
        this.updateState();
        this.ne.fireEvent("buttonOut", this);
    },

    mouseClick: function() {
        if (this.options.command) {
            this.ne.nicCommand(this.options.command, this.options.commandArgs);
            if (!this.options.noActive) {
                this.toggleActive();
            }
        }
        this.ne.fireEvent("buttonClick", this);
    },

    key: function(nicInstance, e) {
        if (this.options.key && e.ctrlKey && String.fromCharCode(e.keyCode || e.charCode).toLowerCase() == this.options.key) {
            this.mouseClick();
            if (e.preventDefault) e.preventDefault();
        }
    }

});


var nicPlugin = bkClass.extend({

    construct: function(nicEditor, options) {
        this.options = options;
        this.ne = nicEditor;
        this.ne.addEvent('panel', this.loadPanel.closure(this));

        this.init();
    },

    loadPanel: function(np) {
        var buttons = this.options.buttons;
        for (var button in buttons) {
            np.addButton(button, this.options);
        }
        np.reorder();
    },

    init: function() {}
});




/* START CONFIG */
var nicPaneOptions = {};
/* END CONFIG */

var nicEditorPane = bkClass.extend({
    construct: function(elm, nicEditor, options, openButton) {
        this.ne = nicEditor;
        this.elm = elm;
        this.pos = elm.pos();

        this.contain = new bkElement('div').setStyle({
            zIndex: '99999',
            overflow: 'hidden',
            position: 'absolute',
            left: this.pos[0] + 'px',
            top: this.pos[1] + 'px'
        })
        this.pane = new bkElement('div').setStyle({
            fontSize: '12px',
            border: '1px solid #ccc',
            'overflow': 'hidden',
            padding: '4px',
            textAlign: 'left',
            backgroundColor: '#ffffc9'
        }).addClass('pane').setStyle(options).appendTo(this.contain);

        if (openButton && !openButton.options.noClose) {
            this.close = new bkElement('div').setStyle({
                'float': 'right',
                height: '16px',
                width: '16px',
                cursor: 'pointer'
            }).inserthtml(this.ne.getIcon('close', nicPaneOptions)).addEvent('mousedown', openButton.removePane.closure(this)).appendTo(this.pane);
        }

        this.contain.noSelect().appendTo(document.body);

        this.position();
        this.init();
    },

    init: function() {},

    position: function() {
        if (this.ne.nicPanel) {
            var panelElm = this.ne.nicPanel.elm;
            var panelPos = panelElm.pos();
            var newLeft = panelPos[0] + parseInt(panelElm.getStyle('width')) - (parseInt(this.pane.getStyle('width')) + 8);
            if (newLeft < this.pos[0]) {
                this.contain.setStyle({
                    left: newLeft + 'px'
                });
            }
        }
    },

    toggle: function() {
        this.isVisible = !this.isVisible;
        this.contain.setStyle({
            display: ((this.isVisible) ? 'block' : 'none')
        });
    },

    remove: function() {
        if (this.contain) {
            this.contain.remove();
            this.contain = null;
        }
    },

    append: function(c) {
        c.appendTo(this.pane);
    },

    setContent: function(c) {
        this.pane.setContent(c);
    }

});



var nicEditorAdvancedButton = nicEditorButton.extend({

    init: function() {
        this.ne.addEvent('selected', this.removePane.closure(this)).addEvent('blur', this.removePane.closure(this));
    },

    mouseClick: function() {
        if (!this.isDisabled) {
            if (this.pane && this.pane.pane) {
                this.removePane();
            } else {
                this.pane = new nicEditorPane(this.contain, this.ne, {
                    width: (this.width || '270px'),
                    backgroundColor: '#fff'
                }, this);
                this.addPane();
                this.ne.selectedInstance.saveRng();
            }
        }
    },

    addForm: function(f, elm) {
        this.form = new bkElement('form').addEvent('submit', this.submit.closureListener(this));
        this.pane.append(this.form);
        this.inputs = {};

        for (itm in f) {
            var field = f[itm];
            var val = '';
            if (elm) {
                val = elm.getAttribute(itm);
            }
            if (!val) {
                val = field['value'] || '';
            }
            var type = f[itm].type;

            if (type == 'title') {
                new bkElement('div').setContent(field.txt).setStyle({
                    fontSize: '14px',
                    fontWeight: 'bold',
                    padding: '0px',
                    margin: '2px 0'
                }).appendTo(this.form);
            } else {
                var contain = new bkElement('div').setStyle({
                    overflow: 'hidden',
                    clear: 'both'
                }).appendTo(this.form);
                if (field.txt) {
                    new bkElement('label').setAttributes({
                        'for': itm
                    }).setContent(field.txt).setStyle({
                        margin: '2px 4px',
                        fontSize: '13px',
                        width: '50px',
                        lineHeight: '20px',
                        textAlign: 'right',
                        'float': 'left'
                    }).appendTo(contain);
                }

                switch (type) {
                    case 'text':
                        this.inputs[itm] = new bkElement('input').setAttributes({
                            id: itm,
                            'value': val,
                            'type': 'text'
                        }).setStyle({
                            margin: '2px 0',
                            fontSize: '13px',
                            'float': 'left',
                            height: '20px',
                            border: '1px solid #ccc',
                            overflow: 'hidden'
                        }).setStyle(field.style).appendTo(contain);
                        break;
                    case 'select':
                        this.inputs[itm] = new bkElement('select').setAttributes({
                            id: itm
                        }).setStyle({
                            border: '1px solid #ccc',
                            'float': 'left',
                            margin: '2px 0'
                        }).appendTo(contain);
                        for (opt in field.options) {
                            var o = new bkElement('option').setAttributes({
                                value: opt,
                                selected: (opt == val) ? 'selected' : ''
                            }).setContent(field.options[opt]).appendTo(this.inputs[itm]);
                        }
                        break;
                    case 'content':
                        this.inputs[itm] = new bkElement('textarea').setAttributes({
                            id: itm
                        }).setStyle({
                            border: '1px solid #ccc',
                            'float': 'left'
                        }).setStyle(field.style).appendTo(contain);
                        this.inputs[itm].value = val;
                }
            }
        }
        new bkElement('input').setAttributes({
            'type': 'submit'
        }).setStyle({
            backgroundColor: '#efefef',
            border: '1px solid #ccc',
            margin: '3px 0',
            'float': 'left',
            'clear': 'both'
        }).appendTo(this.form);
        this.form.onsubmit = bkLib.cancelEvent;
    },

    submit: function() {},

    findElm: function(tag, attr, val) {
        var list = this.ne.selectedInstance.getElm().getElementsByTagName(tag);
        for (var i = 0; i < list.length; i++) {
            if (list[i].getAttribute(attr) == val) {
                return $BK(list[i]);
            }
        }
    },

    removePane: function() {
        if (this.pane) {
            this.pane.remove();
            this.pane = null;
            this.ne.selectedInstance.restoreRng();
        }
    }
});


var nicButtonTips = bkClass.extend({
    construct: function(nicEditor) {
        this.ne = nicEditor;
        nicEditor.addEvent('buttonOver', this.show.closure(this)).addEvent('buttonOut', this.hide.closure(this));

    },

    show: function(button) {
        this.timer = setTimeout(this.create.closure(this, button), 400);
    },

    create: function(button) {
        this.timer = null;
        if (!this.pane) {
            this.pane = new nicEditorPane(button.button, this.ne, {
                fontSize: '12px',
                marginTop: '5px'
            });
            this.pane.setContent(button.options.name);
        }
    },

    hide: function(button) {
        if (this.timer) {
            clearTimeout(this.timer);
        }
        if (this.pane) {
            this.pane = this.pane.remove();
        }
    }
});
nicEditors.registerPlugin(nicButtonTips);



/* START CONFIG */
var nicSelectOptions = {
    buttons: {
        'fontSize': {
            name: __('Select Font Size'),
            type: 'nicEditorFontSizeSelect',
            command: 'fontsize'
        },
        'fontFamily': {
            name: __('Select Font Family'),
            type: 'nicEditorFontFamilySelect',
            command: 'fontname'
        },
        'fontFormat': {
            name: __('Select Font Format'),
            type: 'nicEditorFontFormatSelect',
            command: 'formatBlock'
        }
    }
};
/* END CONFIG */
var nicEditorSelect = bkClass.extend({

    construct: function(e, buttonName, options, nicEditor) {
        this.options = options.buttons[buttonName];
        this.elm = e;
        this.ne = nicEditor;
        this.name = buttonName;
        this.selOptions = new Array();

        this.margin = new bkElement('div').setStyle({
            'float': 'left',
            margin: '2px 1px 0 1px'
        }).appendTo(this.elm);
        this.contain = new bkElement('div').setStyle({
            width: '90px',
            height: '20px',
            cursor: 'pointer',
            overflow: 'hidden'
        }).addClass('selectContain').addEvent('click', this.toggle.closure(this)).appendTo(this.margin);
        this.items = new bkElement('div').setStyle({
            overflow: 'hidden',
            zoom: 1,
            border: '1px solid #ccc',
            paddingLeft: '3px',
            backgroundColor: '#fff'
        }).appendTo(this.contain);
        this.control = new bkElement('div').setStyle({
            overflow: 'hidden',
            'float': 'right',
            height: '18px',
            width: '16px'
        }).addClass('selectControl').inserthtml(this.ne.getIcon('arrow', options)).appendTo(this.items);
        this.txt = new bkElement('div').setStyle({
            overflow: 'hidden',
            'float': 'left',
            width: '66px',
            height: '14px',
            marginTop: '1px',
            fontFamily: 'sans-serif',
            textAlign: 'center',
            fontSize: '12px'
        }).addClass('selectTxt').appendTo(this.items);

        if (!window.opera) {
            this.contain.onmousedown = this.control.onmousedown = this.txt.onmousedown = bkLib.cancelEvent;
        }

        this.margin.noSelect();

        this.ne.addEvent('selected', this.enable.closure(this)).addEvent('blur', this.disable.closure(this));

        this.disable();
        this.init();
    },

    disable: function() {
        this.isDisabled = true;
        this.close();
        this.contain.setStyle({
            opacity: 0.6
        });
    },

    enable: function(t) {
        this.isDisabled = false;
        this.close();
        this.contain.setStyle({
            opacity: 1
        });
    },

    setDisplay: function(txt) {
        this.txt.setContent(txt);
    },

    toggle: function() {
        if (!this.isDisabled) {
            (this.pane) ? this.close(): this.open();
        }
    },

    open: function() {
        this.pane = new nicEditorPane(this.items, this.ne, {
            width: '88px',
            padding: '0px',
            borderTop: 0,
            borderLeft: '1px solid #ccc',
            borderRight: '1px solid #ccc',
            borderBottom: '0px',
            backgroundColor: '#fff'
        });

        for (var i = 0; i < this.selOptions.length; i++) {
            var opt = this.selOptions[i];
            var itmContain = new bkElement('div').setStyle({
                overflow: 'hidden',
                borderBottom: '1px solid #ccc',
                width: '88px',
                textAlign: 'left',
                overflow: 'hidden',
                cursor: 'pointer'
            });
            var itm = new bkElement('div').setStyle({
                padding: '0px 4px'
            }).setContent(opt[1]).appendTo(itmContain).noSelect();
            itm.addEvent('click', this.update.closure(this, opt[0])).addEvent('mouseover', this.over.closure(this, itm)).addEvent('mouseout', this.out.closure(this, itm)).setAttributes('id', opt[0]);
            this.pane.append(itmContain);
            if (!window.opera) {
                itm.onmousedown = bkLib.cancelEvent;
            }
        }
    },

    close: function() {
        if (this.pane) {
            this.pane = this.pane.remove();
        }
    },

    over: function(opt) {
        opt.setStyle({
            backgroundColor: '#ccc'
        });
    },

    out: function(opt) {
        opt.setStyle({
            backgroundColor: '#fff'
        });
    },


    add: function(k, v) {
        this.selOptions.push(new Array(k, v));
    },

    update: function(elm) {
        this.ne.nicCommand(this.options.command, elm);
        this.close();
    }
});

var nicEditorFontSizeSelect = nicEditorSelect.extend({
    sel: {
        1: '1&nbsp;(8pt)',
        2: '2&nbsp;(10pt)',
        3: '3&nbsp;(12pt)',
        4: '4&nbsp;(14pt)',
        5: '5&nbsp;(18pt)',
        6: '6&nbsp;(24pt)'
    },
    init: function() {
        this.setDisplay('Font&nbsp;Size...');
        for (itm in this.sel) {
            this.add(itm, '<font size="' + itm + '">' + this.sel[itm] + '</font>');
        }
    }
});

var nicEditorFontFamilySelect = nicEditorSelect.extend({
    sel: {
        'arial': 'Arial',
        'comic sans ms': 'Comic Sans',
        'courier new': 'Courier New',
        'georgia': 'Georgia',
        'helvetica': 'Helvetica',
        'impact': 'Impact',
        'times new roman': 'Times',
        'trebuchet ms': 'Trebuchet',
        'verdana': 'Verdana'
    },

    init: function() {
        this.setDisplay('Font&nbsp;Family...');
        for (itm in this.sel) {
            this.add(itm, '<font face="' + itm + '">' + this.sel[itm] + '</font>');
        }
    }
});

var nicEditorFontFormatSelect = nicEditorSelect.extend({
    sel: {
        'p': 'Paragraph',
        'pre': 'Pre',
        'h6': 'Heading&nbsp;6',
        'h5': 'Heading&nbsp;5',
        'h4': 'Heading&nbsp;4',
        'h3': 'Heading&nbsp;3',
        'h2': 'Heading&nbsp;2',
        'h1': 'Heading&nbsp;1'
    },

    init: function() {
        this.setDisplay('Font&nbsp;Format...');
        for (itm in this.sel) {
            var tag = itm.toUpperCase();
            this.add('<' + tag + '>', '<' + itm + ' style="padding: 0px; margin: 0px;">' + this.sel[itm] + '</' + tag + '>');
        }
    }
});

nicEditors.registerPlugin(nicPlugin, nicSelectOptions);



/* START CONFIG */
var nicLinkOptions = {
    buttons: {
        'link': {
            name: 'Add Link',
            type: 'nicLinkButton',
            tags: ['A']
        },
        'unlink': {
            name: 'Remove Link',
            command: 'unlink',
            noActive: true
        }
    }
};
/* END CONFIG */

var nicLinkButton = nicEditorAdvancedButton.extend({
    addPane: function() {
        this.ln = this.ne.selectedInstance.selElm().parentTag('A');
        this.addForm({
            '': {
                type: 'title',
                txt: 'Add/Edit Link'
            },
            'href': {
                type: 'text',
                txt: 'URL',
                value: 'http://',
                style: {
                    width: '150px'
                }
            },
            'title': {
                type: 'text',
                txt: 'Title'
            },
            'target': {
                type: 'select',
                txt: 'Open In',
                options: {
                    '': 'Current Window',
                    '_blank': 'New Window'
                },
                style: {
                    width: '100px'
                }
            }
        }, this.ln);
    },

    submit: function(e) {
        var url = this.inputs['href'].value;
        if (url == "http://" || url == "") {
            alert("You must enter a URL to Create a Link");
            return false;
        }
        this.removePane();

        if (!this.ln) {
            var tmp = 'javascript:nicTemp();';
            this.ne.nicCommand("createlink", tmp);
            this.ln = this.findElm('A', 'href', tmp);
        }
        if (this.ln) {
            this.ln.setAttributes({
                href: this.inputs['href'].value,
                title: this.inputs['title'].value,
                target: this.inputs['target'].options[this.inputs['target'].selectedIndex].value
            });
        }
    }
});

nicEditors.registerPlugin(nicPlugin, nicLinkOptions);



/* START CONFIG */
var nicColorOptions = {
    buttons: {
        'forecolor': {
            name: __('Change Text Color'),
            type: 'nicEditorColorButton',
            noClose: true
        },
        'bgcolor': {
            name: __('Change Background Color'),
            type: 'nicEditorBgColorButton',
            noClose: true
        }
    }
};
/* END CONFIG */

var nicEditorColorButton = nicEditorAdvancedButton.extend({
    addPane: function() {
        var colorList = {
            0: '00',
            1: '33',
            2: '66',
            3: '99',
            4: 'CC',
            5: 'FF'
        };
        var colorItems = new bkElement('DIV').setStyle({
            width: '270px'
        });

        for (var r in colorList) {
            for (var b in colorList) {
                for (var g in colorList) {
                    var colorCode = '#' + colorList[r] + colorList[g] + colorList[b];

                    var colorSquare = new bkElement('DIV').setStyle({
                        'cursor': 'pointer',
                        'height': '15px',
                        'float': 'left'
                    }).appendTo(colorItems);
                    var colorBorder = new bkElement('DIV').setStyle({
                        border: '2px solid ' + colorCode
                    }).appendTo(colorSquare);
                    var colorInner = new bkElement('DIV').setStyle({
                        backgroundColor: colorCode,
                        overflow: 'hidden',
                        width: '11px',
                        height: '11px'
                    }).addEvent('click', this.colorSelect.closure(this, colorCode)).addEvent('mouseover', this.on.closure(this, colorBorder)).addEvent('mouseout', this.off.closure(this, colorBorder, colorCode)).appendTo(colorBorder);

                    if (!window.opera) {
                        colorSquare.onmousedown = colorInner.onmousedown = bkLib.cancelEvent;
                    }

                }
            }
        }
        this.pane.append(colorItems.noSelect());
    },

    colorSelect: function(c) {
        this.ne.nicCommand('foreColor', c);
        this.removePane();
    },

    on: function(colorBorder) {
        colorBorder.setStyle({
            border: '2px solid #000'
        });
    },

    off: function(colorBorder, colorCode) {
        colorBorder.setStyle({
            border: '2px solid ' + colorCode
        });
    }
});

var nicEditorBgColorButton = nicEditorColorButton.extend({
    colorSelect: function(c) {
        this.ne.nicCommand('hiliteColor', c);
        this.removePane();
    }
});

nicEditors.registerPlugin(nicPlugin, nicColorOptions);



/* START CONFIG */
var nicImageOptions = {
    buttons: {
        'image': {
            name: 'Add Image',
            type: 'nicImageButton',
            tags: ['IMG']
        }
    }

};
/* END CONFIG */

var nicImageButton = nicEditorAdvancedButton.extend({
    addPane: function() {
        this.im = this.ne.selectedInstance.selElm().parentTag('IMG');
        this.addForm({
            '': {
                type: 'title',
                txt: 'Add/Edit Image'
            },
            'src': {
                type: 'text',
                txt: 'URL',
                'value': 'http://',
                style: {
                    width: '150px'
                }
            },
            'alt': {
                type: 'text',
                txt: 'Alt Text',
                style: {
                    width: '100px'
                }
            },
            'align': {
                type: 'select',
                txt: 'Align',
                options: {
                    none: 'Default',
                    'left': 'Left',
                    'right': 'Right'
                }
            }
        }, this.im);
    },

    submit: function(e) {
        var src = this.inputs['src'].value;
        if (src == "" || src == "http://") {
            alert("You must enter a Image URL to insert");
            return false;
        }
        this.removePane();

        if (!this.im) {
            var tmp = 'javascript:nicImTemp();';
            this.ne.nicCommand("insertImage", tmp);
            this.im = this.findElm('IMG', 'src', tmp);
        }
        if (this.im) {
            this.im.setAttributes({
                src: this.inputs['src'].value,
                alt: this.inputs['alt'].value,
                align: this.inputs['align'].value
            });
        }
    }
});

nicEditors.registerPlugin(nicPlugin, nicImageOptions);




/* START CONFIG */
var nicSaveOptions = {
    buttons: {
        'save': {
            name: __('Save this content'),
            type: 'nicEditorSaveButton'
        }
    }
};
/* END CONFIG */

var nicEditorSaveButton = nicEditorButton.extend({
    init: function() {
        if (!this.ne.options.onSave) {
            this.margin.setStyle({
                'display': 'none'
            });
        }
    },
    mouseClick: function() {
        var onSave = this.ne.options.onSave;
        var selectedInstance = this.ne.selectedInstance;
        onSave(selectedInstance.getContent(), selectedInstance.elm.id, selectedInstance);
    }
});

nicEditors.registerPlugin(nicPlugin, nicSaveOptions);
